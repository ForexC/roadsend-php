#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.
AC_PREREQ(2.61)
AC_INIT(roadsend-pcc)
AC_CONFIG_SRCDIR([runtime/opaque-math.h])
AC_CONFIG_HEADER([runtime/config.h])

# items we want defined in config.h
AH_TEMPLATE(HAVE_PCRE,[perl compatible regular expressions])
AH_TEMPLATE(HAVE_FCGI,[FastCGI web backend support])
AH_TEMPLATE(HAVE_XML,[libxml extension])
AH_TEMPLATE(HAVE_MYSQL,[MySQL extension])
AH_TEMPLATE(PCC_OS,[target os])

# Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_CANONICAL_SYSTEM

# requirements
want_bigloo=2.9a
want_curl=7.15.1

# defaults
with_pccwin=no

# bigloo
AC_CHECK_PROG_VER([HAVE_BIGLOO],
		  bigloo, 
		  -revision,
		  [\([2-9].[0-9][a-z]\)],
		  [$want_bigloo],
		  AC_MSG_FAILURE([Bigloo version $want_bigloo required]))

BIGLOO_VERSION=$ac_prog_version

# curl
AC_CHECK_CURL([$want_curl],
	      AC_DEFINE([HAVE_CURL], [1],[Define if you have MySQL]),
	      AC_MSG_FAILURE([libcurl version $want_curl required]))
with_curl=yes

# PCRE
AC_ARG_WITH([pcre],
  [AS_HELP_STRING([--with-pcre],
     [support pcre extension @<:@default=check@:>@])],
  [],
  [with_pcre=check])

AS_IF([test "x$with_pcre" != xno],
	[AC_PATH_PROG(pcreconfig,pcre-config)
	 if test [ -z "$pcreconfig" ]
	 then
           if test "x$with_pcre" != xcheck; then
	      AC_MSG_FAILURE([--with-pcre was given, but test for pcre-config not found])
           fi
	   with_pcre=no
         else
	   with_pcre=yes
           AC_DEFINE([HAVE_PCRE], [1],[Define if you have pcre])
	   PCRE_LIBS=`${pcreconfig} --libs`
	   PCRE_CFLAGS=`${pcreconfig} --cflags`
         fi
	 ])

# FASTCGI
AC_ARG_WITH([fcgi],
  [AS_HELP_STRING([--with-fcgi],
     [support FastCGI web backend @<:@default=check@:>@])],
  [],
  [with_fcgi=check])
          
  AS_IF([test "x$with_fcgi" != xno],
        [AC_CHECK_LIB([fcgi], [FCGX_Accept_r],
          [AC_SUBST([FCGI_LIBS], ["-lfcgi"])
	   with_fcgi=yes
	   FCGI_LIBS=-lfcgi
	   FCGI_CFLAGS=
           AC_DEFINE([HAVE_FCGI], [1],[Define if you have FastCGI])
          ],
          [if test "x$with_fcgi" != xcheck; then
           AC_MSG_FAILURE(
            [--with-fcgi was given, but test for FastCGI failed])
           fi
	   with_fcgi=no
          ])
        ])

# XML
AC_ARG_WITH([xml],
  [AS_HELP_STRING([--with-xml],
     [support xml extension @<:@default=check@:>@])],
  [],
  [with_xml=check])
          
AS_IF([test "x$with_xml" != xno],
	[AC_PATH_PROG(pkgconfig,pkg-config)
	 if test [ -z "$pkgconfig" ] || [ ! $pkgconfig --exists libxml-2.0 ]
	 then
           if test "x$with_xml" != xcheck; then
	      AC_MSG_FAILURE([--with-xml was given, but test for pkg-config not found])
           fi
	   with_xml=no
         else
	   with_xml=yes
           AC_DEFINE([HAVE_XML], [1],[Define if you have libxml2])
	   XML_LIBS=`${pkgconfig} --libs libxml-2.0`
	   XML_CFLAGS=`${pkgconfig} --cflags libxml-2.0`
         fi
	 ])

# MYSQL
AC_ARG_WITH([mysql],
  [AS_HELP_STRING([--with-mysql],
     [support mysql extension @<:@default=check@:>@])],
  [],
  [with_mysql=check])          

AS_IF([test "x$with_mysql" != xno],
	[AC_PATH_PROG(mysqlconfig,mysql_config)
	 if test [ -z "$mysqlconfig" ]
	 then
           if test "x$with_mysql" != xcheck; then
	      AC_MSG_FAILURE([--with-mysql was given, but test for mysqlconfig not found])
           fi
	   with_mysql=no
         else
	   with_mysql=yes
           AC_DEFINE([HAVE_MYSQL], [1],[Define if you have MySQL])
	   MYSQL_LIBS=`${mysqlconfig} --libs`
	   MYSQL_CFLAGS=`${mysqlconfig} --cflags`
         fi
	 ])

# SQLITE (see acinclude)
AX_LIB_SQLITE3

# ODBC
AC_ARG_WITH([odbc],
  [AS_HELP_STRING([--with-odbc],
     [support ODBC extension @<:@default=check@:>@])],
  [],
  [with_odbc=check])
          
  AS_IF([test "x$with_odbc" != xno],
	[AC_PATH_PROG(odbcconfig,odbc_config)
	 if test [ -z "$odbcconfig" ]
	 then
           if test "x$with_odbc" != xcheck; then
	      AC_MSG_FAILURE([--with-odbc was given, but test for odbc-config not found])
           fi
	   with_odbc=no
         else
	   with_odbc=yes
           AC_DEFINE([HAVE_ODBC], [1],[Define if you have ODBC])
	   ODBC_LIBS=`${odbcconfig} --libs`
	   ODBC_CFLAGS=`${odbcconfig} --cflags`
         fi
	 ])

# target OS
case "$target_os" in 
linux*)
#	AC_MSG_NOTICE([configuring for linux]) 
	AC_DEFINE(PCC_OS, ["PCC_LINUX"])
	PCC_OS="PCC_LINUX"
	;;
freebsd*)
#	AC_MSG_NOTICE([configuring for FreeBSD])
	AC_DEFINE(PCC_OS, ["PCC_FREEBSD"])
	PCC_OS="PCC_FREEBSD"
	;;
mingw*)
#	AC_MSG_NOTICE([configuring for windows/mingw])
	AC_DEFINE(PCC_OS, ["PCC_MINGW"])
	PCC_OS="PCC_MINGW"
	with_pccwin=yes
	;;
*)
	AC_MSG_NOTICE([unknown/unsupported target operating system: $target_os])
esac

# Checks for header files.
AC_HEADER_RESOLV
AC_HEADER_STDC
AC_CHECK_HEADERS([arpa/inet.h fcntl.h limits.h malloc.h netdb.h netinet/in.h stddef.h stdlib.h string.h sys/socket.h sys/time.h syslog.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STAT
AC_C_CONST
AC_TYPE_UID_T
AC_TYPE_MODE_T
AC_TYPE_PID_T
AC_C_RESTRICT
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM
AC_CHECK_TYPES([ptrdiff_t])

# Checks for library functions.
AC_FUNC_MALLOC
AC_FUNC_MEMCMP
AC_FUNC_REALLOC
AC_FUNC_SELECT_ARGTYPES
AC_FUNC_STAT
AC_CHECK_FUNCS([gethostbyname inet_ntoa memchr memmove memset select socket strcasecmp strchr strerror strstr strtol])

# Substitutions
AC_SUBST(PCC_OS, $PCC_OS)
AC_CONFIG_FILES([Makefile.config])

#AC_CONFIG_SUBDIRS([tools/libwebserver])
AC_OUTPUT


dnl ==========================================================================
echo "
                    Roadsend PHP Configuration Summary
                  ======================================

	prefix:                   ${prefix}
        libdir:                   ${libdir}
        bindir:                   ${bindir}
        mandir:                   ${mandir}
	source code location:	  ${srcdir}

	c compiler:		  ${CC}
	cflags:		          ${CFLAGS}
	
	bigloo version:		  ${BIGLOO_VERSION}

	= Web Backends =

	MicroServer:		  always enabled
        FastCGI extension:        ${with_fcgi} $FCGI_LIBS
    
        = Extensions =

	Standard:		  always enabled
        PCRE:                     ${with_pcre} $PCRE_CFLAGS $PCRE_LIBS
	MySQL:			  ${with_mysql} $MYSQL_CFLAGS $MYSQL_LIBS
	XML:			  ${with_xml} $XML_CFLAGS $XML_LIBS
	CURL:			  ${with_curl} $CURL_CFLAGS $CURL_LIBS
	SQLite3:		  ${with_sqlite3} $SQLITE3_CFLAGS $SQLITE3_LDFLAGS
	ODBC:			  ${with_odbc} $ODBC_CFLAGS $ODBC_LIBS
	PHP-GTK 1:		  ${with_gtk}
	PHP-GTK 2:		  ${with_gtk2}
	PCC-WIN:		  ${with_pccwin}

"

echo "
XXXXXXXXXX
This build/configuration system is still alpha quality.
You're tempting fate if you do anything with this script as root!
XXXXXXXXXX
"
