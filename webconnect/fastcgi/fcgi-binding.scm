;; ***** BEGIN LICENSE BLOCK *****
;; Roadsend PHP Compiler Runtime Libraries
;; Copyright (C) 2007 Roadsend, Inc.
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU Lesser General Public License
;; as published by the Free Software Foundation; either version 2.1
;; of the License, or (at your option) any later version.
;; 
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Lesser General Public License for more details.
;; 
;; You should have received a copy of the GNU Lesser General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
;; ***** END LICENSE BLOCK *****

;; cat /usr/include/fcgiapp.h |sed s/DLLAPI// > /tmp/foo.h
;; cat /usr/include/fcgi_stdio.h |sed s/DLLAPI// > /tmp/bar.h
;; edit both to remove __declspec(dllimport) up top
;; cigloo -type fpos_t -type size_t  -type va_list -no-directives -macro  /tmp/foo.h /tmp/bar.h   > fcgi-binding.scm
;; frob the types some... the va_list stuff is definitely bogus, too
;; decided to tone it down and just use fcgiapp.h
(module fcgi-binding
   (extern
    ;(include "fcgiapp.h")
    (include "fcgi_stdio.h")
    ;; beginning of /tmp/foo.h
    (macro FCGX_UNSUPPORTED_VERSION::int "FCGX_UNSUPPORTED_VERSION")
    (macro FCGX_PROTOCOL_ERROR::int "FCGX_PROTOCOL_ERROR")
    (macro FCGX_PARAMS_ERROR::int "FCGX_PARAMS_ERROR")
    (macro FCGX_CALL_SEQ_ERROR::int "FCGX_CALL_SEQ_ERROR")
    (macro FCGI_FAIL_ACCEPT_ON_INTR::long "FCGI_FAIL_ACCEPT_ON_INTR")
    (macro FCGX_IsCGI::int () "FCGX_IsCGI")
    (macro FCGX_Init::int () "FCGX_Init")
    (macro FCGX_OpenSocket::int (string int) "FCGX_OpenSocket")
    (macro FCGX_InitRequest::int (FCGX_Request* int int) "FCGX_InitRequest")
    (macro FCGX_Accept_r::int (FCGX_Request*) "FCGX_Accept_r")
    (macro FCGX_Finish_r::void (FCGX_Request*) "FCGX_Finish_r")
    (macro FCGX_Free::void (FCGX_Request* int) "FCGX_Free")
    (macro FCGX_Accept::int (FCGX_Stream** FCGX_Stream** FCGX_Stream** FCGX_ParamArray*) "FCGX_Accept")
    (macro FCGX_Finish::void () "FCGX_Finish")
    (macro FCGX_StartFilterData::int (FCGX_Stream*) "FCGX_StartFilterData")
    (macro FCGX_SetExitStatus::void (int FCGX_Stream*) "FCGX_SetExitStatus")
    (macro FCGX_GetParam::string (string FCGX_ParamArray) "FCGX_GetParam")
    (macro FCGX_GetChar::int (FCGX_Stream*) "FCGX_GetChar")
    (macro FCGX_UnGetChar::int (int FCGX_Stream*) "FCGX_UnGetChar")
    (macro FCGX_GetStr::int (string int FCGX_Stream*) "FCGX_GetStr")
    (macro FCGX_GetLine::string (string int FCGX_Stream*) "FCGX_GetLine")
    (macro FCGX_HasSeenEOF::int (FCGX_Stream*) "FCGX_HasSeenEOF")
    (macro FCGX_PutChar::int (int FCGX_Stream*) "FCGX_PutChar")
    (macro FCGX_PutStr::int (string int FCGX_Stream*) "FCGX_PutStr")
    (macro FCGX_PutS::int (string FCGX_Stream*) "FCGX_PutS")
;    (macro FCGX_FPrintF::int (FCGX_Stream* string . string) "FCGX_FPrintF")
    ;; cobj lets us use any old thing, just just strings
    (macro FCGX_FPrintF::int (FCGX_Stream* string . cobj) "FCGX_FPrintF")
;    (macro FCGX_VFPrintF::int (FCGX_Stream* string va_list) "FCGX_VFPrintF")
    (macro FCGX_FFlush::int (FCGX_Stream*) "FCGX_FFlush")
    (macro FCGX_FClose::int (FCGX_Stream*) "FCGX_FClose")
    (macro FCGX_GetError::int (FCGX_Stream*) "FCGX_GetError")
    (macro FCGX_ClearError::void (FCGX_Stream*) "FCGX_ClearError")
    (macro FCGX_CreateWriter::FCGX_Stream* (int int int int) "FCGX_CreateWriter")
    (macro FCGX_FreeStream::void (FCGX_Stream**) "FCGX_FreeStream")
    (macro FCGX_ShutdownPending::void () "FCGX_ShutdownPending")
    (type s-FCGX_Stream (struct (rdNext::uchar* "rdNext") (wrNext::uchar* "wrNext") (stop::uchar* "stop") (stopUnget::uchar* "stopUnget") (isReader::int "isReader") (isClosed::int "isClosed") (wasFCloseCalled::int "wasFCloseCalled") (FCGI_errno::int "FCGI_errno") (fillBuffProc::*s-FCGX_Stream*->void "fillBuffProc") (emptyBuffProc::*s-FCGX_Stream*,int->void "emptyBuffProc") (data::void* "data")) "struct FCGX_Stream")
    (type uchar* (pointer uchar) "unsigned char *")
    (type s-FCGX_Stream*->void "void ($(struct FCGX_Stream *))")
    (type *s-FCGX_Stream*->void (function void (s-FCGX_Stream*)) "void ((*$)(struct FCGX_Stream *))")
    (type s-FCGX_Stream*,int->void "void ($(struct FCGX_Stream *,int))")
    (type *s-FCGX_Stream*,int->void (function void (s-FCGX_Stream* int)) "void ((*$)(struct FCGX_Stream *,int))")
;    (type void* (pointer void) "void *")
    (type FCGX_Stream s-FCGX_Stream "FCGX_Stream")
    (type string* (pointer string) "char **")
    ;; size_t, fpos_t added by hand
    (type size_t uint "size_t")
    (type fpos_t (opaque) "fpos_t")
    (type FCGX_ParamArray string* "FCGX_ParamArray")
    (type s-FCGX_Request (struct (requestId::int "requestId") (role::int "role") (in::FCGX_Stream* "in") (out::FCGX_Stream* "out") (err::FCGX_Stream* "err") (envp::string* "envp") (paramsPtr::s-Params* "paramsPtr") (ipcFd::int "ipcFd") (isBeginProcessed::int "isBeginProcessed") (keepConnection::int "keepConnection") (appStatus::int "appStatus") (nWriters::int "nWriters") (flags::int "flags") (listen_sock::int "listen_sock")) "struct FCGX_Request")
    (type s-Params (struct) "struct Params")
    (type FCGX_Request s-FCGX_Request "FCGX_Request")
    (type void->int "int ($(void))")
    (type string,int->int "int ($(char *,int))")
    (type FCGX_Request*,int,int->int "int ($(FCGX_Request *,int,int))")
    (type FCGX_Request*->int "int ($(FCGX_Request *))")
    (type FCGX_Request*->void "void ($(FCGX_Request *))")
    (type FCGX_Request*,int->void "void ($(FCGX_Request *,int))")
    (type FCGX_Stream** (pointer FCGX_Stream*) "FCGX_Stream **")
    (type FCGX_ParamArray* (pointer FCGX_ParamArray) "FCGX_ParamArray *")
    (type FCGX_Stream**,FCGX_Stream**,FCGX_Stream**,FCGX_ParamArray*->int "int ($(FCGX_Stream **,FCGX_Stream **,FCGX_Stream **,FCGX_ParamArray *))")
    (type void->void "void ($(void))")
    (type FCGX_Stream*->int "int ($(FCGX_Stream *))")
    (type int,FCGX_Stream*->void "void ($(int,FCGX_Stream *))")
    (type string,FCGX_ParamArray->string "char *($(char *,FCGX_ParamArray))")
    (type int,FCGX_Stream*->int "int ($(int,FCGX_Stream *))")
    (type string,int,FCGX_Stream*->int "int ($(char *,int,FCGX_Stream *))")
    (type string,int,FCGX_Stream*->string "char *($(char *,int,FCGX_Stream *))")
    (type string,FCGX_Stream*->int "int ($(char *,FCGX_Stream *))")
    (type FCGX_Stream*,string,...string->int "int ($(FCGX_Stream *,char *,...))")
;    (type FCGX_Stream*,string,va_list->int "int ($(FCGX_Stream *,char *,va_list))")
    (type FCGX_Stream*->void "void ($(FCGX_Stream *))")
    (type int,int,int,int->FCGX_Stream* "FCGX_Stream *($(int,int,int,int))")
    (type FCGX_Stream**->void "void ($(FCGX_Stream **))")
    ;; end of /tmp/foo.h
    ;; beginning of /tmp/bar.h
    (type FCGI_FILE* (opaque) "FCGI_FILE*")
;     (macro _FCGI_STDIO::long "_FCGI_STDIO")
;     (macro FCGI_ToFILE::int (int) "FCGI_ToFILE")
;     (macro FCGI_ToFcgiStream::int (int) "FCGI_ToFcgiStream")
     (macro FCGI_stdin::FCGI_FILE* "FCGI_stdin")
     (macro FCGI_stdout::FCGI_FILE* "FCGI_stdout")
     (macro FCGI_stderr::FCGI_FILE* "FCGI_stderr")
;     (macro _fcgi_sF::FCGI_FILE-array "_fcgi_sF")
     (macro FCGI_Accept::int () "FCGI_Accept")
     (macro FCGI_Finish::void () "FCGI_Finish")
;     (macro FCGI_StartFilterData::int () "FCGI_StartFilterData")
;     (macro FCGI_SetExitStatus::void (int) "FCGI_SetExitStatus")
;     (macro FCGI_perror::void (string) "FCGI_perror")
;     (macro FCGI_fopen::FCGI_FILE* (string string) "FCGI_fopen")
;     (macro FCGI_fclose::int (FCGI_FILE*) "FCGI_fclose")
     (macro FCGI_fflush::int (FCGI_FILE*) "FCGI_fflush")
;     (macro FCGI_freopen::FCGI_FILE* (string string FCGI_FILE*) "FCGI_freopen")
;     (macro FCGI_setvbuf::int (FCGI_FILE* string int size_t) "FCGI_setvbuf")
;     (macro FCGI_setbuf::void (FCGI_FILE* string) "FCGI_setbuf")
;     (macro FCGI_fseek::int (FCGI_FILE* long int) "FCGI_fseek")
;     (macro FCGI_ftell::int (FCGI_FILE*) "FCGI_ftell")
;     (macro FCGI_rewind::void (FCGI_FILE*) "FCGI_rewind")
;     (macro FCGI_fgetpos::int (FCGI_FILE* fpos_t*) "FCGI_fgetpos")
;     (macro FCGI_fsetpos::int (FCGI_FILE* fpos_t*) "FCGI_fsetpos")
;     (macro FCGI_fgetc::int (FCGI_FILE*) "FCGI_fgetc")
;     (macro FCGI_getchar::int () "FCGI_getchar")
;     (macro FCGI_ungetc::int (int FCGI_FILE*) "FCGI_ungetc")
;     (macro FCGI_fgets::string (string int FCGI_FILE*) "FCGI_fgets")
;     (macro FCGI_gets::string (string) "FCGI_gets")
;     (macro FCGI_fputc::int (int FCGI_FILE*) "FCGI_fputc")
;     (macro FCGI_putchar::int (int) "FCGI_putchar")
;     (macro FCGI_fputs::int (string FCGI_FILE*) "FCGI_fputs")
;     (macro FCGI_puts::int (string) "FCGI_puts")
     (macro FCGI_fprintf::int (FCGI_FILE* string . string) "FCGI_fprintf")
;     (macro FCGI_printf::int (string . string) "FCGI_printf")
; ;    (macro FCGI_vfprintf::int (FCGI_FILE* string va_list) "FCGI_vfprintf")
; ;    (macro FCGI_vprintf::int (string va_list) "FCGI_vprintf")
     (macro FCGI_fread::size_t (string size_t size_t FCGI_FILE*) "FCGI_fread")
     (macro FCGI_fwrite::size_t (string size_t size_t FCGI_FILE*) "FCGI_fwrite")
;     (macro FCGI_feof::int (FCGI_FILE*) "FCGI_feof")
;     (macro FCGI_ferror::int (FCGI_FILE*) "FCGI_ferror")
;     (macro FCGI_clearerr::void (FCGI_FILE*) "FCGI_clearerr")
;     (macro FCGI_tmpfile::FCGI_FILE* () "FCGI_tmpfile")
;     (macro FCGI_fileno::int (FCGI_FILE*) "FCGI_fileno")
;     (macro FCGI_fdopen::FCGI_FILE* (int string) "FCGI_fdopen")
;     (macro FCGI_popen::FCGI_FILE* (string string) "FCGI_popen")
;     (macro FCGI_pclose::int (FCGI_FILE*) "FCGI_pclose")
;     (type s-bar__s1001 (struct (stdio_stream::file "stdio_stream") (fcgx_stream::FCGX_Stream* "fcgx_stream")) "FCGI_FILE")
;     (type FCGI_FILE s-bar__s1001 "FCGI_FILE")
;     (type FCGI_FILE-array (array FCGI_FILE) "FCGI_FILE $[  ]")
;     (type int->void "void ($(int))")
;     (type string->void "void ($(char *))")
;     (type string,string->FCGI_FILE* "FCGI_FILE *($(char *,char *))")
;     (type FCGI_FILE*->int "int ($(FCGI_FILE *))")
;     (type string,string,FCGI_FILE*->FCGI_FILE* "FCGI_FILE *($(char *,char *,FCGI_FILE *))")
;     (type FCGI_FILE*,string,int,size_t->int "int ($(FCGI_FILE *,char *,int,size_t))")
;     (type FCGI_FILE*,string->void "void ($(FCGI_FILE *,char *))")
;     (type FCGI_FILE*,long,int->int "int ($(FCGI_FILE *,long,int))")
;     (type FCGI_FILE*->void "void ($(FCGI_FILE *))")
;     (type fpos_t* (pointer fpos_t) "fpos_t *")
;     (type FCGI_FILE*,fpos_t*->int "int ($(FCGI_FILE *,fpos_t *))")
;     (type int,FCGI_FILE*->int "int ($(int,FCGI_FILE *))")
;     (type string,int,FCGI_FILE*->string "char *($(char *,int,FCGI_FILE *))")
;     (type string->string "char *($(char *))")
;     (type int->int "int ($(int))")
;     (type string,FCGI_FILE*->int "int ($(char *,FCGI_FILE *))")
;     (type string->int "int ($(char *))")
;     (type FCGI_FILE*,string,...string->int "int ($(FCGI_FILE *,char *,...))")
;     (type string,...string->int "int ($(char *,...))")
; ;    (type FCGI_FILE*,string,va_list->int "int ($(FCGI_FILE *,char *,va_list))")
; ;    (type string,va_list->int "int ($(char *,va_list))")
;     (type void*,size_t,size_t,FCGI_FILE*->size_t "size_t ($(void *,size_t,size_t,FCGI_FILE *))")
;     (type void->FCGI_FILE* "FCGI_FILE *($(void))")
;     (type int,string->FCGI_FILE* "FCGI_FILE *($(int,char *))")
;     ;; end of /tmp/bar.h
    ))
