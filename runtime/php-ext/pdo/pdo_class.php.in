<?php

/**
 *
 * This file has been modified to implement a PDO layer for Roadsend PHP
 * It is used and released under the terms of the GPL license as specified
 * below.
 *
 */

/**
 * This file contains the main classes used to emulate PDO functionality.
 * 
 * Provides limited PDO and PDOStatement class implementations for PHP 4 (and 
 * 5.x platforms without the PECL PDO extensions installed or without the 
 * required drivers configured). The classes are named with a trailing
 * underscore to allow them to work even if native PDO extensions are installed
 * but the drivers you need may not be available or configured properly.
 * 
 * The OpenExpedio PDO emulation was originally inspired by {@link 
 * http://www.phpclasses.org/browse/package/2572.html PDO for PHP 4} by Andrew 
 * Giammarchi.
 * 
 * @author Jason Coward <xpdo@opengeek.com>
 * @copyright Copyright (C) 2006-2007, Jason Coward
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 * @see PHP_MANUAL#pdo
 * @package xpdo.pdo
 */

/**
 * A PHP emulation of the PHP Data Objects (PDO) extension compatible with PHP 4.
 * 
 * The PHP Data Objects (PDO) extension defines a lightweight, consistent
 * interface for accessing databases in PHP. Each database driver that
 * implements the PDO interface can expose database-specific features as regular
 * extension functions. Note that you cannot perform any database functions
 * using the PDO extension by itself; you must use a database-specific PDO
 * driver to access a database server.  See the {@link PHP_MANUAL#pdo official 
 * PDO documentation} for more detailed information on PDO and how it
 * is used.
 * 
 * This limited PDO implementation is provided by OpenExpedio (xPDO) to allow
 * compatibility with PHP 4.3+, or any later version where native PDO or a
 * required native PDO driver is not available.
 * 
 * @package xpdo.pdo
 * @todo Implement additional driver support; currently only supports MySQL,
 * PostgreSQL, and SQLite
 */
pcc_builtin class PDO {

    const PARAM_NULL = 0;
    const PARAM_INT = 1;
    const PARAM_STR = 2;
    const PARAM_LOB = 3;
    const PARAM_STMT = 4;
    const PARAM_BOOL = 5;

    const PARAM_INPUT_OUTPUT = 0x80000000;

    const PARAM_EVT_ALLOC = 0;
    const PARAM_EVT_FREE = 1;
    const PARAM_EVT_EXEC_PRE = 2;
    const PARAM_EVT_EXEC_POST = 3;
    const PARAM_EVT_FETCH_PRE = 4;
    const PARAM_EVT_FETCH_POST = 5;
    const PARAM_EVT_NORMALIZE = 6;

    const FETCH_LAZY = 0;
    const FETCH_ASSOC = 1;
    const FETCH_NUM = 2;
    const FETCH_BOTH = 3;
    const FETCH_OBJ = 4;
    const FETCH_BOUND = 5;
    const FETCH_COLUMN = 6;
    const FETCH_CLASS = 7;
    const FETCH_INTO = 8;
    const FETCH_FUNC = 9;
    const FETCH_GROUP = 10;
    const FETCH_UNIQUE = 11;
    const FETCH_KEY_PAIR = 12;
    const FETCH_CLASSTYPE = 13;
    const FETCH_SERIALIZE = 14;
    const FETCH_PROPS_LATE = 15;
    const FETCH_NAMED = 16;

    const ATTR_AUTOCOMMIT = 0;
    const ATTR_PREFETCH = 1;
    const ATTR_TIMEOUT = 2;
    const ATTR_ERRMODE = 3;
    const ATTR_SERVER_VERSION = 4;
    const ATTR_CLIENT_VERSION = 5;
    const ATTR_SERVER_INFO = 6;
    const ATTR_CONNECTION_STATUS = 7;
    const ATTR_CASE = 8;
    const ATTR_CURSOR_NAME = 9;
    const ATTR_CURSOR = 10;
    const ATTR_ORACLE_NULLS = 11;
    const ATTR_PERSISTENT = 12;
    const ATTR_STATEMENT_CLASS = 13;
    const ATTR_FETCH_TABLE_NAMES = 14;
    const ATTR_FETCH_CATALOG_NAMES = 15;
    const ATTR_DRIVER_NAME = 16;
    const ATTR_STRINGIFY_FETCHES = 17;
    const ATTR_MAX_COLUMN_LEN = 18;
    const ATTR_EMULATE_PREPARES = 19;
    const ATTR_DEFAULT_FETCH_MODE = 20;

    const ERRMODE_SILENT = 0;
    const ERRMODE_WARNING = 1;
    const ERRMODE_EXCEPTION = 2;

    const CASE_NATURAL = 0;
    const CASE_LOWER = 1;
    const CASE_UPPER = 2;

    const NULL_NATURAL = 0;
    const NULL_EMPTY_STRING = 1;
    const NULL_TO_STRING = 2;

    const ERR_NONE = "00000";

    const FETCH_ORI_NEXT = 0;
    const FETCH_ORI_PRIOR = 1;
    const FETCH_ORI_FIRST = 2;
    const FETCH_ORI_LAST = 3;
    const FETCH_ORI_ABS = 4;
    const FETCH_ORI_REL = 5;

    const CURSOR_FWDONLY = 0;
    const CURSOR_SCROLL = 1;

    const MYSQL_ATTR_USE_BUFFERED_QUERY = 0;

    const DB_DRIVER_LIST = array(@PDO_DRIVER_ARRAY@
                                );
    
    private $driver;
    private $dbtype = NULL;

    /**
     * Returns a list of available database drivers.
     * 
     * @static
     * @return array All drivers available to any PDO instance.
     * @todo Implement this as a dynamic list of available drivers.
     */
    public function getAvailableDrivers() {
        // these are really lib names, we need to strip the pdo_ prefix
        foreach (self::DB_DRIVER_LIST as $dName) {
            $driverList[] = substr($dName,4);
        }
        return $driverList;
    }

    /**#@+
     * Creates a PDO instance representing a connection to a database.
     * 
     * @see PHP_MANUAL#pdo-construct
     * @uses PDO_::__construct() For PHP 4 compatibility.
     * @uses xPDO::parseDSN()
     * @param string $dsn The Data Source Name, or DSN, contains the information
     * required to connect to the database.
     * @param string $username The user name for the DSN string. This parameter
     * is optional for some PDO drivers.
     * @param string $password The password for the DSN string. This parameter
     * is optional for some PDO drivers.
     * @param array $driver_options A key=>value array of driver-specific
     * connection options.
     * @return PDO_ A valid PDO instance if successful; error is raised
     * otherwise.
     * 
     * @todo Test sqlite and pgsql drivers.
     * @todo Add charset support for sqlite and pgsql drivers.
     * @todo Implement additional drivers.
     */
    public function __construct($dsn, $username= '', $password= '', $driver_options= null) {
        $con =  self::parseDSN($dsn);
        $this->dbtype= $con['dbtype'];
        if ($con['dbtype'] === 'mysql') {
            if (isset ($con['port']))
                $con['host'] .= ':' . $con['port'];
            if ($this->driver= new PDO_mysql($con['host'], $con['dbname'], $username, $password)) {
                if (isset ($con['charset']) && !empty($con['charset'])) {
                    $this->driver->exec("SET CHARACTER SET " . $con['charset']);
                }
            }
        }
        elseif ($con['dbtype'] === 'sqlite2' || $con['dbtype'] === 'sqlite') {
            $this->driver= new PDO_sqlite($con['dbname']);
        }
        /*
        elseif ($con['dbtype'] === 'pgsql') {
            $dsn= 'host=' . $con['host'] . ' dbname=' . $con['dbname'] . ' user=' . $username . ' password=' . $password;
            if (isset ($con['port']))
                $dsn .= ' port=' . $con['port'];
            $this->driver= new PDO_pgsql($dsn);
        }
        */
    }
    /**#@-*/

    /**
    * Parses a DSN and returns an array of the connection details.
    *
    * @param string $string The DSN to parse.
    * @return array An array of connection details from the DSN.
    * @todo Have this method handle all methods of DSN specification as handled
    * by latest native PDO implementation.
    */
    public function parseDSN($string) {
        $result= array ();
        $pos= strpos($string, ':');
        $parameters= explode(';', substr($string, ($pos +1)));
        $result['dbtype']= strtolower(substr($string, 0, $pos));
        for ($a= 0, $b= count($parameters); $a < $b; $a++) {
            $tmp= explode('=', $parameters[$a]);
            if (count($tmp) == 2) {
                $result[$tmp[0]]= $tmp[1];
            } else {
                $result['dbname']= $parameters[$a];
            }
        }
        return $result;
    }
    
    /** 
     * @see PHP_MANUAL#pdo-begintransaction
     */
    public function beginTransaction() {
        $this->driver->beginTransaction();
    }

    /** 
     * @see PHP_MANUAL#pdo-commit
     */
    public function commit() {
        $this->driver->commit();
    }

    /** 
     * @see PHP_MANUAL#pdo-exec
     */
    public function exec($query) {
        return $this->driver->exec($query);
    }

    /** 
     * @see PHP_MANUAL#pdo-errorcode
     */
    public function errorCode() {
        return $this->driver->errorCode();
    }

    /** 
     * @see PHP_MANUAL#pdo-errorinfo
     */
    public function errorInfo() {
        return $this->driver->errorInfo();
    }

    /** 
     * @see PHP_MANUAL#pdo-getattribute
     */
    public function getAttribute($attribute) {
        return $this->driver->getAttribute($attribute);
    }

    /** 
     * @see PHP_MANUAL#pdo-lastinsertid
     */
    public function lastInsertId() {
        return $this->driver->lastInsertId();
    }

    /** 
     * @see PHP_MANUAL#pdo-prepare
     */
    public function prepare($statement, $driver_options= array ()) {
        return $this->driver->prepare($statement, $driver_options= array ());
    }

    /** 
     * @see PHP_MANUAL#pdo-query
     */
    public function query($query) {
        return $this->driver->query($query);
    }

    /** 
     * @see PHP_MANUAL#pdo-quote
     */
    public function quote($string, $parameter_type= PDO::PARAM_STR) {
        return $this->driver->quote($string, $parameter_type);
    }

    /** 
     * @see PHP_MANUAL#pdo-rollback
     */
    public function rollBack() {
        $this->driver->rollBack();
    }

    /** 
     * @see PHP_MANUAL#pdo-setattribute
     */
    public function setAttribute($attribute, $value) {
        return $this->driver->setAttribute($attribute, $value);
    }
}

/**
 * Represents a PDO prepared statement.
 * 
 * @author Jason Coward <xpdo@opengeek.com>
 * @copyright Copyright (C) 2006-2007, Jason Coward
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 * @package xpdo.pdo
 */
pcc_builtin class PDOStatement {
    /**
     * @var string The SQL query string for the statement to use.
     */
    protected $queryString= '';

    protected $connection;
    protected $dbinfo;
    protected $persistent= false;
    protected $result= null;
    protected $fetchmode= PDO::FETCH_BOTH;
    protected $errorCode= '';
    protected $errorInfo= array (
        PDO::ERR_NONE
    );
    protected $boundParams= array ();
    
    /**#@+
     * A PDOStatement is created by calling PDO::prepare() and similar methods.
     * 
     * @access private
     * @param string $queryString A SQL query string.
     * @param resource &$connection A valid database connection resource handle.
     * @param array $dbinfo Meta information about the connection and driver.
     * @return PDOStatement_
     */
    public function __construct($queryString, $connection, $dbinfo) {
        $this->queryString= $queryString;
        $this->connection= $connection;
        $this->dbinfo= $dbinfo;
    }
    /**#@-*/

    public function bindParam($param, & $variable, $data_type= PDO::PARAM_STR, $length= 0, $driver_options= null) {
        $this->boundParams[$param]['value']= $variable;
        $this->boundParams[$param]['type']= $data_type;
        $this->boundParams[$param]['length']= intval($length);
    }

    public function bindValue($param, $value, $data_type= PDO::PARAM_STR) {
        $this->boundParams[$param]['value']= $value;
        $this->boundParams[$param]['type']= $data_type;
        $this->boundParams[$param]['length']= 0;
    }

    public function errorCode() {
        return $this->errorCode;
    }

    public function errorInfo() {
        return $this->errorInfo;
    }

    public function execute($input_parameters= null) {
        $array= & $this->boundParams;
        if (is_array($input_parameters) && !empty ($input_parameters)) {
            $array= $input_parameters;
        }
        $queryString= $this->queryString;
        if (count($array) > 0) {
            reset($array);
            while (list ($k, $param)= each($array)) {
                $v= $param['value'];
                $type= $param['type'];
                if (!$v) {
                    switch ($type) {
                    	case PDO::PARAM_INT:
                    		$v= '0';
                    		break;
                    	case PDO::PARAM_BOOL:
                    		$v= '0';
                    		break;
                    	default:
                    		break;
                    }
                }
                if (!is_int($k) || substr($k, 0, 1) === ':') {
                    if (!isset ($tempf)) {
                        $tempf= $tempr= array ();
                    }
                    $pattern= '/' . $k . '\b/';
                    array_push($tempf, $pattern);
                    $v= $this->quote($v, $type);
                    array_push($tempr, $v);
                } else {
                    $parse= create_function('$d,$v,$t', 'return $d->quote($v, $t);');
                    $queryString= preg_replace("/(\?)/e", '$parse($this,$array[$k][\'value\'],$type);', $queryString, 1);
                }
            }
            if (isset ($tempf)) {
                $queryString= preg_replace($tempf, $tempr, $queryString);
            }
        }
        if (is_null($this->result= $this->uquery($queryString))) {
            $keyvars= false;
        } else {
            $keyvars= true;
        }
        return $keyvars;
    }

    public function setFetchMode($mode) {
        $result= false;
        if ($mode= intval($mode)) {
            switch ($mode) {
                case PDO::FETCH_NUM :
                case PDO::FETCH_ASSOC :
                case PDO::FETCH_OBJ :
                case PDO::FETCH_BOTH :
                default:
                    $result= true;
                    $this->fetchmode= $mode;
                    break;
            }
        }
        return $result;
    }

    public function closeCursor() {
        do {
           while ($this->fetch()) {}
           if (!$this->nextRowset())
               break;
        } while (true);
    }

    public function bindColumn($column, & $param, $type= null, $max_length= null, $driver_option= null) { return false; }

    public function columnCount() { return false; }

    public function getAttribute($attribute) { return false; }

    public function getColumnMeta($column) { return false; }

    public function fetch($mode= PDO::FETCH_BOTH, $cursor= null, $offset= null) { return false; }

    public function fetchAll($mode= PDO::FETCH_BOTH, $column_index= 0) { return false; }

    public function fetchColumn($column_number= 0) { return false; }

    public function fetchObject($class_name= '', $ctor_args= null) { return false; }
    
    public function nextRowset() { return false; }

    public function quote($string, $parameter_type= PDO::PARAM_STR) { return false; }
    
    public function rowCount() { return false; }

    public function setAttribute($attribute, $value) { return false; }
    
    public function debugDumpParams() { return false; }

    protected function setErrors($er) { return false; }

    protected function uquery(& $query) { return false; }
}
