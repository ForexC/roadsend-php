;; generated with:
;;cpp `pkg-config --cflags gtk+-2.0 /usr/include/gtk-2.0/gtk/gtk.h > monster.h
;;
;;cigloo -macro -int-enum -I /usr/include/gtk-2.0 -I /usr/include/glib-2.0 -I /usr/lib/glib-2.0/include -I /usr/include/linux/  monster.h > foo
;; *edit out cigloo parse errors*
;; add the type cast macros and the include by hand
;; tweak some types
;; for some reason, GTK_TYPE_FOO didn't make it into monster.h
(module gtk-binding
;   (library common)
   (export
    (gtk-init)
    (gdk-color-new::GdkColor* red::uint green::uint blue::uint)
    (gtk-ctree-new::GtkCTree* tree-column::uint arg . titles)
    (gtk-ctree-node-get-row-data ctree::GtkCTree* node::GtkCTreeNode*)
    (gtk-ctree-node-set-row-data ctree::GtkCTree* node::GtkCTreeNode* o #!optional destroy)
    (glist-data type::symbol lyst)
    (glist-next lyst)
    (glist-prev lyst)
    (glist-find lyst type what #!optional backward?)
    (glist-foreach lyst type::symbol proc #!optional backward?)
    (glist-map lyst type::symbol proc #!optional backward?)
    (glist->list lyst type::symbol #!optional backward?)
    (my-coerce type::symbol data)
    (convert-to-utf8::bstring string)
    (convert-to-codepage::bstring string))
   
   (extern
    (macro gtk_type_name::gchar* (guint) "gtk_type_name")
    (macro G_VALUE_TYPE::GType (GValue*) "G_VALUE_TYPE")
    (macro G_TYPE_FUNDAMENTAL::GType (GType) "G_TYPE_FUNDAMENTAL")
    (macro G_TYPE_INVALID::GType "G_TYPE_INVALID")
    (macro G_TYPE_NONE::GType "G_TYPE_NONE")
    (macro G_TYPE_CHAR::GType "G_TYPE_CHAR")
    (macro G_TYPE_UCHAR::GType "G_TYPE_UCHAR")
    (macro G_TYPE_BOOLEAN::GType "G_TYPE_BOOLEAN")
    (macro G_TYPE_INT::GType "G_TYPE_INT")
    (macro G_TYPE_UINT::GType "G_TYPE_UINT")
    (macro G_TYPE_LONG::GType "G_TYPE_LONG")
    (macro G_TYPE_ULONG::GType "G_TYPE_ULONG")
    (macro G_TYPE_FLOAT::GType "G_TYPE_FLOAT")
    (macro G_TYPE_DOUBLE::GType "G_TYPE_DOUBLE")
    (macro G_TYPE_STRING::GType "G_TYPE_STRING")
    (macro G_TYPE_ENUM::GType "G_TYPE_ENUM")
    (macro G_TYPE_FLAGS::GType "G_TYPE_FLAGS")
    (macro G_TYPE_BOXED::GType "G_TYPE_BOXED")
    (macro G_TYPE_POINTER::GType "G_TYPE_POINTER")
    (macro G_TYPE_SIGNAL::GType "G_TYPE_SIGNAL")
    (macro G_TYPE_ARGS::GType "G_TYPE_ARGS")
    (macro G_TYPE_CALLBACK::GType "G_TYPE_CALLBACK")
    (macro G_TYPE_C_CALLBACK::GType "G_TYPE_C_CALLBACK")
    (macro G_TYPE_FOREIGN::GType "G_TYPE_FOREIGN")
    (macro G_TYPE_OBJECT::GType "G_TYPE_OBJECT")
    (macro G_OBJECT_TYPE::GType (obj::GObject*)"G_OBJECT_TYPE")

    (macro GTK_TYPE_ACCEL_FLAGS::GtkType "GTK_TYPE_ACCEL_FLAGS")
    (macro GTK_TYPE_CALENDAR_DISPLAY_OPTIONS::GtkType "GTK_TYPE_CALENDAR_DISPLAY_OPTIONS")
    (macro GTK_TYPE_CELL_TYPE::GtkType "GTK_TYPE_CELL_TYPE")
    (macro GTK_TYPE_CLIST_DRAG_POS::GtkType "GTK_TYPE_CLIST_DRAG_POS")
    (macro GTK_TYPE_BUTTON_ACTION::GtkType "GTK_TYPE_BUTTON_ACTION")
    (macro GTK_TYPE_CTREE_POS::GtkType "GTK_TYPE_CTREE_POS")
    (macro GTK_TYPE_CTREE_LINE_STYLE::GtkType "GTK_TYPE_CTREE_LINE_STYLE")
    (macro GTK_TYPE_CTREE_EXPANDER_STYLE::GtkType "GTK_TYPE_CTREE_EXPANDER_STYLE")
    (macro GTK_TYPE_CTREE_EXPANSION_TYPE::GtkType "GTK_TYPE_CTREE_EXPANSION_TYPE")
    (macro GTK_TYPE_DEBUG_FLAG::GtkType "GTK_TYPE_DEBUG_FLAG")
    (macro GTK_TYPE_DEST_DEFAULTS::GtkType "GTK_TYPE_DEST_DEFAULTS")
    (macro GTK_TYPE_TARGET_FLAGS::GtkType "GTK_TYPE_TARGET_FLAGS")
    (macro GTK_TYPE_ARROW_TYPE::GtkType "GTK_TYPE_ARROW_TYPE")
    (macro GTK_TYPE_ATTACH_OPTIONS::GtkType "GTK_TYPE_ATTACH_OPTIONS")
    (macro GTK_TYPE_BUTTON_BOX_STYLE::GtkType "GTK_TYPE_BUTTON_BOX_STYLE")
    (macro GTK_TYPE_CURVE_TYPE::GtkType "GTK_TYPE_CURVE_TYPE")
    (macro GTK_TYPE_DIRECTION_TYPE::GtkType "GTK_TYPE_DIRECTION_TYPE")
    (macro GTK_TYPE_JUSTIFICATION::GtkType "GTK_TYPE_JUSTIFICATION")
    (macro GTK_TYPE_MATCH_TYPE::GtkType "GTK_TYPE_MATCH_TYPE")
    (macro GTK_TYPE_MENU_DIRECTION_TYPE::GtkType "GTK_TYPE_MENU_DIRECTION_TYPE")
    (macro GTK_TYPE_MENU_FACTORY_TYPE::GtkType "GTK_TYPE_MENU_FACTORY_TYPE")
    (macro GTK_TYPE_METRIC_TYPE::GtkType "GTK_TYPE_METRIC_TYPE")
    (macro GTK_TYPE_ORIENTATION::GtkType "GTK_TYPE_ORIENTATION")
    (macro GTK_TYPE_CORNER_TYPE::GtkType "GTK_TYPE_CORNER_TYPE")
    (macro GTK_TYPE_PACK_TYPE::GtkType "GTK_TYPE_PACK_TYPE")
    (macro GTK_TYPE_PATH_PRIORITY_TYPE::GtkType "GTK_TYPE_PATH_PRIORITY_TYPE")
    (macro GTK_TYPE_PATH_TYPE::GtkType "GTK_TYPE_PATH_TYPE")
    (macro GTK_TYPE_POLICY_TYPE::GtkType "GTK_TYPE_POLICY_TYPE")
    (macro GTK_TYPE_POSITION_TYPE::GtkType "GTK_TYPE_POSITION_TYPE")
    (macro GTK_TYPE_PREVIEW_TYPE::GtkType "GTK_TYPE_PREVIEW_TYPE")
    (macro GTK_TYPE_RELIEF_STYLE::GtkType "GTK_TYPE_RELIEF_STYLE")
    (macro GTK_TYPE_RESIZE_MODE::GtkType "GTK_TYPE_RESIZE_MODE")
    (macro GTK_TYPE_SIGNAL_RUN_TYPE::GtkType "GTK_TYPE_SIGNAL_RUN_TYPE")
    (macro GTK_TYPE_SCROLL_TYPE::GtkType "GTK_TYPE_SCROLL_TYPE")
    (macro GTK_TYPE_SELECTION_MODE::GtkType "GTK_TYPE_SELECTION_MODE")
    (macro GTK_TYPE_SHADOW_TYPE::GtkType "GTK_TYPE_SHADOW_TYPE")
    (macro GTK_TYPE_STATE_TYPE::GtkType "GTK_TYPE_STATE_TYPE")
    (macro GTK_TYPE_SUBMENU_DIRECTION::GtkType "GTK_TYPE_SUBMENU_DIRECTION")
    (macro GTK_TYPE_SUBMENU_PLACEMENT::GtkType "GTK_TYPE_SUBMENU_PLACEMENT")
    (macro GTK_TYPE_TOOLBAR_STYLE::GtkType "GTK_TYPE_TOOLBAR_STYLE")
    (macro GTK_TYPE_TROUGH_TYPE::GtkType "GTK_TYPE_TROUGH_TYPE")
    (macro GTK_TYPE_UPDATE_TYPE::GtkType "GTK_TYPE_UPDATE_TYPE")
    (macro GTK_TYPE_VISIBILITY::GtkType "GTK_TYPE_VISIBILITY")
    (macro GTK_TYPE_WINDOW_POSITION::GtkType "GTK_TYPE_WINDOW_POSITION")
    (macro GTK_TYPE_WINDOW_TYPE::GtkType "GTK_TYPE_WINDOW_TYPE")
    (macro GTK_TYPE_SORT_TYPE::GtkType "GTK_TYPE_SORT_TYPE")
    (macro GTK_TYPE_FONT_METRIC_TYPE::GtkType "GTK_TYPE_FONT_METRIC_TYPE")
    (macro GTK_TYPE_FONT_TYPE::GtkType "GTK_TYPE_FONT_TYPE")
    (macro GTK_TYPE_FONT_FILTER_TYPE::GtkType "GTK_TYPE_FONT_FILTER_TYPE")
    (macro GTK_TYPE_OBJECT_FLAGS::GtkType "GTK_TYPE_OBJECT_FLAGS")
    (macro GTK_TYPE_ARG_FLAGS::GtkType "GTK_TYPE_ARG_FLAGS")
    (macro GTK_TYPE_PACKER_OPTIONS::GtkType "GTK_TYPE_PACKER_OPTIONS")
    (macro GTK_TYPE_SIDE_TYPE::GtkType "GTK_TYPE_SIDE_TYPE")
    (macro GTK_TYPE_ANCHOR_TYPE::GtkType "GTK_TYPE_ANCHOR_TYPE")
    (macro GTK_TYPE_PRIVATE_FLAGS::GtkType "GTK_TYPE_PRIVATE_FLAGS")
    (macro GTK_TYPE_PROGRESS_BAR_STYLE::GtkType "GTK_TYPE_PROGRESS_BAR_STYLE")
    (macro GTK_TYPE_PROGRESS_BAR_ORIENTATION::GtkType "GTK_TYPE_PROGRESS_BAR_ORIENTATION")
    (macro GTK_TYPE_RC_FLAGS::GtkType "GTK_TYPE_RC_FLAGS")
    (macro GTK_TYPE_RC_TOKEN_TYPE::GtkType "GTK_TYPE_RC_TOKEN_TYPE")
    (macro GTK_TYPE_SPIN_BUTTON_UPDATE_POLICY::GtkType "GTK_TYPE_SPIN_BUTTON_UPDATE_POLICY")
    (macro GTK_TYPE_SPIN_TYPE::GtkType "GTK_TYPE_SPIN_TYPE")
    (macro GTK_TYPE_TOOLBAR_CHILD_TYPE::GtkType "GTK_TYPE_TOOLBAR_CHILD_TYPE")
    (macro GTK_TYPE_TOOLBAR_SPACE_STYLE::GtkType "GTK_TYPE_TOOLBAR_SPACE_STYLE")
    (macro GTK_TYPE_TREE_VIEW_MODE::GtkType "GTK_TYPE_TREE_VIEW_MODE")
    (macro GTK_TYPE_FUNDAMENTAL_TYPE::GtkType "GTK_TYPE_FUNDAMENTAL_TYPE")
    (macro GTK_TYPE_WIDGET_FLAGS::GtkType "GTK_TYPE_WIDGET_FLAGS")
    (macro GDK_TYPE_WINDOW_TYPE::GtkType "GDK_TYPE_WINDOW_TYPE")
    (macro GDK_TYPE_WINDOW_CLASS::GtkType "GDK_TYPE_WINDOW_CLASS")
    (macro GDK_TYPE_IMAGE_TYPE::GtkType "GDK_TYPE_IMAGE_TYPE")
    (macro GDK_TYPE_VISUAL_TYPE::GtkType "GDK_TYPE_VISUAL_TYPE")
    (macro GDK_TYPE_FONT_TYPE::GtkType "GDK_TYPE_FONT_TYPE")
    (macro GDK_TYPE_WINDOW_ATTRIBUTES_TYPE::GtkType "GDK_TYPE_WINDOW_ATTRIBUTES_TYPE")
    (macro GDK_TYPE_WINDOW_HINTS::GtkType "GDK_TYPE_WINDOW_HINTS")
    (macro GDK_TYPE_FUNCTION::GtkType "GDK_TYPE_FUNCTION")
    (macro GDK_TYPE_FILL::GtkType "GDK_TYPE_FILL")
    (macro GDK_TYPE_FILL_RULE::GtkType "GDK_TYPE_FILL_RULE")
    (macro GDK_TYPE_LINE_STYLE::GtkType "GDK_TYPE_LINE_STYLE")
    (macro GDK_TYPE_CAP_STYLE::GtkType "GDK_TYPE_CAP_STYLE")
    (macro GDK_TYPE_JOIN_STYLE::GtkType "GDK_TYPE_JOIN_STYLE")
    (macro GDK_TYPE_CURSOR_TYPE::GtkType "GDK_TYPE_CURSOR_TYPE")
    (macro GDK_TYPE_FILTER_RETURN::GtkType "GDK_TYPE_FILTER_RETURN")
    (macro GDK_TYPE_VISIBILITY_STATE::GtkType "GDK_TYPE_VISIBILITY_STATE")
    (macro GDK_TYPE_EVENT_TYPE::GtkType "GDK_TYPE_EVENT_TYPE")
    (macro GDK_TYPE_EVENT_MASK::GtkType "GDK_TYPE_EVENT_MASK")
    (macro GDK_TYPE_NOTIFY_TYPE::GtkType "GDK_TYPE_NOTIFY_TYPE")
    (macro GDK_TYPE_CROSSING_MODE::GtkType "GDK_TYPE_CROSSING_MODE")
    (macro GDK_TYPE_MODIFIER_TYPE::GtkType "GDK_TYPE_MODIFIER_TYPE")
    (macro GDK_TYPE_SUBWINDOW_MODE::GtkType "GDK_TYPE_SUBWINDOW_MODE")
    (macro GDK_TYPE_INPUT_CONDITION::GtkType "GDK_TYPE_INPUT_CONDITION")
    (macro GDK_TYPE_STATUS::GtkType "GDK_TYPE_STATUS")
    (macro GDK_TYPE_BYTE_ORDER::GtkType "GDK_TYPE_BYTE_ORDER")
    (macro GDK_TYPE_GC_VALUES_MASK::GtkType "GDK_TYPE_GC_VALUES_MASK")
    (macro GDK_TYPE_SELECTION::GtkType "GDK_TYPE_SELECTION")
    (macro GDK_TYPE_PROPERTY_STATE::GtkType "GDK_TYPE_PROPERTY_STATE")
    (macro GDK_TYPE_PROP_MODE::GtkType "GDK_TYPE_PROP_MODE")
    (macro GDK_TYPE_INPUT_SOURCE::GtkType "GDK_TYPE_INPUT_SOURCE")
    (macro GDK_TYPE_INPUT_MODE::GtkType "GDK_TYPE_INPUT_MODE")
    (macro GDK_TYPE_AXIS_USE::GtkType "GDK_TYPE_AXIS_USE")
    (macro GDK_TYPE_TARGET::GtkType "GDK_TYPE_TARGET")
    (macro GDK_TYPE_SELECTION_TYPE::GtkType "GDK_TYPE_SELECTION_TYPE")
    (macro GDK_TYPE_EXTENSION_MODE::GtkType "GDK_TYPE_EXTENSION_MODE")
    (macro GDK_TYPE_IM_STYLE::GtkType "GDK_TYPE_IM_STYLE")
    (macro GDK_TYPE_IC_ATTRIBUTES_TYPE::GtkType "GDK_TYPE_IC_ATTRIBUTES_TYPE")
    (macro GDK_TYPE_WM_DECORATION::GtkType "GDK_TYPE_WM_DECORATION")
    (macro GDK_TYPE_WM_FUNCTION::GtkType "GDK_TYPE_WM_FUNCTION")
    (macro GDK_TYPE_COLOR_CONTEXT_MODE::GtkType "GDK_TYPE_COLOR_CONTEXT_MODE")
    (macro GDK_TYPE_OVERLAP_TYPE::GtkType "GDK_TYPE_OVERLAP_TYPE")
    (macro GDK_TYPE_DRAG_ACTION::GtkType "GDK_TYPE_DRAG_ACTION")
    (macro GDK_TYPE_DRAG_PROTOCOL::GtkType "GDK_TYPE_DRAG_PROTOCOL")
    (macro GDK_TYPE_RGB_DITHER::GtkType "GDK_TYPE_RGB_DITHER")
    (macro GTK_TYPE_ACCEL_GROUP::GtkType "GTK_TYPE_ACCEL_GROUP")
    (macro GTK_TYPE_SELECTION_DATA::GtkType "GTK_TYPE_SELECTION_DATA")
    (macro GTK_TYPE_STYLE::GtkType "GTK_TYPE_STYLE")
    (macro GTK_TYPE_CTREE_NODE::GtkType "GTK_TYPE_CTREE_NODE")
    (macro GDK_TYPE_COLORMAP::GtkType "GDK_TYPE_COLORMAP")
    (macro GDK_TYPE_VISUAL::GtkType "GDK_TYPE_VISUAL")
    (macro GDK_TYPE_FONT::GtkType "GDK_TYPE_FONT")
    (macro GDK_TYPE_WINDOW::GtkType "GDK_TYPE_WINDOW")
    (macro GDK_TYPE_DRAG_CONTEXT::GtkType "GDK_TYPE_DRAG_CONTEXT")
    (macro GDK_TYPE_EVENT::GtkType "GDK_TYPE_EVENT")
    (macro GDK_TYPE_COLOR::GtkType "GDK_TYPE_COLOR")

    (macro GTK_ADJUSTMENT::s-_GtkAdjustment* (obj::cobj) "GTK_ADJUSTMENT")
    (macro GTK_OBJECT::s-_GtkObject* (obj::cobj) "GTK_OBJECT")
    (macro GTK_WIDGET::s-_GtkWidget* (obj::cobj) "GTK_WIDGET")
    (macro GTK_MISC::s-_GtkMisc* (obj::cobj) "GTK_MISC")
    (macro GTK_ARROW::s-_GtkArrow* (obj::cobj) "GTK_ARROW")
    (macro GTK_EDITABLE::s-_GtkEditable* (obj::cobj) "GTK_EDITABLE")
    ;    (macro GTK_TEXT::s-_GtkText* (obj::cobj) "GTK_TEXT")
    (macro GTK_TOOLBAR::s-_GtkToolbar* (obj::cobj) "GTK_TOOLBAR")
    (macro GTK_TABLE::s-_GtkTable* (obj::cobj) "GTK_TABLE")
    (macro GTK_PANED::s-_GtkPaned* (obj::cobj) "GTK_PANED")
    (macro GTK_NOTEBOOK::s-_GtkNotebook* (obj::cobj) "GTK_NOTEBOOK")
    (macro GTK_LIST::s-_GtkList* (obj::cobj) "GTK_LIST")
    (macro GTK_LAYOUT::s-_GtkLayout* (obj::cobj) "GTK_LAYOUT")
    (macro GTK_FIXED::s-_GtkFixed* (obj::cobj) "GTK_FIXED")
    (macro GTK_BIN::s-_GtkBin* (obj::cobj) "GTK_BIN")
    ;    (macro GTK_TREE_ITEM::s-_GtkTreeItem* (obj::cobj) "GTK_TREE_ITEM")
    (macro GTK_CHECK_MENU_ITEM::s-_GtkCheckMenuItem* (obj::cobj) "GTK_CHECK_MENU_ITEM")
    (macro GTK_HANDLE_BOX::s-_GtkHandleBox* (obj::cobj) "GTK_HANDLE_BOX")
    (macro GTK_TOGGLE_BUTTON::s-_GtkToggleButton* (obj::cobj) "GTK_TOGGLE_BUTTON")
    (macro GTK_BOX::s-_GtkBox* (obj::cobj) "GTK_BOX")
    (macro GTK_GAMMA_CURVE::s-_GtkGammaCurve* (obj::cobj) "GTK_GAMMA_CURVE")
    (macro GTK_COMBO::s-_GtkCombo* (obj::cobj) "GTK_COMBO")
    (macro GTK_CLIST::s-_GtkCList* (obj::cobj) "GTK_CLIST")
    (macro GTK_CTREE::s-_GtkCTree* (obj::cobj) "GTK_CTREE")
    (macro GTK_CALENDAR::s-_GtkCalendar* (obj::cobj) "GTK_CALENDAR")
    (macro GTK_FONT_SELECTION_DIALOG::s-_GtkFontSelectionDialog* (obj::cobj) "GTK_FONT_SELECTION_DIALOG")
    (macro GTK_COLOR_SELECTION_DIALOG::s-_GtkColorSelectionDialog* (obj::cobj) "GTK_COLOR_SELECTION_DIALOG")
    (macro GTK_FILE_SELECTION::s-_GtkFileSelection* (obj::cobj) "GTK_FILE_SELECTION")
    (macro GTK_DIALOG::s-_GtkDialog* (obj::cobj) "GTK_DIALOG")
    (macro GTK_INPUT_DIALOG::s-_GtkInputDialog* (obj::cobj) "GTK_INPUT_DIALOG")
    (macro GTK_WINDOW::s-_GtkWindow* (obj::cobj) "GTK_WINDOW")
    (macro GTK_ITEM_FACTORY::s-_GtkItemFactory* (obj::cobj) "GTK_ITEM_FACTORY")
    (macro GTK_BUTTON::s-_GtkButton* (obj::cobj) "GTK_BUTTON")
    (macro GTK_CONTAINER::s-_GtkContainer* (obj::cobj) "GTK_CONTAINER")
    (macro GTK_DRAWING_AREA::s-_GtkDrawingArea* (obj::cobj) "GTK_DRAWING_AREA")
    (macro GTK_PIXMAP::s-_GtkPixmap* (obj::cobj) "GTK_PIXMAP")
    (macro GTK_PREVIEW::s-_GtkPreview* (obj::cobj) "GTK_PREVIEW")
    (macro GTK_PROGRESS::s-_GtkProgress* (obj::cobj) "GTK_PROGRESS")
    (macro GTK_RANGE::s-_GtkRange* (obj::cobj) "GTK_RANGE")
    (macro GTK_RULER::s-_GtkRuler* (obj::cobj) "GTK_RULER")
    (macro GTK_STATUSBAR::s-_GtkStatusbar* (obj::cobj) "GTK_STATUSBAR")
    (macro GTK_LABEL::s-_GtkLabel* (obj::cobj) "GTK_LABEL")
    (macro GTK_MENU_SHELL::s-_GtkMenuShell* (obj::cobj) "GTK_MENU_SHELL")
    ;    (macro GTK_PACKER::s-_GtkPacker* (obj::cobj) "GTK_PACKER")
    (macro GTK_SOCKET::s-_GtkSocket* (obj::cobj) "GTK_SOCKET")
    ;    (macro GTK_TREE::s-_GtkTree* (obj::cobj) "GTK_TREE")
    (macro GTK_ALIGNMENT::s-_GtkAlignment* (obj::cobj) "GTK_ALIGNMENT")
    (macro GTK_FRAME::s-_GtkFrame* (obj::cobj) "GTK_FRAME")
    (macro GTK_ITEM::s-_GtkItem* (obj::cobj) "GTK_ITEM")
    (macro GTK_SCROLLED_WINDOW::s-_GtkScrolledWindow* (obj::cobj) "GTK_SCROLLED_WINDOW")
    (macro GTK_VIEWPORT::s-_GtkViewport* (obj::cobj) "GTK_VIEWPORT")
    (macro GTK_TOOLTIPS::s-_GtkTooltips* (obj::cobj) "GTK_TOOLTIPS")
    (macro GTK_BUTTON_BOX::s-_GtkButtonBox* (obj::cobj) "GTK_BUTTON_BOX")
    (macro GTK_LIST_ITEM::s-_GtkListItem* (obj::cobj) "GTK_LIST_ITEM")
    (macro GTK_MENU_ITEM::s-_GtkMenuItem* (obj::cobj) "GTK_MENU_ITEM")
    (macro GTK_PLUG::s-_GtkPlug* (obj::cobj) "GTK_PLUG")
    (macro GTK_ASPECT_FRAME::s-_GtkAspectFrame* (obj::cobj) "GTK_ASPECT_FRAME")
    (macro GTK_ACCEL_LABEL::s-_GtkAccelLabel* (obj::cobj) "GTK_ACCEL_LABEL")
    (macro GTK_TIPS_QUERY::s-_GtkTipsQuery* (obj::cobj) "GTK_TIPS_QUERY")
    (macro GTK_ENTRY::s-_GtkEntry* (obj::cobj) "GTK_ENTRY")
    (macro GTK_OPTION_MENU::s-_GtkOptionMenu* (obj::cobj) "GTK_OPTION_MENU")
    (macro GTK_SCALE::s-_GtkScale* (obj::cobj) "GTK_SCALE")
    (macro GTK_COLOR_SELECTION::s-_GtkColorSelection* (obj::cobj) "GTK_COLOR_SELECTION")
    (macro GTK_CURVE::s-_GtkCurve* (obj::cobj) "GTK_CURVE")
    (macro GTK_FONT_SELECTION::s-_GtkFontSelection* (obj::cobj) "GTK_FONT_SELECTION")
    (macro GTK_MENU::s-_GtkMenu* (obj::cobj) "GTK_MENU")
    (macro GTK_MENU_BAR::s-_GtkMenuBar* (obj::cobj) "GTK_MENU_BAR")
    (macro GTK_PROGRESS_BAR::s-_GtkProgressBar* (obj::cobj) "GTK_PROGRESS_BAR")
    (macro GTK_SPIN_BUTTON::s-_GtkSpinButton* (obj::cobj) "GTK_SPIN_BUTTON")
    (macro GTK_RADIO_BUTTON::s-_GtkRadioButton* (obj::cobj) "GTK_RADIO_BUTTON")
    (macro GTK_RADIO_MENU_ITEM::s-_GtkRadioMenuItem* (obj::cobj) "GTK_RADIO_MENU_ITEM")

    (macro GDK_DISPLAY::s-_GdkDisplay* (obj::cobj) "GDK_DISPLAY")
    (macro GDK_DRAWABLE::s-_GdkDrawable* (obj::cobj) "GDK_DRAWABLE")
    (macro GDK_PIXBUF::s-_GdkPixbuf* (obj::cobj) "GDK_PIXBUF")
    (macro GDK_IMAGE::s-_GdkImage* (obj::cobj) "GDK_IMAGE")
    (macro GTK_IMAGE::s-_GtkImage* (obj::cobj) "GTK_IMAGE")
    (include "gtk/gtk.h")
    
    ;; beginning of monster.h
    (macro g_thread_functions_for_glib_use::GThreadFunctions "g_thread_functions_for_glib_use")
    (macro g_thread_use_default_impl::gboolean "g_thread_use_default_impl")
    (macro g_threads_got_initialized::gboolean "g_threads_got_initialized")
    (macro glib_mem_profiler_table::GMemVTable* "glib_mem_profiler_table")
    (macro g_timeout_funcs::GSourceFuncs "g_timeout_funcs")
    (macro g_child_watch_funcs::GSourceFuncs "g_child_watch_funcs")
    (macro g_idle_funcs::GSourceFuncs "g_idle_funcs")
    (macro g_utf8_skip::gchar* "g_utf8_skip")
    (macro glib_major_version::guint "glib_major_version")
    (macro glib_minor_version::guint "glib_minor_version")
    (macro glib_micro_version::guint "glib_micro_version")
    (macro glib_interface_age::guint "glib_interface_age")
    (macro glib_binary_age::guint "glib_binary_age")
    (macro g_io_watch_funcs::GSourceFuncs "g_io_watch_funcs")
    (macro g_ascii_table::guint16* "g_ascii_table")
    (macro _g_type_debug_flags::GTypeDebugFlags "_g_type_debug_flags")
    (macro g_param_spec_types::GType* "g_param_spec_types")
    (macro gdk_pixbuf_major_version::guint "gdk_pixbuf_major_version")
    (macro gdk_pixbuf_minor_version::guint "gdk_pixbuf_minor_version")
    (macro gdk_pixbuf_micro_version::guint "gdk_pixbuf_micro_version")
    (macro gdk_pixbuf_version::string "gdk_pixbuf_version")
    (macro _IO_2_1_stdin_::s-_IO_FILE_plus "_IO_2_1_stdin_")
    (macro _IO_2_1_stdout_::s-_IO_FILE_plus "_IO_2_1_stdout_")
    (macro _IO_2_1_stderr_::s-_IO_FILE_plus "_IO_2_1_stderr_")
    (macro stdin::s-_IO_FILE* "stdin")
    (macro stdout::s-_IO_FILE* "stdout")
    (macro stderr::s-_IO_FILE* "stderr")
    (macro sys_nerr::int "sys_nerr")
    (macro sys_errlist::string-array "sys_errlist")
    (macro gdk_threads_mutex::GMutex* "gdk_threads_mutex")
    (macro gdk_threads_lock::GCallback "gdk_threads_lock")
    (macro gdk_threads_unlock::GCallback "gdk_threads_unlock")
    (macro gtk_debug_flags::guint "gtk_debug_flags")
    (macro gtk_major_version::guint "gtk_major_version")
    (macro gtk_minor_version::guint "gtk_minor_version")
    (macro gtk_micro_version::guint "gtk_micro_version")
    (macro gtk_binary_age::guint "gtk_binary_age")
    (macro gtk_interface_age::guint "gtk_interface_age")
    (macro alloca::void* (size_t) "alloca")
    (macro g_array_new::GArray* (gboolean gboolean guint) "g_array_new")
    (macro g_array_sized_new::GArray* (gboolean gboolean guint guint) "g_array_sized_new")
    (macro g_array_free::gchar* (GArray* gboolean) "g_array_free")
    (macro g_array_append_vals::GArray* (GArray* gconstpointer guint) "g_array_append_vals")
    (macro g_array_prepend_vals::GArray* (GArray* gconstpointer guint) "g_array_prepend_vals")
    (macro g_array_insert_vals::GArray* (GArray* guint gconstpointer guint) "g_array_insert_vals")
    (macro g_array_set_size::GArray* (GArray* guint) "g_array_set_size")
    (macro g_array_remove_index::GArray* (GArray* guint) "g_array_remove_index")
    (macro g_array_remove_index_fast::GArray* (GArray* guint) "g_array_remove_index_fast")
    (macro g_array_remove_range::GArray* (GArray* guint guint) "g_array_remove_range")
    (macro g_array_sort::void (GArray* GCompareFunc) "g_array_sort")
    (macro g_array_sort_with_data::void (GArray* GCompareDataFunc gpointer) "g_array_sort_with_data")
    (macro g_ptr_array_new::GPtrArray* () "g_ptr_array_new")
    (macro g_ptr_array_sized_new::GPtrArray* (guint) "g_ptr_array_sized_new")
    (macro g_ptr_array_free::gpointer* (GPtrArray* gboolean) "g_ptr_array_free")
    (macro g_ptr_array_set_size::void (GPtrArray* gint) "g_ptr_array_set_size")
    (macro g_ptr_array_remove_index::gpointer (GPtrArray* guint) "g_ptr_array_remove_index")
    (macro g_ptr_array_remove_index_fast::gpointer (GPtrArray* guint) "g_ptr_array_remove_index_fast")
    (macro g_ptr_array_remove::gboolean (GPtrArray* gpointer) "g_ptr_array_remove")
    (macro g_ptr_array_remove_fast::gboolean (GPtrArray* gpointer) "g_ptr_array_remove_fast")
    (macro g_ptr_array_remove_range::void (GPtrArray* guint guint) "g_ptr_array_remove_range")
    (macro g_ptr_array_add::void (GPtrArray* gpointer) "g_ptr_array_add")
    (macro g_ptr_array_sort::void (GPtrArray* GCompareFunc) "g_ptr_array_sort")
    (macro g_ptr_array_sort_with_data::void (GPtrArray* GCompareDataFunc gpointer) "g_ptr_array_sort_with_data")
    (macro g_ptr_array_foreach::void (GPtrArray* GFunc gpointer) "g_ptr_array_foreach")
    (macro g_byte_array_new::GByteArray* () "g_byte_array_new")
    (macro g_byte_array_sized_new::GByteArray* (guint) "g_byte_array_sized_new")
    (macro g_byte_array_free::guint8* (GByteArray* gboolean) "g_byte_array_free")
    (macro g_byte_array_append::GByteArray* (GByteArray* guint8* guint) "g_byte_array_append")
    (macro g_byte_array_prepend::GByteArray* (GByteArray* guint8* guint) "g_byte_array_prepend")
    (macro g_byte_array_set_size::GByteArray* (GByteArray* guint) "g_byte_array_set_size")
    (macro g_byte_array_remove_index::GByteArray* (GByteArray* guint) "g_byte_array_remove_index")
    (macro g_byte_array_remove_index_fast::GByteArray* (GByteArray* guint) "g_byte_array_remove_index_fast")
    (macro g_byte_array_remove_range::GByteArray* (GByteArray* guint guint) "g_byte_array_remove_range")
    (macro g_byte_array_sort::void (GByteArray* GCompareFunc) "g_byte_array_sort")
    (macro g_byte_array_sort_with_data::void (GByteArray* GCompareDataFunc gpointer) "g_byte_array_sort_with_data")
    (macro g_quark_try_string::GQuark (gchar*) "g_quark_try_string")
    (macro g_quark_from_static_string::GQuark (gchar*) "g_quark_from_static_string")
    (macro g_quark_from_string::GQuark (gchar*) "g_quark_from_string")
    (macro g_quark_to_string::gchar* (GQuark) "g_quark_to_string")
    (macro g_error_new::GError* (GQuark gint gchar* . gchar*) "g_error_new")
    (macro g_error_new_literal::GError* (GQuark gint gchar*) "g_error_new_literal")
    (macro g_error_free::void (GError*) "g_error_free")
    (macro g_error_copy::GError* (GError*) "g_error_copy")
    (macro g_error_matches::gboolean (GError* GQuark gint) "g_error_matches")
    (macro g_set_error::void (GError** GQuark gint gchar* . gchar*) "g_set_error")
    (macro g_propagate_error::void (GError** GError*) "g_propagate_error")
    (macro g_clear_error::void (GError**) "g_clear_error")
    (macro g_atomic_int_exchange_and_add::gint (gint* gint) "g_atomic_int_exchange_and_add")
    (macro g_atomic_int_add::void (gint* gint) "g_atomic_int_add")
    (macro g_atomic_int_compare_and_exchange::gboolean (gint* gint gint) "g_atomic_int_compare_and_exchange")
    (macro g_atomic_pointer_compare_and_exchange::gboolean (gpointer* gpointer gpointer) "g_atomic_pointer_compare_and_exchange")
    (macro g_thread_error_quark::GQuark () "g_thread_error_quark")
    (macro g_thread_init::void (GThreadFunctions*) "g_thread_init")
    (macro g_thread_init_with_errorcheck_mutexes::void (GThreadFunctions*) "g_thread_init_with_errorcheck_mutexes")
    (macro g_static_mutex_get_mutex_impl::GMutex* (GMutex**) "g_static_mutex_get_mutex_impl")
    (macro g_thread_create_full::GThread* (GThreadFunc gpointer gulong gboolean gboolean GThreadPriority GError**) "g_thread_create_full")
    (macro g_thread_self::GThread* () "g_thread_self")
    (macro g_thread_exit::void (gpointer) "g_thread_exit")
    (macro g_thread_join::gpointer (GThread*) "g_thread_join")
    (macro g_thread_set_priority::void (GThread* GThreadPriority) "g_thread_set_priority")
    (macro g_static_mutex_init::void (GStaticMutex*) "g_static_mutex_init")
    (macro g_static_mutex_free::void (GStaticMutex*) "g_static_mutex_free")
    (macro g_static_private_init::void (GStaticPrivate*) "g_static_private_init")
    (macro g_static_private_get::gpointer (GStaticPrivate*) "g_static_private_get")
    (macro g_static_private_set::void (GStaticPrivate* gpointer GDestroyNotify) "g_static_private_set")
    (macro g_static_private_free::void (GStaticPrivate*) "g_static_private_free")
    (macro g_static_rec_mutex_init::void (GStaticRecMutex*) "g_static_rec_mutex_init")
    (macro g_static_rec_mutex_lock::void (GStaticRecMutex*) "g_static_rec_mutex_lock")
    (macro g_static_rec_mutex_trylock::gboolean (GStaticRecMutex*) "g_static_rec_mutex_trylock")
    (macro g_static_rec_mutex_unlock::void (GStaticRecMutex*) "g_static_rec_mutex_unlock")
    (macro g_static_rec_mutex_lock_full::void (GStaticRecMutex* guint) "g_static_rec_mutex_lock_full")
    (macro g_static_rec_mutex_unlock_full::guint (GStaticRecMutex*) "g_static_rec_mutex_unlock_full")
    (macro g_static_rec_mutex_free::void (GStaticRecMutex*) "g_static_rec_mutex_free")
    (macro g_static_rw_lock_init::void (GStaticRWLock*) "g_static_rw_lock_init")
    (macro g_static_rw_lock_reader_lock::void (GStaticRWLock*) "g_static_rw_lock_reader_lock")
    (macro g_static_rw_lock_reader_trylock::gboolean (GStaticRWLock*) "g_static_rw_lock_reader_trylock")
    (macro g_static_rw_lock_reader_unlock::void (GStaticRWLock*) "g_static_rw_lock_reader_unlock")
    (macro g_static_rw_lock_writer_lock::void (GStaticRWLock*) "g_static_rw_lock_writer_lock")
    (macro g_static_rw_lock_writer_trylock::gboolean (GStaticRWLock*) "g_static_rw_lock_writer_trylock")
    (macro g_static_rw_lock_writer_unlock::void (GStaticRWLock*) "g_static_rw_lock_writer_unlock")
    (macro g_static_rw_lock_free::void (GStaticRWLock*) "g_static_rw_lock_free")
    (macro g_once_impl::gpointer (GOnce* GThreadFunc gpointer) "g_once_impl")
    (macro glib_dummy_decl::void () "glib_dummy_decl")
    (macro g_async_queue_new::GAsyncQueue* () "g_async_queue_new")
    (macro g_async_queue_lock::void (GAsyncQueue*) "g_async_queue_lock")
    (macro g_async_queue_unlock::void (GAsyncQueue*) "g_async_queue_unlock")
    (macro g_async_queue_ref::GAsyncQueue* (GAsyncQueue*) "g_async_queue_ref")
    (macro g_async_queue_unref::void (GAsyncQueue*) "g_async_queue_unref")
    (macro g_async_queue_ref_unlocked::void (GAsyncQueue*) "g_async_queue_ref_unlocked")
    (macro g_async_queue_unref_and_unlock::void (GAsyncQueue*) "g_async_queue_unref_and_unlock")
    (macro g_async_queue_push::void (GAsyncQueue* gpointer) "g_async_queue_push")
    (macro g_async_queue_push_unlocked::void (GAsyncQueue* gpointer) "g_async_queue_push_unlocked")
    (macro g_async_queue_pop::gpointer (GAsyncQueue*) "g_async_queue_pop")
    (macro g_async_queue_pop_unlocked::gpointer (GAsyncQueue*) "g_async_queue_pop_unlocked")
    (macro g_async_queue_try_pop::gpointer (GAsyncQueue*) "g_async_queue_try_pop")
    (macro g_async_queue_try_pop_unlocked::gpointer (GAsyncQueue*) "g_async_queue_try_pop_unlocked")
    (macro g_async_queue_timed_pop::gpointer (GAsyncQueue* GTimeVal*) "g_async_queue_timed_pop")
    (macro g_async_queue_timed_pop_unlocked::gpointer (GAsyncQueue* GTimeVal*) "g_async_queue_timed_pop_unlocked")
    (macro g_async_queue_length::gint (GAsyncQueue*) "g_async_queue_length")
    (macro g_async_queue_length_unlocked::gint (GAsyncQueue*) "g_async_queue_length_unlocked")
    (macro g_on_error_query::void (gchar*) "g_on_error_query")
    (macro g_on_error_stack_trace::void (gchar*) "g_on_error_stack_trace")
    (macro g_malloc::gpointer (gulong) "g_malloc")
    (macro g_malloc0::gpointer (gulong) "g_malloc0")
    (macro g_realloc::gpointer (gpointer gulong) "g_realloc")
    (macro g_free::void (gpointer) "g_free")
    (macro g_try_malloc::gpointer (gulong) "g_try_malloc")
    (macro g_try_realloc::gpointer (gpointer gulong) "g_try_realloc")
    (macro g_mem_set_vtable::void (GMemVTable*) "g_mem_set_vtable")
    (macro g_mem_is_system_malloc::gboolean () "g_mem_is_system_malloc")
    (macro g_mem_profile::void () "g_mem_profile")
    (macro g_mem_chunk_new::GMemChunk* (gchar* gint gulong gint) "g_mem_chunk_new")
    (macro g_mem_chunk_destroy::void (GMemChunk*) "g_mem_chunk_destroy")
    (macro g_mem_chunk_alloc::gpointer (GMemChunk*) "g_mem_chunk_alloc")
    (macro g_mem_chunk_alloc0::gpointer (GMemChunk*) "g_mem_chunk_alloc0")
    (macro g_mem_chunk_free::void (GMemChunk* gpointer) "g_mem_chunk_free")
    (macro g_mem_chunk_clean::void (GMemChunk*) "g_mem_chunk_clean")
    (macro g_mem_chunk_reset::void (GMemChunk*) "g_mem_chunk_reset")
    (macro g_mem_chunk_print::void (GMemChunk*) "g_mem_chunk_print")
    (macro g_mem_chunk_info::void () "g_mem_chunk_info")
    (macro g_blow_chunks::void () "g_blow_chunks")
    (macro g_allocator_new::GAllocator* (gchar* guint) "g_allocator_new")
    (macro g_allocator_free::void (GAllocator*) "g_allocator_free")
    (macro g_list_push_allocator::void (GAllocator*) "g_list_push_allocator")
    (macro g_list_pop_allocator::void () "g_list_pop_allocator")
    (macro g_list_alloc::GList* () "g_list_alloc")
    (macro g_list_free::void (GList*) "g_list_free")
    (macro g_list_free_1::void (GList*) "g_list_free_1")
    (macro g_list_append::GList* (GList* gpointer) "g_list_append")
    (macro g_list_prepend::GList* (GList* gpointer) "g_list_prepend")
    (macro g_list_insert::GList* (GList* gpointer gint) "g_list_insert")
    (macro g_list_insert_sorted::GList* (GList* gpointer GCompareFunc) "g_list_insert_sorted")
    (macro g_list_insert_before::GList* (GList* GList* gpointer) "g_list_insert_before")
    (macro g_list_concat::GList* (GList* GList*) "g_list_concat")
    (macro g_list_remove::GList* (GList* gconstpointer) "g_list_remove")
    (macro g_list_remove_all::GList* (GList* gconstpointer) "g_list_remove_all")
    (macro g_list_remove_link::GList* (GList* GList*) "g_list_remove_link")
    (macro g_list_delete_link::GList* (GList* GList*) "g_list_delete_link")
    (macro g_list_reverse::GList* (GList*) "g_list_reverse")
    (macro g_list_copy::GList* (GList*) "g_list_copy")
    (macro g_list_nth::GList* (GList* guint) "g_list_nth")
    (macro g_list_nth_prev::GList* (GList* guint) "g_list_nth_prev")
    (macro g_list_find::GList* (GList* gconstpointer) "g_list_find")
    (macro g_list_find_custom::GList* (GList* gconstpointer GCompareFunc) "g_list_find_custom")
    (macro g_list_position::gint (GList* GList*) "g_list_position")
    (macro g_list_index::gint (GList* gconstpointer) "g_list_index")
    (macro g_list_last::GList* (GList*) "g_list_last")
    (macro g_list_first::GList* (GList*) "g_list_first")
    (macro g_list_length::guint (GList*) "g_list_length")
    (macro g_list_foreach::void (GList* GFunc gpointer) "g_list_foreach")
    (macro g_list_sort::GList* (GList* GCompareFunc) "g_list_sort")
    (macro g_list_sort_with_data::GList* (GList* GCompareDataFunc gpointer) "g_list_sort_with_data")
    (macro g_list_nth_data::gpointer (GList* guint) "g_list_nth_data")
    (macro g_cache_new::GCache* (GCacheNewFunc GCacheDestroyFunc GCacheDupFunc GCacheDestroyFunc GHashFunc GHashFunc GEqualFunc) "g_cache_new")
    (macro g_cache_destroy::void (GCache*) "g_cache_destroy")
    (macro g_cache_insert::gpointer (GCache* gpointer) "g_cache_insert")
    (macro g_cache_remove::void (GCache* gconstpointer) "g_cache_remove")
    (macro g_cache_key_foreach::void (GCache* GHFunc gpointer) "g_cache_key_foreach")
    (macro g_cache_value_foreach::void (GCache* GHFunc gpointer) "g_cache_value_foreach")
    (macro g_completion_new::GCompletion* (GCompletionFunc) "g_completion_new")
    (macro g_completion_add_items::void (GCompletion* GList*) "g_completion_add_items")
    (macro g_completion_remove_items::void (GCompletion* GList*) "g_completion_remove_items")
    (macro g_completion_clear_items::void (GCompletion*) "g_completion_clear_items")
    (macro g_completion_complete::GList* (GCompletion* gchar* gchar**) "g_completion_complete")
    (macro g_completion_complete_utf8::GList* (GCompletion* gchar* gchar**) "g_completion_complete_utf8")
    (macro g_completion_set_compare::void (GCompletion* GCompletionStrncmpFunc) "g_completion_set_compare")
    (macro g_completion_free::void (GCompletion*) "g_completion_free")
    (macro g_convert_error_quark::GQuark () "g_convert_error_quark")
    (macro g_iconv_open::GIConv (gchar* gchar*) "g_iconv_open")
    (macro g_iconv::size_t (GIConv gchar** gsize* gchar** gsize*) "g_iconv")
    (macro g_iconv_close::gint (GIConv) "g_iconv_close")
    (macro g_convert::gchar* (gchar* gssize gchar* gchar* gsize* gsize* GError**) "g_convert")
    (macro g_convert_with_iconv::gchar* (gchar* gssize GIConv gsize* gsize* GError**) "g_convert_with_iconv")
    (macro g_convert_with_fallback::gchar* (gchar* gssize gchar* gchar* gchar* gsize* gsize* GError**) "g_convert_with_fallback")
    (macro g_locale_to_utf8::gchar* (gchar* gssize gsize* gsize* GError**) "g_locale_to_utf8")
    (macro g_locale_from_utf8::gchar* (gchar* gssize gsize* gsize* GError**) "g_locale_from_utf8")
    (macro g_filename_to_utf8::gchar* (gchar* gssize gsize* gsize* GError**) "g_filename_to_utf8")
    (macro g_filename_from_utf8::gchar* (gchar* gssize gsize* gsize* GError**) "g_filename_from_utf8")
    (macro g_filename_from_uri::gchar* (gchar* gchar** GError**) "g_filename_from_uri")
    (macro g_filename_to_uri::gchar* (gchar* gchar* GError**) "g_filename_to_uri")
    (macro g_filename_display_name::gchar* (gchar*) "g_filename_display_name")
    (macro g_get_filename_charsets::gboolean (gchar***) "g_get_filename_charsets")
    (macro g_filename_display_basename::gchar* (gchar*) "g_filename_display_basename")
    (macro g_uri_list_extract_uris::gchar** (gchar*) "g_uri_list_extract_uris")
    (macro g_datalist_init::void (GData**) "g_datalist_init")
    (macro g_datalist_clear::void (GData**) "g_datalist_clear")
    (macro g_datalist_id_get_data::gpointer (GData** GQuark) "g_datalist_id_get_data")
    (macro g_datalist_id_set_data_full::void (GData** GQuark gpointer GDestroyNotify) "g_datalist_id_set_data_full")
    (macro g_datalist_id_remove_no_notify::gpointer (GData** GQuark) "g_datalist_id_remove_no_notify")
    (macro g_datalist_foreach::void (GData** GDataForeachFunc gpointer) "g_datalist_foreach")
    (macro g_dataset_destroy::void (gconstpointer) "g_dataset_destroy")
    (macro g_dataset_id_get_data::gpointer (gconstpointer GQuark) "g_dataset_id_get_data")
    (macro g_dataset_id_set_data_full::void (gconstpointer GQuark gpointer GDestroyNotify) "g_dataset_id_set_data_full")
    (macro g_dataset_id_remove_no_notify::gpointer (gconstpointer GQuark) "g_dataset_id_remove_no_notify")
    (macro g_dataset_foreach::void (gconstpointer GDataForeachFunc gpointer) "g_dataset_foreach")
    (macro g_date_new::GDate* () "g_date_new")
    (macro g_date_new_dmy::GDate* (GDateDay GDateMonth GDateYear) "g_date_new_dmy")
    (macro g_date_new_julian::GDate* (guint32) "g_date_new_julian")
    (macro g_date_free::void (GDate*) "g_date_free")
    (macro g_date_valid::gboolean (GDate*) "g_date_valid")
    (macro g_date_valid_day::gboolean (GDateDay) "g_date_valid_day")
    (macro g_date_valid_month::gboolean (GDateMonth) "g_date_valid_month")
    (macro g_date_valid_year::gboolean (GDateYear) "g_date_valid_year")
    (macro g_date_valid_weekday::gboolean (GDateWeekday) "g_date_valid_weekday")
    (macro g_date_valid_julian::gboolean (guint32) "g_date_valid_julian")
    (macro g_date_valid_dmy::gboolean (GDateDay GDateMonth GDateYear) "g_date_valid_dmy")
    (macro g_date_get_weekday::GDateWeekday (GDate*) "g_date_get_weekday")
    (macro g_date_get_month::GDateMonth (GDate*) "g_date_get_month")
    (macro g_date_get_year::GDateYear (GDate*) "g_date_get_year")
    (macro g_date_get_day::GDateDay (GDate*) "g_date_get_day")
    (macro g_date_get_julian::guint32 (GDate*) "g_date_get_julian")
    (macro g_date_get_day_of_year::guint (GDate*) "g_date_get_day_of_year")
    (macro g_date_get_monday_week_of_year::guint (GDate*) "g_date_get_monday_week_of_year")
    (macro g_date_get_sunday_week_of_year::guint (GDate*) "g_date_get_sunday_week_of_year")
    (macro g_date_get_iso8601_week_of_year::guint (GDate*) "g_date_get_iso8601_week_of_year")
    (macro g_date_clear::void (GDate* guint) "g_date_clear")
    (macro g_date_set_parse::void (GDate* gchar*) "g_date_set_parse")
    (macro g_date_set_time::void (GDate* GTime) "g_date_set_time")
    (macro g_date_set_month::void (GDate* GDateMonth) "g_date_set_month")
    (macro g_date_set_day::void (GDate* GDateDay) "g_date_set_day")
    (macro g_date_set_year::void (GDate* GDateYear) "g_date_set_year")
    (macro g_date_set_dmy::void (GDate* GDateDay GDateMonth GDateYear) "g_date_set_dmy")
    (macro g_date_set_julian::void (GDate* guint32) "g_date_set_julian")
    (macro g_date_is_first_of_month::gboolean (GDate*) "g_date_is_first_of_month")
    (macro g_date_is_last_of_month::gboolean (GDate*) "g_date_is_last_of_month")
    (macro g_date_add_days::void (GDate* guint) "g_date_add_days")
    (macro g_date_subtract_days::void (GDate* guint) "g_date_subtract_days")
    (macro g_date_add_months::void (GDate* guint) "g_date_add_months")
    (macro g_date_subtract_months::void (GDate* guint) "g_date_subtract_months")
    (macro g_date_add_years::void (GDate* guint) "g_date_add_years")
    (macro g_date_subtract_years::void (GDate* guint) "g_date_subtract_years")
    (macro g_date_is_leap_year::gboolean (GDateYear) "g_date_is_leap_year")
    (macro g_date_get_days_in_month::guint8 (GDateMonth GDateYear) "g_date_get_days_in_month")
    (macro g_date_get_monday_weeks_in_year::guint8 (GDateYear) "g_date_get_monday_weeks_in_year")
    (macro g_date_get_sunday_weeks_in_year::guint8 (GDateYear) "g_date_get_sunday_weeks_in_year")
    (macro g_date_days_between::gint (GDate* GDate*) "g_date_days_between")
    (macro g_date_compare::gint (GDate* GDate*) "g_date_compare")
    (macro g_date_to_struct_tm::void (GDate* s-tm*) "g_date_to_struct_tm")
    (macro g_date_clamp::void (GDate* GDate* GDate*) "g_date_clamp")
    (macro g_date_order::void (GDate* GDate*) "g_date_order")
    (macro g_date_strftime::gsize (gchar* gsize gchar* GDate*) "g_date_strftime")
    (macro g_dir_open::GDir* (gchar* guint GError**) "g_dir_open")
    (macro g_dir_read_name::gchar* (GDir*) "g_dir_read_name")
    (macro g_dir_rewind::void (GDir*) "g_dir_rewind")
    (macro g_dir_close::void (GDir*) "g_dir_close")
    (macro g_file_error_quark::GQuark () "g_file_error_quark")
    (macro g_file_error_from_errno::GFileError (gint) "g_file_error_from_errno")
    (macro g_file_test::gboolean (gchar* GFileTest) "g_file_test")
    (macro g_file_get_contents::gboolean (gchar* gchar** gsize* GError**) "g_file_get_contents")
    (macro g_file_read_link::gchar* (gchar* GError**) "g_file_read_link")
    (macro g_mkstemp::gint (gchar*) "g_mkstemp")
    (macro g_file_open_tmp::gint (gchar* gchar** GError**) "g_file_open_tmp")
    (macro g_build_path::gchar* (gchar* gchar* . gchar*) "g_build_path")
    (macro g_build_filename::gchar* (gchar* . gchar*) "g_build_filename")
    (macro g_hash_table_new::GHashTable* (GHashFunc GEqualFunc) "g_hash_table_new")
    (macro g_hash_table_new_full::GHashTable* (GHashFunc GEqualFunc GDestroyNotify GDestroyNotify) "g_hash_table_new_full")
    (macro g_hash_table_destroy::void (GHashTable*) "g_hash_table_destroy")
    (macro g_hash_table_insert::void (GHashTable* gpointer gpointer) "g_hash_table_insert")
    (macro g_hash_table_replace::void (GHashTable* gpointer gpointer) "g_hash_table_replace")
    (macro g_hash_table_remove::gboolean (GHashTable* gconstpointer) "g_hash_table_remove")
    (macro g_hash_table_steal::gboolean (GHashTable* gconstpointer) "g_hash_table_steal")
    (macro g_hash_table_lookup::gpointer (GHashTable* gconstpointer) "g_hash_table_lookup")
    (macro g_hash_table_lookup_extended::gboolean (GHashTable* gconstpointer gpointer* gpointer*) "g_hash_table_lookup_extended")
    (macro g_hash_table_foreach::void (GHashTable* GHFunc gpointer) "g_hash_table_foreach")
    (macro g_hash_table_find::gpointer (GHashTable* GHRFunc gpointer) "g_hash_table_find")
    (macro g_hash_table_foreach_remove::guint (GHashTable* GHRFunc gpointer) "g_hash_table_foreach_remove")
    (macro g_hash_table_foreach_steal::guint (GHashTable* GHRFunc gpointer) "g_hash_table_foreach_steal")
    (macro g_hash_table_size::guint (GHashTable*) "g_hash_table_size")
    (macro g_str_equal::gboolean (gconstpointer gconstpointer) "g_str_equal")
    (macro g_str_hash::guint (gconstpointer) "g_str_hash")
    (macro g_int_equal::gboolean (gconstpointer gconstpointer) "g_int_equal")
    (macro g_int_hash::guint (gconstpointer) "g_int_hash")
    (macro g_direct_hash::guint (gconstpointer) "g_direct_hash")
    (macro g_direct_equal::gboolean (gconstpointer gconstpointer) "g_direct_equal")
    (macro g_hook_list_init::void (GHookList* guint) "g_hook_list_init")
    (macro g_hook_list_clear::void (GHookList*) "g_hook_list_clear")
    (macro g_hook_alloc::GHook* (GHookList*) "g_hook_alloc")
    (macro g_hook_free::void (GHookList* GHook*) "g_hook_free")
    (macro g_hook_ref::GHook* (GHookList* GHook*) "g_hook_ref")
    (macro g_hook_unref::void (GHookList* GHook*) "g_hook_unref")
    (macro g_hook_destroy::gboolean (GHookList* gulong) "g_hook_destroy")
    (macro g_hook_destroy_link::void (GHookList* GHook*) "g_hook_destroy_link")
    (macro g_hook_prepend::void (GHookList* GHook*) "g_hook_prepend")
    (macro g_hook_insert_before::void (GHookList* GHook* GHook*) "g_hook_insert_before")
    (macro g_hook_insert_sorted::void (GHookList* GHook* GHookCompareFunc) "g_hook_insert_sorted")
    (macro g_hook_get::GHook* (GHookList* gulong) "g_hook_get")
    (macro g_hook_find::GHook* (GHookList* gboolean GHookFindFunc gpointer) "g_hook_find")
    (macro g_hook_find_data::GHook* (GHookList* gboolean gpointer) "g_hook_find_data")
    (macro g_hook_find_func::GHook* (GHookList* gboolean gpointer) "g_hook_find_func")
    (macro g_hook_find_func_data::GHook* (GHookList* gboolean gpointer gpointer) "g_hook_find_func_data")
    (macro g_hook_first_valid::GHook* (GHookList* gboolean) "g_hook_first_valid")
    (macro g_hook_next_valid::GHook* (GHookList* GHook* gboolean) "g_hook_next_valid")
    (macro g_hook_compare_ids::gint (GHook* GHook*) "g_hook_compare_ids")
    (macro g_hook_list_invoke::void (GHookList* gboolean) "g_hook_list_invoke")
    (macro g_hook_list_invoke_check::void (GHookList* gboolean) "g_hook_list_invoke_check")
    (macro g_hook_list_marshal::void (GHookList* gboolean GHookMarshaller gpointer) "g_hook_list_marshal")
    (macro g_hook_list_marshal_check::void (GHookList* gboolean GHookCheckMarshaller gpointer) "g_hook_list_marshal_check")
    (macro g_slist_push_allocator::void (GAllocator*) "g_slist_push_allocator")
    (macro g_slist_pop_allocator::void () "g_slist_pop_allocator")
    (macro g_slist_alloc::GSList* () "g_slist_alloc")
    (macro g_slist_free::void (GSList*) "g_slist_free")
    (macro g_slist_free_1::void (GSList*) "g_slist_free_1")
    (macro g_slist_append::GSList* (GSList* gpointer) "g_slist_append")
    (macro g_slist_prepend::GSList* (GSList* gpointer) "g_slist_prepend")
    (macro g_slist_insert::GSList* (GSList* gpointer gint) "g_slist_insert")
    (macro g_slist_insert_sorted::GSList* (GSList* gpointer GCompareFunc) "g_slist_insert_sorted")
    (macro g_slist_insert_before::GSList* (GSList* GSList* gpointer) "g_slist_insert_before")
    (macro g_slist_concat::GSList* (GSList* GSList*) "g_slist_concat")
    (macro g_slist_remove::GSList* (GSList* gconstpointer) "g_slist_remove")
    (macro g_slist_remove_all::GSList* (GSList* gconstpointer) "g_slist_remove_all")
    (macro g_slist_remove_link::GSList* (GSList* GSList*) "g_slist_remove_link")
    (macro g_slist_delete_link::GSList* (GSList* GSList*) "g_slist_delete_link")
    (macro g_slist_reverse::GSList* (GSList*) "g_slist_reverse")
    (macro g_slist_copy::GSList* (GSList*) "g_slist_copy")
    (macro g_slist_nth::GSList* (GSList* guint) "g_slist_nth")
    (macro g_slist_find::GSList* (GSList* gconstpointer) "g_slist_find")
    (macro g_slist_find_custom::GSList* (GSList* gconstpointer GCompareFunc) "g_slist_find_custom")
    (macro g_slist_position::gint (GSList* GSList*) "g_slist_position")
    (macro g_slist_index::gint (GSList* gconstpointer) "g_slist_index")
    (macro g_slist_last::GSList* (GSList*) "g_slist_last")
    (macro g_slist_length::guint (GSList*) "g_slist_length")
    (macro g_slist_foreach::void (GSList* GFunc gpointer) "g_slist_foreach")
    (macro g_slist_sort::GSList* (GSList* GCompareFunc) "g_slist_sort")
    (macro g_slist_sort_with_data::GSList* (GSList* GCompareDataFunc gpointer) "g_slist_sort_with_data")
    (macro g_slist_nth_data::gpointer (GSList* guint) "g_slist_nth_data")
    (macro g_main_context_new::GMainContext* () "g_main_context_new")
    (macro g_main_context_ref::GMainContext* (GMainContext*) "g_main_context_ref")
    (macro g_main_context_unref::void (GMainContext*) "g_main_context_unref")
    (macro g_main_context_default::GMainContext* () "g_main_context_default")
    (macro g_main_context_iteration::gboolean (GMainContext* gboolean) "g_main_context_iteration")
    (macro g_main_context_pending::gboolean (GMainContext*) "g_main_context_pending")
    (macro g_main_context_find_source_by_id::GSource* (GMainContext* guint) "g_main_context_find_source_by_id")
    (macro g_main_context_find_source_by_user_data::GSource* (GMainContext* gpointer) "g_main_context_find_source_by_user_data")
    (macro g_main_context_find_source_by_funcs_user_data::GSource* (GMainContext* GSourceFuncs* gpointer) "g_main_context_find_source_by_funcs_user_data")
    (macro g_main_context_wakeup::void (GMainContext*) "g_main_context_wakeup")
    (macro g_main_context_acquire::gboolean (GMainContext*) "g_main_context_acquire")
    (macro g_main_context_release::void (GMainContext*) "g_main_context_release")
    (macro g_main_context_wait::gboolean (GMainContext* GCond* GMutex*) "g_main_context_wait")
    (macro g_main_context_prepare::gboolean (GMainContext* gint*) "g_main_context_prepare")
    (macro g_main_context_query::gint (GMainContext* gint gint* GPollFD* gint) "g_main_context_query")
    (macro g_main_context_check::gint (GMainContext* gint GPollFD* gint) "g_main_context_check")
    (macro g_main_context_dispatch::void (GMainContext*) "g_main_context_dispatch")
    (macro g_main_context_set_poll_func::void (GMainContext* GPollFunc) "g_main_context_set_poll_func")
    (macro g_main_context_get_poll_func::GPollFunc (GMainContext*) "g_main_context_get_poll_func")
    (macro g_main_context_add_poll::void (GMainContext* GPollFD* gint) "g_main_context_add_poll")
    (macro g_main_context_remove_poll::void (GMainContext* GPollFD*) "g_main_context_remove_poll")
    (macro g_main_depth::int () "g_main_depth")
    (macro g_main_loop_new::GMainLoop* (GMainContext* gboolean) "g_main_loop_new")
    (macro g_main_loop_run::void (GMainLoop*) "g_main_loop_run")
    (macro g_main_loop_quit::void (GMainLoop*) "g_main_loop_quit")
    (macro g_main_loop_ref::GMainLoop* (GMainLoop*) "g_main_loop_ref")
    (macro g_main_loop_unref::void (GMainLoop*) "g_main_loop_unref")
    (macro g_main_loop_is_running::gboolean (GMainLoop*) "g_main_loop_is_running")
    (macro g_main_loop_get_context::GMainContext* (GMainLoop*) "g_main_loop_get_context")
    (macro g_source_new::GSource* (GSourceFuncs* guint) "g_source_new")
    (macro g_source_ref::GSource* (GSource*) "g_source_ref")
    (macro g_source_unref::void (GSource*) "g_source_unref")
    (macro g_source_attach::guint (GSource* GMainContext*) "g_source_attach")
    (macro g_source_destroy::void (GSource*) "g_source_destroy")
    (macro g_source_set_priority::void (GSource* gint) "g_source_set_priority")
    (macro g_source_get_priority::gint (GSource*) "g_source_get_priority")
    (macro g_source_set_can_recurse::void (GSource* gboolean) "g_source_set_can_recurse")
    (macro g_source_get_can_recurse::gboolean (GSource*) "g_source_get_can_recurse")
    (macro g_source_get_id::guint (GSource*) "g_source_get_id")
    (macro g_source_get_context::GMainContext* (GSource*) "g_source_get_context")
    (macro g_source_set_callback::void (GSource* GSourceFunc gpointer GDestroyNotify) "g_source_set_callback")
    (macro g_source_set_callback_indirect::void (GSource* gpointer GSourceCallbackFuncs*) "g_source_set_callback_indirect")
    (macro g_source_add_poll::void (GSource* GPollFD*) "g_source_add_poll")
    (macro g_source_remove_poll::void (GSource* GPollFD*) "g_source_remove_poll")
    (macro g_source_get_current_time::void (GSource* GTimeVal*) "g_source_get_current_time")
    (macro g_idle_source_new::GSource* () "g_idle_source_new")
    (macro g_child_watch_source_new::GSource* (GPid) "g_child_watch_source_new")
    (macro g_timeout_source_new::GSource* (guint) "g_timeout_source_new")
    (macro g_get_current_time::void (GTimeVal*) "g_get_current_time")
    (macro g_source_remove::gboolean (guint) "g_source_remove")
    (macro g_source_remove_by_user_data::gboolean (gpointer) "g_source_remove_by_user_data")
    (macro g_source_remove_by_funcs_user_data::gboolean (GSourceFuncs* gpointer) "g_source_remove_by_funcs_user_data")
    (macro g_timeout_add_full::guint (gint guint GSourceFunc gpointer GDestroyNotify) "g_timeout_add_full")
    (macro g_timeout_add::guint (guint GSourceFunc gpointer) "g_timeout_add")
    (macro g_child_watch_add_full::guint (gint GPid GChildWatchFunc gpointer GDestroyNotify) "g_child_watch_add_full")
    (macro g_child_watch_add::guint (GPid GChildWatchFunc gpointer) "g_child_watch_add")
    (macro g_idle_add::guint (GSourceFunc gpointer) "g_idle_add")
    (macro g_idle_add_full::guint (gint GSourceFunc gpointer GDestroyNotify) "g_idle_add_full")
    (macro g_idle_remove_by_data::gboolean (gpointer) "g_idle_remove_by_data")
    (macro g_get_charset::gboolean (string*) "g_get_charset")
    (macro g_unichar_isalnum::gboolean (gunichar) "g_unichar_isalnum")
    (macro g_unichar_isalpha::gboolean (gunichar) "g_unichar_isalpha")
    (macro g_unichar_iscntrl::gboolean (gunichar) "g_unichar_iscntrl")
    (macro g_unichar_isdigit::gboolean (gunichar) "g_unichar_isdigit")
    (macro g_unichar_isgraph::gboolean (gunichar) "g_unichar_isgraph")
    (macro g_unichar_islower::gboolean (gunichar) "g_unichar_islower")
    (macro g_unichar_isprint::gboolean (gunichar) "g_unichar_isprint")
    (macro g_unichar_ispunct::gboolean (gunichar) "g_unichar_ispunct")
    (macro g_unichar_isspace::gboolean (gunichar) "g_unichar_isspace")
    (macro g_unichar_isupper::gboolean (gunichar) "g_unichar_isupper")
    (macro g_unichar_isxdigit::gboolean (gunichar) "g_unichar_isxdigit")
    (macro g_unichar_istitle::gboolean (gunichar) "g_unichar_istitle")
    (macro g_unichar_isdefined::gboolean (gunichar) "g_unichar_isdefined")
    (macro g_unichar_iswide::gboolean (gunichar) "g_unichar_iswide")
    (macro g_unichar_toupper::gunichar (gunichar) "g_unichar_toupper")
    (macro g_unichar_tolower::gunichar (gunichar) "g_unichar_tolower")
    (macro g_unichar_totitle::gunichar (gunichar) "g_unichar_totitle")
    (macro g_unichar_digit_value::gint (gunichar) "g_unichar_digit_value")
    (macro g_unichar_xdigit_value::gint (gunichar) "g_unichar_xdigit_value")
    (macro g_unichar_type::GUnicodeType (gunichar) "g_unichar_type")
    (macro g_unichar_break_type::GUnicodeBreakType (gunichar) "g_unichar_break_type")
    (macro g_unicode_canonical_ordering::void (gunichar* gsize) "g_unicode_canonical_ordering")
    (macro g_unicode_canonical_decomposition::gunichar* (gunichar gsize*) "g_unicode_canonical_decomposition")
    (macro g_utf8_get_char::gunichar (gchar*) "g_utf8_get_char")
    (macro g_utf8_get_char_validated::gunichar (gchar* gssize) "g_utf8_get_char_validated")
    (macro g_utf8_offset_to_pointer::gchar* (gchar* glong) "g_utf8_offset_to_pointer")
    (macro g_utf8_pointer_to_offset::glong (gchar* gchar*) "g_utf8_pointer_to_offset")
    (macro g_utf8_prev_char::gchar* (gchar*) "g_utf8_prev_char")
    (macro g_utf8_find_next_char::gchar* (gchar* gchar*) "g_utf8_find_next_char")
    (macro g_utf8_find_prev_char::gchar* (gchar* gchar*) "g_utf8_find_prev_char")
    (macro g_utf8_strlen::glong (gchar* gssize) "g_utf8_strlen")
    (macro g_utf8_strncpy::gchar* (gchar* gchar* gsize) "g_utf8_strncpy")
    (macro g_utf8_strchr::gchar* (gchar* gssize gunichar) "g_utf8_strchr")
    (macro g_utf8_strrchr::gchar* (gchar* gssize gunichar) "g_utf8_strrchr")
    (macro g_utf8_strreverse::gchar* (gchar* gssize) "g_utf8_strreverse")
    (macro g_utf8_to_utf16::gunichar2* (gchar* glong glong* glong* GError**) "g_utf8_to_utf16")
    (macro g_utf8_to_ucs4::gunichar* (gchar* glong glong* glong* GError**) "g_utf8_to_ucs4")
    (macro g_utf8_to_ucs4_fast::gunichar* (gchar* glong glong*) "g_utf8_to_ucs4_fast")
    (macro g_utf16_to_ucs4::gunichar* (gunichar2* glong glong* glong* GError**) "g_utf16_to_ucs4")
    (macro g_utf16_to_utf8::gchar* (gunichar2* glong glong* glong* GError**) "g_utf16_to_utf8")
    (macro g_ucs4_to_utf16::gunichar2* (gunichar* glong glong* glong* GError**) "g_ucs4_to_utf16")
    (macro g_ucs4_to_utf8::gchar* (gunichar* glong glong* glong* GError**) "g_ucs4_to_utf8")
    (macro g_unichar_to_utf8::gint (gunichar gchar*) "g_unichar_to_utf8")
    (macro g_utf8_validate::gboolean (gchar* gssize gchar**) "g_utf8_validate")
    (macro g_unichar_validate::gboolean (gunichar) "g_unichar_validate")
    (macro g_utf8_strup::gchar* (gchar* gssize) "g_utf8_strup")
    (macro g_utf8_strdown::gchar* (gchar* gssize) "g_utf8_strdown")
    (macro g_utf8_casefold::gchar* (gchar* gssize) "g_utf8_casefold")
    (macro g_utf8_normalize::gchar* (gchar* gssize GNormalizeMode) "g_utf8_normalize")
    (macro g_utf8_collate::gint (gchar* gchar*) "g_utf8_collate")
    (macro g_utf8_collate_key::gchar* (gchar* gssize) "g_utf8_collate_key")
    (macro g_unichar_get_mirror_char::gboolean (gunichar gunichar*) "g_unichar_get_mirror_char")
    (macro g_get_user_name::gchar* () "g_get_user_name")
    (macro g_get_real_name::gchar* () "g_get_real_name")
    (macro g_get_home_dir::gchar* () "g_get_home_dir")
    (macro g_get_tmp_dir::gchar* () "g_get_tmp_dir")
    (macro g_get_prgname::gchar* () "g_get_prgname")
    (macro g_set_prgname::void (gchar*) "g_set_prgname")
    (macro g_get_application_name::gchar* () "g_get_application_name")
    (macro g_set_application_name::void (gchar*) "g_set_application_name")
    (macro g_get_user_data_dir::gchar* () "g_get_user_data_dir")
    (macro g_get_user_config_dir::gchar* () "g_get_user_config_dir")
    (macro g_get_user_cache_dir::gchar* () "g_get_user_cache_dir")
    (macro g_get_system_data_dirs::gchar* () "g_get_system_data_dirs")
    (macro g_get_system_config_dirs::gchar* () "g_get_system_config_dirs")
    (macro g_get_language_names::gchar* () "g_get_language_names")
    (macro g_parse_debug_string::guint (gchar* GDebugKey* guint) "g_parse_debug_string")
    (macro g_snprintf::gint (gchar* gulong gchar* . gchar*) "g_snprintf")
    (macro g_path_is_absolute::gboolean (gchar*) "g_path_is_absolute")
    (macro g_path_skip_root::gchar* (gchar*) "g_path_skip_root")
    (macro g_basename::gchar* (gchar*) "g_basename")
    (macro g_get_current_dir::gchar* () "g_get_current_dir")
    (macro g_path_get_basename::gchar* (gchar*) "g_path_get_basename")
    (macro g_path_get_dirname::gchar* (gchar*) "g_path_get_dirname")
    (macro g_nullify_pointer::void (gpointer*) "g_nullify_pointer")
    (macro g_getenv::gchar* (gchar*) "g_getenv")
    (macro g_setenv::gboolean (gchar* gchar* gboolean) "g_setenv")
    (macro g_unsetenv::void (gchar*) "g_unsetenv")
    (macro g_atexit::void (GVoidFunc) "g_atexit")
    (macro g_find_program_in_path::gchar* (gchar*) "g_find_program_in_path")
    (macro glib_check_version::gchar* (guint guint guint) "glib_check_version")
    (macro g_string_chunk_new::GStringChunk* (gsize) "g_string_chunk_new")
    (macro g_string_chunk_free::void (GStringChunk*) "g_string_chunk_free")
    (macro g_string_chunk_insert::gchar* (GStringChunk* gchar*) "g_string_chunk_insert")
    (macro g_string_chunk_insert_len::gchar* (GStringChunk* gchar* gssize) "g_string_chunk_insert_len")
    (macro g_string_chunk_insert_const::gchar* (GStringChunk* gchar*) "g_string_chunk_insert_const")
    (macro g_string_new::GString* (gchar*) "g_string_new")
    (macro g_string_new_len::GString* (gchar* gssize) "g_string_new_len")
    (macro g_string_sized_new::GString* (gsize) "g_string_sized_new")
    (macro g_string_free::gchar* (GString* gboolean) "g_string_free")
    (macro g_string_equal::gboolean (GString* GString*) "g_string_equal")
    (macro g_string_hash::guint (GString*) "g_string_hash")
    (macro g_string_assign::GString* (GString* gchar*) "g_string_assign")
    (macro g_string_truncate::GString* (GString* gsize) "g_string_truncate")
    (macro g_string_set_size::GString* (GString* gsize) "g_string_set_size")
    (macro g_string_insert_len::GString* (GString* gssize gchar* gssize) "g_string_insert_len")
    (macro g_string_append::GString* (GString* gchar*) "g_string_append")
    (macro g_string_append_len::GString* (GString* gchar* gssize) "g_string_append_len")
    (macro g_string_append_c::GString* (GString* gchar) "g_string_append_c")
    (macro g_string_append_unichar::GString* (GString* gunichar) "g_string_append_unichar")
    (macro g_string_prepend::GString* (GString* gchar*) "g_string_prepend")
    (macro g_string_prepend_c::GString* (GString* gchar) "g_string_prepend_c")
    (macro g_string_prepend_unichar::GString* (GString* gunichar) "g_string_prepend_unichar")
    (macro g_string_prepend_len::GString* (GString* gchar* gssize) "g_string_prepend_len")
    (macro g_string_insert::GString* (GString* gssize gchar*) "g_string_insert")
    (macro g_string_insert_c::GString* (GString* gssize gchar) "g_string_insert_c")
    (macro g_string_insert_unichar::GString* (GString* gssize gunichar) "g_string_insert_unichar")
    (macro g_string_erase::GString* (GString* gssize gssize) "g_string_erase")
    (macro g_string_ascii_down::GString* (GString*) "g_string_ascii_down")
    (macro g_string_ascii_up::GString* (GString*) "g_string_ascii_up")
    (macro g_string_printf::void (GString* gchar* . gchar*) "g_string_printf")
    (macro g_string_append_printf::void (GString* gchar* . gchar*) "g_string_append_printf")
    (macro g_string_down::GString* (GString*) "g_string_down")
    (macro g_string_up::GString* (GString*) "g_string_up")
    (macro g_io_channel_init::void (GIOChannel*) "g_io_channel_init")
    (macro g_io_channel_ref::GIOChannel* (GIOChannel*) "g_io_channel_ref")
    (macro g_io_channel_unref::void (GIOChannel*) "g_io_channel_unref")
    (macro g_io_channel_read::GIOError (GIOChannel* gchar* gsize gsize*) "g_io_channel_read")
    (macro g_io_channel_write::GIOError (GIOChannel* gchar* gsize gsize*) "g_io_channel_write")
    (macro g_io_channel_seek::GIOError (GIOChannel* gint64 GSeekType) "g_io_channel_seek")
    (macro g_io_channel_close::void (GIOChannel*) "g_io_channel_close")
    (macro g_io_channel_shutdown::GIOStatus (GIOChannel* gboolean GError**) "g_io_channel_shutdown")
    (macro g_io_add_watch_full::guint (GIOChannel* gint GIOCondition GIOFunc gpointer GDestroyNotify) "g_io_add_watch_full")
    (macro g_io_create_watch::GSource* (GIOChannel* GIOCondition) "g_io_create_watch")
    (macro g_io_add_watch::guint (GIOChannel* GIOCondition GIOFunc gpointer) "g_io_add_watch")
    (macro g_io_channel_set_buffer_size::void (GIOChannel* gsize) "g_io_channel_set_buffer_size")
    (macro g_io_channel_get_buffer_size::gsize (GIOChannel*) "g_io_channel_get_buffer_size")
    (macro g_io_channel_get_buffer_condition::GIOCondition (GIOChannel*) "g_io_channel_get_buffer_condition")
    (macro g_io_channel_set_flags::GIOStatus (GIOChannel* GIOFlags GError**) "g_io_channel_set_flags")
    (macro g_io_channel_get_flags::GIOFlags (GIOChannel*) "g_io_channel_get_flags")
    (macro g_io_channel_set_line_term::void (GIOChannel* gchar* gint) "g_io_channel_set_line_term")
    (macro g_io_channel_get_line_term::gchar* (GIOChannel* gint*) "g_io_channel_get_line_term")
    (macro g_io_channel_set_buffered::void (GIOChannel* gboolean) "g_io_channel_set_buffered")
    (macro g_io_channel_get_buffered::gboolean (GIOChannel*) "g_io_channel_get_buffered")
    (macro g_io_channel_set_encoding::GIOStatus (GIOChannel* gchar* GError**) "g_io_channel_set_encoding")
    (macro g_io_channel_get_encoding::gchar* (GIOChannel*) "g_io_channel_get_encoding")
    (macro g_io_channel_set_close_on_unref::void (GIOChannel* gboolean) "g_io_channel_set_close_on_unref")
    (macro g_io_channel_get_close_on_unref::gboolean (GIOChannel*) "g_io_channel_get_close_on_unref")
    (macro g_io_channel_flush::GIOStatus (GIOChannel* GError**) "g_io_channel_flush")
    (macro g_io_channel_read_line::GIOStatus (GIOChannel* gchar** gsize* gsize* GError**) "g_io_channel_read_line")
    (macro g_io_channel_read_line_string::GIOStatus (GIOChannel* GString* gsize* GError**) "g_io_channel_read_line_string")
    (macro g_io_channel_read_to_end::GIOStatus (GIOChannel* gchar** gsize* GError**) "g_io_channel_read_to_end")
    (macro g_io_channel_read_chars::GIOStatus (GIOChannel* gchar* gsize gsize* GError**) "g_io_channel_read_chars")
    (macro g_io_channel_read_unichar::GIOStatus (GIOChannel* gunichar* GError**) "g_io_channel_read_unichar")
    (macro g_io_channel_write_chars::GIOStatus (GIOChannel* gchar* gssize gsize* GError**) "g_io_channel_write_chars")
    (macro g_io_channel_write_unichar::GIOStatus (GIOChannel* gunichar GError**) "g_io_channel_write_unichar")
    (macro g_io_channel_seek_position::GIOStatus (GIOChannel* gint64 GSeekType GError**) "g_io_channel_seek_position")
    (macro g_io_channel_new_file::GIOChannel* (gchar* gchar* GError**) "g_io_channel_new_file")
    (macro g_io_channel_error_quark::GQuark () "g_io_channel_error_quark")
    (macro g_io_channel_error_from_errno::GIOChannelError (gint) "g_io_channel_error_from_errno")
    (macro g_io_channel_unix_new::GIOChannel* (int) "g_io_channel_unix_new")
    (macro g_io_channel_unix_get_fd::gint (GIOChannel*) "g_io_channel_unix_get_fd")
    (macro g_key_file_error_quark::GQuark () "g_key_file_error_quark")
    (macro g_key_file_new::GKeyFile* () "g_key_file_new")
    (macro g_key_file_free::void (GKeyFile*) "g_key_file_free")
    (macro g_key_file_set_list_separator::void (GKeyFile* gchar) "g_key_file_set_list_separator")
    (macro g_key_file_load_from_file::gboolean (GKeyFile* gchar* GKeyFileFlags GError**) "g_key_file_load_from_file")
    (macro g_key_file_load_from_data::gboolean (GKeyFile* gchar* gsize GKeyFileFlags GError**) "g_key_file_load_from_data")
    (macro g_key_file_load_from_data_dirs::gboolean (GKeyFile* gchar* gchar** GKeyFileFlags GError**) "g_key_file_load_from_data_dirs")
    (macro g_key_file_to_data::gchar* (GKeyFile* gsize* GError**) "g_key_file_to_data")
    (macro g_key_file_get_start_group::gchar* (GKeyFile*) "g_key_file_get_start_group")
    (macro g_key_file_get_groups::gchar** (GKeyFile* gsize*) "g_key_file_get_groups")
    (macro g_key_file_get_keys::gchar** (GKeyFile* gchar* gsize* GError**) "g_key_file_get_keys")
    (macro g_key_file_has_group::gboolean (GKeyFile* gchar*) "g_key_file_has_group")
    (macro g_key_file_has_key::gboolean (GKeyFile* gchar* gchar* GError**) "g_key_file_has_key")
    (macro g_key_file_get_value::gchar* (GKeyFile* gchar* gchar* GError**) "g_key_file_get_value")
    (macro g_key_file_set_value::void (GKeyFile* gchar* gchar* gchar*) "g_key_file_set_value")
    (macro g_key_file_get_string::gchar* (GKeyFile* gchar* gchar* GError**) "g_key_file_get_string")
    (macro g_key_file_set_string::void (GKeyFile* gchar* gchar* gchar*) "g_key_file_set_string")
    (macro g_key_file_get_locale_string::gchar* (GKeyFile* gchar* gchar* gchar* GError**) "g_key_file_get_locale_string")
    (macro g_key_file_set_locale_string::void (GKeyFile* gchar* gchar* gchar* gchar*) "g_key_file_set_locale_string")
    (macro g_key_file_get_boolean::gboolean (GKeyFile* gchar* gchar* GError**) "g_key_file_get_boolean")
    (macro g_key_file_set_boolean::void (GKeyFile* gchar* gchar* gboolean) "g_key_file_set_boolean")
    (macro g_key_file_get_integer::gint (GKeyFile* gchar* gchar* GError**) "g_key_file_get_integer")
    (macro g_key_file_set_integer::void (GKeyFile* gchar* gchar* gint) "g_key_file_set_integer")
    (macro g_key_file_get_string_list::gchar** (GKeyFile* gchar* gchar* gsize* GError**) "g_key_file_get_string_list")
    (macro g_key_file_set_string_list::void (GKeyFile* gchar* gchar* gchar** gsize) "g_key_file_set_string_list")
    (macro g_key_file_get_locale_string_list::gchar** (GKeyFile* gchar* gchar* gchar* gsize* GError**) "g_key_file_get_locale_string_list")
    (macro g_key_file_set_locale_string_list::void (GKeyFile* gchar* gchar* gchar* gchar** gsize) "g_key_file_set_locale_string_list")
    (macro g_key_file_get_boolean_list::gboolean* (GKeyFile* gchar* gchar* gsize* GError**) "g_key_file_get_boolean_list")
    (macro g_key_file_set_boolean_list::void (GKeyFile* gchar* gchar* gboolean* gsize) "g_key_file_set_boolean_list")
    (macro g_key_file_get_integer_list::gint* (GKeyFile* gchar* gchar* gsize* GError**) "g_key_file_get_integer_list")
    (macro g_key_file_set_integer_list::void (GKeyFile* gchar* gchar* gint* gsize) "g_key_file_set_integer_list")
    (macro g_key_file_set_comment::void (GKeyFile* gchar* gchar* gchar* GError**) "g_key_file_set_comment")
    (macro g_key_file_get_comment::gchar* (GKeyFile* gchar* gchar* GError**) "g_key_file_get_comment")
    (macro g_key_file_remove_comment::void (GKeyFile* gchar* gchar* GError**) "g_key_file_remove_comment")
    (macro g_key_file_remove_key::void (GKeyFile* gchar* gchar* GError**) "g_key_file_remove_key")
    (macro g_key_file_remove_group::void (GKeyFile* gchar* GError**) "g_key_file_remove_group")
    (macro g_markup_error_quark::GQuark () "g_markup_error_quark")
    (macro g_markup_parse_context_new::GMarkupParseContext* (GMarkupParser* GMarkupParseFlags gpointer GDestroyNotify) "g_markup_parse_context_new")
    (macro g_markup_parse_context_free::void (GMarkupParseContext*) "g_markup_parse_context_free")
    (macro g_markup_parse_context_parse::gboolean (GMarkupParseContext* gchar* gssize GError**) "g_markup_parse_context_parse")
    (macro g_markup_parse_context_end_parse::gboolean (GMarkupParseContext* GError**) "g_markup_parse_context_end_parse")
    (macro g_markup_parse_context_get_element::gchar* (GMarkupParseContext*) "g_markup_parse_context_get_element")
    (macro g_markup_parse_context_get_position::void (GMarkupParseContext* gint* gint*) "g_markup_parse_context_get_position")
    (macro g_markup_escape_text::gchar* (gchar* gssize) "g_markup_escape_text")
    (macro g_markup_printf_escaped::gchar* (string . string) "g_markup_printf_escaped")
    (macro g_log_set_handler::guint (gchar* GLogLevelFlags GLogFunc gpointer) "g_log_set_handler")
    (macro g_log_remove_handler::void (gchar* guint) "g_log_remove_handler")
    (macro g_log_default_handler::void (gchar* GLogLevelFlags gchar* gpointer) "g_log_default_handler")
    (macro g_log_set_default_handler::GLogFunc (GLogFunc gpointer) "g_log_set_default_handler")
    (macro g_log::void (gchar* GLogLevelFlags gchar* . gchar*) "g_log")
    (macro g_log_set_fatal_mask::GLogLevelFlags (gchar* GLogLevelFlags) "g_log_set_fatal_mask")
    (macro g_log_set_always_fatal::GLogLevelFlags (GLogLevelFlags) "g_log_set_always_fatal")
    (macro _g_log_fallback_handler::void (gchar* GLogLevelFlags gchar* gpointer) "_g_log_fallback_handler")
    (macro g_return_if_fail_warning::void (string string string) "g_return_if_fail_warning")
    (macro g_assert_warning::void (string string int string string) "g_assert_warning")
    (macro g_print::void (gchar* . gchar*) "g_print")
    (macro g_set_print_handler::GPrintFunc (GPrintFunc) "g_set_print_handler")
    (macro g_printerr::void (gchar* . gchar*) "g_printerr")
    (macro g_set_printerr_handler::GPrintFunc (GPrintFunc) "g_set_printerr_handler")
    (macro g_node_push_allocator::void (GAllocator*) "g_node_push_allocator")
    (macro g_node_pop_allocator::void () "g_node_pop_allocator")
    (macro g_node_new::GNode* (gpointer) "g_node_new")
    (macro g_node_destroy::void (GNode*) "g_node_destroy")
    (macro g_node_unlink::void (GNode*) "g_node_unlink")
    (macro g_node_copy_deep::GNode* (GNode* GCopyFunc gpointer) "g_node_copy_deep")
    (macro g_node_copy::GNode* (GNode*) "g_node_copy")
    (macro g_node_insert::GNode* (GNode* gint GNode*) "g_node_insert")
    (macro g_node_insert_before::GNode* (GNode* GNode* GNode*) "g_node_insert_before")
    (macro g_node_insert_after::GNode* (GNode* GNode* GNode*) "g_node_insert_after")
    (macro g_node_prepend::GNode* (GNode* GNode*) "g_node_prepend")
    (macro g_node_n_nodes::guint (GNode* GTraverseFlags) "g_node_n_nodes")
    (macro g_node_get_root::GNode* (GNode*) "g_node_get_root")
    (macro g_node_is_ancestor::gboolean (GNode* GNode*) "g_node_is_ancestor")
    (macro g_node_depth::guint (GNode*) "g_node_depth")
    (macro g_node_find::GNode* (GNode* GTraverseType GTraverseFlags gpointer) "g_node_find")
    (macro g_node_traverse::void (GNode* GTraverseType GTraverseFlags gint GNodeTraverseFunc gpointer) "g_node_traverse")
    (macro g_node_max_height::guint (GNode*) "g_node_max_height")
    (macro g_node_children_foreach::void (GNode* GTraverseFlags GNodeForeachFunc gpointer) "g_node_children_foreach")
    (macro g_node_reverse_children::void (GNode*) "g_node_reverse_children")
    (macro g_node_n_children::guint (GNode*) "g_node_n_children")
    (macro g_node_nth_child::GNode* (GNode* guint) "g_node_nth_child")
    (macro g_node_last_child::GNode* (GNode*) "g_node_last_child")
    (macro g_node_find_child::GNode* (GNode* GTraverseFlags gpointer) "g_node_find_child")
    (macro g_node_child_position::gint (GNode* GNode*) "g_node_child_position")
    (macro g_node_child_index::gint (GNode* gpointer) "g_node_child_index")
    (macro g_node_first_sibling::GNode* (GNode*) "g_node_first_sibling")
    (macro g_node_last_sibling::GNode* (GNode*) "g_node_last_sibling")
    (macro g_option_error_quark::GQuark () "g_option_error_quark")
    (macro g_option_context_new::GOptionContext* (gchar*) "g_option_context_new")
    (macro g_option_context_free::void (GOptionContext*) "g_option_context_free")
    (macro g_option_context_set_help_enabled::void (GOptionContext* gboolean) "g_option_context_set_help_enabled")
    (macro g_option_context_get_help_enabled::gboolean (GOptionContext*) "g_option_context_get_help_enabled")
    (macro g_option_context_set_ignore_unknown_options::void (GOptionContext* gboolean) "g_option_context_set_ignore_unknown_options")
    (macro g_option_context_get_ignore_unknown_options::gboolean (GOptionContext*) "g_option_context_get_ignore_unknown_options")
    (macro g_option_context_add_main_entries::void (GOptionContext* GOptionEntry* gchar*) "g_option_context_add_main_entries")
    (macro g_option_context_parse::gboolean (GOptionContext* gint* gchar*** GError**) "g_option_context_parse")
    (macro g_option_context_add_group::void (GOptionContext* GOptionGroup*) "g_option_context_add_group")
    (macro g_option_context_set_main_group::void (GOptionContext* GOptionGroup*) "g_option_context_set_main_group")
    (macro g_option_context_get_main_group::GOptionGroup* (GOptionContext*) "g_option_context_get_main_group")
    (macro g_option_group_new::GOptionGroup* (gchar* gchar* gchar* gpointer GDestroyNotify) "g_option_group_new")
    (macro g_option_group_set_parse_hooks::void (GOptionGroup* GOptionParseFunc GOptionParseFunc) "g_option_group_set_parse_hooks")
    (macro g_option_group_set_error_hook::void (GOptionGroup* GOptionErrorFunc) "g_option_group_set_error_hook")
    (macro g_option_group_free::void (GOptionGroup*) "g_option_group_free")
    (macro g_option_group_add_entries::void (GOptionGroup* GOptionEntry*) "g_option_group_add_entries")
    (macro g_option_group_set_translate_func::void (GOptionGroup* GTranslateFunc gpointer GDestroyNotify) "g_option_group_set_translate_func")
    (macro g_option_group_set_translation_domain::void (GOptionGroup* gchar*) "g_option_group_set_translation_domain")
    (macro g_pattern_spec_new::GPatternSpec* (gchar*) "g_pattern_spec_new")
    (macro g_pattern_spec_free::void (GPatternSpec*) "g_pattern_spec_free")
    (macro g_pattern_spec_equal::gboolean (GPatternSpec* GPatternSpec*) "g_pattern_spec_equal")
    (macro g_pattern_match::gboolean (GPatternSpec* guint gchar* gchar*) "g_pattern_match")
    (macro g_pattern_match_string::gboolean (GPatternSpec* gchar*) "g_pattern_match_string")
    (macro g_pattern_match_simple::gboolean (gchar* gchar*) "g_pattern_match_simple")
    (macro g_spaced_primes_closest::guint (guint) "g_spaced_primes_closest")
    (macro g_qsort_with_data::void (gconstpointer gint gsize GCompareDataFunc gpointer) "g_qsort_with_data")
    (macro g_queue_new::GQueue* () "g_queue_new")
    (macro g_queue_free::void (GQueue*) "g_queue_free")
    (macro g_queue_is_empty::gboolean (GQueue*) "g_queue_is_empty")
    (macro g_queue_get_length::guint (GQueue*) "g_queue_get_length")
    (macro g_queue_reverse::void (GQueue*) "g_queue_reverse")
    (macro g_queue_copy::GQueue* (GQueue*) "g_queue_copy")
    (macro g_queue_foreach::void (GQueue* GFunc gpointer) "g_queue_foreach")
    (macro g_queue_find::GList* (GQueue* gconstpointer) "g_queue_find")
    (macro g_queue_find_custom::GList* (GQueue* gconstpointer GCompareFunc) "g_queue_find_custom")
    (macro g_queue_sort::void (GQueue* GCompareDataFunc gpointer) "g_queue_sort")
    (macro g_queue_push_head::void (GQueue* gpointer) "g_queue_push_head")
    (macro g_queue_push_tail::void (GQueue* gpointer) "g_queue_push_tail")
    (macro g_queue_push_nth::void (GQueue* gpointer gint) "g_queue_push_nth")
    (macro g_queue_pop_head::gpointer (GQueue*) "g_queue_pop_head")
    (macro g_queue_pop_tail::gpointer (GQueue*) "g_queue_pop_tail")
    (macro g_queue_pop_nth::gpointer (GQueue* guint) "g_queue_pop_nth")
    (macro g_queue_peek_head::gpointer (GQueue*) "g_queue_peek_head")
    (macro g_queue_peek_tail::gpointer (GQueue*) "g_queue_peek_tail")
    (macro g_queue_peek_nth::gpointer (GQueue* guint) "g_queue_peek_nth")
    (macro g_queue_index::gint (GQueue* gconstpointer) "g_queue_index")
    (macro g_queue_remove::void (GQueue* gconstpointer) "g_queue_remove")
    (macro g_queue_remove_all::void (GQueue* gconstpointer) "g_queue_remove_all")
    (macro g_queue_insert_before::void (GQueue* GList* gpointer) "g_queue_insert_before")
    (macro g_queue_insert_after::void (GQueue* GList* gpointer) "g_queue_insert_after")
    (macro g_queue_insert_sorted::void (GQueue* gpointer GCompareDataFunc gpointer) "g_queue_insert_sorted")
    (macro g_queue_push_head_link::void (GQueue* GList*) "g_queue_push_head_link")
    (macro g_queue_push_tail_link::void (GQueue* GList*) "g_queue_push_tail_link")
    (macro g_queue_push_nth_link::void (GQueue* gint GList*) "g_queue_push_nth_link")
    (macro g_queue_pop_head_link::GList* (GQueue*) "g_queue_pop_head_link")
    (macro g_queue_pop_tail_link::GList* (GQueue*) "g_queue_pop_tail_link")
    (macro g_queue_pop_nth_link::GList* (GQueue* guint) "g_queue_pop_nth_link")
    (macro g_queue_peek_head_link::GList* (GQueue*) "g_queue_peek_head_link")
    (macro g_queue_peek_tail_link::GList* (GQueue*) "g_queue_peek_tail_link")
    (macro g_queue_peek_nth_link::GList* (GQueue* guint) "g_queue_peek_nth_link")
    (macro g_queue_link_index::gint (GQueue* GList*) "g_queue_link_index")
    (macro g_queue_unlink::void (GQueue* GList*) "g_queue_unlink")
    (macro g_queue_delete_link::void (GQueue* GList*) "g_queue_delete_link")
    (macro g_rand_new_with_seed::GRand* (guint32) "g_rand_new_with_seed")
    (macro g_rand_new_with_seed_array::GRand* (guint32* guint) "g_rand_new_with_seed_array")
    (macro g_rand_new::GRand* () "g_rand_new")
    (macro g_rand_free::void (GRand*) "g_rand_free")
    (macro g_rand_copy::GRand* (GRand*) "g_rand_copy")
    (macro g_rand_set_seed::void (GRand* guint32) "g_rand_set_seed")
    (macro g_rand_set_seed_array::void (GRand* guint32* guint) "g_rand_set_seed_array")
    (macro g_rand_int::guint32 (GRand*) "g_rand_int")
    (macro g_rand_int_range::gint32 (GRand* gint32 gint32) "g_rand_int_range")
    (macro g_rand_double::gdouble (GRand*) "g_rand_double")
    (macro g_rand_double_range::gdouble (GRand* gdouble gdouble) "g_rand_double_range")
    (macro g_random_set_seed::void (guint32) "g_random_set_seed")
    (macro g_random_int::guint32 () "g_random_int")
    (macro g_random_int_range::gint32 (gint32 gint32) "g_random_int_range")
    (macro g_random_double::gdouble () "g_random_double")
    (macro g_random_double_range::gdouble (gdouble gdouble) "g_random_double_range")
    (macro g_relation_new::GRelation* (gint) "g_relation_new")
    (macro g_relation_destroy::void (GRelation*) "g_relation_destroy")
    (macro g_relation_index::void (GRelation* gint GHashFunc GEqualFunc) "g_relation_index")
    (macro g_relation_insert::void (GRelation* . GRelation*) "g_relation_insert")
    (macro g_relation_delete::gint (GRelation* gconstpointer gint) "g_relation_delete")
    (macro g_relation_select::GTuples* (GRelation* gconstpointer gint) "g_relation_select")
    (macro g_relation_count::gint (GRelation* gconstpointer gint) "g_relation_count")
    (macro g_relation_exists::gboolean (GRelation* . GRelation*) "g_relation_exists")
    (macro g_relation_print::void (GRelation*) "g_relation_print")
    (macro g_tuples_destroy::void (GTuples*) "g_tuples_destroy")
    (macro g_tuples_index::gpointer (GTuples* gint gint) "g_tuples_index")
    (macro g_scanner_new::GScanner* (GScannerConfig*) "g_scanner_new")
    (macro g_scanner_destroy::void (GScanner*) "g_scanner_destroy")
    (macro g_scanner_input_file::void (GScanner* gint) "g_scanner_input_file")
    (macro g_scanner_sync_file_offset::void (GScanner*) "g_scanner_sync_file_offset")
    (macro g_scanner_input_text::void (GScanner* gchar* guint) "g_scanner_input_text")
    (macro g_scanner_get_next_token::GTokenType (GScanner*) "g_scanner_get_next_token")
    (macro g_scanner_peek_next_token::GTokenType (GScanner*) "g_scanner_peek_next_token")
    (macro g_scanner_cur_token::GTokenType (GScanner*) "g_scanner_cur_token")
    (macro g_scanner_cur_value::GTokenValue (GScanner*) "g_scanner_cur_value")
    (macro g_scanner_cur_line::guint (GScanner*) "g_scanner_cur_line")
    (macro g_scanner_cur_position::guint (GScanner*) "g_scanner_cur_position")
    (macro g_scanner_eof::gboolean (GScanner*) "g_scanner_eof")
    (macro g_scanner_set_scope::guint (GScanner* guint) "g_scanner_set_scope")
    (macro g_scanner_scope_add_symbol::void (GScanner* guint gchar* gpointer) "g_scanner_scope_add_symbol")
    (macro g_scanner_scope_remove_symbol::void (GScanner* guint gchar*) "g_scanner_scope_remove_symbol")
    (macro g_scanner_scope_lookup_symbol::gpointer (GScanner* guint gchar*) "g_scanner_scope_lookup_symbol")
    (macro g_scanner_scope_foreach_symbol::void (GScanner* guint GHFunc gpointer) "g_scanner_scope_foreach_symbol")
    (macro g_scanner_lookup_symbol::gpointer (GScanner* gchar*) "g_scanner_lookup_symbol")
    (macro g_scanner_unexp_token::void (GScanner* GTokenType gchar* gchar* gchar* gchar* gint) "g_scanner_unexp_token")
    (macro g_scanner_error::void (GScanner* gchar* . gchar*) "g_scanner_error")
    (macro g_scanner_warn::void (GScanner* gchar* . gchar*) "g_scanner_warn")
    (macro g_shell_error_quark::GQuark () "g_shell_error_quark")
    (macro g_shell_quote::gchar* (gchar*) "g_shell_quote")
    (macro g_shell_unquote::gchar* (gchar* GError**) "g_shell_unquote")
    (macro g_shell_parse_argv::gboolean (gchar* gint* gchar*** GError**) "g_shell_parse_argv")
    (macro g_spawn_error_quark::GQuark () "g_spawn_error_quark")
    (macro g_spawn_async::gboolean (gchar* gchar** gchar** GSpawnFlags GSpawnChildSetupFunc gpointer GPid* GError**) "g_spawn_async")
    (macro g_spawn_async_with_pipes::gboolean (gchar* gchar** gchar** GSpawnFlags GSpawnChildSetupFunc gpointer GPid* gint* gint* gint* GError**) "g_spawn_async_with_pipes")
    (macro g_spawn_sync::gboolean (gchar* gchar** gchar** GSpawnFlags GSpawnChildSetupFunc gpointer gchar** gchar** gint* GError**) "g_spawn_sync")
    (macro g_spawn_command_line_sync::gboolean (gchar* gchar** gchar** gint* GError**) "g_spawn_command_line_sync")
    (macro g_spawn_command_line_async::gboolean (gchar* GError**) "g_spawn_command_line_async")
    (macro g_spawn_close_pid::void (GPid) "g_spawn_close_pid")
    (macro g_ascii_tolower::gchar (gchar) "g_ascii_tolower")
    (macro g_ascii_toupper::gchar (gchar) "g_ascii_toupper")
    (macro g_ascii_digit_value::gint (gchar) "g_ascii_digit_value")
    (macro g_ascii_xdigit_value::gint (gchar) "g_ascii_xdigit_value")
    (macro g_strdelimit::gchar* (gchar* gchar* gchar) "g_strdelimit")
    (macro g_strcanon::gchar* (gchar* gchar* gchar) "g_strcanon")
    (macro g_strerror::gchar* (gint) "g_strerror")
    (macro g_strsignal::gchar* (gint) "g_strsignal")
    (macro g_strreverse::gchar* (gchar*) "g_strreverse")
    (macro g_strlcpy::gsize (gchar* gchar* gsize) "g_strlcpy")
    (macro g_strlcat::gsize (gchar* gchar* gsize) "g_strlcat")
    (macro g_strstr_len::gchar* (gchar* gssize gchar*) "g_strstr_len")
    (macro g_strrstr::gchar* (gchar* gchar*) "g_strrstr")
    (macro g_strrstr_len::gchar* (gchar* gssize gchar*) "g_strrstr_len")
    (macro g_str_has_suffix::gboolean (gchar* gchar*) "g_str_has_suffix")
    (macro g_str_has_prefix::gboolean (gchar* gchar*) "g_str_has_prefix")
    (macro g_strtod::gdouble (gchar* gchar**) "g_strtod")
    (macro g_ascii_strtod::gdouble (gchar* gchar**) "g_ascii_strtod")
    (macro g_ascii_strtoull::guint64 (gchar* gchar** guint) "g_ascii_strtoull")
    (macro g_ascii_dtostr::gchar* (gchar* gint gdouble) "g_ascii_dtostr")
    (macro g_ascii_formatd::gchar* (gchar* gint gchar* gdouble) "g_ascii_formatd")
    (macro g_strchug::gchar* (gchar*) "g_strchug")
    (macro g_strchomp::gchar* (gchar*) "g_strchomp")
    (macro g_ascii_strcasecmp::gint (gchar* gchar*) "g_ascii_strcasecmp")
    (macro g_ascii_strncasecmp::gint (gchar* gchar* gsize) "g_ascii_strncasecmp")
    (macro g_ascii_strdown::gchar* (gchar* gssize) "g_ascii_strdown")
    (macro g_ascii_strup::gchar* (gchar* gssize) "g_ascii_strup")
    (macro g_strcasecmp::gint (gchar* gchar*) "g_strcasecmp")
    (macro g_strncasecmp::gint (gchar* gchar* guint) "g_strncasecmp")
    (macro g_strdown::gchar* (gchar*) "g_strdown")
    (macro g_strup::gchar* (gchar*) "g_strup")
    (macro g_strdup::gchar* (gchar*) "g_strdup")
    (macro g_strdup_printf::gchar* (gchar* . gchar*) "g_strdup_printf")
    (macro g_strndup::gchar* (gchar* gsize) "g_strndup")
    (macro g_strnfill::gchar* (gsize gchar) "g_strnfill")
    (macro g_strconcat::gchar* (gchar* . gchar*) "g_strconcat")
    (macro g_strjoin::gchar* (gchar* . gchar*) "g_strjoin")
    (macro g_strcompress::gchar* (gchar*) "g_strcompress")
    (macro g_strescape::gchar* (gchar* gchar*) "g_strescape")
    (macro g_memdup::gpointer (gconstpointer guint) "g_memdup")
    (macro g_strsplit::gchar** (gchar* gchar* gint) "g_strsplit")
    (macro g_strsplit_set::gchar** (gchar* gchar* gint) "g_strsplit_set")
    (macro g_strjoinv::gchar* (gchar* gchar**) "g_strjoinv")
    (macro g_strfreev::void (gchar**) "g_strfreev")
    (macro g_strdupv::gchar** (gchar**) "g_strdupv")
    (macro g_strv_length::guint (gchar**) "g_strv_length")
    (macro g_stpcpy::gchar* (gchar* string) "g_stpcpy")
    (macro g_strip_context::gchar* (gchar* gchar*) "g_strip_context")
    (macro g_thread_pool_new::GThreadPool* (GFunc gpointer gint gboolean GError**) "g_thread_pool_new")
    (macro g_thread_pool_push::void (GThreadPool* gpointer GError**) "g_thread_pool_push")
    (macro g_thread_pool_set_max_threads::void (GThreadPool* gint GError**) "g_thread_pool_set_max_threads")
    (macro g_thread_pool_get_max_threads::gint (GThreadPool*) "g_thread_pool_get_max_threads")
    (macro g_thread_pool_get_num_threads::guint (GThreadPool*) "g_thread_pool_get_num_threads")
    (macro g_thread_pool_unprocessed::guint (GThreadPool*) "g_thread_pool_unprocessed")
    (macro g_thread_pool_free::void (GThreadPool* gboolean gboolean) "g_thread_pool_free")
    (macro g_thread_pool_set_max_unused_threads::void (gint) "g_thread_pool_set_max_unused_threads")
    (macro g_thread_pool_get_max_unused_threads::gint () "g_thread_pool_get_max_unused_threads")
    (macro g_thread_pool_get_num_unused_threads::guint () "g_thread_pool_get_num_unused_threads")
    (macro g_thread_pool_stop_unused_threads::void () "g_thread_pool_stop_unused_threads")
    (macro g_timer_new::GTimer* () "g_timer_new")
    (macro g_timer_destroy::void (GTimer*) "g_timer_destroy")
    (macro g_timer_start::void (GTimer*) "g_timer_start")
    (macro g_timer_stop::void (GTimer*) "g_timer_stop")
    (macro g_timer_reset::void (GTimer*) "g_timer_reset")
    (macro g_timer_continue::void (GTimer*) "g_timer_continue")
    (macro g_timer_elapsed::gdouble (GTimer* gulong*) "g_timer_elapsed")
    (macro g_usleep::void (gulong) "g_usleep")
    (macro g_time_val_add::void (GTimeVal* glong) "g_time_val_add")
    (macro g_tree_new::GTree* (GCompareFunc) "g_tree_new")
    (macro g_tree_new_with_data::GTree* (GCompareDataFunc gpointer) "g_tree_new_with_data")
    (macro g_tree_new_full::GTree* (GCompareDataFunc gpointer GDestroyNotify GDestroyNotify) "g_tree_new_full")
    (macro g_tree_destroy::void (GTree*) "g_tree_destroy")
    (macro g_tree_insert::void (GTree* gpointer gpointer) "g_tree_insert")
    (macro g_tree_replace::void (GTree* gpointer gpointer) "g_tree_replace")
    (macro g_tree_remove::void (GTree* gconstpointer) "g_tree_remove")
    (macro g_tree_steal::void (GTree* gconstpointer) "g_tree_steal")
    (macro g_tree_lookup::gpointer (GTree* gconstpointer) "g_tree_lookup")
    (macro g_tree_lookup_extended::gboolean (GTree* gconstpointer gpointer* gpointer*) "g_tree_lookup_extended")
    (macro g_tree_foreach::void (GTree* GTraverseFunc gpointer) "g_tree_foreach")
    (macro g_tree_traverse::void (GTree* GTraverseFunc GTraverseType gpointer) "g_tree_traverse")
    (macro g_tree_search::gpointer (GTree* GCompareFunc gconstpointer) "g_tree_search")
    (macro g_tree_height::gint (GTree*) "g_tree_height")
    (macro g_tree_nnodes::gint (GTree*) "g_tree_nnodes")
    (macro pango_coverage_new::PangoCoverage* () "pango_coverage_new")
    (macro pango_coverage_ref::PangoCoverage* (PangoCoverage*) "pango_coverage_ref")
    (macro pango_coverage_unref::void (PangoCoverage*) "pango_coverage_unref")
    (macro pango_coverage_copy::PangoCoverage* (PangoCoverage*) "pango_coverage_copy")
    (macro pango_coverage_get::PangoCoverageLevel (PangoCoverage* int) "pango_coverage_get")
    (macro pango_coverage_set::void (PangoCoverage* int PangoCoverageLevel) "pango_coverage_set")
    (macro pango_coverage_max::void (PangoCoverage* PangoCoverage*) "pango_coverage_max")
    (macro pango_coverage_to_bytes::void (PangoCoverage* guchar** int*) "pango_coverage_to_bytes")
    (macro pango_coverage_from_bytes::PangoCoverage* (guchar* int) "pango_coverage_from_bytes")
    (macro g_type_init::void () "g_type_init")
    (macro g_type_init_with_debug_flags::void (GTypeDebugFlags) "g_type_init_with_debug_flags")
    (macro g_type_name::gchar* (GType) "g_type_name")
    (macro g_type_qname::GQuark (GType) "g_type_qname")
    (macro g_type_from_name::GType (gchar*) "g_type_from_name")
    (macro g_type_parent::GType (GType) "g_type_parent")
    (macro g_type_depth::guint (GType) "g_type_depth")
    (macro g_type_next_base::GType (GType GType) "g_type_next_base")
    (macro g_type_is_a::gboolean (GType GType) "g_type_is_a")
    (macro g_type_class_ref::gpointer (GType) "g_type_class_ref")
    (macro g_type_class_peek::gpointer (GType) "g_type_class_peek")
    (macro g_type_class_peek_static::gpointer (GType) "g_type_class_peek_static")
    (macro g_type_class_unref::void (gpointer) "g_type_class_unref")
    (macro g_type_class_peek_parent::gpointer (gpointer) "g_type_class_peek_parent")
    (macro g_type_interface_peek::gpointer (gpointer GType) "g_type_interface_peek")
    (macro g_type_interface_peek_parent::gpointer (gpointer) "g_type_interface_peek_parent")
    (macro g_type_default_interface_ref::gpointer (GType) "g_type_default_interface_ref")
    (macro g_type_default_interface_peek::gpointer (GType) "g_type_default_interface_peek")
    (macro g_type_default_interface_unref::void (gpointer) "g_type_default_interface_unref")
    (macro g_type_children::GType* (GType guint*) "g_type_children")
    (macro g_type_interfaces::GType* (GType guint*) "g_type_interfaces")
    (macro g_type_set_qdata::void (GType GQuark gpointer) "g_type_set_qdata")
    (macro g_type_get_qdata::gpointer (GType GQuark) "g_type_get_qdata")
    (macro g_type_query::void (GType GTypeQuery*) "g_type_query")
    (macro g_type_register_static::GType (GType gchar* GTypeInfo* GTypeFlags) "g_type_register_static")
    (macro g_type_register_dynamic::GType (GType gchar* GTypePlugin* GTypeFlags) "g_type_register_dynamic")
    (macro g_type_register_fundamental::GType (GType gchar* GTypeInfo* GTypeFundamentalInfo* GTypeFlags) "g_type_register_fundamental")
    (macro g_type_add_interface_static::void (GType GType GInterfaceInfo*) "g_type_add_interface_static")
    (macro g_type_add_interface_dynamic::void (GType GType GTypePlugin*) "g_type_add_interface_dynamic")
    (macro g_type_interface_add_prerequisite::void (GType GType) "g_type_interface_add_prerequisite")
    (macro g_type_interface_prerequisites::GType* (GType guint*) "g_type_interface_prerequisites")
    (macro g_type_class_add_private::void (gpointer gsize) "g_type_class_add_private")
    (macro g_type_instance_get_private::gpointer (GTypeInstance* GType) "g_type_instance_get_private")
    (macro g_type_get_plugin::GTypePlugin* (GType) "g_type_get_plugin")
    (macro g_type_interface_get_plugin::GTypePlugin* (GType GType) "g_type_interface_get_plugin")
    (macro g_type_fundamental_next::GType () "g_type_fundamental_next")
    (macro g_type_fundamental::GType (GType) "g_type_fundamental")
    (macro g_type_create_instance::GTypeInstance* (GType) "g_type_create_instance")
    (macro g_type_free_instance::void (GTypeInstance*) "g_type_free_instance")
    (macro g_type_add_class_cache_func::void (gpointer GTypeClassCacheFunc) "g_type_add_class_cache_func")
    (macro g_type_remove_class_cache_func::void (gpointer GTypeClassCacheFunc) "g_type_remove_class_cache_func")
    (macro g_type_class_unref_uncached::void (gpointer) "g_type_class_unref_uncached")
    (macro g_type_add_interface_check::void (gpointer GTypeInterfaceCheckFunc) "g_type_add_interface_check")
    (macro g_type_remove_interface_check::void (gpointer GTypeInterfaceCheckFunc) "g_type_remove_interface_check")
    (macro g_type_value_table_peek::GTypeValueTable* (GType) "g_type_value_table_peek")
    (macro g_type_check_instance::gboolean (GTypeInstance*) "g_type_check_instance")
    (macro g_type_check_instance_cast::GTypeInstance* (GTypeInstance* GType) "g_type_check_instance_cast")
    (macro g_type_check_instance_is_a::gboolean (GTypeInstance* GType) "g_type_check_instance_is_a")
    (macro g_type_check_class_cast::GTypeClass* (GTypeClass* GType) "g_type_check_class_cast")
    (macro g_type_check_class_is_a::gboolean (GTypeClass* GType) "g_type_check_class_is_a")
    (macro g_type_check_is_value_type::gboolean (GType) "g_type_check_is_value_type")
    (macro g_type_check_value::gboolean (GValue*) "g_type_check_value")
    (macro g_type_check_value_holds::gboolean (GValue* GType) "g_type_check_value_holds")
    (macro g_type_test_flags::gboolean (GType guint) "g_type_test_flags")
    (macro g_type_name_from_instance::gchar* (GTypeInstance*) "g_type_name_from_instance")
    (macro g_type_name_from_class::gchar* (GTypeClass*) "g_type_name_from_class")
    (macro g_value_c_init::void () "g_value_c_init")
    (macro g_value_types_init::void () "g_value_types_init")
    (macro g_enum_types_init::void () "g_enum_types_init")
    (macro g_param_type_init::void () "g_param_type_init")
    (macro g_boxed_type_init::void () "g_boxed_type_init")
    (macro g_object_type_init::void () "g_object_type_init")
    (macro g_param_spec_types_init::void () "g_param_spec_types_init")
    (macro g_value_transforms_init::void () "g_value_transforms_init")
    (macro g_signal_init::void () "g_signal_init")
    (macro g_boxed_copy::gpointer (GType gconstpointer) "g_boxed_copy")
    (macro g_boxed_free::void (GType gpointer) "g_boxed_free")
    (macro g_value_set_boxed::void (GValue* gconstpointer) "g_value_set_boxed")
    (macro g_value_set_static_boxed::void (GValue* gconstpointer) "g_value_set_static_boxed")
    (macro g_value_get_boxed::gpointer (GValue*) "g_value_get_boxed")
    (macro g_value_dup_boxed::gpointer (GValue*) "g_value_dup_boxed")
    (macro g_boxed_type_register_static::GType (gchar* GBoxedCopyFunc GBoxedFreeFunc) "g_boxed_type_register_static")
    (macro g_value_take_boxed::void (GValue* gconstpointer) "g_value_take_boxed")
    (macro g_value_set_boxed_take_ownership::void (GValue* gconstpointer) "g_value_set_boxed_take_ownership")
    (macro g_closure_get_type::GType () "g_closure_get_type")
    (macro g_value_get_type::GType () "g_value_get_type")
    (macro g_value_array_get_type::GType () "g_value_array_get_type")
    (macro g_strv_get_type::GType () "g_strv_get_type")
    (macro g_gstring_get_type::GType () "g_gstring_get_type")
    (macro g_enum_get_value::GEnumValue* (GEnumClass* gint) "g_enum_get_value")
    (macro g_enum_get_value_by_name::GEnumValue* (GEnumClass* gchar*) "g_enum_get_value_by_name")
    (macro g_enum_get_value_by_nick::GEnumValue* (GEnumClass* gchar*) "g_enum_get_value_by_nick")
    (macro g_flags_get_first_value::GFlagsValue* (GFlagsClass* guint) "g_flags_get_first_value")
    (macro g_flags_get_value_by_name::GFlagsValue* (GFlagsClass* gchar*) "g_flags_get_value_by_name")
    (macro g_flags_get_value_by_nick::GFlagsValue* (GFlagsClass* gchar*) "g_flags_get_value_by_nick")
    (macro g_value_set_enum::void (GValue* gint) "g_value_set_enum")
    (macro g_value_get_enum::gint (GValue*) "g_value_get_enum")
    (macro g_value_set_flags::void (GValue* guint) "g_value_set_flags")
    (macro g_value_get_flags::guint (GValue*) "g_value_get_flags")
    (macro g_enum_register_static::GType (gchar* GEnumValue*) "g_enum_register_static")
    (macro g_flags_register_static::GType (gchar* GFlagsValue*) "g_flags_register_static")
    (macro g_enum_complete_type_info::void (GType GTypeInfo* GEnumValue*) "g_enum_complete_type_info")
    (macro g_flags_complete_type_info::void (GType GTypeInfo* GFlagsValue*) "g_flags_complete_type_info")
    (macro g_value_init::GValue* (GValue* GType) "g_value_init")
    (macro g_value_copy::void (GValue* GValue*) "g_value_copy")
    (macro g_value_reset::GValue* (GValue*) "g_value_reset")
    (macro g_value_unset::void (GValue*) "g_value_unset")
    (macro g_value_set_instance::void (GValue* gpointer) "g_value_set_instance")
    (macro g_value_fits_pointer::gboolean (GValue*) "g_value_fits_pointer")
    (macro g_value_peek_pointer::gpointer (GValue*) "g_value_peek_pointer")
    (macro g_value_type_compatible::gboolean (GType GType) "g_value_type_compatible")
    (macro g_value_type_transformable::gboolean (GType GType) "g_value_type_transformable")
    (macro g_value_transform::gboolean (GValue* GValue*) "g_value_transform")
    (macro g_value_register_transform_func::void (GType GType GValueTransform) "g_value_register_transform_func")
    (macro g_param_spec_ref::GParamSpec* (GParamSpec*) "g_param_spec_ref")
    (macro g_param_spec_unref::void (GParamSpec*) "g_param_spec_unref")
    (macro g_param_spec_sink::void (GParamSpec*) "g_param_spec_sink")
    (macro g_param_spec_get_qdata::gpointer (GParamSpec* GQuark) "g_param_spec_get_qdata")
    (macro g_param_spec_set_qdata::void (GParamSpec* GQuark gpointer) "g_param_spec_set_qdata")
    (macro g_param_spec_set_qdata_full::void (GParamSpec* GQuark gpointer GDestroyNotify) "g_param_spec_set_qdata_full")
    (macro g_param_spec_steal_qdata::gpointer (GParamSpec* GQuark) "g_param_spec_steal_qdata")
    (macro g_param_spec_get_redirect_target::GParamSpec* (GParamSpec*) "g_param_spec_get_redirect_target")
    (macro g_param_value_set_default::void (GParamSpec* GValue*) "g_param_value_set_default")
    (macro g_param_value_defaults::gboolean (GParamSpec* GValue*) "g_param_value_defaults")
    (macro g_param_value_validate::gboolean (GParamSpec* GValue*) "g_param_value_validate")
    (macro g_param_value_convert::gboolean (GParamSpec* GValue* GValue* gboolean) "g_param_value_convert")
    (macro g_param_values_cmp::gint (GParamSpec* GValue* GValue*) "g_param_values_cmp")
    (macro g_param_spec_get_name::gchar* (GParamSpec*) "g_param_spec_get_name")
    (macro g_param_spec_get_nick::gchar* (GParamSpec*) "g_param_spec_get_nick")
    (macro g_param_spec_get_blurb::gchar* (GParamSpec*) "g_param_spec_get_blurb")
    (macro g_value_set_param::void (GValue* GParamSpec*) "g_value_set_param")
    (macro g_value_get_param::GParamSpec* (GValue*) "g_value_get_param")
    (macro g_value_dup_param::GParamSpec* (GValue*) "g_value_dup_param")
    (macro g_value_take_param::void (GValue* GParamSpec*) "g_value_take_param")
    (macro g_value_set_param_take_ownership::void (GValue* GParamSpec*) "g_value_set_param_take_ownership")
    (macro g_param_type_register_static::GType (gchar* GParamSpecTypeInfo*) "g_param_type_register_static")
    (macro _g_param_type_register_static_constant::GType (gchar* GParamSpecTypeInfo* GType) "_g_param_type_register_static_constant")
    (macro g_param_spec_internal::gpointer (GType gchar* gchar* gchar* GParamFlags) "g_param_spec_internal")
    (macro g_param_spec_pool_new::GParamSpecPool* (gboolean) "g_param_spec_pool_new")
    (macro g_param_spec_pool_insert::void (GParamSpecPool* GParamSpec* GType) "g_param_spec_pool_insert")
    (macro g_param_spec_pool_remove::void (GParamSpecPool* GParamSpec*) "g_param_spec_pool_remove")
    (macro g_param_spec_pool_lookup::GParamSpec* (GParamSpecPool* gchar* GType gboolean) "g_param_spec_pool_lookup")
    (macro g_param_spec_pool_list_owned::GList* (GParamSpecPool* GType) "g_param_spec_pool_list_owned")
    (macro g_param_spec_pool_list::GParamSpec** (GParamSpecPool* GType guint*) "g_param_spec_pool_list")
    (macro g_cclosure_new::GClosure* (GCallback gpointer GClosureNotify) "g_cclosure_new")
    (macro g_cclosure_new_swap::GClosure* (GCallback gpointer GClosureNotify) "g_cclosure_new_swap")
    (macro g_signal_type_cclosure_new::GClosure* (GType guint) "g_signal_type_cclosure_new")
    (macro g_closure_ref::GClosure* (GClosure*) "g_closure_ref")
    (macro g_closure_sink::void (GClosure*) "g_closure_sink")
    (macro g_closure_unref::void (GClosure*) "g_closure_unref")
    (macro g_closure_new_simple::GClosure* (guint gpointer) "g_closure_new_simple")
    (macro g_closure_add_finalize_notifier::void (GClosure* gpointer GClosureNotify) "g_closure_add_finalize_notifier")
    (macro g_closure_remove_finalize_notifier::void (GClosure* gpointer GClosureNotify) "g_closure_remove_finalize_notifier")
    (macro g_closure_add_invalidate_notifier::void (GClosure* gpointer GClosureNotify) "g_closure_add_invalidate_notifier")
    (macro g_closure_remove_invalidate_notifier::void (GClosure* gpointer GClosureNotify) "g_closure_remove_invalidate_notifier")
    (macro g_closure_add_marshal_guards::void (GClosure* gpointer GClosureNotify gpointer GClosureNotify) "g_closure_add_marshal_guards")
    (macro g_closure_set_marshal::void (GClosure* GClosureMarshal) "g_closure_set_marshal")
    (macro g_closure_set_meta_marshal::void (GClosure* gpointer GClosureMarshal) "g_closure_set_meta_marshal")
    (macro g_closure_invalidate::void (GClosure*) "g_closure_invalidate")
    (macro g_closure_invoke::void (GClosure* GValue* guint GValue* gpointer) "g_closure_invoke")
    (macro g_cclosure_marshal_VOID__VOID::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_VOID__VOID")
    (macro g_cclosure_marshal_VOID__BOOLEAN::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_VOID__BOOLEAN")
    (macro g_cclosure_marshal_VOID__CHAR::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_VOID__CHAR")
    (macro g_cclosure_marshal_VOID__UCHAR::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_VOID__UCHAR")
    (macro g_cclosure_marshal_VOID__INT::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_VOID__INT")
    (macro g_cclosure_marshal_VOID__UINT::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_VOID__UINT")
    (macro g_cclosure_marshal_VOID__LONG::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_VOID__LONG")
    (macro g_cclosure_marshal_VOID__ULONG::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_VOID__ULONG")
    (macro g_cclosure_marshal_VOID__ENUM::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_VOID__ENUM")
    (macro g_cclosure_marshal_VOID__FLAGS::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_VOID__FLAGS")
    (macro g_cclosure_marshal_VOID__FLOAT::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_VOID__FLOAT")
    (macro g_cclosure_marshal_VOID__DOUBLE::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_VOID__DOUBLE")
    (macro g_cclosure_marshal_VOID__STRING::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_VOID__STRING")
    (macro g_cclosure_marshal_VOID__PARAM::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_VOID__PARAM")
    (macro g_cclosure_marshal_VOID__BOXED::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_VOID__BOXED")
    (macro g_cclosure_marshal_VOID__POINTER::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_VOID__POINTER")
    (macro g_cclosure_marshal_VOID__OBJECT::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_VOID__OBJECT")
    (macro g_cclosure_marshal_VOID__UINT_POINTER::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_VOID__UINT_POINTER")
    (macro g_cclosure_marshal_BOOLEAN__FLAGS::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_BOOLEAN__FLAGS")
    (macro g_cclosure_marshal_STRING__OBJECT_POINTER::void (GClosure* GValue* guint GValue* gpointer gpointer) "g_cclosure_marshal_STRING__OBJECT_POINTER")
    (macro g_signal_newv::guint (gchar* GType GSignalFlags GClosure* GSignalAccumulator gpointer GSignalCMarshaller GType guint GType*) "g_signal_newv")
    (macro g_signal_new::guint (gchar* GType GSignalFlags guint GSignalAccumulator gpointer GSignalCMarshaller GType guint . guint) "g_signal_new")
    (macro g_signal_emitv::void (GValue* guint GQuark GValue*) "g_signal_emitv")
    (macro g_signal_emit::void (gpointer guint GQuark . GQuark) "g_signal_emit")
    (macro g_signal_emit_by_name::void (gpointer gchar* . gchar*) "g_signal_emit_by_name")
    (macro g_signal_lookup::guint (gchar* GType) "g_signal_lookup")
    (macro g_signal_name::gchar* (guint) "g_signal_name")
    (macro g_signal_query::void (guint GSignalQuery*) "g_signal_query")
    (macro g_signal_list_ids::guint* (GType guint*) "g_signal_list_ids")
    (macro g_signal_parse_name::gboolean (gchar* GType guint* GQuark* gboolean) "g_signal_parse_name")
    (macro g_signal_get_invocation_hint::GSignalInvocationHint* (gpointer) "g_signal_get_invocation_hint")
    (macro g_signal_stop_emission::void (gpointer guint GQuark) "g_signal_stop_emission")
    (macro g_signal_stop_emission_by_name::void (gpointer gchar*) "g_signal_stop_emission_by_name")
    (macro g_signal_add_emission_hook::gulong (guint GQuark GSignalEmissionHook gpointer GDestroyNotify) "g_signal_add_emission_hook")
    (macro g_signal_remove_emission_hook::void (guint gulong) "g_signal_remove_emission_hook")
    (macro g_signal_has_handler_pending::gboolean (gpointer guint GQuark gboolean) "g_signal_has_handler_pending")
    (macro g_signal_connect_closure_by_id::gulong (gpointer guint GQuark GClosure* gboolean) "g_signal_connect_closure_by_id")
    (macro g_signal_connect_closure::gulong (gpointer gchar* GClosure* gboolean) "g_signal_connect_closure")
    (macro g_signal_connect_data::gulong (gpointer gchar* GCallback gpointer GClosureNotify GConnectFlags) "g_signal_connect_data")
    (macro g_signal_handler_block::void (gpointer gulong) "g_signal_handler_block")
    (macro g_signal_handler_unblock::void (gpointer gulong) "g_signal_handler_unblock")
    (macro g_signal_handler_disconnect::void (gpointer gulong) "g_signal_handler_disconnect")
    (macro g_signal_handler_is_connected::gboolean (gpointer gulong) "g_signal_handler_is_connected")
    (macro g_signal_handler_find::gulong (gpointer GSignalMatchType guint GQuark GClosure* gpointer gpointer) "g_signal_handler_find")
    (macro g_signal_handlers_block_matched::guint (gpointer GSignalMatchType guint GQuark GClosure* gpointer gpointer) "g_signal_handlers_block_matched")
    (macro g_signal_handlers_unblock_matched::guint (gpointer GSignalMatchType guint GQuark GClosure* gpointer gpointer) "g_signal_handlers_unblock_matched")
    (macro g_signal_handlers_disconnect_matched::guint (gpointer GSignalMatchType guint GQuark GClosure* gpointer gpointer) "g_signal_handlers_disconnect_matched")
    (macro g_signal_override_class_closure::void (guint GType GClosure*) "g_signal_override_class_closure")
    (macro g_signal_chain_from_overridden::void (GValue* GValue*) "g_signal_chain_from_overridden")
    (macro g_signal_accumulator_true_handled::gboolean (GSignalInvocationHint* GValue* GValue* gpointer) "g_signal_accumulator_true_handled")
    (macro g_signal_handlers_destroy::void (gpointer) "g_signal_handlers_destroy")
    (macro _g_signals_destroy::void (GType) "_g_signals_destroy")
    (macro g_object_class_install_property::void (GObjectClass* guint GParamSpec*) "g_object_class_install_property")
    (macro g_object_class_find_property::GParamSpec* (GObjectClass* gchar*) "g_object_class_find_property")
    (macro g_object_class_list_properties::GParamSpec** (GObjectClass* guint*) "g_object_class_list_properties")
    (macro g_object_class_override_property::void (GObjectClass* guint gchar*) "g_object_class_override_property")
    (macro g_object_interface_install_property::void (gpointer GParamSpec*) "g_object_interface_install_property")
    (macro g_object_interface_find_property::GParamSpec* (gpointer gchar*) "g_object_interface_find_property")
    (macro g_object_interface_list_properties::GParamSpec** (gpointer guint*) "g_object_interface_list_properties")
    (macro g_object_new::gpointer (GType gchar* . gchar*) "g_object_new")
    (macro g_object_newv::gpointer (GType guint GParameter*) "g_object_newv")
    (macro g_object_set::void (gpointer gchar* . gchar*) "g_object_set")
    (macro g_object_get::void (gpointer gchar* . gchar*) "g_object_get")
    (macro g_object_connect::gpointer (gpointer gchar* . gchar*) "g_object_connect")
    (macro g_object_disconnect::void (gpointer gchar* . gchar*) "g_object_disconnect")
    (macro g_object_set_property::void (GObject* gchar* GValue*) "g_object_set_property")
    (macro g_object_get_property::void (GObject* gchar* GValue*) "g_object_get_property")
    (macro g_object_freeze_notify::void (GObject*) "g_object_freeze_notify")
    (macro g_object_notify::void (GObject* gchar*) "g_object_notify")
    (macro g_object_thaw_notify::void (GObject*) "g_object_thaw_notify")
    (macro g_object_ref::gpointer (gpointer) "g_object_ref")
    (macro g_object_unref::void (gpointer) "g_object_unref")
    (macro g_object_weak_ref::void (GObject* GWeakNotify gpointer) "g_object_weak_ref")
    (macro g_object_weak_unref::void (GObject* GWeakNotify gpointer) "g_object_weak_unref")
    (macro g_object_add_weak_pointer::void (GObject* gpointer*) "g_object_add_weak_pointer")
    (macro g_object_remove_weak_pointer::void (GObject* gpointer*) "g_object_remove_weak_pointer")
    (macro g_object_get_qdata::gpointer (GObject* GQuark) "g_object_get_qdata")
    (macro g_object_set_qdata::void (GObject* GQuark gpointer) "g_object_set_qdata")
    (macro g_object_set_qdata_full::void (GObject* GQuark gpointer GDestroyNotify) "g_object_set_qdata_full")
    (macro g_object_steal_qdata::gpointer (GObject* GQuark) "g_object_steal_qdata")
    (macro g_object_get_data::gpointer (GObject* gchar*) "g_object_get_data")
    (macro g_object_set_data::void (GObject* gchar* gpointer) "g_object_set_data")
    (macro g_object_set_data_full::void (GObject* gchar* gpointer GDestroyNotify) "g_object_set_data_full")
    (macro g_object_steal_data::gpointer (GObject* gchar*) "g_object_steal_data")
    (macro g_object_watch_closure::void (GObject* GClosure*) "g_object_watch_closure")
    (macro g_cclosure_new_object::GClosure* (GCallback GObject*) "g_cclosure_new_object")
    (macro g_cclosure_new_object_swap::GClosure* (GCallback GObject*) "g_cclosure_new_object_swap")
    (macro g_closure_new_object::GClosure* (guint GObject*) "g_closure_new_object")
    (macro g_value_set_object::void (GValue* gpointer) "g_value_set_object")
    (macro g_value_get_object::gpointer (GValue*) "g_value_get_object")
    (macro g_value_dup_object::GObject* (GValue*) "g_value_dup_object")
    (macro g_signal_connect_object::gulong (gpointer gchar* GCallback gpointer GConnectFlags) "g_signal_connect_object")
    (macro g_object_run_dispose::void (GObject*) "g_object_run_dispose")
    (macro g_value_take_object::void (GValue* gpointer) "g_value_take_object")
    (macro g_value_set_object_take_ownership::void (GValue* gpointer) "g_value_set_object_take_ownership")
    (macro g_param_spec_char::GParamSpec* (gchar* gchar* gchar* gint8 gint8 gint8 GParamFlags) "g_param_spec_char")
    (macro g_param_spec_uchar::GParamSpec* (gchar* gchar* gchar* guint8 guint8 guint8 GParamFlags) "g_param_spec_uchar")
    (macro g_param_spec_boolean::GParamSpec* (gchar* gchar* gchar* gboolean GParamFlags) "g_param_spec_boolean")
    (macro g_param_spec_int::GParamSpec* (gchar* gchar* gchar* gint gint gint GParamFlags) "g_param_spec_int")
    (macro g_param_spec_uint::GParamSpec* (gchar* gchar* gchar* guint guint guint GParamFlags) "g_param_spec_uint")
    (macro g_param_spec_long::GParamSpec* (gchar* gchar* gchar* glong glong glong GParamFlags) "g_param_spec_long")
    (macro g_param_spec_ulong::GParamSpec* (gchar* gchar* gchar* gulong gulong gulong GParamFlags) "g_param_spec_ulong")
    (macro g_param_spec_int64::GParamSpec* (gchar* gchar* gchar* gint64 gint64 gint64 GParamFlags) "g_param_spec_int64")
    (macro g_param_spec_uint64::GParamSpec* (gchar* gchar* gchar* guint64 guint64 guint64 GParamFlags) "g_param_spec_uint64")
    (macro g_param_spec_unichar::GParamSpec* (gchar* gchar* gchar* gunichar GParamFlags) "g_param_spec_unichar")
    (macro g_param_spec_enum::GParamSpec* (gchar* gchar* gchar* GType gint GParamFlags) "g_param_spec_enum")
    (macro g_param_spec_flags::GParamSpec* (gchar* gchar* gchar* GType guint GParamFlags) "g_param_spec_flags")
    (macro g_param_spec_float::GParamSpec* (gchar* gchar* gchar* gfloat gfloat gfloat GParamFlags) "g_param_spec_float")
    (macro g_param_spec_double::GParamSpec* (gchar* gchar* gchar* gdouble gdouble gdouble GParamFlags) "g_param_spec_double")
    (macro g_param_spec_string::GParamSpec* (gchar* gchar* gchar* gchar* GParamFlags) "g_param_spec_string")
    (macro g_param_spec_param::GParamSpec* (gchar* gchar* gchar* GType GParamFlags) "g_param_spec_param")
    (macro g_param_spec_boxed::GParamSpec* (gchar* gchar* gchar* GType GParamFlags) "g_param_spec_boxed")
    (macro g_param_spec_pointer::GParamSpec* (gchar* gchar* gchar* GParamFlags) "g_param_spec_pointer")
    (macro g_param_spec_value_array::GParamSpec* (gchar* gchar* gchar* GParamSpec* GParamFlags) "g_param_spec_value_array")
    (macro g_param_spec_object::GParamSpec* (gchar* gchar* gchar* GType GParamFlags) "g_param_spec_object")
    (macro g_param_spec_override::GParamSpec* (gchar* GParamSpec*) "g_param_spec_override")
    (macro g_source_set_closure::void (GSource* GClosure*) "g_source_set_closure")
    (macro g_io_channel_get_type::GType () "g_io_channel_get_type")
    (macro g_io_condition_get_type::GType () "g_io_condition_get_type")
    (macro g_type_module_get_type::GType () "g_type_module_get_type")
    (macro g_type_module_use::gboolean (GTypeModule*) "g_type_module_use")
    (macro g_type_module_unuse::void (GTypeModule*) "g_type_module_unuse")
    (macro g_type_module_set_name::void (GTypeModule* gchar*) "g_type_module_set_name")
    (macro g_type_module_register_type::GType (GTypeModule* GType gchar* GTypeInfo* GTypeFlags) "g_type_module_register_type")
    (macro g_type_module_add_interface::void (GTypeModule* GType GType GInterfaceInfo*) "g_type_module_add_interface")
    (macro g_type_module_register_enum::GType (GTypeModule* gchar* GEnumValue*) "g_type_module_register_enum")
    (macro g_type_module_register_flags::GType (GTypeModule* gchar* GFlagsValue*) "g_type_module_register_flags")
    (macro g_type_plugin_get_type::GType () "g_type_plugin_get_type")
    (macro g_type_plugin_use::void (GTypePlugin*) "g_type_plugin_use")
    (macro g_type_plugin_unuse::void (GTypePlugin*) "g_type_plugin_unuse")
    (macro g_type_plugin_complete_type_info::void (GTypePlugin* GType GTypeInfo* GTypeValueTable*) "g_type_plugin_complete_type_info")
    (macro g_type_plugin_complete_interface_info::void (GTypePlugin* GType GType GInterfaceInfo*) "g_type_plugin_complete_interface_info")
    (macro g_value_array_get_nth::GValue* (GValueArray* guint) "g_value_array_get_nth")
    (macro g_value_array_new::GValueArray* (guint) "g_value_array_new")
    (macro g_value_array_free::void (GValueArray*) "g_value_array_free")
    (macro g_value_array_copy::GValueArray* (GValueArray*) "g_value_array_copy")
    (macro g_value_array_prepend::GValueArray* (GValueArray* GValue*) "g_value_array_prepend")
    (macro g_value_array_append::GValueArray* (GValueArray* GValue*) "g_value_array_append")
    (macro g_value_array_insert::GValueArray* (GValueArray* guint GValue*) "g_value_array_insert")
    (macro g_value_array_remove::GValueArray* (GValueArray* guint) "g_value_array_remove")
    (macro g_value_array_sort::GValueArray* (GValueArray* GCompareFunc) "g_value_array_sort")
    (macro g_value_array_sort_with_data::GValueArray* (GValueArray* GCompareDataFunc gpointer) "g_value_array_sort_with_data")
    (macro g_value_set_char::void (GValue* gchar) "g_value_set_char")
    (macro g_value_get_char::gchar (GValue*) "g_value_get_char")
    (macro g_value_set_uchar::void (GValue* guchar) "g_value_set_uchar")
    (macro g_value_get_uchar::guchar (GValue*) "g_value_get_uchar")
    (macro g_value_set_boolean::void (GValue* gboolean) "g_value_set_boolean")
    (macro g_value_get_boolean::gboolean (GValue*) "g_value_get_boolean")
    (macro g_value_set_int::void (GValue* gint) "g_value_set_int")
    (macro g_value_get_int::gint (GValue*) "g_value_get_int")
    (macro g_value_set_uint::void (GValue* guint) "g_value_set_uint")
    (macro g_value_get_uint::guint (GValue*) "g_value_get_uint")
    (macro g_value_set_long::void (GValue* glong) "g_value_set_long")
    (macro g_value_get_long::glong (GValue*) "g_value_get_long")
    (macro g_value_set_ulong::void (GValue* gulong) "g_value_set_ulong")
    (macro g_value_get_ulong::gulong (GValue*) "g_value_get_ulong")
    (macro g_value_set_int64::void (GValue* gint64) "g_value_set_int64")
    (macro g_value_get_int64::gint64 (GValue*) "g_value_get_int64")
    (macro g_value_set_uint64::void (GValue* guint64) "g_value_set_uint64")
    (macro g_value_get_uint64::guint64 (GValue*) "g_value_get_uint64")
    (macro g_value_set_float::void (GValue* gfloat) "g_value_set_float")
    (macro g_value_get_float::gfloat (GValue*) "g_value_get_float")
    (macro g_value_set_double::void (GValue* gdouble) "g_value_set_double")
    (macro g_value_get_double::gdouble (GValue*) "g_value_get_double")
    (macro g_value_set_string::void (GValue* gchar*) "g_value_set_string")
    (macro g_value_set_static_string::void (GValue* gchar*) "g_value_set_static_string")
    (macro g_value_get_string::gchar* (GValue*) "g_value_get_string")
    (macro g_value_dup_string::gchar* (GValue*) "g_value_dup_string")
    (macro g_value_set_pointer::void (GValue* gpointer) "g_value_set_pointer")
    (macro g_value_get_pointer::gpointer (GValue*) "g_value_get_pointer")
    (macro g_pointer_type_register_static::GType (gchar*) "g_pointer_type_register_static")
    (macro g_strdup_value_contents::gchar* (GValue*) "g_strdup_value_contents")
    (macro g_value_take_string::void (GValue* gchar*) "g_value_take_string")
    (macro g_value_set_string_take_ownership::void (GValue* gchar*) "g_value_set_string_take_ownership")
    (macro pango_matrix_get_type::GType () "pango_matrix_get_type")
    (macro pango_matrix_copy::PangoMatrix* (PangoMatrix*) "pango_matrix_copy")
    (macro pango_matrix_free::void (PangoMatrix*) "pango_matrix_free")
    (macro pango_matrix_translate::void (PangoMatrix* double double) "pango_matrix_translate")
    (macro pango_matrix_scale::void (PangoMatrix* double double) "pango_matrix_scale")
    (macro pango_matrix_rotate::void (PangoMatrix* double) "pango_matrix_rotate")
    (macro pango_matrix_concat::void (PangoMatrix* PangoMatrix*) "pango_matrix_concat")
    (macro pango_language_get_type::GType () "pango_language_get_type")
    (macro pango_language_from_string::PangoLanguage* (string) "pango_language_from_string")
    (macro pango_language_matches::gboolean (PangoLanguage* string) "pango_language_matches")
    (macro pango_get_mirror_char::gboolean (gunichar gunichar*) "pango_get_mirror_char")
    (macro pango_unichar_direction::PangoDirection (gunichar) "pango_unichar_direction")
    (macro pango_find_base_dir::PangoDirection (gchar* gint) "pango_find_base_dir")
    (macro pango_font_description_get_type::GType () "pango_font_description_get_type")
    (macro pango_font_description_new::PangoFontDescription* () "pango_font_description_new")
    (macro pango_font_description_copy::PangoFontDescription* (PangoFontDescription*) "pango_font_description_copy")
    (macro pango_font_description_copy_static::PangoFontDescription* (PangoFontDescription*) "pango_font_description_copy_static")
    (macro pango_font_description_hash::guint (PangoFontDescription*) "pango_font_description_hash")
    (macro pango_font_description_equal::gboolean (PangoFontDescription* PangoFontDescription*) "pango_font_description_equal")
    (macro pango_font_description_free::void (PangoFontDescription*) "pango_font_description_free")
    (macro pango_font_descriptions_free::void (PangoFontDescription** int) "pango_font_descriptions_free")
    (macro pango_font_description_set_family::void (PangoFontDescription* string) "pango_font_description_set_family")
    (macro pango_font_description_set_family_static::void (PangoFontDescription* string) "pango_font_description_set_family_static")
    (macro pango_font_description_get_family::string (PangoFontDescription*) "pango_font_description_get_family")
    (macro pango_font_description_set_style::void (PangoFontDescription* PangoStyle) "pango_font_description_set_style")
    (macro pango_font_description_get_style::PangoStyle (PangoFontDescription*) "pango_font_description_get_style")
    (macro pango_font_description_set_variant::void (PangoFontDescription* PangoVariant) "pango_font_description_set_variant")
    (macro pango_font_description_get_variant::PangoVariant (PangoFontDescription*) "pango_font_description_get_variant")
    (macro pango_font_description_set_weight::void (PangoFontDescription* PangoWeight) "pango_font_description_set_weight")
    (macro pango_font_description_get_weight::PangoWeight (PangoFontDescription*) "pango_font_description_get_weight")
    (macro pango_font_description_set_stretch::void (PangoFontDescription* PangoStretch) "pango_font_description_set_stretch")
    (macro pango_font_description_get_stretch::PangoStretch (PangoFontDescription*) "pango_font_description_get_stretch")
    (macro pango_font_description_set_size::void (PangoFontDescription* gint) "pango_font_description_set_size")
    (macro pango_font_description_get_size::gint (PangoFontDescription*) "pango_font_description_get_size")
    (macro pango_font_description_set_absolute_size::void (PangoFontDescription* double) "pango_font_description_set_absolute_size")
    (macro pango_font_description_get_size_is_absolute::gboolean (PangoFontDescription*) "pango_font_description_get_size_is_absolute")
    (macro pango_font_description_get_set_fields::PangoFontMask (PangoFontDescription*) "pango_font_description_get_set_fields")
    (macro pango_font_description_unset_fields::void (PangoFontDescription* PangoFontMask) "pango_font_description_unset_fields")
    (macro pango_font_description_merge::void (PangoFontDescription* PangoFontDescription* gboolean) "pango_font_description_merge")
    (macro pango_font_description_merge_static::void (PangoFontDescription* PangoFontDescription* gboolean) "pango_font_description_merge_static")
    (macro pango_font_description_better_match::gboolean (PangoFontDescription* PangoFontDescription* PangoFontDescription*) "pango_font_description_better_match")
    (macro pango_font_description_from_string::PangoFontDescription* (string) "pango_font_description_from_string")
    (macro pango_font_description_to_string::string (PangoFontDescription*) "pango_font_description_to_string")
    (macro pango_font_description_to_filename::string (PangoFontDescription*) "pango_font_description_to_filename")
    (macro pango_font_metrics_get_type::GType () "pango_font_metrics_get_type")
    (macro pango_font_metrics_ref::PangoFontMetrics* (PangoFontMetrics*) "pango_font_metrics_ref")
    (macro pango_font_metrics_unref::void (PangoFontMetrics*) "pango_font_metrics_unref")
    (macro pango_font_metrics_get_ascent::int (PangoFontMetrics*) "pango_font_metrics_get_ascent")
    (macro pango_font_metrics_get_descent::int (PangoFontMetrics*) "pango_font_metrics_get_descent")
    (macro pango_font_metrics_get_approximate_char_width::int (PangoFontMetrics*) "pango_font_metrics_get_approximate_char_width")
    (macro pango_font_metrics_get_approximate_digit_width::int (PangoFontMetrics*) "pango_font_metrics_get_approximate_digit_width")
    (macro pango_font_metrics_get_underline_position::int (PangoFontMetrics*) "pango_font_metrics_get_underline_position")
    (macro pango_font_metrics_get_underline_thickness::int (PangoFontMetrics*) "pango_font_metrics_get_underline_thickness")
    (macro pango_font_metrics_get_strikethrough_position::int (PangoFontMetrics*) "pango_font_metrics_get_strikethrough_position")
    (macro pango_font_metrics_get_strikethrough_thickness::int (PangoFontMetrics*) "pango_font_metrics_get_strikethrough_thickness")
    (macro pango_font_family_get_type::GType () "pango_font_family_get_type")
    (macro pango_font_family_list_faces::void (PangoFontFamily* PangoFontFace*** int*) "pango_font_family_list_faces")
    (macro pango_font_family_get_name::string (PangoFontFamily*) "pango_font_family_get_name")
    (macro pango_font_family_is_monospace::gboolean (PangoFontFamily*) "pango_font_family_is_monospace")
    (macro pango_font_face_get_type::GType () "pango_font_face_get_type")
    (macro pango_font_face_describe::PangoFontDescription* (PangoFontFace*) "pango_font_face_describe")
    (macro pango_font_face_get_face_name::string (PangoFontFace*) "pango_font_face_get_face_name")
    (macro pango_font_face_list_sizes::void (PangoFontFace* int** int*) "pango_font_face_list_sizes")
    (macro pango_font_get_type::GType () "pango_font_get_type")
    (macro pango_font_describe::PangoFontDescription* (PangoFont*) "pango_font_describe")
    (macro pango_font_get_coverage::PangoCoverage* (PangoFont* PangoLanguage*) "pango_font_get_coverage")
    (macro pango_font_find_shaper::PangoEngineShape* (PangoFont* PangoLanguage* guint32) "pango_font_find_shaper")
    (macro pango_font_get_metrics::PangoFontMetrics* (PangoFont* PangoLanguage*) "pango_font_get_metrics")
    (macro pango_font_get_glyph_extents::void (PangoFont* PangoGlyph PangoRectangle* PangoRectangle*) "pango_font_get_glyph_extents")
    (macro pango_color_get_type::GType () "pango_color_get_type")
    (macro pango_color_copy::PangoColor* (PangoColor*) "pango_color_copy")
    (macro pango_color_free::void (PangoColor*) "pango_color_free")
    (macro pango_color_parse::gboolean (PangoColor* string) "pango_color_parse")
    (macro pango_attr_type_register::PangoAttrType (gchar*) "pango_attr_type_register")
    (macro pango_attribute_copy::PangoAttribute* (PangoAttribute*) "pango_attribute_copy")
    (macro pango_attribute_destroy::void (PangoAttribute*) "pango_attribute_destroy")
    (macro pango_attribute_equal::gboolean (PangoAttribute* PangoAttribute*) "pango_attribute_equal")
    (macro pango_attr_language_new::PangoAttribute* (PangoLanguage*) "pango_attr_language_new")
    (macro pango_attr_family_new::PangoAttribute* (string) "pango_attr_family_new")
    (macro pango_attr_foreground_new::PangoAttribute* (guint16 guint16 guint16) "pango_attr_foreground_new")
    (macro pango_attr_background_new::PangoAttribute* (guint16 guint16 guint16) "pango_attr_background_new")
    (macro pango_attr_size_new::PangoAttribute* (int) "pango_attr_size_new")
    (macro pango_attr_size_new_absolute::PangoAttribute* (int) "pango_attr_size_new_absolute")
    (macro pango_attr_style_new::PangoAttribute* (PangoStyle) "pango_attr_style_new")
    (macro pango_attr_weight_new::PangoAttribute* (PangoWeight) "pango_attr_weight_new")
    (macro pango_attr_variant_new::PangoAttribute* (PangoVariant) "pango_attr_variant_new")
    (macro pango_attr_stretch_new::PangoAttribute* (PangoStretch) "pango_attr_stretch_new")
    (macro pango_attr_font_desc_new::PangoAttribute* (PangoFontDescription*) "pango_attr_font_desc_new")
    (macro pango_attr_underline_new::PangoAttribute* (PangoUnderline) "pango_attr_underline_new")
    (macro pango_attr_underline_color_new::PangoAttribute* (guint16 guint16 guint16) "pango_attr_underline_color_new")
    (macro pango_attr_strikethrough_new::PangoAttribute* (gboolean) "pango_attr_strikethrough_new")
    (macro pango_attr_strikethrough_color_new::PangoAttribute* (guint16 guint16 guint16) "pango_attr_strikethrough_color_new")
    (macro pango_attr_rise_new::PangoAttribute* (int) "pango_attr_rise_new")
    (macro pango_attr_scale_new::PangoAttribute* (double) "pango_attr_scale_new")
    (macro pango_attr_fallback_new::PangoAttribute* (gboolean) "pango_attr_fallback_new")
    (macro pango_attr_letter_spacing_new::PangoAttribute* (int) "pango_attr_letter_spacing_new")
    (macro pango_attr_shape_new::PangoAttribute* (PangoRectangle* PangoRectangle*) "pango_attr_shape_new")
    (macro pango_attr_shape_new_with_data::PangoAttribute* (PangoRectangle* PangoRectangle* gpointer PangoAttrDataCopyFunc GDestroyNotify) "pango_attr_shape_new_with_data")
    (macro pango_attr_list_get_type::GType () "pango_attr_list_get_type")
    (macro pango_attr_list_new::PangoAttrList* () "pango_attr_list_new")
    (macro pango_attr_list_ref::void (PangoAttrList*) "pango_attr_list_ref")
    (macro pango_attr_list_unref::void (PangoAttrList*) "pango_attr_list_unref")
    (macro pango_attr_list_copy::PangoAttrList* (PangoAttrList*) "pango_attr_list_copy")
    (macro pango_attr_list_insert::void (PangoAttrList* PangoAttribute*) "pango_attr_list_insert")
    (macro pango_attr_list_insert_before::void (PangoAttrList* PangoAttribute*) "pango_attr_list_insert_before")
    (macro pango_attr_list_change::void (PangoAttrList* PangoAttribute*) "pango_attr_list_change")
    (macro pango_attr_list_splice::void (PangoAttrList* PangoAttrList* gint gint) "pango_attr_list_splice")
    (macro pango_attr_list_filter::PangoAttrList* (PangoAttrList* PangoAttrFilterFunc gpointer) "pango_attr_list_filter")
    (macro pango_attr_list_get_iterator::PangoAttrIterator* (PangoAttrList*) "pango_attr_list_get_iterator")
    (macro pango_attr_iterator_range::void (PangoAttrIterator* gint* gint*) "pango_attr_iterator_range")
    (macro pango_attr_iterator_next::gboolean (PangoAttrIterator*) "pango_attr_iterator_next")
    (macro pango_attr_iterator_copy::PangoAttrIterator* (PangoAttrIterator*) "pango_attr_iterator_copy")
    (macro pango_attr_iterator_destroy::void (PangoAttrIterator*) "pango_attr_iterator_destroy")
    (macro pango_attr_iterator_get::PangoAttribute* (PangoAttrIterator* PangoAttrType) "pango_attr_iterator_get")
    (macro pango_attr_iterator_get_font::void (PangoAttrIterator* PangoFontDescription* PangoLanguage** GSList**) "pango_attr_iterator_get_font")
    (macro pango_attr_iterator_get_attrs::GSList* (PangoAttrIterator*) "pango_attr_iterator_get_attrs")
    (macro pango_parse_markup::gboolean (string int gunichar PangoAttrList** string* gunichar* GError**) "pango_parse_markup")
    (macro pango_item_new::PangoItem* () "pango_item_new")
    (macro pango_item_copy::PangoItem* (PangoItem*) "pango_item_copy")
    (macro pango_item_free::void (PangoItem*) "pango_item_free")
    (macro pango_item_split::PangoItem* (PangoItem* int int) "pango_item_split")
    (macro pango_break::void (gchar* int PangoAnalysis* PangoLogAttr* int) "pango_break")
    (macro pango_find_paragraph_boundary::void (gchar* gint gint* gint*) "pango_find_paragraph_boundary")
    (macro pango_get_log_attrs::void (string int int PangoLanguage* PangoLogAttr* int) "pango_get_log_attrs")
    (macro pango_fontset_get_type::GType () "pango_fontset_get_type")
    (macro pango_fontset_get_font::PangoFont* (PangoFontset* guint) "pango_fontset_get_font")
    (macro pango_fontset_get_metrics::PangoFontMetrics* (PangoFontset*) "pango_fontset_get_metrics")
    (macro pango_fontset_foreach::void (PangoFontset* PangoFontsetForeachFunc gpointer) "pango_fontset_foreach")
    (macro pango_font_map_get_type::GType () "pango_font_map_get_type")
    (macro pango_font_map_load_font::PangoFont* (PangoFontMap* PangoContext* PangoFontDescription*) "pango_font_map_load_font")
    (macro pango_font_map_load_fontset::PangoFontset* (PangoFontMap* PangoContext* PangoFontDescription* PangoLanguage*) "pango_font_map_load_fontset")
    (macro pango_font_map_list_families::void (PangoFontMap* PangoFontFamily*** int*) "pango_font_map_list_families")
    (macro pango_context_get_type::GType () "pango_context_get_type")
    (macro pango_context_get_font_map::PangoFontMap* (PangoContext*) "pango_context_get_font_map")
    (macro pango_context_list_families::void (PangoContext* PangoFontFamily*** int*) "pango_context_list_families")
    (macro pango_context_load_font::PangoFont* (PangoContext* PangoFontDescription*) "pango_context_load_font")
    (macro pango_context_load_fontset::PangoFontset* (PangoContext* PangoFontDescription* PangoLanguage*) "pango_context_load_fontset")
    (macro pango_context_get_metrics::PangoFontMetrics* (PangoContext* PangoFontDescription* PangoLanguage*) "pango_context_get_metrics")
    (macro pango_context_set_font_description::void (PangoContext* PangoFontDescription*) "pango_context_set_font_description")
    (macro pango_context_get_font_description::PangoFontDescription* (PangoContext*) "pango_context_get_font_description")
    (macro pango_context_get_language::PangoLanguage* (PangoContext*) "pango_context_get_language")
    (macro pango_context_set_language::void (PangoContext* PangoLanguage*) "pango_context_set_language")
    (macro pango_context_set_base_dir::void (PangoContext* PangoDirection) "pango_context_set_base_dir")
    (macro pango_context_get_base_dir::PangoDirection (PangoContext*) "pango_context_get_base_dir")
    (macro pango_context_set_matrix::void (PangoContext* PangoMatrix*) "pango_context_set_matrix")
    (macro pango_context_get_matrix::PangoMatrix* (PangoContext*) "pango_context_get_matrix")
    (macro pango_itemize::GList* (PangoContext* string int int PangoAttrList* PangoAttrIterator*) "pango_itemize")
    (macro pango_itemize_with_base_dir::GList* (PangoContext* PangoDirection string int int PangoAttrList* PangoAttrIterator*) "pango_itemize_with_base_dir")
    (macro pango_glyph_string_new::PangoGlyphString* () "pango_glyph_string_new")
    (macro pango_glyph_string_set_size::void (PangoGlyphString* gint) "pango_glyph_string_set_size")
    (macro pango_glyph_string_get_type::GType () "pango_glyph_string_get_type")
    (macro pango_glyph_string_copy::PangoGlyphString* (PangoGlyphString*) "pango_glyph_string_copy")
    (macro pango_glyph_string_free::void (PangoGlyphString*) "pango_glyph_string_free")
    (macro pango_glyph_string_extents::void (PangoGlyphString* PangoFont* PangoRectangle* PangoRectangle*) "pango_glyph_string_extents")
    (macro pango_glyph_string_extents_range::void (PangoGlyphString* int int PangoFont* PangoRectangle* PangoRectangle*) "pango_glyph_string_extents_range")
    (macro pango_glyph_string_get_logical_widths::void (PangoGlyphString* string int int int*) "pango_glyph_string_get_logical_widths")
    (macro pango_glyph_string_index_to_x::void (PangoGlyphString* string int PangoAnalysis* int gboolean int*) "pango_glyph_string_index_to_x")
    (macro pango_glyph_string_x_to_index::void (PangoGlyphString* string int PangoAnalysis* int int* int*) "pango_glyph_string_x_to_index")
    (macro pango_shape::void (gchar* gint PangoAnalysis* PangoGlyphString*) "pango_shape")
    (macro pango_reorder_items::GList* (GList*) "pango_reorder_items")
    (macro pango_script_for_unichar::PangoScript (gunichar) "pango_script_for_unichar")
    (macro pango_script_iter_new::PangoScriptIter* (string int) "pango_script_iter_new")
    (macro pango_script_iter_get_range::void (PangoScriptIter* string* string* PangoScript*) "pango_script_iter_get_range")
    (macro pango_script_iter_next::gboolean (PangoScriptIter*) "pango_script_iter_next")
    (macro pango_script_iter_free::void (PangoScriptIter*) "pango_script_iter_free")
    (macro pango_script_get_sample_language::PangoLanguage* (PangoScript) "pango_script_get_sample_language")
    (macro pango_language_includes_script::gboolean (PangoLanguage* PangoScript) "pango_language_includes_script")
    (macro pango_attr_type_get_type::GType () "pango_attr_type_get_type")
    (macro pango_underline_get_type::GType () "pango_underline_get_type")
    (macro pango_coverage_level_get_type::GType () "pango_coverage_level_get_type")
    (macro pango_style_get_type::GType () "pango_style_get_type")
    (macro pango_variant_get_type::GType () "pango_variant_get_type")
    (macro pango_weight_get_type::GType () "pango_weight_get_type")
    (macro pango_stretch_get_type::GType () "pango_stretch_get_type")
    (macro pango_font_mask_get_type::GType () "pango_font_mask_get_type")
    (macro pango_alignment_get_type::GType () "pango_alignment_get_type")
    (macro pango_wrap_mode_get_type::GType () "pango_wrap_mode_get_type")
    (macro pango_ellipsize_mode_get_type::GType () "pango_ellipsize_mode_get_type")
    (macro pango_render_part_get_type::GType () "pango_render_part_get_type")
    (macro pango_script_get_type::GType () "pango_script_get_type")
    (macro pango_tab_align_get_type::GType () "pango_tab_align_get_type")
    (macro pango_direction_get_type::GType () "pango_direction_get_type")
    (macro pango_glyph_item_split::PangoGlyphItem* (PangoGlyphItem* string int) "pango_glyph_item_split")
    (macro pango_glyph_item_free::void (PangoGlyphItem*) "pango_glyph_item_free")
    (macro pango_glyph_item_apply_attrs::GSList* (PangoGlyphItem* string PangoAttrList*) "pango_glyph_item_apply_attrs")
    (macro pango_glyph_item_letter_space::void (PangoGlyphItem* string PangoLogAttr* int) "pango_glyph_item_letter_space")
    (macro pango_tab_array_new::PangoTabArray* (gint gboolean) "pango_tab_array_new")
    (macro pango_tab_array_new_with_positions::PangoTabArray* (gint gboolean PangoTabAlign gint . gint) "pango_tab_array_new_with_positions")
    (macro pango_tab_array_get_type::GType () "pango_tab_array_get_type")
    (macro pango_tab_array_copy::PangoTabArray* (PangoTabArray*) "pango_tab_array_copy")
    (macro pango_tab_array_free::void (PangoTabArray*) "pango_tab_array_free")
    (macro pango_tab_array_get_size::gint (PangoTabArray*) "pango_tab_array_get_size")
    (macro pango_tab_array_resize::void (PangoTabArray* gint) "pango_tab_array_resize")
    (macro pango_tab_array_set_tab::void (PangoTabArray* gint PangoTabAlign gint) "pango_tab_array_set_tab")
    (macro pango_tab_array_get_tab::void (PangoTabArray* gint PangoTabAlign* gint*) "pango_tab_array_get_tab")
    (macro pango_tab_array_get_tabs::void (PangoTabArray* PangoTabAlign** gint**) "pango_tab_array_get_tabs")
    (macro pango_tab_array_get_positions_in_pixels::gboolean (PangoTabArray*) "pango_tab_array_get_positions_in_pixels")
    (macro pango_layout_get_type::GType () "pango_layout_get_type")
    (macro pango_layout_new::PangoLayout* (PangoContext*) "pango_layout_new")
    (macro pango_layout_copy::PangoLayout* (PangoLayout*) "pango_layout_copy")
    (macro pango_layout_get_context::PangoContext* (PangoLayout*) "pango_layout_get_context")
    (macro pango_layout_set_attributes::void (PangoLayout* PangoAttrList*) "pango_layout_set_attributes")
    (macro pango_layout_get_attributes::PangoAttrList* (PangoLayout*) "pango_layout_get_attributes")
    (macro pango_layout_set_text::void (PangoLayout* string int) "pango_layout_set_text")
    (macro pango_layout_get_text::string (PangoLayout*) "pango_layout_get_text")
    (macro pango_layout_set_markup::void (PangoLayout* string int) "pango_layout_set_markup")
    (macro pango_layout_set_markup_with_accel::void (PangoLayout* string int gunichar gunichar*) "pango_layout_set_markup_with_accel")
    (macro pango_layout_set_font_description::void (PangoLayout* PangoFontDescription*) "pango_layout_set_font_description")
    (macro pango_layout_get_font_description::PangoFontDescription* (PangoLayout*) "pango_layout_get_font_description")
    (macro pango_layout_set_width::void (PangoLayout* int) "pango_layout_set_width")
    (macro pango_layout_get_width::int (PangoLayout*) "pango_layout_get_width")
    (macro pango_layout_set_wrap::void (PangoLayout* PangoWrapMode) "pango_layout_set_wrap")
    (macro pango_layout_get_wrap::PangoWrapMode (PangoLayout*) "pango_layout_get_wrap")
    (macro pango_layout_set_indent::void (PangoLayout* int) "pango_layout_set_indent")
    (macro pango_layout_get_indent::int (PangoLayout*) "pango_layout_get_indent")
    (macro pango_layout_set_spacing::void (PangoLayout* int) "pango_layout_set_spacing")
    (macro pango_layout_get_spacing::int (PangoLayout*) "pango_layout_get_spacing")
    (macro pango_layout_set_justify::void (PangoLayout* gboolean) "pango_layout_set_justify")
    (macro pango_layout_get_justify::gboolean (PangoLayout*) "pango_layout_get_justify")
    (macro pango_layout_set_auto_dir::void (PangoLayout* gboolean) "pango_layout_set_auto_dir")
    (macro pango_layout_get_auto_dir::gboolean (PangoLayout*) "pango_layout_get_auto_dir")
    (macro pango_layout_set_alignment::void (PangoLayout* PangoAlignment) "pango_layout_set_alignment")
    (macro pango_layout_get_alignment::PangoAlignment (PangoLayout*) "pango_layout_get_alignment")
    (macro pango_layout_set_tabs::void (PangoLayout* PangoTabArray*) "pango_layout_set_tabs")
    (macro pango_layout_get_tabs::PangoTabArray* (PangoLayout*) "pango_layout_get_tabs")
    (macro pango_layout_set_single_paragraph_mode::void (PangoLayout* gboolean) "pango_layout_set_single_paragraph_mode")
    (macro pango_layout_get_single_paragraph_mode::gboolean (PangoLayout*) "pango_layout_get_single_paragraph_mode")
    (macro pango_layout_set_ellipsize::void (PangoLayout* PangoEllipsizeMode) "pango_layout_set_ellipsize")
    (macro pango_layout_get_ellipsize::PangoEllipsizeMode (PangoLayout*) "pango_layout_get_ellipsize")
    (macro pango_layout_context_changed::void (PangoLayout*) "pango_layout_context_changed")
    (macro pango_layout_get_log_attrs::void (PangoLayout* PangoLogAttr** gint*) "pango_layout_get_log_attrs")
    (macro pango_layout_index_to_pos::void (PangoLayout* int PangoRectangle*) "pango_layout_index_to_pos")
    (macro pango_layout_get_cursor_pos::void (PangoLayout* int PangoRectangle* PangoRectangle*) "pango_layout_get_cursor_pos")
    (macro pango_layout_move_cursor_visually::void (PangoLayout* gboolean int int int int* int*) "pango_layout_move_cursor_visually")
    (macro pango_layout_xy_to_index::gboolean (PangoLayout* int int int* int*) "pango_layout_xy_to_index")
    (macro pango_layout_get_extents::void (PangoLayout* PangoRectangle* PangoRectangle*) "pango_layout_get_extents")
    (macro pango_layout_get_pixel_extents::void (PangoLayout* PangoRectangle* PangoRectangle*) "pango_layout_get_pixel_extents")
    (macro pango_layout_get_size::void (PangoLayout* int* int*) "pango_layout_get_size")
    (macro pango_layout_get_pixel_size::void (PangoLayout* int* int*) "pango_layout_get_pixel_size")
    (macro pango_layout_get_line_count::int (PangoLayout*) "pango_layout_get_line_count")
    (macro pango_layout_get_line::PangoLayoutLine* (PangoLayout* int) "pango_layout_get_line")
    (macro pango_layout_get_lines::GSList* (PangoLayout*) "pango_layout_get_lines")
    (macro pango_layout_line_ref::void (PangoLayoutLine*) "pango_layout_line_ref")
    (macro pango_layout_line_unref::void (PangoLayoutLine*) "pango_layout_line_unref")
    (macro pango_layout_line_x_to_index::gboolean (PangoLayoutLine* int int* int*) "pango_layout_line_x_to_index")
    (macro pango_layout_line_index_to_x::void (PangoLayoutLine* int gboolean int*) "pango_layout_line_index_to_x")
    (macro pango_layout_line_get_x_ranges::void (PangoLayoutLine* int int int** int*) "pango_layout_line_get_x_ranges")
    (macro pango_layout_line_get_extents::void (PangoLayoutLine* PangoRectangle* PangoRectangle*) "pango_layout_line_get_extents")
    (macro pango_layout_line_get_pixel_extents::void (PangoLayoutLine* PangoRectangle* PangoRectangle*) "pango_layout_line_get_pixel_extents")
    (macro pango_layout_iter_get_type::GType () "pango_layout_iter_get_type")
    (macro pango_layout_get_iter::PangoLayoutIter* (PangoLayout*) "pango_layout_get_iter")
    (macro pango_layout_iter_free::void (PangoLayoutIter*) "pango_layout_iter_free")
    (macro pango_layout_iter_get_index::int (PangoLayoutIter*) "pango_layout_iter_get_index")
    (macro pango_layout_iter_get_run::PangoLayoutRun* (PangoLayoutIter*) "pango_layout_iter_get_run")
    (macro pango_layout_iter_get_line::PangoLayoutLine* (PangoLayoutIter*) "pango_layout_iter_get_line")
    (macro pango_layout_iter_at_last_line::gboolean (PangoLayoutIter*) "pango_layout_iter_at_last_line")
    (macro pango_layout_iter_next_char::gboolean (PangoLayoutIter*) "pango_layout_iter_next_char")
    (macro pango_layout_iter_next_cluster::gboolean (PangoLayoutIter*) "pango_layout_iter_next_cluster")
    (macro pango_layout_iter_next_run::gboolean (PangoLayoutIter*) "pango_layout_iter_next_run")
    (macro pango_layout_iter_next_line::gboolean (PangoLayoutIter*) "pango_layout_iter_next_line")
    (macro pango_layout_iter_get_char_extents::void (PangoLayoutIter* PangoRectangle*) "pango_layout_iter_get_char_extents")
    (macro pango_layout_iter_get_cluster_extents::void (PangoLayoutIter* PangoRectangle* PangoRectangle*) "pango_layout_iter_get_cluster_extents")
    (macro pango_layout_iter_get_run_extents::void (PangoLayoutIter* PangoRectangle* PangoRectangle*) "pango_layout_iter_get_run_extents")
    (macro pango_layout_iter_get_line_extents::void (PangoLayoutIter* PangoRectangle* PangoRectangle*) "pango_layout_iter_get_line_extents")
    (macro pango_layout_iter_get_line_yrange::void (PangoLayoutIter* int* int*) "pango_layout_iter_get_line_yrange")
    (macro pango_layout_iter_get_layout_extents::void (PangoLayoutIter* PangoRectangle* PangoRectangle*) "pango_layout_iter_get_layout_extents")
    (macro pango_layout_iter_get_baseline::int (PangoLayoutIter*) "pango_layout_iter_get_baseline")
    (macro pango_renderer_get_type::GType () "pango_renderer_get_type")
    (macro pango_renderer_draw_layout::void (PangoRenderer* PangoLayout* int int) "pango_renderer_draw_layout")
    (macro pango_renderer_draw_layout_line::void (PangoRenderer* PangoLayoutLine* int int) "pango_renderer_draw_layout_line")
    (macro pango_renderer_draw_glyphs::void (PangoRenderer* PangoFont* PangoGlyphString* int int) "pango_renderer_draw_glyphs")
    (macro pango_renderer_draw_rectangle::void (PangoRenderer* PangoRenderPart int int int int) "pango_renderer_draw_rectangle")
    (macro pango_renderer_draw_error_underline::void (PangoRenderer* int int int int) "pango_renderer_draw_error_underline")
    (macro pango_renderer_draw_trapezoid::void (PangoRenderer* PangoRenderPart double double double double double double) "pango_renderer_draw_trapezoid")
    (macro pango_renderer_draw_glyph::void (PangoRenderer* PangoFont* PangoGlyph double double) "pango_renderer_draw_glyph")
    (macro pango_renderer_activate::void (PangoRenderer*) "pango_renderer_activate")
    (macro pango_renderer_deactivate::void (PangoRenderer*) "pango_renderer_deactivate")
    (macro pango_renderer_part_changed::void (PangoRenderer* PangoRenderPart) "pango_renderer_part_changed")
    (macro pango_renderer_set_color::void (PangoRenderer* PangoRenderPart PangoColor*) "pango_renderer_set_color")
    (macro pango_renderer_get_color::PangoColor* (PangoRenderer* PangoRenderPart) "pango_renderer_get_color")
    (macro pango_renderer_set_matrix::void (PangoRenderer* PangoMatrix*) "pango_renderer_set_matrix")
    (macro pango_renderer_get_matrix::PangoMatrix* (PangoRenderer*) "pango_renderer_get_matrix")
    (macro gdk_colormap_get_type::GType () "gdk_colormap_get_type")
    (macro gdk_colormap_new::GdkColormap* (GdkVisual* gboolean) "gdk_colormap_new")
    (macro gdk_colormap_ref::GdkColormap* (GdkColormap*) "gdk_colormap_ref")
    (macro gdk_colormap_unref::void (GdkColormap*) "gdk_colormap_unref")
    (macro gdk_colormap_get_system::GdkColormap* () "gdk_colormap_get_system")
    (macro gdk_colormap_get_screen::GdkScreen* (GdkColormap*) "gdk_colormap_get_screen")
    (macro gdk_colormap_get_system_size::gint () "gdk_colormap_get_system_size")
    (macro gdk_colormap_change::void (GdkColormap* gint) "gdk_colormap_change")
    (macro gdk_colormap_alloc_colors::gint (GdkColormap* GdkColor* gint gboolean gboolean gboolean*) "gdk_colormap_alloc_colors")
    (macro gdk_colormap_alloc_color::gboolean (GdkColormap* GdkColor* gboolean gboolean) "gdk_colormap_alloc_color")
    (macro gdk_colormap_free_colors::void (GdkColormap* GdkColor* gint) "gdk_colormap_free_colors")
    (macro gdk_colormap_query_color::void (GdkColormap* gulong GdkColor*) "gdk_colormap_query_color")
    (macro gdk_colormap_get_visual::GdkVisual* (GdkColormap*) "gdk_colormap_get_visual")
    (macro gdk_color_copy::GdkColor* (GdkColor*) "gdk_color_copy")
    (macro gdk_color_free::void (GdkColor*) "gdk_color_free")
    (macro gdk_color_parse::gint (gchar* GdkColor*) "gdk_color_parse")
    (macro gdk_color_hash::guint (GdkColor*) "gdk_color_hash")
    (macro gdk_color_equal::gboolean (GdkColor* GdkColor*) "gdk_color_equal")
    (macro gdk_color_get_type::GType () "gdk_color_get_type")
    (macro gdk_colors_store::void (GdkColormap* GdkColor* gint) "gdk_colors_store")
    (macro gdk_color_white::gint (GdkColormap* GdkColor*) "gdk_color_white")
    (macro gdk_color_black::gint (GdkColormap* GdkColor*) "gdk_color_black")
    (macro gdk_color_alloc::gint (GdkColormap* GdkColor*) "gdk_color_alloc")
    (macro gdk_color_change::gint (GdkColormap* GdkColor*) "gdk_color_change")
    (macro gdk_colors_alloc::gint (GdkColormap* gboolean gulong* gint gulong* gint) "gdk_colors_alloc")
    (macro gdk_colors_free::void (GdkColormap* gulong* gint gulong) "gdk_colors_free")
    (macro gdk_pixbuf_error_quark::GQuark () "gdk_pixbuf_error_quark")
    (macro gdk_pixbuf_get_type::GType () "gdk_pixbuf_get_type")
    (macro gdk_pixbuf_ref::GdkPixbuf* (GdkPixbuf*) "gdk_pixbuf_ref")
    (macro gdk_pixbuf_unref::void (GdkPixbuf*) "gdk_pixbuf_unref")
    (macro gdk_pixbuf_get_colorspace::GdkColorspace (GdkPixbuf*) "gdk_pixbuf_get_colorspace")
    (macro gdk_pixbuf_get_n_channels::int (GdkPixbuf*) "gdk_pixbuf_get_n_channels")
    (macro gdk_pixbuf_get_has_alpha::gboolean (GdkPixbuf*) "gdk_pixbuf_get_has_alpha")
    (macro gdk_pixbuf_get_bits_per_sample::int (GdkPixbuf*) "gdk_pixbuf_get_bits_per_sample")
    (macro gdk_pixbuf_get_pixels::guchar* (GdkPixbuf*) "gdk_pixbuf_get_pixels")
    (macro gdk_pixbuf_get_width::int (GdkPixbuf*) "gdk_pixbuf_get_width")
    (macro gdk_pixbuf_get_height::int (GdkPixbuf*) "gdk_pixbuf_get_height")
    (macro gdk_pixbuf_get_rowstride::int (GdkPixbuf*) "gdk_pixbuf_get_rowstride")
    (macro gdk_pixbuf_new::GdkPixbuf* (GdkColorspace gboolean int int int) "gdk_pixbuf_new")
    (macro gdk_pixbuf_copy::GdkPixbuf* (GdkPixbuf*) "gdk_pixbuf_copy")
    (macro gdk_pixbuf_new_subpixbuf::GdkPixbuf* (GdkPixbuf* int int int int) "gdk_pixbuf_new_subpixbuf")
    (macro gdk_pixbuf_new_from_file::GdkPixbuf* (string GError**) "gdk_pixbuf_new_from_file")
    (macro gdk_pixbuf_new_from_file_at_size::GdkPixbuf* (string int int GError**) "gdk_pixbuf_new_from_file_at_size")
    (macro gdk_pixbuf_new_from_file_at_scale::GdkPixbuf* (string int int gboolean GError**) "gdk_pixbuf_new_from_file_at_scale")
    (macro gdk_pixbuf_new_from_data::GdkPixbuf* (guchar* GdkColorspace gboolean int int int int GdkPixbufDestroyNotify gpointer) "gdk_pixbuf_new_from_data")
    (macro gdk_pixbuf_new_from_xpm_data::GdkPixbuf* (string*) "gdk_pixbuf_new_from_xpm_data")
    (macro gdk_pixbuf_new_from_inline::GdkPixbuf* (gint guint8* gboolean GError**) "gdk_pixbuf_new_from_inline")
    (macro gdk_pixbuf_fill::void (GdkPixbuf* guint32) "gdk_pixbuf_fill")
    (macro gdk_pixbuf_save::gboolean (GdkPixbuf* string string GError** . GError**) "gdk_pixbuf_save")
    (macro gdk_pixbuf_savev::gboolean (GdkPixbuf* string string string* string* GError**) "gdk_pixbuf_savev")
    (macro gdk_pixbuf_save_to_callback::gboolean (GdkPixbuf* GdkPixbufSaveFunc gpointer string GError** . GError**) "gdk_pixbuf_save_to_callback")
    (macro gdk_pixbuf_save_to_callbackv::gboolean (GdkPixbuf* GdkPixbufSaveFunc gpointer string string* string* GError**) "gdk_pixbuf_save_to_callbackv")
    (macro gdk_pixbuf_save_to_buffer::gboolean (GdkPixbuf* gchar** gsize* string GError** . GError**) "gdk_pixbuf_save_to_buffer")
    (macro gdk_pixbuf_save_to_bufferv::gboolean (GdkPixbuf* gchar** gsize* string string* string* GError**) "gdk_pixbuf_save_to_bufferv")
    (macro gdk_pixbuf_add_alpha::GdkPixbuf* (GdkPixbuf* gboolean guchar guchar guchar) "gdk_pixbuf_add_alpha")
    (macro gdk_pixbuf_copy_area::void (GdkPixbuf* int int int int GdkPixbuf* int int) "gdk_pixbuf_copy_area")
    (macro gdk_pixbuf_saturate_and_pixelate::void (GdkPixbuf* GdkPixbuf* gfloat gboolean) "gdk_pixbuf_saturate_and_pixelate")
    (macro gdk_pixbuf_get_option::gchar* (GdkPixbuf* gchar*) "gdk_pixbuf_get_option")
    (macro gdk_pixbuf_scale::void (GdkPixbuf* GdkPixbuf* int int int int double double double double GdkInterpType) "gdk_pixbuf_scale")
    (macro gdk_pixbuf_composite::void (GdkPixbuf* GdkPixbuf* int int int int double double double double GdkInterpType int) "gdk_pixbuf_composite")
    (macro gdk_pixbuf_composite_color::void (GdkPixbuf* GdkPixbuf* int int int int double double double double GdkInterpType int int int int guint32 guint32) "gdk_pixbuf_composite_color")
    (macro gdk_pixbuf_scale_simple::GdkPixbuf* (GdkPixbuf* int int GdkInterpType) "gdk_pixbuf_scale_simple")
    (macro gdk_pixbuf_composite_color_simple::GdkPixbuf* (GdkPixbuf* int int GdkInterpType int int guint32 guint32) "gdk_pixbuf_composite_color_simple")
    (macro gdk_pixbuf_rotate_simple::GdkPixbuf* (GdkPixbuf* GdkPixbufRotation) "gdk_pixbuf_rotate_simple")
    (macro gdk_pixbuf_flip::GdkPixbuf* (GdkPixbuf* gboolean) "gdk_pixbuf_flip")
    (macro gdk_pixbuf_animation_get_type::GType () "gdk_pixbuf_animation_get_type")
    (macro gdk_pixbuf_animation_new_from_file::GdkPixbufAnimation* (string GError**) "gdk_pixbuf_animation_new_from_file")
    (macro gdk_pixbuf_animation_ref::GdkPixbufAnimation* (GdkPixbufAnimation*) "gdk_pixbuf_animation_ref")
    (macro gdk_pixbuf_animation_unref::void (GdkPixbufAnimation*) "gdk_pixbuf_animation_unref")
    (macro gdk_pixbuf_animation_get_width::int (GdkPixbufAnimation*) "gdk_pixbuf_animation_get_width")
    (macro gdk_pixbuf_animation_get_height::int (GdkPixbufAnimation*) "gdk_pixbuf_animation_get_height")
    (macro gdk_pixbuf_animation_is_static_image::gboolean (GdkPixbufAnimation*) "gdk_pixbuf_animation_is_static_image")
    (macro gdk_pixbuf_animation_get_static_image::GdkPixbuf* (GdkPixbufAnimation*) "gdk_pixbuf_animation_get_static_image")
    (macro gdk_pixbuf_animation_get_iter::GdkPixbufAnimationIter* (GdkPixbufAnimation* GTimeVal*) "gdk_pixbuf_animation_get_iter")
    (macro gdk_pixbuf_animation_iter_get_type::GType () "gdk_pixbuf_animation_iter_get_type")
    (macro gdk_pixbuf_animation_iter_get_delay_time::int (GdkPixbufAnimationIter*) "gdk_pixbuf_animation_iter_get_delay_time")
    (macro gdk_pixbuf_animation_iter_get_pixbuf::GdkPixbuf* (GdkPixbufAnimationIter*) "gdk_pixbuf_animation_iter_get_pixbuf")
    (macro gdk_pixbuf_animation_iter_on_currently_loading_frame::gboolean (GdkPixbufAnimationIter*) "gdk_pixbuf_animation_iter_on_currently_loading_frame")
    (macro gdk_pixbuf_animation_iter_advance::gboolean (GdkPixbufAnimationIter* GTimeVal*) "gdk_pixbuf_animation_iter_advance")
    (macro __io_read_fn::__ssize_t (void* string size_t) "__io_read_fn")
    (macro __io_write_fn::__ssize_t (void* string size_t) "__io_write_fn")
    (macro __io_seek_fn::int (void* __off64_t* int) "__io_seek_fn")
    (macro __io_close_fn::int (void*) "__io_close_fn")
    (macro __underflow::int (_IO_FILE*) "__underflow")
    (macro __uflow::int (_IO_FILE*) "__uflow")
    (macro __overflow::int (_IO_FILE* int) "__overflow")
    (macro __wunderflow::wint_t (_IO_FILE*) "__wunderflow")
    (macro __wuflow::wint_t (_IO_FILE*) "__wuflow")
    (macro __woverflow::wint_t (_IO_FILE* wint_t) "__woverflow")
    (macro _IO_getc::int (_IO_FILE*) "_IO_getc")
    (macro _IO_putc::int (int _IO_FILE*) "_IO_putc")
    (macro _IO_feof::int (_IO_FILE*) "_IO_feof")
    (macro _IO_ferror::int (_IO_FILE*) "_IO_ferror")
    (macro _IO_peekc_locked::int (_IO_FILE*) "_IO_peekc_locked")
    (macro _IO_flockfile::void (_IO_FILE*) "_IO_flockfile")
    (macro _IO_funlockfile::void (_IO_FILE*) "_IO_funlockfile")
    (macro _IO_ftrylockfile::int (_IO_FILE*) "_IO_ftrylockfile")
    (macro _IO_seekoff::__off64_t (_IO_FILE* __off64_t int int) "_IO_seekoff")
    (macro _IO_seekpos::__off64_t (_IO_FILE* __off64_t int) "_IO_seekpos")
    (macro _IO_free_backup_area::void (_IO_FILE*) "_IO_free_backup_area")
    (macro remove::int (string) "remove")
    (macro rename::int (string string) "rename")
    (macro tmpfile::file () "tmpfile")
    (macro tmpnam::string (string) "tmpnam")
    (macro tmpnam_r::string (string) "tmpnam_r")
    (macro tempnam::string (string string) "tempnam")
    (macro fclose::int (file) "fclose")
    (macro fflush::int (file) "fflush")
    (macro fflush_unlocked::int (file) "fflush_unlocked")
    (macro fopen::file (string string) "fopen")
    (macro freopen::file (string string file) "freopen")
    (macro fdopen::file (int string) "fdopen")
    (macro setbuf::void (file string) "setbuf")
    (macro setvbuf::int (file string int size_t) "setvbuf")
    (macro setbuffer::void (file string size_t) "setbuffer")
    (macro setlinebuf::void (file) "setlinebuf")
    (macro fprintf::int (file string . string) "fprintf")
    (macro printf::int (string . string) "printf")
    (macro sprintf::int (string string . string) "sprintf")
    (macro fgetc::int (file) "fgetc")
    (macro getc::int (file) "getc")
    (macro getchar::int () "getchar")
    (macro getc_unlocked::int (file) "getc_unlocked")
    (macro getchar_unlocked::int () "getchar_unlocked")
    (macro fgetc_unlocked::int (file) "fgetc_unlocked")
    (macro fputc::int (int file) "fputc")
    (macro putc::int (int file) "putc")
    (macro putchar::int (int) "putchar")
    (macro fputc_unlocked::int (int file) "fputc_unlocked")
    (macro putc_unlocked::int (int file) "putc_unlocked")
    (macro putchar_unlocked::int (int) "putchar_unlocked")
    (macro getw::int (file) "getw")
    (macro putw::int (int file) "putw")
    (macro fgets::string (string int file) "fgets")
    (macro gets::string (string) "gets")
    (macro fputs::int (string file) "fputs")
    (macro puts::int (string) "puts")
    (macro ungetc::int (int file) "ungetc")
    (macro fread::size_t (void* size_t size_t file) "fread")
    (macro fwrite::size_t (void* size_t size_t file) "fwrite")
    (macro fread_unlocked::size_t (void* size_t size_t file) "fread_unlocked")
    (macro fwrite_unlocked::size_t (void* size_t size_t file) "fwrite_unlocked")
    (macro fseek::int (file long int) "fseek")
    (macro ftell::long (file) "ftell")
    (macro rewind::void (file) "rewind")
    (macro fgetpos::int (file fpos_t*) "fgetpos")
    (macro fsetpos::int (file fpos_t*) "fsetpos")
    (macro clearerr::void (file) "clearerr")
    (macro feof::int (file) "feof")
    (macro ferror::int (file) "ferror")
    (macro clearerr_unlocked::void (file) "clearerr_unlocked")
    (macro feof_unlocked::int (file) "feof_unlocked")
    (macro ferror_unlocked::int (file) "ferror_unlocked")
    (macro perror::void (string) "perror")
    (macro fileno::int (file) "fileno")
    (macro fileno_unlocked::int (file) "fileno_unlocked")
    (macro popen::file (string string) "popen")
    (macro pclose::int (file) "pclose")
    (macro ctermid::string (string) "ctermid")
    (macro flockfile::void (file) "flockfile")
    (macro ftrylockfile::int (file) "ftrylockfile")
    (macro funlockfile::void (file) "funlockfile")
    (macro g_module_supported::gboolean () "g_module_supported")
    (macro g_module_open::GModule* (gchar* GModuleFlags) "g_module_open")
    (macro g_module_close::gboolean (GModule*) "g_module_close")
    (macro g_module_make_resident::void (GModule*) "g_module_make_resident")
    (macro g_module_error::gchar* () "g_module_error")
    (macro g_module_symbol::gboolean (GModule* gchar* gpointer*) "g_module_symbol")
    (macro g_module_name::gchar* (GModule*) "g_module_name")
    (macro g_module_build_path::gchar* (gchar* gchar*) "g_module_build_path")
    (macro gdk_pixbuf_get_formats::GSList* () "gdk_pixbuf_get_formats")
    (macro gdk_pixbuf_format_get_name::gchar* (GdkPixbufFormat*) "gdk_pixbuf_format_get_name")
    (macro gdk_pixbuf_format_get_description::gchar* (GdkPixbufFormat*) "gdk_pixbuf_format_get_description")
    (macro gdk_pixbuf_format_get_mime_types::gchar** (GdkPixbufFormat*) "gdk_pixbuf_format_get_mime_types")
    (macro gdk_pixbuf_format_get_extensions::gchar** (GdkPixbufFormat*) "gdk_pixbuf_format_get_extensions")
    (macro gdk_pixbuf_format_is_writable::gboolean (GdkPixbufFormat*) "gdk_pixbuf_format_is_writable")
    (macro gdk_pixbuf_format_is_scalable::gboolean (GdkPixbufFormat*) "gdk_pixbuf_format_is_scalable")
    (macro gdk_pixbuf_format_is_disabled::gboolean (GdkPixbufFormat*) "gdk_pixbuf_format_is_disabled")
    (macro gdk_pixbuf_format_set_disabled::void (GdkPixbufFormat* gboolean) "gdk_pixbuf_format_set_disabled")
    (macro gdk_pixbuf_format_get_license::gchar* (GdkPixbufFormat*) "gdk_pixbuf_format_get_license")
    (macro gdk_pixbuf_get_file_info::GdkPixbufFormat* (gchar* gint* gint*) "gdk_pixbuf_get_file_info")
    (macro gdk_pixbuf_loader_get_type::GType () "gdk_pixbuf_loader_get_type")
    (macro gdk_pixbuf_loader_new::GdkPixbufLoader* () "gdk_pixbuf_loader_new")
    (macro gdk_pixbuf_loader_new_with_type::GdkPixbufLoader* (string GError**) "gdk_pixbuf_loader_new_with_type")
    (macro gdk_pixbuf_loader_new_with_mime_type::GdkPixbufLoader* (string GError**) "gdk_pixbuf_loader_new_with_mime_type")
    (macro gdk_pixbuf_loader_set_size::void (GdkPixbufLoader* int int) "gdk_pixbuf_loader_set_size")
    (macro gdk_pixbuf_loader_write::gboolean (GdkPixbufLoader* guchar* gsize GError**) "gdk_pixbuf_loader_write")
    (macro gdk_pixbuf_loader_get_pixbuf::GdkPixbuf* (GdkPixbufLoader*) "gdk_pixbuf_loader_get_pixbuf")
    (macro gdk_pixbuf_loader_get_animation::GdkPixbufAnimation* (GdkPixbufLoader*) "gdk_pixbuf_loader_get_animation")
    (macro gdk_pixbuf_loader_close::gboolean (GdkPixbufLoader* GError**) "gdk_pixbuf_loader_close")
    (macro gdk_pixbuf_loader_get_format::GdkPixbufFormat* (GdkPixbufLoader*) "gdk_pixbuf_loader_get_format")
    (macro gdk_pixbuf_alpha_mode_get_type::GType () "gdk_pixbuf_alpha_mode_get_type")
    (macro gdk_colorspace_get_type::GType () "gdk_colorspace_get_type")
    (macro gdk_pixbuf_error_get_type::GType () "gdk_pixbuf_error_get_type")
    (macro gdk_interp_type_get_type::GType () "gdk_interp_type_get_type")
    (macro gdk_pixbuf_rotation_get_type::GType () "gdk_pixbuf_rotation_get_type")
    (macro gdk_cursor_get_type::GType () "gdk_cursor_get_type")
    (macro gdk_cursor_new_for_display::GdkCursor* (GdkDisplay* GdkCursorType) "gdk_cursor_new_for_display")
    (macro gdk_cursor_new::GdkCursor* (GdkCursorType) "gdk_cursor_new")
    (macro gdk_cursor_new_from_pixmap::GdkCursor* (GdkPixmap* GdkPixmap* GdkColor* GdkColor* gint gint) "gdk_cursor_new_from_pixmap")
    (macro gdk_cursor_new_from_pixbuf::GdkCursor* (GdkDisplay* GdkPixbuf* gint gint) "gdk_cursor_new_from_pixbuf")
    (macro gdk_cursor_get_display::GdkDisplay* (GdkCursor*) "gdk_cursor_get_display")
    (macro gdk_cursor_ref::GdkCursor* (GdkCursor*) "gdk_cursor_ref")
    (macro gdk_cursor_unref::void (GdkCursor*) "gdk_cursor_unref")
    (macro gdk_drag_context_get_type::GType () "gdk_drag_context_get_type")
    (macro gdk_drag_context_new::GdkDragContext* () "gdk_drag_context_new")
    (macro gdk_drag_context_ref::void (GdkDragContext*) "gdk_drag_context_ref")
    (macro gdk_drag_context_unref::void (GdkDragContext*) "gdk_drag_context_unref")
    (macro gdk_drag_status::void (GdkDragContext* GdkDragAction guint32) "gdk_drag_status")
    (macro gdk_drop_reply::void (GdkDragContext* gboolean guint32) "gdk_drop_reply")
    (macro gdk_drop_finish::void (GdkDragContext* gboolean guint32) "gdk_drop_finish")
    (macro gdk_drag_get_selection::GdkAtom (GdkDragContext*) "gdk_drag_get_selection")
    (macro gdk_drag_begin::GdkDragContext* (GdkWindow* GList*) "gdk_drag_begin")
    (macro gdk_drag_get_protocol_for_display::guint32 (GdkDisplay* guint32 GdkDragProtocol*) "gdk_drag_get_protocol_for_display")
    (macro gdk_drag_find_window_for_screen::void (GdkDragContext* GdkWindow* GdkScreen* gint gint GdkWindow** GdkDragProtocol*) "gdk_drag_find_window_for_screen")
    (macro gdk_drag_get_protocol::guint32 (guint32 GdkDragProtocol*) "gdk_drag_get_protocol")
    (macro gdk_drag_find_window::void (GdkDragContext* GdkWindow* gint gint GdkWindow** GdkDragProtocol*) "gdk_drag_find_window")
    (macro gdk_drag_motion::gboolean (GdkDragContext* GdkWindow* GdkDragProtocol gint gint GdkDragAction GdkDragAction guint32) "gdk_drag_motion")
    (macro gdk_drag_drop::void (GdkDragContext* guint32) "gdk_drag_drop")
    (macro gdk_drag_abort::void (GdkDragContext* guint32) "gdk_drag_abort")
    (macro gdk_drag_drop_succeeded::gboolean (GdkDragContext*) "gdk_drag_drop_succeeded")
    (macro gdk_device_get_type::GType () "gdk_device_get_type")
    (macro gdk_devices_list::GList* () "gdk_devices_list")
    (macro gdk_device_set_source::void (GdkDevice* GdkInputSource) "gdk_device_set_source")
    (macro gdk_device_set_mode::gboolean (GdkDevice* GdkInputMode) "gdk_device_set_mode")
    (macro gdk_device_set_key::void (GdkDevice* guint guint GdkModifierType) "gdk_device_set_key")
    (macro gdk_device_set_axis_use::void (GdkDevice* guint GdkAxisUse) "gdk_device_set_axis_use")
    (macro gdk_device_get_state::void (GdkDevice* GdkWindow* gdouble* GdkModifierType*) "gdk_device_get_state")
    (macro gdk_device_get_history::gboolean (GdkDevice* GdkWindow* guint32 guint32 GdkTimeCoord*** gint*) "gdk_device_get_history")
    (macro gdk_device_free_history::void (GdkTimeCoord** gint) "gdk_device_free_history")
    (macro gdk_device_get_axis::gboolean (GdkDevice* gdouble* GdkAxisUse gdouble*) "gdk_device_get_axis")
    (macro gdk_input_set_extension_events::void (GdkWindow* gint GdkExtensionMode) "gdk_input_set_extension_events")
    (macro gdk_device_get_core_pointer::GdkDevice* () "gdk_device_get_core_pointer")
    (macro gdk_event_get_type::GType () "gdk_event_get_type")
    (macro gdk_events_pending::gboolean () "gdk_events_pending")
    (macro gdk_event_get::GdkEvent* () "gdk_event_get")
    (macro gdk_event_peek::GdkEvent* () "gdk_event_peek")
    (macro gdk_event_get_graphics_expose::GdkEvent* (GdkWindow*) "gdk_event_get_graphics_expose")
    (macro gdk_event_put::void (GdkEvent*) "gdk_event_put")
    (macro gdk_event_new::GdkEvent* (GdkEventType) "gdk_event_new")
    (macro gdk_event_copy::GdkEvent* (GdkEvent*) "gdk_event_copy")
    (macro gdk_event_free::void (GdkEvent*) "gdk_event_free")
    (macro gdk_event_get_time::guint32 (GdkEvent*) "gdk_event_get_time")
    (macro gdk_event_get_state::gboolean (GdkEvent* GdkModifierType*) "gdk_event_get_state")
    (macro gdk_event_get_coords::gboolean (GdkEvent* gdouble* gdouble*) "gdk_event_get_coords")
    (macro gdk_event_get_root_coords::gboolean (GdkEvent* gdouble* gdouble*) "gdk_event_get_root_coords")
    (macro gdk_event_get_axis::gboolean (GdkEvent* GdkAxisUse gdouble*) "gdk_event_get_axis")
    (macro gdk_event_handler_set::void (GdkEventFunc gpointer GDestroyNotify) "gdk_event_handler_set")
    (macro gdk_event_set_screen::void (GdkEvent* GdkScreen*) "gdk_event_set_screen")
    (macro gdk_event_get_screen::GdkScreen* (GdkEvent*) "gdk_event_get_screen")
    (macro gdk_set_show_events::void (gboolean) "gdk_set_show_events")
    (macro gdk_get_show_events::gboolean () "gdk_get_show_events")
    (macro gdk_add_client_message_filter::void (GdkAtom GdkFilterFunc gpointer) "gdk_add_client_message_filter")
    (macro gdk_setting_get::gboolean (gchar* GValue*) "gdk_setting_get")
    (macro gdk_display_get_type::GType () "gdk_display_get_type")
    (macro gdk_display_open::GdkDisplay* (gchar*) "gdk_display_open")
    (macro gdk_display_get_name::gchar* (GdkDisplay*) "gdk_display_get_name")
    (macro gdk_display_get_n_screens::gint (GdkDisplay*) "gdk_display_get_n_screens")
    (macro gdk_display_get_screen::GdkScreen* (GdkDisplay* gint) "gdk_display_get_screen")
    (macro gdk_display_get_default_screen::GdkScreen* (GdkDisplay*) "gdk_display_get_default_screen")
    (macro gdk_display_pointer_ungrab::void (GdkDisplay* guint32) "gdk_display_pointer_ungrab")
    (macro gdk_display_keyboard_ungrab::void (GdkDisplay* guint32) "gdk_display_keyboard_ungrab")
    (macro gdk_display_pointer_is_grabbed::gboolean (GdkDisplay*) "gdk_display_pointer_is_grabbed")
    (macro gdk_display_beep::void (GdkDisplay*) "gdk_display_beep")
    (macro gdk_display_sync::void (GdkDisplay*) "gdk_display_sync")
    (macro gdk_display_flush::void (GdkDisplay*) "gdk_display_flush")
    (macro gdk_display_close::void (GdkDisplay*) "gdk_display_close")
    (macro gdk_display_list_devices::GList* (GdkDisplay*) "gdk_display_list_devices")
    (macro gdk_display_get_event::GdkEvent* (GdkDisplay*) "gdk_display_get_event")
    (macro gdk_display_peek_event::GdkEvent* (GdkDisplay*) "gdk_display_peek_event")
    (macro gdk_display_put_event::void (GdkDisplay* GdkEvent*) "gdk_display_put_event")
    (macro gdk_display_add_client_message_filter::void (GdkDisplay* GdkAtom GdkFilterFunc gpointer) "gdk_display_add_client_message_filter")
    (macro gdk_display_set_double_click_time::void (GdkDisplay* guint) "gdk_display_set_double_click_time")
    (macro gdk_display_set_double_click_distance::void (GdkDisplay* guint) "gdk_display_set_double_click_distance")
    (macro gdk_display_get_default::GdkDisplay* () "gdk_display_get_default")
    (macro gdk_display_get_core_pointer::GdkDevice* (GdkDisplay*) "gdk_display_get_core_pointer")
    (macro gdk_display_get_pointer::void (GdkDisplay* GdkScreen** gint* gint* GdkModifierType*) "gdk_display_get_pointer")
    (macro gdk_display_get_window_at_pointer::GdkWindow* (GdkDisplay* gint* gint*) "gdk_display_get_window_at_pointer")
    (macro gdk_display_set_pointer_hooks::GdkDisplayPointerHooks* (GdkDisplay* GdkDisplayPointerHooks*) "gdk_display_set_pointer_hooks")
    (macro gdk_display_open_default_libgtk_only::GdkDisplay* () "gdk_display_open_default_libgtk_only")
    (macro gdk_display_supports_cursor_alpha::gboolean (GdkDisplay*) "gdk_display_supports_cursor_alpha")
    (macro gdk_display_supports_cursor_color::gboolean (GdkDisplay*) "gdk_display_supports_cursor_color")
    (macro gdk_display_get_default_cursor_size::guint (GdkDisplay*) "gdk_display_get_default_cursor_size")
    (macro gdk_display_get_maximal_cursor_size::void (GdkDisplay* guint* guint*) "gdk_display_get_maximal_cursor_size")
    (macro gdk_display_get_default_group::GdkWindow* (GdkDisplay*) "gdk_display_get_default_group")
    (macro gdk_display_supports_selection_notification::gboolean (GdkDisplay*) "gdk_display_supports_selection_notification")
    (macro gdk_display_request_selection_notification::gboolean (GdkDisplay* GdkAtom) "gdk_display_request_selection_notification")
    (macro gdk_display_supports_clipboard_persistence::gboolean (GdkDisplay*) "gdk_display_supports_clipboard_persistence")
    (macro gdk_display_store_clipboard::void (GdkDisplay* GdkWindow* guint32 GdkAtom* gint) "gdk_display_store_clipboard")
    (macro gdk_gc_get_type::GType () "gdk_gc_get_type")
    (macro gdk_gc_new::GdkGC* (GdkDrawable*) "gdk_gc_new")
    (macro gdk_gc_new_with_values::GdkGC* (GdkDrawable* GdkGCValues* GdkGCValuesMask) "gdk_gc_new_with_values")
    (macro gdk_gc_ref::GdkGC* (GdkGC*) "gdk_gc_ref")
    (macro gdk_gc_unref::void (GdkGC*) "gdk_gc_unref")
    (macro gdk_gc_get_values::void (GdkGC* GdkGCValues*) "gdk_gc_get_values")
    (macro gdk_gc_set_values::void (GdkGC* GdkGCValues* GdkGCValuesMask) "gdk_gc_set_values")
    (macro gdk_gc_set_foreground::void (GdkGC* GdkColor*) "gdk_gc_set_foreground")
    (macro gdk_gc_set_background::void (GdkGC* GdkColor*) "gdk_gc_set_background")
    (macro gdk_gc_set_font::void (GdkGC* GdkFont*) "gdk_gc_set_font")
    (macro gdk_gc_set_function::void (GdkGC* GdkFunction) "gdk_gc_set_function")
    (macro gdk_gc_set_fill::void (GdkGC* GdkFill) "gdk_gc_set_fill")
    (macro gdk_gc_set_tile::void (GdkGC* GdkPixmap*) "gdk_gc_set_tile")
    (macro gdk_gc_set_stipple::void (GdkGC* GdkPixmap*) "gdk_gc_set_stipple")
    (macro gdk_gc_set_ts_origin::void (GdkGC* gint gint) "gdk_gc_set_ts_origin")
    (macro gdk_gc_set_clip_origin::void (GdkGC* gint gint) "gdk_gc_set_clip_origin")
    (macro gdk_gc_set_clip_mask::void (GdkGC* GdkBitmap*) "gdk_gc_set_clip_mask")
    (macro gdk_gc_set_clip_rectangle::void (GdkGC* GdkRectangle*) "gdk_gc_set_clip_rectangle")
    (macro gdk_gc_set_clip_region::void (GdkGC* GdkRegion*) "gdk_gc_set_clip_region")
    (macro gdk_gc_set_subwindow::void (GdkGC* GdkSubwindowMode) "gdk_gc_set_subwindow")
    (macro gdk_gc_set_exposures::void (GdkGC* gboolean) "gdk_gc_set_exposures")
    (macro gdk_gc_set_line_attributes::void (GdkGC* gint GdkLineStyle GdkCapStyle GdkJoinStyle) "gdk_gc_set_line_attributes")
    (macro gdk_gc_set_dashes::void (GdkGC* gint gint8* gint) "gdk_gc_set_dashes")
    (macro gdk_gc_offset::void (GdkGC* gint gint) "gdk_gc_offset")
    (macro gdk_gc_copy::void (GdkGC* GdkGC*) "gdk_gc_copy")
    (macro gdk_gc_set_colormap::void (GdkGC* GdkColormap*) "gdk_gc_set_colormap")
    (macro gdk_gc_get_colormap::GdkColormap* (GdkGC*) "gdk_gc_get_colormap")
    (macro gdk_gc_set_rgb_fg_color::void (GdkGC* GdkColor*) "gdk_gc_set_rgb_fg_color")
    (macro gdk_gc_set_rgb_bg_color::void (GdkGC* GdkColor*) "gdk_gc_set_rgb_bg_color")
    (macro gdk_gc_get_screen::GdkScreen* (GdkGC*) "gdk_gc_get_screen")
    (macro gdk_rgb_init::void () "gdk_rgb_init")
    (macro gdk_rgb_xpixel_from_rgb::gulong (guint32) "gdk_rgb_xpixel_from_rgb")
    (macro gdk_rgb_gc_set_foreground::void (GdkGC* guint32) "gdk_rgb_gc_set_foreground")
    (macro gdk_rgb_gc_set_background::void (GdkGC* guint32) "gdk_rgb_gc_set_background")
    (macro gdk_rgb_find_color::void (GdkColormap* GdkColor*) "gdk_rgb_find_color")
    (macro gdk_draw_rgb_image::void (GdkDrawable* GdkGC* gint gint gint gint GdkRgbDither guchar* gint) "gdk_draw_rgb_image")
    (macro gdk_draw_rgb_image_dithalign::void (GdkDrawable* GdkGC* gint gint gint gint GdkRgbDither guchar* gint gint gint) "gdk_draw_rgb_image_dithalign")
    (macro gdk_draw_rgb_32_image::void (GdkDrawable* GdkGC* gint gint gint gint GdkRgbDither guchar* gint) "gdk_draw_rgb_32_image")
    (macro gdk_draw_rgb_32_image_dithalign::void (GdkDrawable* GdkGC* gint gint gint gint GdkRgbDither guchar* gint gint gint) "gdk_draw_rgb_32_image_dithalign")
    (macro gdk_draw_gray_image::void (GdkDrawable* GdkGC* gint gint gint gint GdkRgbDither guchar* gint) "gdk_draw_gray_image")
    (macro gdk_draw_indexed_image::void (GdkDrawable* GdkGC* gint gint gint gint GdkRgbDither guchar* gint GdkRgbCmap*) "gdk_draw_indexed_image")
    (macro gdk_rgb_cmap_new::GdkRgbCmap* (guint32* gint) "gdk_rgb_cmap_new")
    (macro gdk_rgb_cmap_free::void (GdkRgbCmap*) "gdk_rgb_cmap_free")
    (macro gdk_rgb_set_verbose::void (gboolean) "gdk_rgb_set_verbose")
    (macro gdk_rgb_set_install::void (gboolean) "gdk_rgb_set_install")
    (macro gdk_rgb_set_min_colors::void (gint) "gdk_rgb_set_min_colors")
    (macro gdk_rgb_get_colormap::GdkColormap* () "gdk_rgb_get_colormap")
    (macro gdk_rgb_get_visual::GdkVisual* () "gdk_rgb_get_visual")
    (macro gdk_rgb_ditherable::gboolean () "gdk_rgb_ditherable")
    (macro gdk_rgb_colormap_ditherable::gboolean (GdkColormap*) "gdk_rgb_colormap_ditherable")
    (macro gdk_drawable_get_type::GType () "gdk_drawable_get_type")
    (macro gdk_drawable_set_data::void (GdkDrawable* gchar* gpointer GDestroyNotify) "gdk_drawable_set_data")
    (macro gdk_drawable_get_data::gpointer (GdkDrawable* gchar*) "gdk_drawable_get_data")
    (macro gdk_drawable_get_size::void (GdkDrawable* gint* gint*) "gdk_drawable_get_size")
    (macro gdk_drawable_set_colormap::void (GdkDrawable* GdkColormap*) "gdk_drawable_set_colormap")
    (macro gdk_drawable_get_colormap::GdkColormap* (GdkDrawable*) "gdk_drawable_get_colormap")
    (macro gdk_drawable_get_visual::GdkVisual* (GdkDrawable*) "gdk_drawable_get_visual")
    (macro gdk_drawable_get_depth::gint (GdkDrawable*) "gdk_drawable_get_depth")
    (macro gdk_drawable_get_screen::GdkScreen* (GdkDrawable*) "gdk_drawable_get_screen")
    (macro gdk_drawable_get_display::GdkDisplay* (GdkDrawable*) "gdk_drawable_get_display")
    (macro gdk_drawable_ref::GdkDrawable* (GdkDrawable*) "gdk_drawable_ref")
    (macro gdk_drawable_unref::void (GdkDrawable*) "gdk_drawable_unref")
    (macro gdk_draw_point::void (GdkDrawable* GdkGC* gint gint) "gdk_draw_point")
    (macro gdk_draw_line::void (GdkDrawable* GdkGC* gint gint gint gint) "gdk_draw_line")
    (macro gdk_draw_rectangle::void (GdkDrawable* GdkGC* gboolean gint gint gint gint) "gdk_draw_rectangle")
    (macro gdk_draw_arc::void (GdkDrawable* GdkGC* gboolean gint gint gint gint gint gint) "gdk_draw_arc")
    (macro gdk_draw_polygon::void (GdkDrawable* GdkGC* gboolean GdkPoint* gint) "gdk_draw_polygon")
    (macro gdk_draw_string::void (GdkDrawable* GdkFont* GdkGC* gint gint gchar*) "gdk_draw_string")
    (macro gdk_draw_text::void (GdkDrawable* GdkFont* GdkGC* gint gint gchar* gint) "gdk_draw_text")
    (macro gdk_draw_text_wc::void (GdkDrawable* GdkFont* GdkGC* gint gint GdkWChar* gint) "gdk_draw_text_wc")
    (macro gdk_draw_drawable::void (GdkDrawable* GdkGC* GdkDrawable* gint gint gint gint gint gint) "gdk_draw_drawable")
    (macro gdk_draw_image::void (GdkDrawable* GdkGC* GdkImage* gint gint gint gint gint gint) "gdk_draw_image")
    (macro gdk_draw_points::void (GdkDrawable* GdkGC* GdkPoint* gint) "gdk_draw_points")
    (macro gdk_draw_segments::void (GdkDrawable* GdkGC* GdkSegment* gint) "gdk_draw_segments")
    (macro gdk_draw_lines::void (GdkDrawable* GdkGC* GdkPoint* gint) "gdk_draw_lines")
    (macro gdk_draw_pixbuf::void (GdkDrawable* GdkGC* GdkPixbuf* gint gint gint gint gint gint GdkRgbDither gint gint) "gdk_draw_pixbuf")
    (macro gdk_draw_glyphs::void (GdkDrawable* GdkGC* PangoFont* gint gint PangoGlyphString*) "gdk_draw_glyphs")
    (macro gdk_draw_layout_line::void (GdkDrawable* GdkGC* gint gint PangoLayoutLine*) "gdk_draw_layout_line")
    (macro gdk_draw_layout::void (GdkDrawable* GdkGC* gint gint PangoLayout*) "gdk_draw_layout")
    (macro gdk_draw_layout_line_with_colors::void (GdkDrawable* GdkGC* gint gint PangoLayoutLine* GdkColor* GdkColor*) "gdk_draw_layout_line_with_colors")
    (macro gdk_draw_layout_with_colors::void (GdkDrawable* GdkGC* gint gint PangoLayout* GdkColor* GdkColor*) "gdk_draw_layout_with_colors")
    (macro gdk_draw_glyphs_transformed::void (GdkDrawable* GdkGC* PangoMatrix* PangoFont* gint gint PangoGlyphString*) "gdk_draw_glyphs_transformed")
    (macro gdk_draw_trapezoids::void (GdkDrawable* GdkGC* GdkTrapezoid* gint) "gdk_draw_trapezoids")
    (macro gdk_drawable_get_image::GdkImage* (GdkDrawable* gint gint gint gint) "gdk_drawable_get_image")
    (macro gdk_drawable_copy_to_image::GdkImage* (GdkDrawable* GdkImage* gint gint gint gint gint gint) "gdk_drawable_copy_to_image")
    (macro gdk_drawable_get_clip_region::GdkRegion* (GdkDrawable*) "gdk_drawable_get_clip_region")
    (macro gdk_drawable_get_visible_region::GdkRegion* (GdkDrawable*) "gdk_drawable_get_visible_region")
    (macro gdk_draw_rectangle_alpha_libgtk_only::gboolean (GdkDrawable* gint gint gint gint GdkColor* guint16) "gdk_draw_rectangle_alpha_libgtk_only")
    (macro gdk_cursor_type_get_type::GType () "gdk_cursor_type_get_type")
    (macro gdk_drag_action_get_type::GType () "gdk_drag_action_get_type")
    (macro gdk_drag_protocol_get_type::GType () "gdk_drag_protocol_get_type")
    (macro gdk_filter_return_get_type::GType () "gdk_filter_return_get_type")
    (macro gdk_event_type_get_type::GType () "gdk_event_type_get_type")
    (macro gdk_event_mask_get_type::GType () "gdk_event_mask_get_type")
    (macro gdk_visibility_state_get_type::GType () "gdk_visibility_state_get_type")
    (macro gdk_scroll_direction_get_type::GType () "gdk_scroll_direction_get_type")
    (macro gdk_notify_type_get_type::GType () "gdk_notify_type_get_type")
    (macro gdk_crossing_mode_get_type::GType () "gdk_crossing_mode_get_type")
    (macro gdk_property_state_get_type::GType () "gdk_property_state_get_type")
    (macro gdk_window_state_get_type::GType () "gdk_window_state_get_type")
    (macro gdk_setting_action_get_type::GType () "gdk_setting_action_get_type")
    (macro gdk_owner_change_get_type::GType () "gdk_owner_change_get_type")
    (macro gdk_font_type_get_type::GType () "gdk_font_type_get_type")
    (macro gdk_cap_style_get_type::GType () "gdk_cap_style_get_type")
    (macro gdk_fill_get_type::GType () "gdk_fill_get_type")
    (macro gdk_function_get_type::GType () "gdk_function_get_type")
    (macro gdk_join_style_get_type::GType () "gdk_join_style_get_type")
    (macro gdk_line_style_get_type::GType () "gdk_line_style_get_type")
    (macro gdk_subwindow_mode_get_type::GType () "gdk_subwindow_mode_get_type")
    (macro gdk_gc_values_mask_get_type::GType () "gdk_gc_values_mask_get_type")
    (macro gdk_image_type_get_type::GType () "gdk_image_type_get_type")
    (macro gdk_extension_mode_get_type::GType () "gdk_extension_mode_get_type")
    (macro gdk_input_source_get_type::GType () "gdk_input_source_get_type")
    (macro gdk_input_mode_get_type::GType () "gdk_input_mode_get_type")
    (macro gdk_axis_use_get_type::GType () "gdk_axis_use_get_type")
    (macro gdk_prop_mode_get_type::GType () "gdk_prop_mode_get_type")
    (macro gdk_fill_rule_get_type::GType () "gdk_fill_rule_get_type")
    (macro gdk_overlap_type_get_type::GType () "gdk_overlap_type_get_type")
    (macro gdk_rgb_dither_get_type::GType () "gdk_rgb_dither_get_type")
    (macro gdk_byte_order_get_type::GType () "gdk_byte_order_get_type")
    (macro gdk_modifier_type_get_type::GType () "gdk_modifier_type_get_type")
    (macro gdk_input_condition_get_type::GType () "gdk_input_condition_get_type")
    (macro gdk_status_get_type::GType () "gdk_status_get_type")
    (macro gdk_grab_status_get_type::GType () "gdk_grab_status_get_type")
    (macro gdk_visual_type_get_type::GType () "gdk_visual_type_get_type")
    (macro gdk_window_class_get_type::GType () "gdk_window_class_get_type")
    (macro gdk_window_type_get_type::GType () "gdk_window_type_get_type")
    (macro gdk_window_attributes_type_get_type::GType () "gdk_window_attributes_type_get_type")
    (macro gdk_window_hints_get_type::GType () "gdk_window_hints_get_type")
    (macro gdk_window_type_hint_get_type::GType () "gdk_window_type_hint_get_type")
    (macro gdk_wm_decoration_get_type::GType () "gdk_wm_decoration_get_type")
    (macro gdk_wm_function_get_type::GType () "gdk_wm_function_get_type")
    (macro gdk_gravity_get_type::GType () "gdk_gravity_get_type")
    (macro gdk_window_edge_get_type::GType () "gdk_window_edge_get_type")
    (macro gdk_font_get_type::GType () "gdk_font_get_type")
    (macro gdk_font_ref::GdkFont* (GdkFont*) "gdk_font_ref")
    (macro gdk_font_unref::void (GdkFont*) "gdk_font_unref")
    (macro gdk_font_id::gint (GdkFont*) "gdk_font_id")
    (macro gdk_font_equal::gboolean (GdkFont* GdkFont*) "gdk_font_equal")
    (macro gdk_font_load_for_display::GdkFont* (GdkDisplay* gchar*) "gdk_font_load_for_display")
    (macro gdk_fontset_load_for_display::GdkFont* (GdkDisplay* gchar*) "gdk_fontset_load_for_display")
    (macro gdk_font_from_description_for_display::GdkFont* (GdkDisplay* PangoFontDescription*) "gdk_font_from_description_for_display")
    (macro gdk_font_load::GdkFont* (gchar*) "gdk_font_load")
    (macro gdk_fontset_load::GdkFont* (gchar*) "gdk_fontset_load")
    (macro gdk_font_from_description::GdkFont* (PangoFontDescription*) "gdk_font_from_description")
    (macro gdk_string_width::gint (GdkFont* gchar*) "gdk_string_width")
    (macro gdk_text_width::gint (GdkFont* gchar* gint) "gdk_text_width")
    (macro gdk_text_width_wc::gint (GdkFont* GdkWChar* gint) "gdk_text_width_wc")
    (macro gdk_char_width::gint (GdkFont* gchar) "gdk_char_width")
    (macro gdk_char_width_wc::gint (GdkFont* GdkWChar) "gdk_char_width_wc")
    (macro gdk_string_measure::gint (GdkFont* gchar*) "gdk_string_measure")
    (macro gdk_text_measure::gint (GdkFont* gchar* gint) "gdk_text_measure")
    (macro gdk_char_measure::gint (GdkFont* gchar) "gdk_char_measure")
    (macro gdk_string_height::gint (GdkFont* gchar*) "gdk_string_height")
    (macro gdk_text_height::gint (GdkFont* gchar* gint) "gdk_text_height")
    (macro gdk_char_height::gint (GdkFont* gchar) "gdk_char_height")
    (macro gdk_text_extents::void (GdkFont* gchar* gint gint* gint* gint* gint* gint*) "gdk_text_extents")
    (macro gdk_text_extents_wc::void (GdkFont* GdkWChar* gint gint* gint* gint* gint* gint*) "gdk_text_extents_wc")
    (macro gdk_string_extents::void (GdkFont* gchar* gint* gint* gint* gint* gint*) "gdk_string_extents")
    (macro gdk_font_get_display::GdkDisplay* (GdkFont*) "gdk_font_get_display")
    (macro gdk_image_get_type::GType () "gdk_image_get_type")
    (macro gdk_image_new::GdkImage* (GdkImageType GdkVisual* gint gint) "gdk_image_new")
    (macro gdk_image_get::GdkImage* (GdkDrawable* gint gint gint gint) "gdk_image_get")
    (macro gdk_image_ref::GdkImage* (GdkImage*) "gdk_image_ref")
    (macro gdk_image_unref::void (GdkImage*) "gdk_image_unref")
    (macro gdk_image_put_pixel::void (GdkImage* gint gint guint32) "gdk_image_put_pixel")
    (macro gdk_image_get_pixel::guint32 (GdkImage* gint gint) "gdk_image_get_pixel")
    (macro gdk_image_set_colormap::void (GdkImage* GdkColormap*) "gdk_image_set_colormap")
    (macro gdk_image_get_colormap::GdkColormap* (GdkImage*) "gdk_image_get_colormap")
    (macro gdk_keymap_get_type::GType () "gdk_keymap_get_type")
    (macro gdk_keymap_get_default::GdkKeymap* () "gdk_keymap_get_default")
    (macro gdk_keymap_get_for_display::GdkKeymap* (GdkDisplay*) "gdk_keymap_get_for_display")
    (macro gdk_keymap_lookup_key::guint (GdkKeymap* GdkKeymapKey*) "gdk_keymap_lookup_key")
    (macro gdk_keymap_translate_keyboard_state::gboolean (GdkKeymap* guint GdkModifierType gint guint* gint* gint* GdkModifierType*) "gdk_keymap_translate_keyboard_state")
    (macro gdk_keymap_get_entries_for_keyval::gboolean (GdkKeymap* guint GdkKeymapKey** gint*) "gdk_keymap_get_entries_for_keyval")
    (macro gdk_keymap_get_entries_for_keycode::gboolean (GdkKeymap* guint GdkKeymapKey** guint** gint*) "gdk_keymap_get_entries_for_keycode")
    (macro gdk_keymap_get_direction::PangoDirection (GdkKeymap*) "gdk_keymap_get_direction")
    (macro gdk_keyval_name::gchar* (guint) "gdk_keyval_name")
    (macro gdk_keyval_from_name::guint (gchar*) "gdk_keyval_from_name")
    (macro gdk_keyval_convert_case::void (guint guint* guint*) "gdk_keyval_convert_case")
    (macro gdk_keyval_to_upper::guint (guint) "gdk_keyval_to_upper")
    (macro gdk_keyval_to_lower::guint (guint) "gdk_keyval_to_lower")
    (macro gdk_keyval_is_upper::gboolean (guint) "gdk_keyval_is_upper")
    (macro gdk_keyval_is_lower::gboolean (guint) "gdk_keyval_is_lower")
    (macro gdk_keyval_to_unicode::guint32 (guint) "gdk_keyval_to_unicode")
    (macro gdk_unicode_to_keyval::guint (guint32) "gdk_unicode_to_keyval")
    (macro gdk_display_manager_get_type::GType () "gdk_display_manager_get_type")
    (macro gdk_display_manager_get::GdkDisplayManager* () "gdk_display_manager_get")
    (macro gdk_display_manager_get_default_display::GdkDisplay* (GdkDisplayManager*) "gdk_display_manager_get_default_display")
    (macro gdk_display_manager_set_default_display::void (GdkDisplayManager* GdkDisplay*) "gdk_display_manager_set_default_display")
    (macro gdk_display_manager_list_displays::GSList* (GdkDisplayManager*) "gdk_display_manager_list_displays")
    (macro gdk_pango_renderer_get_type::GType () "gdk_pango_renderer_get_type")
    (macro gdk_pango_renderer_new::PangoRenderer* (GdkScreen*) "gdk_pango_renderer_new")
    (macro gdk_pango_renderer_get_default::PangoRenderer* (GdkScreen*) "gdk_pango_renderer_get_default")
    (macro gdk_pango_renderer_set_drawable::void (GdkPangoRenderer* GdkDrawable*) "gdk_pango_renderer_set_drawable")
    (macro gdk_pango_renderer_set_gc::void (GdkPangoRenderer* GdkGC*) "gdk_pango_renderer_set_gc")
    (macro gdk_pango_renderer_set_stipple::void (GdkPangoRenderer* PangoRenderPart GdkBitmap*) "gdk_pango_renderer_set_stipple")
    (macro gdk_pango_renderer_set_override_color::void (GdkPangoRenderer* PangoRenderPart GdkColor*) "gdk_pango_renderer_set_override_color")
    (macro gdk_pango_context_get_for_screen::PangoContext* (GdkScreen*) "gdk_pango_context_get_for_screen")
    (macro gdk_pango_context_get::PangoContext* () "gdk_pango_context_get")
    (macro gdk_pango_context_set_colormap::void (PangoContext* GdkColormap*) "gdk_pango_context_set_colormap")
    (macro gdk_pango_layout_line_get_clip_region::GdkRegion* (PangoLayoutLine* gint gint gint* gint) "gdk_pango_layout_line_get_clip_region")
    (macro gdk_pango_layout_get_clip_region::GdkRegion* (PangoLayout* gint gint gint* gint) "gdk_pango_layout_get_clip_region")
    (macro gdk_pango_attr_stipple_new::PangoAttribute* (GdkBitmap*) "gdk_pango_attr_stipple_new")
    (macro gdk_pango_attr_embossed_new::PangoAttribute* (gboolean) "gdk_pango_attr_embossed_new")
    (macro gdk_pixbuf_render_threshold_alpha::void (GdkPixbuf* GdkBitmap* int int int int int int int) "gdk_pixbuf_render_threshold_alpha")
    (macro gdk_pixbuf_render_to_drawable::void (GdkPixbuf* GdkDrawable* GdkGC* int int int int int int GdkRgbDither int int) "gdk_pixbuf_render_to_drawable")
    (macro gdk_pixbuf_render_to_drawable_alpha::void (GdkPixbuf* GdkDrawable* int int int int int int GdkPixbufAlphaMode int GdkRgbDither int int) "gdk_pixbuf_render_to_drawable_alpha")
    (macro gdk_pixbuf_render_pixmap_and_mask_for_colormap::void (GdkPixbuf* GdkColormap* GdkPixmap** GdkBitmap** int) "gdk_pixbuf_render_pixmap_and_mask_for_colormap")
    (macro gdk_pixbuf_render_pixmap_and_mask::void (GdkPixbuf* GdkPixmap** GdkBitmap** int) "gdk_pixbuf_render_pixmap_and_mask")
    (macro gdk_pixbuf_get_from_drawable::GdkPixbuf* (GdkPixbuf* GdkDrawable* GdkColormap* int int int int int int) "gdk_pixbuf_get_from_drawable")
    (macro gdk_pixbuf_get_from_image::GdkPixbuf* (GdkPixbuf* GdkImage* GdkColormap* int int int int int int) "gdk_pixbuf_get_from_image")
    (macro gdk_pixmap_get_type::GType () "gdk_pixmap_get_type")
    (macro gdk_pixmap_new::GdkPixmap* (GdkDrawable* gint gint gint) "gdk_pixmap_new")
    (macro gdk_bitmap_create_from_data::GdkBitmap* (GdkDrawable* gchar* gint gint) "gdk_bitmap_create_from_data")
    (macro gdk_pixmap_create_from_data::GdkPixmap* (GdkDrawable* gchar* gint gint gint GdkColor* GdkColor*) "gdk_pixmap_create_from_data")
    (macro gdk_pixmap_create_from_xpm::GdkPixmap* (GdkDrawable* GdkBitmap** GdkColor* gchar*) "gdk_pixmap_create_from_xpm")
    (macro gdk_pixmap_colormap_create_from_xpm::GdkPixmap* (GdkDrawable* GdkColormap* GdkBitmap** GdkColor* gchar*) "gdk_pixmap_colormap_create_from_xpm")
    (macro gdk_pixmap_create_from_xpm_d::GdkPixmap* (GdkDrawable* GdkBitmap** GdkColor* gchar**) "gdk_pixmap_create_from_xpm_d")
    (macro gdk_pixmap_colormap_create_from_xpm_d::GdkPixmap* (GdkDrawable* GdkColormap* GdkBitmap** GdkColor* gchar**) "gdk_pixmap_colormap_create_from_xpm_d")
    (macro gdk_pixmap_foreign_new::GdkPixmap* (GdkNativeWindow) "gdk_pixmap_foreign_new")
    (macro gdk_pixmap_lookup::GdkPixmap* (GdkNativeWindow) "gdk_pixmap_lookup")
    (macro gdk_pixmap_foreign_new_for_display::GdkPixmap* (GdkDisplay* GdkNativeWindow) "gdk_pixmap_foreign_new_for_display")
    (macro gdk_pixmap_lookup_for_display::GdkPixmap* (GdkDisplay* GdkNativeWindow) "gdk_pixmap_lookup_for_display")
    (macro gdk_atom_intern::GdkAtom (gchar* gboolean) "gdk_atom_intern")
    (macro gdk_atom_name::gchar* (GdkAtom) "gdk_atom_name")
    (macro gdk_property_get::gboolean (GdkWindow* GdkAtom GdkAtom gulong gulong gint GdkAtom* gint* gint* guchar**) "gdk_property_get")
    (macro gdk_property_change::void (GdkWindow* GdkAtom GdkAtom gint GdkPropMode guchar* gint) "gdk_property_change")
    (macro gdk_property_delete::void (GdkWindow* GdkAtom) "gdk_property_delete")
    (macro gdk_text_property_to_text_list::gint (GdkAtom gint guchar* gint gchar***) "gdk_text_property_to_text_list")
    (macro gdk_text_property_to_utf8_list::gint (GdkAtom gint guchar* gint gchar***) "gdk_text_property_to_utf8_list")
    (macro gdk_utf8_to_compound_text::gboolean (gchar* GdkAtom* gint* guchar** gint*) "gdk_utf8_to_compound_text")
    (macro gdk_string_to_compound_text::gint (gchar* GdkAtom* gint* guchar** gint*) "gdk_string_to_compound_text")
    (macro gdk_text_property_to_text_list_for_display::gint (GdkDisplay* GdkAtom gint guchar* gint gchar***) "gdk_text_property_to_text_list_for_display")
    (macro gdk_text_property_to_utf8_list_for_display::gint (GdkDisplay* GdkAtom gint guchar* gint gchar***) "gdk_text_property_to_utf8_list_for_display")
    (macro gdk_utf8_to_string_target::gchar* (gchar*) "gdk_utf8_to_string_target")
    (macro gdk_string_to_compound_text_for_display::gint (GdkDisplay* gchar* GdkAtom* gint* guchar** gint*) "gdk_string_to_compound_text_for_display")
    (macro gdk_utf8_to_compound_text_for_display::gboolean (GdkDisplay* gchar* GdkAtom* gint* guchar** gint*) "gdk_utf8_to_compound_text_for_display")
    (macro gdk_free_text_list::void (gchar**) "gdk_free_text_list")
    (macro gdk_free_compound_text::void (guchar*) "gdk_free_compound_text")
    (macro gdk_region_new::GdkRegion* () "gdk_region_new")
    (macro gdk_region_polygon::GdkRegion* (GdkPoint* gint GdkFillRule) "gdk_region_polygon")
    (macro gdk_region_copy::GdkRegion* (GdkRegion*) "gdk_region_copy")
    (macro gdk_region_rectangle::GdkRegion* (GdkRectangle*) "gdk_region_rectangle")
    (macro gdk_region_destroy::void (GdkRegion*) "gdk_region_destroy")
    (macro gdk_region_get_clipbox::void (GdkRegion* GdkRectangle*) "gdk_region_get_clipbox")
    (macro gdk_region_get_rectangles::void (GdkRegion* GdkRectangle** gint*) "gdk_region_get_rectangles")
    (macro gdk_region_empty::gboolean (GdkRegion*) "gdk_region_empty")
    (macro gdk_region_equal::gboolean (GdkRegion* GdkRegion*) "gdk_region_equal")
    (macro gdk_region_point_in::gboolean (GdkRegion* int int) "gdk_region_point_in")
    (macro gdk_region_rect_in::GdkOverlapType (GdkRegion* GdkRectangle*) "gdk_region_rect_in")
    (macro gdk_region_offset::void (GdkRegion* gint gint) "gdk_region_offset")
    (macro gdk_region_shrink::void (GdkRegion* gint gint) "gdk_region_shrink")
    (macro gdk_region_union_with_rect::void (GdkRegion* GdkRectangle*) "gdk_region_union_with_rect")
    (macro gdk_region_intersect::void (GdkRegion* GdkRegion*) "gdk_region_intersect")
    (macro gdk_region_union::void (GdkRegion* GdkRegion*) "gdk_region_union")
    (macro gdk_region_subtract::void (GdkRegion* GdkRegion*) "gdk_region_subtract")
    (macro gdk_region_xor::void (GdkRegion* GdkRegion*) "gdk_region_xor")
    (macro gdk_region_spans_intersect_foreach::void (GdkRegion* GdkSpan* int gboolean GdkSpanFunc gpointer) "gdk_region_spans_intersect_foreach")
    (macro gdk_screen_get_type::GType () "gdk_screen_get_type")
    (macro gdk_screen_get_default_colormap::GdkColormap* (GdkScreen*) "gdk_screen_get_default_colormap")
    (macro gdk_screen_set_default_colormap::void (GdkScreen* GdkColormap*) "gdk_screen_set_default_colormap")
    (macro gdk_screen_get_system_colormap::GdkColormap* (GdkScreen*) "gdk_screen_get_system_colormap")
    (macro gdk_screen_get_system_visual::GdkVisual* (GdkScreen*) "gdk_screen_get_system_visual")
    (macro gdk_screen_get_rgb_colormap::GdkColormap* (GdkScreen*) "gdk_screen_get_rgb_colormap")
    (macro gdk_screen_get_rgb_visual::GdkVisual* (GdkScreen*) "gdk_screen_get_rgb_visual")
    (macro gdk_screen_get_root_window::GdkWindow* (GdkScreen*) "gdk_screen_get_root_window")
    (macro gdk_screen_get_display::GdkDisplay* (GdkScreen*) "gdk_screen_get_display")
    (macro gdk_screen_get_number::gint (GdkScreen*) "gdk_screen_get_number")
    (macro gdk_screen_get_width::gint (GdkScreen*) "gdk_screen_get_width")
    (macro gdk_screen_get_height::gint (GdkScreen*) "gdk_screen_get_height")
    (macro gdk_screen_get_width_mm::gint (GdkScreen*) "gdk_screen_get_width_mm")
    (macro gdk_screen_get_height_mm::gint (GdkScreen*) "gdk_screen_get_height_mm")
    (macro gdk_screen_list_visuals::GList* (GdkScreen*) "gdk_screen_list_visuals")
    (macro gdk_screen_get_toplevel_windows::GList* (GdkScreen*) "gdk_screen_get_toplevel_windows")
    (macro gdk_screen_make_display_name::gchar* (GdkScreen*) "gdk_screen_make_display_name")
    (macro gdk_screen_get_n_monitors::gint (GdkScreen*) "gdk_screen_get_n_monitors")
    (macro gdk_screen_get_monitor_geometry::void (GdkScreen* gint GdkRectangle*) "gdk_screen_get_monitor_geometry")
    (macro gdk_screen_get_monitor_at_point::gint (GdkScreen* gint gint) "gdk_screen_get_monitor_at_point")
    (macro gdk_screen_get_monitor_at_window::gint (GdkScreen* GdkWindow*) "gdk_screen_get_monitor_at_window")
    (macro gdk_screen_broadcast_client_message::void (GdkScreen* GdkEvent*) "gdk_screen_broadcast_client_message")
    (macro gdk_screen_get_default::GdkScreen* () "gdk_screen_get_default")
    (macro gdk_screen_get_setting::gboolean (GdkScreen* gchar* GValue*) "gdk_screen_get_setting")
    (macro gdk_selection_owner_set::gboolean (GdkWindow* GdkAtom guint32 gboolean) "gdk_selection_owner_set")
    (macro gdk_selection_owner_get::GdkWindow* (GdkAtom) "gdk_selection_owner_get")
    (macro gdk_selection_owner_set_for_display::gboolean (GdkDisplay* GdkWindow* GdkAtom guint32 gboolean) "gdk_selection_owner_set_for_display")
    (macro gdk_selection_owner_get_for_display::GdkWindow* (GdkDisplay* GdkAtom) "gdk_selection_owner_get_for_display")
    (macro gdk_selection_convert::void (GdkWindow* GdkAtom GdkAtom guint32) "gdk_selection_convert")
    (macro gdk_selection_property_get::gboolean (GdkWindow* guchar** GdkAtom* gint*) "gdk_selection_property_get")
    (macro gdk_selection_send_notify::void (guint32 GdkAtom GdkAtom GdkAtom guint32) "gdk_selection_send_notify")
    (macro gdk_selection_send_notify_for_display::void (GdkDisplay* guint32 GdkAtom GdkAtom GdkAtom guint32) "gdk_selection_send_notify_for_display")
    (macro gdk_spawn_on_screen::gboolean (GdkScreen* gchar* gchar** gchar** GSpawnFlags GSpawnChildSetupFunc gpointer gint* GError**) "gdk_spawn_on_screen")
    (macro gdk_spawn_on_screen_with_pipes::gboolean (GdkScreen* gchar* gchar** gchar** GSpawnFlags GSpawnChildSetupFunc gpointer gint* gint* gint* gint* GError**) "gdk_spawn_on_screen_with_pipes")
    (macro gdk_spawn_command_line_on_screen::gboolean (GdkScreen* gchar* GError**) "gdk_spawn_command_line_on_screen")
    (macro gdk_visual_get_type::GType () "gdk_visual_get_type")
    (macro gdk_visual_get_best_depth::gint () "gdk_visual_get_best_depth")
    (macro gdk_visual_get_best_type::GdkVisualType () "gdk_visual_get_best_type")
    (macro gdk_visual_get_system::GdkVisual* () "gdk_visual_get_system")
    (macro gdk_visual_get_best::GdkVisual* () "gdk_visual_get_best")
    (macro gdk_visual_get_best_with_depth::GdkVisual* (gint) "gdk_visual_get_best_with_depth")
    (macro gdk_visual_get_best_with_type::GdkVisual* (GdkVisualType) "gdk_visual_get_best_with_type")
    (macro gdk_visual_get_best_with_both::GdkVisual* (gint GdkVisualType) "gdk_visual_get_best_with_both")
    (macro gdk_query_depths::void (gint** gint*) "gdk_query_depths")
    (macro gdk_query_visual_types::void (GdkVisualType** gint*) "gdk_query_visual_types")
    (macro gdk_list_visuals::GList* () "gdk_list_visuals")
    (macro gdk_visual_get_screen::GdkScreen* (GdkVisual*) "gdk_visual_get_screen")
    (macro gdk_window_object_get_type::GType () "gdk_window_object_get_type")
    (macro gdk_window_new::GdkWindow* (GdkWindow* GdkWindowAttr* gint) "gdk_window_new")
    (macro gdk_window_destroy::void (GdkWindow*) "gdk_window_destroy")
    (macro gdk_window_get_window_type::GdkWindowType (GdkWindow*) "gdk_window_get_window_type")
    (macro gdk_window_at_pointer::GdkWindow* (gint* gint*) "gdk_window_at_pointer")
    (macro gdk_window_show::void (GdkWindow*) "gdk_window_show")
    (macro gdk_window_hide::void (GdkWindow*) "gdk_window_hide")
    (macro gdk_window_withdraw::void (GdkWindow*) "gdk_window_withdraw")
    (macro gdk_window_show_unraised::void (GdkWindow*) "gdk_window_show_unraised")
    (macro gdk_window_move::void (GdkWindow* gint gint) "gdk_window_move")
    (macro gdk_window_resize::void (GdkWindow* gint gint) "gdk_window_resize")
    (macro gdk_window_move_resize::void (GdkWindow* gint gint gint gint) "gdk_window_move_resize")
    (macro gdk_window_reparent::void (GdkWindow* GdkWindow* gint gint) "gdk_window_reparent")
    (macro gdk_window_clear::void (GdkWindow*) "gdk_window_clear")
    (macro gdk_window_clear_area::void (GdkWindow* gint gint gint gint) "gdk_window_clear_area")
    (macro gdk_window_clear_area_e::void (GdkWindow* gint gint gint gint) "gdk_window_clear_area_e")
    (macro gdk_window_raise::void (GdkWindow*) "gdk_window_raise")
    (macro gdk_window_lower::void (GdkWindow*) "gdk_window_lower")
    (macro gdk_window_focus::void (GdkWindow* guint32) "gdk_window_focus")
    (macro gdk_window_set_user_data::void (GdkWindow* gpointer) "gdk_window_set_user_data")
    (macro gdk_window_set_override_redirect::void (GdkWindow* gboolean) "gdk_window_set_override_redirect")
    (macro gdk_window_set_accept_focus::void (GdkWindow* gboolean) "gdk_window_set_accept_focus")
    (macro gdk_window_set_focus_on_map::void (GdkWindow* gboolean) "gdk_window_set_focus_on_map")
    (macro gdk_window_add_filter::void (GdkWindow* GdkFilterFunc gpointer) "gdk_window_add_filter")
    (macro gdk_window_remove_filter::void (GdkWindow* GdkFilterFunc gpointer) "gdk_window_remove_filter")
    (macro gdk_window_scroll::void (GdkWindow* gint gint) "gdk_window_scroll")
    (macro gdk_window_shape_combine_mask::void (GdkWindow* GdkBitmap* gint gint) "gdk_window_shape_combine_mask")
    (macro gdk_window_shape_combine_region::void (GdkWindow* GdkRegion* gint gint) "gdk_window_shape_combine_region")
    (macro gdk_window_set_child_shapes::void (GdkWindow*) "gdk_window_set_child_shapes")
    (macro gdk_window_merge_child_shapes::void (GdkWindow*) "gdk_window_merge_child_shapes")
    (macro gdk_window_is_visible::gboolean (GdkWindow*) "gdk_window_is_visible")
    (macro gdk_window_is_viewable::gboolean (GdkWindow*) "gdk_window_is_viewable")
    (macro gdk_window_get_state::GdkWindowState (GdkWindow*) "gdk_window_get_state")
    (macro gdk_window_set_static_gravities::gboolean (GdkWindow* gboolean) "gdk_window_set_static_gravities")
    (macro gdk_window_foreign_new::GdkWindow* (GdkNativeWindow) "gdk_window_foreign_new")
    (macro gdk_window_lookup::GdkWindow* (GdkNativeWindow) "gdk_window_lookup")
    (macro gdk_window_foreign_new_for_display::GdkWindow* (GdkDisplay* GdkNativeWindow) "gdk_window_foreign_new_for_display")
    (macro gdk_window_lookup_for_display::GdkWindow* (GdkDisplay* GdkNativeWindow) "gdk_window_lookup_for_display")
    (macro gdk_window_set_hints::void (GdkWindow* gint gint gint gint gint gint gint) "gdk_window_set_hints")
    (macro gdk_window_set_type_hint::void (GdkWindow* GdkWindowTypeHint) "gdk_window_set_type_hint")
    (macro gdk_window_set_modal_hint::void (GdkWindow* gboolean) "gdk_window_set_modal_hint")
    (macro gdk_window_set_skip_taskbar_hint::void (GdkWindow* gboolean) "gdk_window_set_skip_taskbar_hint")
    (macro gdk_window_set_skip_pager_hint::void (GdkWindow* gboolean) "gdk_window_set_skip_pager_hint")
    (macro gdk_window_set_geometry_hints::void (GdkWindow* GdkGeometry* GdkWindowHints) "gdk_window_set_geometry_hints")
    (macro gdk_set_sm_client_id::void (gchar*) "gdk_set_sm_client_id")
    (macro gdk_window_begin_paint_rect::void (GdkWindow* GdkRectangle*) "gdk_window_begin_paint_rect")
    (macro gdk_window_begin_paint_region::void (GdkWindow* GdkRegion*) "gdk_window_begin_paint_region")
    (macro gdk_window_end_paint::void (GdkWindow*) "gdk_window_end_paint")
    (macro gdk_window_set_title::void (GdkWindow* gchar*) "gdk_window_set_title")
    (macro gdk_window_set_role::void (GdkWindow* gchar*) "gdk_window_set_role")
    (macro gdk_window_set_transient_for::void (GdkWindow* GdkWindow*) "gdk_window_set_transient_for")
    (macro gdk_window_set_background::void (GdkWindow* GdkColor*) "gdk_window_set_background")
    (macro gdk_window_set_back_pixmap::void (GdkWindow* GdkPixmap* gboolean) "gdk_window_set_back_pixmap")
    (macro gdk_window_set_cursor::void (GdkWindow* GdkCursor*) "gdk_window_set_cursor")
    (macro gdk_window_get_user_data::void (GdkWindow* gpointer*) "gdk_window_get_user_data")
    (macro gdk_window_get_geometry::void (GdkWindow* gint* gint* gint* gint* gint*) "gdk_window_get_geometry")
    (macro gdk_window_get_position::void (GdkWindow* gint* gint*) "gdk_window_get_position")
    (macro gdk_window_get_origin::gint (GdkWindow* gint* gint*) "gdk_window_get_origin")
    (macro gdk_window_get_deskrelative_origin::gboolean (GdkWindow* gint* gint*) "gdk_window_get_deskrelative_origin")
    (macro gdk_window_get_root_origin::void (GdkWindow* gint* gint*) "gdk_window_get_root_origin")
    (macro gdk_window_get_frame_extents::void (GdkWindow* GdkRectangle*) "gdk_window_get_frame_extents")
    (macro gdk_window_get_pointer::GdkWindow* (GdkWindow* gint* gint* GdkModifierType*) "gdk_window_get_pointer")
    (macro gdk_window_get_parent::GdkWindow* (GdkWindow*) "gdk_window_get_parent")
    (macro gdk_window_get_toplevel::GdkWindow* (GdkWindow*) "gdk_window_get_toplevel")
    (macro gdk_window_get_children::GList* (GdkWindow*) "gdk_window_get_children")
    (macro gdk_window_peek_children::GList* (GdkWindow*) "gdk_window_peek_children")
    (macro gdk_window_get_events::GdkEventMask (GdkWindow*) "gdk_window_get_events")
    (macro gdk_window_set_events::void (GdkWindow* GdkEventMask) "gdk_window_set_events")
    (macro gdk_window_set_icon_list::void (GdkWindow* GList*) "gdk_window_set_icon_list")
    (macro gdk_window_set_icon::void (GdkWindow* GdkWindow* GdkPixmap* GdkBitmap*) "gdk_window_set_icon")
    (macro gdk_window_set_icon_name::void (GdkWindow* gchar*) "gdk_window_set_icon_name")
    (macro gdk_window_set_group::void (GdkWindow* GdkWindow*) "gdk_window_set_group")
    (macro gdk_window_get_group::GdkWindow* (GdkWindow*) "gdk_window_get_group")
    (macro gdk_window_set_decorations::void (GdkWindow* GdkWMDecoration) "gdk_window_set_decorations")
    (macro gdk_window_get_decorations::gboolean (GdkWindow* GdkWMDecoration*) "gdk_window_get_decorations")
    (macro gdk_window_set_functions::void (GdkWindow* GdkWMFunction) "gdk_window_set_functions")
    (macro gdk_window_get_toplevels::GList* () "gdk_window_get_toplevels")
    (macro gdk_window_iconify::void (GdkWindow*) "gdk_window_iconify")
    (macro gdk_window_deiconify::void (GdkWindow*) "gdk_window_deiconify")
    (macro gdk_window_stick::void (GdkWindow*) "gdk_window_stick")
    (macro gdk_window_unstick::void (GdkWindow*) "gdk_window_unstick")
    (macro gdk_window_maximize::void (GdkWindow*) "gdk_window_maximize")
    (macro gdk_window_unmaximize::void (GdkWindow*) "gdk_window_unmaximize")
    (macro gdk_window_fullscreen::void (GdkWindow*) "gdk_window_fullscreen")
    (macro gdk_window_unfullscreen::void (GdkWindow*) "gdk_window_unfullscreen")
    (macro gdk_window_set_keep_above::void (GdkWindow* gboolean) "gdk_window_set_keep_above")
    (macro gdk_window_set_keep_below::void (GdkWindow* gboolean) "gdk_window_set_keep_below")
    (macro gdk_window_register_dnd::void (GdkWindow*) "gdk_window_register_dnd")
    (macro gdk_window_begin_resize_drag::void (GdkWindow* GdkWindowEdge gint gint gint guint32) "gdk_window_begin_resize_drag")
    (macro gdk_window_begin_move_drag::void (GdkWindow* gint gint gint guint32) "gdk_window_begin_move_drag")
    (macro gdk_window_invalidate_rect::void (GdkWindow* GdkRectangle* gboolean) "gdk_window_invalidate_rect")
    (macro gdk_window_invalidate_region::void (GdkWindow* GdkRegion* gboolean) "gdk_window_invalidate_region")
    (macro gdk_window_invalidate_maybe_recurse::void (GdkWindow* GdkRegion* *GdkWindow*,gpointer->gboolean gpointer) "gdk_window_invalidate_maybe_recurse")
    (macro gdk_window_get_update_area::GdkRegion* (GdkWindow*) "gdk_window_get_update_area")
    (macro gdk_window_freeze_updates::void (GdkWindow*) "gdk_window_freeze_updates")
    (macro gdk_window_thaw_updates::void (GdkWindow*) "gdk_window_thaw_updates")
    (macro gdk_window_process_all_updates::void () "gdk_window_process_all_updates")
    (macro gdk_window_process_updates::void (GdkWindow* gboolean) "gdk_window_process_updates")
    (macro gdk_window_set_debug_updates::void (gboolean) "gdk_window_set_debug_updates")
    (macro gdk_window_constrain_size::void (GdkGeometry* guint gint gint gint* gint*) "gdk_window_constrain_size")
    (macro gdk_window_get_internal_paint_info::void (GdkWindow* GdkDrawable** gint* gint*) "gdk_window_get_internal_paint_info")
    (macro gdk_window_enable_synchronized_configure::void (GdkWindow*) "gdk_window_enable_synchronized_configure")
    (macro gdk_window_configure_finished::void (GdkWindow*) "gdk_window_configure_finished")
    (macro gdk_set_pointer_hooks::GdkPointerHooks* (GdkPointerHooks*) "gdk_set_pointer_hooks")
    (macro gdk_get_default_root_window::GdkWindow* () "gdk_get_default_root_window")
    (macro gdk_parse_args::void (gint* gchar***) "gdk_parse_args")
    (macro gdk_init::void (gint* gchar***) "gdk_init")
    (macro gdk_init_check::gboolean (gint* gchar***) "gdk_init_check")
    (macro gdk_add_option_entries_libgtk_only::void (GOptionGroup*) "gdk_add_option_entries_libgtk_only")
    (macro gdk_pre_parse_libgtk_only::void () "gdk_pre_parse_libgtk_only")
    (macro gdk_exit::void (gint) "gdk_exit")
    (macro gdk_set_locale::gchar* () "gdk_set_locale")
    (macro gdk_get_program_class::string () "gdk_get_program_class")
    (macro gdk_set_program_class::void (string) "gdk_set_program_class")
    (macro gdk_error_trap_push::void () "gdk_error_trap_push")
    (macro gdk_error_trap_pop::gint () "gdk_error_trap_pop")
    (macro gdk_set_use_xshm::void (gboolean) "gdk_set_use_xshm")
    (macro gdk_get_use_xshm::gboolean () "gdk_get_use_xshm")
    (macro gdk_get_display::gchar* () "gdk_get_display")
    (macro gdk_get_display_arg_name::gchar* () "gdk_get_display_arg_name")
    (macro gdk_input_add_full::gint (gint GdkInputCondition GdkInputFunction gpointer GdkDestroyNotify) "gdk_input_add_full")
    (macro gdk_input_add::gint (gint GdkInputCondition GdkInputFunction gpointer) "gdk_input_add")
    (macro gdk_input_remove::void (gint) "gdk_input_remove")
    (macro gdk_pointer_grab::GdkGrabStatus (GdkWindow* gboolean GdkEventMask GdkWindow* GdkCursor* guint32) "gdk_pointer_grab")
    (macro gdk_keyboard_grab::GdkGrabStatus (GdkWindow* gboolean guint32) "gdk_keyboard_grab")
    (macro gdk_pointer_grab_info_libgtk_only::gboolean (GdkDisplay* GdkWindow** gboolean*) "gdk_pointer_grab_info_libgtk_only")
    (macro gdk_keyboard_grab_info_libgtk_only::gboolean (GdkDisplay* GdkWindow** gboolean*) "gdk_keyboard_grab_info_libgtk_only")
    (macro gdk_pointer_ungrab::void (guint32) "gdk_pointer_ungrab")
    (macro gdk_keyboard_ungrab::void (guint32) "gdk_keyboard_ungrab")
    (macro gdk_pointer_is_grabbed::gboolean () "gdk_pointer_is_grabbed")
    (macro gdk_screen_width::gint () "gdk_screen_width")
    (macro gdk_screen_height::gint () "gdk_screen_height")
    (macro gdk_screen_width_mm::gint () "gdk_screen_width_mm")
    (macro gdk_screen_height_mm::gint () "gdk_screen_height_mm")
    (macro gdk_beep::void () "gdk_beep")
    (macro gdk_flush::void () "gdk_flush")
    (macro gdk_set_double_click_time::void (guint) "gdk_set_double_click_time")
    (macro gdk_rectangle_intersect::gboolean (GdkRectangle* GdkRectangle* GdkRectangle*) "gdk_rectangle_intersect")
    (macro gdk_rectangle_union::void (GdkRectangle* GdkRectangle* GdkRectangle*) "gdk_rectangle_union")
    (macro gdk_rectangle_get_type::GType () "gdk_rectangle_get_type")
    (macro gdk_wcstombs::gchar* (GdkWChar*) "gdk_wcstombs")
    (macro gdk_mbstowcs::gint (GdkWChar* gchar* gint) "gdk_mbstowcs")
    (macro gdk_event_send_client_message::gboolean (GdkEvent* GdkNativeWindow) "gdk_event_send_client_message")
    (macro gdk_event_send_clientmessage_toall::void (GdkEvent*) "gdk_event_send_clientmessage_toall")
    (macro gdk_event_send_client_message_for_display::gboolean (GdkDisplay* GdkEvent* GdkNativeWindow) "gdk_event_send_client_message_for_display")
    (macro gdk_notify_startup_complete::void () "gdk_notify_startup_complete")
    (macro gdk_threads_enter::void () "gdk_threads_enter")
    (macro gdk_threads_leave::void () "gdk_threads_leave")
    (macro gdk_threads_init::void () "gdk_threads_init")
    (macro gdk_threads_set_lock_functions::void (GCallback GCallback) "gdk_threads_set_lock_functions")
    (macro gtk_accel_group_get_type::GType () "gtk_accel_group_get_type")
    (macro gtk_accel_group_new::GtkAccelGroup* () "gtk_accel_group_new")
    (macro gtk_accel_group_lock::void (GtkAccelGroup*) "gtk_accel_group_lock")
    (macro gtk_accel_group_unlock::void (GtkAccelGroup*) "gtk_accel_group_unlock")
    (macro gtk_accel_group_connect::void (GtkAccelGroup* guint GdkModifierType GtkAccelFlags GClosure*) "gtk_accel_group_connect")
    (macro gtk_accel_group_connect_by_path::void (GtkAccelGroup* gchar* GClosure*) "gtk_accel_group_connect_by_path")
    (macro gtk_accel_group_disconnect::gboolean (GtkAccelGroup* GClosure*) "gtk_accel_group_disconnect")
    (macro gtk_accel_group_disconnect_key::gboolean (GtkAccelGroup* guint GdkModifierType) "gtk_accel_group_disconnect_key")
    (macro gtk_accel_group_activate::gboolean (GtkAccelGroup* GQuark GObject* guint GdkModifierType) "gtk_accel_group_activate")
    (macro _gtk_accel_group_attach::void (GtkAccelGroup* GObject*) "_gtk_accel_group_attach")
    (macro _gtk_accel_group_detach::void (GtkAccelGroup* GObject*) "_gtk_accel_group_detach")
    (macro gtk_accel_groups_activate::gboolean (GObject* guint GdkModifierType) "gtk_accel_groups_activate")
    (macro gtk_accel_groups_from_object::GSList* (GObject*) "gtk_accel_groups_from_object")
    (macro gtk_accel_group_find::GtkAccelKey* (GtkAccelGroup* GtkAccelGroupFindFunc gpointer) "gtk_accel_group_find")
    (macro gtk_accel_group_from_accel_closure::GtkAccelGroup* (GClosure*) "gtk_accel_group_from_accel_closure")
    (macro gtk_accelerator_valid::gboolean (guint GdkModifierType) "gtk_accelerator_valid")
    (macro gtk_accelerator_parse::void (gchar* guint* GdkModifierType*) "gtk_accelerator_parse")
    (macro gtk_accelerator_name::gchar* (guint GdkModifierType) "gtk_accelerator_name")
    (macro gtk_accelerator_get_label::gchar* (guint GdkModifierType) "gtk_accelerator_get_label")
    (macro gtk_accelerator_set_default_mod_mask::void (GdkModifierType) "gtk_accelerator_set_default_mod_mask")
    (macro gtk_accelerator_get_default_mod_mask::guint () "gtk_accelerator_get_default_mod_mask")
    (macro gtk_accel_group_query::GtkAccelGroupEntry* (GtkAccelGroup* guint GdkModifierType guint*) "gtk_accel_group_query")
    (macro _gtk_accel_group_reconnect::void (GtkAccelGroup* GQuark) "_gtk_accel_group_reconnect")
    (macro gtk_accel_flags_get_type::GType () "gtk_accel_flags_get_type")
    (macro gtk_calendar_display_options_get_type::GType () "gtk_calendar_display_options_get_type")
    (macro gtk_cell_renderer_state_get_type::GType () "gtk_cell_renderer_state_get_type")
    (macro gtk_cell_renderer_mode_get_type::GType () "gtk_cell_renderer_mode_get_type")
    (macro gtk_cell_type_get_type::GType () "gtk_cell_type_get_type")
    (macro gtk_clist_drag_pos_get_type::GType () "gtk_clist_drag_pos_get_type")
    (macro gtk_button_action_get_type::GType () "gtk_button_action_get_type")
    (macro gtk_ctree_pos_get_type::GType () "gtk_ctree_pos_get_type")
    (macro gtk_ctree_line_style_get_type::GType () "gtk_ctree_line_style_get_type")
    (macro gtk_ctree_expander_style_get_type::GType () "gtk_ctree_expander_style_get_type")
    (macro gtk_ctree_expansion_type_get_type::GType () "gtk_ctree_expansion_type_get_type")
    (macro gtk_debug_flag_get_type::GType () "gtk_debug_flag_get_type")
    (macro gtk_dialog_flags_get_type::GType () "gtk_dialog_flags_get_type")
    (macro gtk_response_type_get_type::GType () "gtk_response_type_get_type")
    (macro gtk_dest_defaults_get_type::GType () "gtk_dest_defaults_get_type")
    (macro gtk_target_flags_get_type::GType () "gtk_target_flags_get_type")
    (macro gtk_anchor_type_get_type::GType () "gtk_anchor_type_get_type")
    (macro gtk_arrow_type_get_type::GType () "gtk_arrow_type_get_type")
    (macro gtk_attach_options_get_type::GType () "gtk_attach_options_get_type")
    (macro gtk_button_box_style_get_type::GType () "gtk_button_box_style_get_type")
    (macro gtk_curve_type_get_type::GType () "gtk_curve_type_get_type")
    (macro gtk_delete_type_get_type::GType () "gtk_delete_type_get_type")
    (macro gtk_direction_type_get_type::GType () "gtk_direction_type_get_type")
    (macro gtk_expander_style_get_type::GType () "gtk_expander_style_get_type")
    (macro gtk_icon_size_get_type::GType () "gtk_icon_size_get_type")
    (macro gtk_side_type_get_type::GType () "gtk_side_type_get_type")
    (macro gtk_text_direction_get_type::GType () "gtk_text_direction_get_type")
    (macro gtk_justification_get_type::GType () "gtk_justification_get_type")
    (macro gtk_match_type_get_type::GType () "gtk_match_type_get_type")
    (macro gtk_menu_direction_type_get_type::GType () "gtk_menu_direction_type_get_type")
    (macro gtk_metric_type_get_type::GType () "gtk_metric_type_get_type")
    (macro gtk_movement_step_get_type::GType () "gtk_movement_step_get_type")
    (macro gtk_scroll_step_get_type::GType () "gtk_scroll_step_get_type")
    (macro gtk_orientation_get_type::GType () "gtk_orientation_get_type")
    (macro gtk_corner_type_get_type::GType () "gtk_corner_type_get_type")
    (macro gtk_pack_type_get_type::GType () "gtk_pack_type_get_type")
    (macro gtk_path_priority_type_get_type::GType () "gtk_path_priority_type_get_type")
    (macro gtk_path_type_get_type::GType () "gtk_path_type_get_type")
    (macro gtk_policy_type_get_type::GType () "gtk_policy_type_get_type")
    (macro gtk_position_type_get_type::GType () "gtk_position_type_get_type")
    (macro gtk_preview_type_get_type::GType () "gtk_preview_type_get_type")
    (macro gtk_relief_style_get_type::GType () "gtk_relief_style_get_type")
    (macro gtk_resize_mode_get_type::GType () "gtk_resize_mode_get_type")
    (macro gtk_signal_run_type_get_type::GType () "gtk_signal_run_type_get_type")
    (macro gtk_scroll_type_get_type::GType () "gtk_scroll_type_get_type")
    (macro gtk_selection_mode_get_type::GType () "gtk_selection_mode_get_type")
    (macro gtk_shadow_type_get_type::GType () "gtk_shadow_type_get_type")
    (macro gtk_state_type_get_type::GType () "gtk_state_type_get_type")
    (macro gtk_submenu_direction_get_type::GType () "gtk_submenu_direction_get_type")
    (macro gtk_submenu_placement_get_type::GType () "gtk_submenu_placement_get_type")
    (macro gtk_toolbar_style_get_type::GType () "gtk_toolbar_style_get_type")
    (macro gtk_update_type_get_type::GType () "gtk_update_type_get_type")
    (macro gtk_visibility_get_type::GType () "gtk_visibility_get_type")
    (macro gtk_window_position_get_type::GType () "gtk_window_position_get_type")
    (macro gtk_window_type_get_type::GType () "gtk_window_type_get_type")
    (macro gtk_wrap_mode_get_type::GType () "gtk_wrap_mode_get_type")
    (macro gtk_sort_type_get_type::GType () "gtk_sort_type_get_type")
    (macro gtk_im_preedit_style_get_type::GType () "gtk_im_preedit_style_get_type")
    (macro gtk_im_status_style_get_type::GType () "gtk_im_status_style_get_type")
    (macro gtk_file_chooser_action_get_type::GType () "gtk_file_chooser_action_get_type")
    (macro gtk_file_chooser_error_get_type::GType () "gtk_file_chooser_error_get_type")
    (macro gtk_file_filter_flags_get_type::GType () "gtk_file_filter_flags_get_type")
    (macro gtk_icon_lookup_flags_get_type::GType () "gtk_icon_lookup_flags_get_type")
    (macro gtk_icon_theme_error_get_type::GType () "gtk_icon_theme_error_get_type")
    (macro gtk_image_type_get_type::GType () "gtk_image_type_get_type")
    (macro gtk_message_type_get_type::GType () "gtk_message_type_get_type")
    (macro gtk_buttons_type_get_type::GType () "gtk_buttons_type_get_type")
    (macro gtk_notebook_tab_get_type::GType () "gtk_notebook_tab_get_type")
    (macro gtk_object_flags_get_type::GType () "gtk_object_flags_get_type")
    (macro gtk_arg_flags_get_type::GType () "gtk_arg_flags_get_type")
    (macro gtk_private_flags_get_type::GType () "gtk_private_flags_get_type")
    (macro gtk_progress_bar_style_get_type::GType () "gtk_progress_bar_style_get_type")
    (macro gtk_progress_bar_orientation_get_type::GType () "gtk_progress_bar_orientation_get_type")
    (macro gtk_rc_flags_get_type::GType () "gtk_rc_flags_get_type")
    (macro gtk_rc_token_type_get_type::GType () "gtk_rc_token_type_get_type")
    (macro gtk_size_group_mode_get_type::GType () "gtk_size_group_mode_get_type")
    (macro gtk_spin_button_update_policy_get_type::GType () "gtk_spin_button_update_policy_get_type")
    (macro gtk_spin_type_get_type::GType () "gtk_spin_type_get_type")
    (macro gtk_text_search_flags_get_type::GType () "gtk_text_search_flags_get_type")
    (macro gtk_text_window_type_get_type::GType () "gtk_text_window_type_get_type")
    (macro gtk_toolbar_child_type_get_type::GType () "gtk_toolbar_child_type_get_type")
    (macro gtk_toolbar_space_style_get_type::GType () "gtk_toolbar_space_style_get_type")
    (macro gtk_tree_view_mode_get_type::GType () "gtk_tree_view_mode_get_type")
    (macro gtk_tree_model_flags_get_type::GType () "gtk_tree_model_flags_get_type")
    (macro gtk_tree_view_drop_position_get_type::GType () "gtk_tree_view_drop_position_get_type")
    (macro gtk_tree_view_column_sizing_get_type::GType () "gtk_tree_view_column_sizing_get_type")
    (macro gtk_ui_manager_item_type_get_type::GType () "gtk_ui_manager_item_type_get_type")
    (macro gtk_widget_flags_get_type::GType () "gtk_widget_flags_get_type")
    (macro gtk_widget_help_type_get_type::GType () "gtk_widget_help_type_get_type")
    (macro gtk_identifier_get_type::GType () "gtk_identifier_get_type")
    (macro gtk_type_class::gpointer (GtkType) "gtk_type_class")
    (macro gtk_type_unique::GtkType (GtkType GtkTypeInfo*) "gtk_type_unique")
    (macro gtk_type_new::gpointer (GtkType) "gtk_type_new")
    (macro gtk_type_enum_get_values::GtkEnumValue* (GtkType) "gtk_type_enum_get_values")
    (macro gtk_type_flags_get_values::GtkFlagValue* (GtkType) "gtk_type_flags_get_values")
    (macro gtk_type_enum_find_value::GtkEnumValue* (GtkType gchar*) "gtk_type_enum_find_value")
    (macro gtk_type_flags_find_value::GtkFlagValue* (GtkType gchar*) "gtk_type_flags_find_value")
    (macro gtk_type_init::void (GTypeDebugFlags) "gtk_type_init")
    (macro gtk_object_get_type::GtkType () "gtk_object_get_type")
    (macro gtk_object_sink::void (GtkObject*) "gtk_object_sink")
    (macro gtk_object_destroy::void (GtkObject*) "gtk_object_destroy")
    (macro gtk_object_new::GtkObject* (GtkType gchar* . gchar*) "gtk_object_new")
    (macro gtk_object_ref::GtkObject* (GtkObject*) "gtk_object_ref")
    (macro gtk_object_unref::void (GtkObject*) "gtk_object_unref")
    (macro gtk_object_weakref::void (GtkObject* GtkDestroyNotify gpointer) "gtk_object_weakref")
    (macro gtk_object_weakunref::void (GtkObject* GtkDestroyNotify gpointer) "gtk_object_weakunref")
    (macro gtk_object_set_data::void (GtkObject* gchar* gpointer) "gtk_object_set_data")
    (macro gtk_object_set_data_full::void (GtkObject* gchar* gpointer GtkDestroyNotify) "gtk_object_set_data_full")
    (macro gtk_object_remove_data::void (GtkObject* gchar*) "gtk_object_remove_data")
    (macro gtk_object_get_data::gpointer (GtkObject* gchar*) "gtk_object_get_data")
    (macro gtk_object_remove_no_notify::void (GtkObject* gchar*) "gtk_object_remove_no_notify")
    (macro gtk_object_set_user_data::void (GtkObject* gpointer) "gtk_object_set_user_data")
    (macro gtk_object_get_user_data::gpointer (GtkObject*) "gtk_object_get_user_data")
    (macro gtk_object_set_data_by_id::void (GtkObject* GQuark gpointer) "gtk_object_set_data_by_id")
    (macro gtk_object_set_data_by_id_full::void (GtkObject* GQuark gpointer GtkDestroyNotify) "gtk_object_set_data_by_id_full")
    (macro gtk_object_get_data_by_id::gpointer (GtkObject* GQuark) "gtk_object_get_data_by_id")
    (macro gtk_object_remove_data_by_id::void (GtkObject* GQuark) "gtk_object_remove_data_by_id")
    (macro gtk_object_remove_no_notify_by_id::void (GtkObject* GQuark) "gtk_object_remove_no_notify_by_id")
    (macro gtk_object_get::void (GtkObject* gchar* . gchar*) "gtk_object_get")
    (macro gtk_object_set::void (GtkObject* gchar* . gchar*) "gtk_object_set")
    (macro gtk_object_add_arg_type::void (gchar* GtkType guint guint) "gtk_object_add_arg_type")
    (macro gtk_adjustment_get_type::GType () "gtk_adjustment_get_type")
    (macro gtk_adjustment_new::GtkObject* (gdouble gdouble gdouble gdouble gdouble gdouble) "gtk_adjustment_new")
    (macro gtk_adjustment_changed::void (GtkAdjustment*) "gtk_adjustment_changed")
    (macro gtk_adjustment_value_changed::void (GtkAdjustment*) "gtk_adjustment_value_changed")
    (macro gtk_adjustment_clamp_page::void (GtkAdjustment* gdouble gdouble) "gtk_adjustment_clamp_page")
    (macro gtk_adjustment_get_value::gdouble (GtkAdjustment*) "gtk_adjustment_get_value")
    (macro gtk_adjustment_set_value::void (GtkAdjustment* gdouble) "gtk_adjustment_set_value")
    (macro gtk_style_get_type::GType () "gtk_style_get_type")
    (macro gtk_style_new::GtkStyle* () "gtk_style_new")
    (macro gtk_style_copy::GtkStyle* (GtkStyle*) "gtk_style_copy")
    (macro gtk_style_attach::GtkStyle* (GtkStyle* GdkWindow*) "gtk_style_attach")
    (macro gtk_style_detach::void (GtkStyle*) "gtk_style_detach")
    (macro gtk_style_ref::GtkStyle* (GtkStyle*) "gtk_style_ref")
    (macro gtk_style_unref::void (GtkStyle*) "gtk_style_unref")
    (macro gtk_style_get_font::GdkFont* (GtkStyle*) "gtk_style_get_font")
    (macro gtk_style_set_font::void (GtkStyle* GdkFont*) "gtk_style_set_font")
    (macro gtk_style_set_background::void (GtkStyle* GdkWindow* GtkStateType) "gtk_style_set_background")
    (macro gtk_style_apply_default_background::void (GtkStyle* GdkWindow* gboolean GtkStateType GdkRectangle* gint gint gint gint) "gtk_style_apply_default_background")
    (macro gtk_style_lookup_icon_set::GtkIconSet* (GtkStyle* gchar*) "gtk_style_lookup_icon_set")
    (macro gtk_style_render_icon::GdkPixbuf* (GtkStyle* GtkIconSource* GtkTextDirection GtkStateType GtkIconSize GtkWidget* gchar*) "gtk_style_render_icon")
    (macro gtk_draw_hline::void (GtkStyle* GdkWindow* GtkStateType gint gint gint) "gtk_draw_hline")
    (macro gtk_draw_vline::void (GtkStyle* GdkWindow* GtkStateType gint gint gint) "gtk_draw_vline")
    (macro gtk_draw_shadow::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint) "gtk_draw_shadow")
    (macro gtk_draw_polygon::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkPoint* gint gboolean) "gtk_draw_polygon")
    (macro gtk_draw_arrow::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GtkArrowType gboolean gint gint gint gint) "gtk_draw_arrow")
    (macro gtk_draw_diamond::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint) "gtk_draw_diamond")
    (macro gtk_draw_box::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint) "gtk_draw_box")
    (macro gtk_draw_flat_box::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint) "gtk_draw_flat_box")
    (macro gtk_draw_check::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint) "gtk_draw_check")
    (macro gtk_draw_option::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint) "gtk_draw_option")
    (macro gtk_draw_tab::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint) "gtk_draw_tab")
    (macro gtk_draw_shadow_gap::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint GtkPositionType gint gint) "gtk_draw_shadow_gap")
    (macro gtk_draw_box_gap::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint GtkPositionType gint gint) "gtk_draw_box_gap")
    (macro gtk_draw_extension::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint GtkPositionType) "gtk_draw_extension")
    (macro gtk_draw_focus::void (GtkStyle* GdkWindow* gint gint gint gint) "gtk_draw_focus")
    (macro gtk_draw_slider::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint GtkOrientation) "gtk_draw_slider")
    (macro gtk_draw_handle::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint GtkOrientation) "gtk_draw_handle")
    (macro gtk_draw_expander::void (GtkStyle* GdkWindow* GtkStateType gint gint GtkExpanderStyle) "gtk_draw_expander")
    (macro gtk_draw_layout::void (GtkStyle* GdkWindow* GtkStateType gboolean gint gint PangoLayout*) "gtk_draw_layout")
    (macro gtk_draw_resize_grip::void (GtkStyle* GdkWindow* GtkStateType GdkWindowEdge gint gint gint gint) "gtk_draw_resize_grip")
    (macro gtk_paint_hline::void (GtkStyle* GdkWindow* GtkStateType GdkRectangle* GtkWidget* gchar* gint gint gint) "gtk_paint_hline")
    (macro gtk_paint_vline::void (GtkStyle* GdkWindow* GtkStateType GdkRectangle* GtkWidget* gchar* gint gint gint) "gtk_paint_vline")
    (macro gtk_paint_shadow::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint) "gtk_paint_shadow")
    (macro gtk_paint_polygon::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* GdkPoint* gint gboolean) "gtk_paint_polygon")
    (macro gtk_paint_arrow::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* GtkArrowType gboolean gint gint gint gint) "gtk_paint_arrow")
    (macro gtk_paint_diamond::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint) "gtk_paint_diamond")
    (macro gtk_paint_box::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint) "gtk_paint_box")
    (macro gtk_paint_flat_box::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint) "gtk_paint_flat_box")
    (macro gtk_paint_check::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint) "gtk_paint_check")
    (macro gtk_paint_option::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint) "gtk_paint_option")
    (macro gtk_paint_tab::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint) "gtk_paint_tab")
    (macro gtk_paint_shadow_gap::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint GtkPositionType gint gint) "gtk_paint_shadow_gap")
    (macro gtk_paint_box_gap::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint GtkPositionType gint gint) "gtk_paint_box_gap")
    (macro gtk_paint_extension::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint GtkPositionType) "gtk_paint_extension")
    (macro gtk_paint_focus::void (GtkStyle* GdkWindow* GtkStateType GdkRectangle* GtkWidget* gchar* gint gint gint gint) "gtk_paint_focus")
    (macro gtk_paint_slider::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint GtkOrientation) "gtk_paint_slider")
    (macro gtk_paint_handle::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint GtkOrientation) "gtk_paint_handle")
    (macro gtk_paint_expander::void (GtkStyle* GdkWindow* GtkStateType GdkRectangle* GtkWidget* gchar* gint gint GtkExpanderStyle) "gtk_paint_expander")
    (macro gtk_paint_layout::void (GtkStyle* GdkWindow* GtkStateType gboolean GdkRectangle* GtkWidget* gchar* gint gint PangoLayout*) "gtk_paint_layout")
    (macro gtk_paint_resize_grip::void (GtkStyle* GdkWindow* GtkStateType GdkRectangle* GtkWidget* gchar* GdkWindowEdge gint gint gint gint) "gtk_paint_resize_grip")
    (macro gtk_border_get_type::GType () "gtk_border_get_type")
    (macro gtk_border_copy::GtkBorder* (GtkBorder*) "gtk_border_copy")
    (macro gtk_border_free::void (GtkBorder*) "gtk_border_free")
    (macro _gtk_style_peek_property_value::GValue* (GtkStyle* GType GParamSpec* GtkRcPropertyParser) "_gtk_style_peek_property_value")
    (macro _gtk_style_init_for_settings::void (GtkStyle* GtkSettings*) "_gtk_style_init_for_settings")
    (macro gtk_draw_string::void (GtkStyle* GdkWindow* GtkStateType gint gint gchar*) "gtk_draw_string")
    (macro gtk_paint_string::void (GtkStyle* GdkWindow* GtkStateType GdkRectangle* GtkWidget* gchar* gint gint gchar*) "gtk_paint_string")
    (macro gtk_draw_insertion_cursor::void (GtkWidget* GdkDrawable* GdkRectangle* GdkRectangle* gboolean GtkTextDirection gboolean) "gtk_draw_insertion_cursor")
    (macro _gtk_rc_init::void () "_gtk_rc_init")
    (macro gtk_rc_add_default_file::void (gchar*) "gtk_rc_add_default_file")
    (macro gtk_rc_set_default_files::void (gchar**) "gtk_rc_set_default_files")
    (macro gtk_rc_get_default_files::gchar** () "gtk_rc_get_default_files")
    (macro gtk_rc_get_style::GtkStyle* (GtkWidget*) "gtk_rc_get_style")
    (macro gtk_rc_get_style_by_paths::GtkStyle* (GtkSettings* string string GType) "gtk_rc_get_style_by_paths")
    (macro gtk_rc_reparse_all_for_settings::gboolean (GtkSettings* gboolean) "gtk_rc_reparse_all_for_settings")
    (macro gtk_rc_reset_styles::void (GtkSettings*) "gtk_rc_reset_styles")
    (macro gtk_rc_find_pixmap_in_path::gchar* (GtkSettings* GScanner* gchar*) "gtk_rc_find_pixmap_in_path")
    (macro gtk_rc_parse::void (gchar*) "gtk_rc_parse")
    (macro gtk_rc_parse_string::void (gchar*) "gtk_rc_parse_string")
    (macro gtk_rc_reparse_all::gboolean () "gtk_rc_reparse_all")
    (macro gtk_rc_add_widget_name_style::void (GtkRcStyle* gchar*) "gtk_rc_add_widget_name_style")
    (macro gtk_rc_add_widget_class_style::void (GtkRcStyle* gchar*) "gtk_rc_add_widget_class_style")
    (macro gtk_rc_add_class_style::void (GtkRcStyle* gchar*) "gtk_rc_add_class_style")
    (macro gtk_rc_style_get_type::GType () "gtk_rc_style_get_type")
    (macro gtk_rc_style_new::GtkRcStyle* () "gtk_rc_style_new")
    (macro gtk_rc_style_copy::GtkRcStyle* (GtkRcStyle*) "gtk_rc_style_copy")
    (macro gtk_rc_style_ref::void (GtkRcStyle*) "gtk_rc_style_ref")
    (macro gtk_rc_style_unref::void (GtkRcStyle*) "gtk_rc_style_unref")
    (macro gtk_rc_find_module_in_path::gchar* (gchar*) "gtk_rc_find_module_in_path")
    (macro gtk_rc_get_theme_dir::gchar* () "gtk_rc_get_theme_dir")
    (macro gtk_rc_get_module_dir::gchar* () "gtk_rc_get_module_dir")
    (macro gtk_rc_get_im_module_path::gchar* () "gtk_rc_get_im_module_path")
    (macro gtk_rc_get_im_module_file::gchar* () "gtk_rc_get_im_module_file")
    (macro gtk_rc_scanner_new::GScanner* () "gtk_rc_scanner_new")
    (macro gtk_rc_parse_color::guint (GScanner* GdkColor*) "gtk_rc_parse_color")
    (macro gtk_rc_parse_state::guint (GScanner* GtkStateType*) "gtk_rc_parse_state")
    (macro gtk_rc_parse_priority::guint (GScanner* GtkPathPriorityType*) "gtk_rc_parse_priority")
    (macro _gtk_rc_style_lookup_rc_property::GtkRcProperty* (GtkRcStyle* GQuark GQuark) "_gtk_rc_style_lookup_rc_property")
    (macro _gtk_rc_context_get_default_font_name::gchar* (GtkSettings*) "_gtk_rc_context_get_default_font_name")
    (macro gtk_settings_get_type::GType () "gtk_settings_get_type")
    (macro gtk_settings_get_default::GtkSettings* () "gtk_settings_get_default")
    (macro gtk_settings_get_for_screen::GtkSettings* (GdkScreen*) "gtk_settings_get_for_screen")
    (macro gtk_settings_install_property::void (GParamSpec*) "gtk_settings_install_property")
    (macro gtk_settings_install_property_parser::void (GParamSpec* GtkRcPropertyParser) "gtk_settings_install_property_parser")
    (macro gtk_rc_property_parse_color::gboolean (GParamSpec* GString* GValue*) "gtk_rc_property_parse_color")
    (macro gtk_rc_property_parse_enum::gboolean (GParamSpec* GString* GValue*) "gtk_rc_property_parse_enum")
    (macro gtk_rc_property_parse_flags::gboolean (GParamSpec* GString* GValue*) "gtk_rc_property_parse_flags")
    (macro gtk_rc_property_parse_requisition::gboolean (GParamSpec* GString* GValue*) "gtk_rc_property_parse_requisition")
    (macro gtk_rc_property_parse_border::gboolean (GParamSpec* GString* GValue*) "gtk_rc_property_parse_border")
    (macro gtk_settings_set_property_value::void (GtkSettings* gchar* GtkSettingsValue*) "gtk_settings_set_property_value")
    (macro gtk_settings_set_string_property::void (GtkSettings* gchar* gchar* gchar*) "gtk_settings_set_string_property")
    (macro gtk_settings_set_long_property::void (GtkSettings* gchar* glong gchar*) "gtk_settings_set_long_property")
    (macro gtk_settings_set_double_property::void (GtkSettings* gchar* gdouble gchar*) "gtk_settings_set_double_property")
    (macro _gtk_settings_set_property_value_from_rc::void (GtkSettings* gchar* GtkSettingsValue*) "_gtk_settings_set_property_value_from_rc")
    (macro _gtk_settings_reset_rc_values::void (GtkSettings*) "_gtk_settings_reset_rc_values")
    (macro _gtk_settings_handle_event::void (GdkEventSetting*) "_gtk_settings_handle_event")
    (macro _gtk_rc_property_parser_from_type::GtkRcPropertyParser (GType) "_gtk_rc_property_parser_from_type")
    (macro _gtk_settings_parse_convert::gboolean (GtkRcPropertyParser GValue* GParamSpec* GValue*) "_gtk_settings_parse_convert")
    (macro atk_state_type_register::AtkStateType (gchar*) "atk_state_type_register")
    (macro atk_state_type_get_name::gchar* (AtkStateType) "atk_state_type_get_name")
    (macro atk_state_type_for_name::AtkStateType (gchar*) "atk_state_type_for_name")
    (macro atk_role_register::AtkRole (gchar*) "atk_role_register")
    (macro atk_object_get_type::GType () "atk_object_get_type")
    (macro atk_implementor_get_type::GType () "atk_implementor_get_type")
    (macro atk_implementor_ref_accessible::AtkObject* (AtkImplementor*) "atk_implementor_ref_accessible")
    (macro atk_object_get_name::gchar* (AtkObject*) "atk_object_get_name")
    (macro atk_object_get_description::gchar* (AtkObject*) "atk_object_get_description")
    (macro atk_object_get_parent::AtkObject* (AtkObject*) "atk_object_get_parent")
    (macro atk_object_get_n_accessible_children::gint (AtkObject*) "atk_object_get_n_accessible_children")
    (macro atk_object_ref_accessible_child::AtkObject* (AtkObject* gint) "atk_object_ref_accessible_child")
    (macro atk_object_ref_relation_set::AtkRelationSet* (AtkObject*) "atk_object_ref_relation_set")
    (macro atk_object_get_role::AtkRole (AtkObject*) "atk_object_get_role")
    (macro atk_object_get_layer::AtkLayer (AtkObject*) "atk_object_get_layer")
    (macro atk_object_get_mdi_zorder::gint (AtkObject*) "atk_object_get_mdi_zorder")
    (macro atk_object_ref_state_set::AtkStateSet* (AtkObject*) "atk_object_ref_state_set")
    (macro atk_object_get_index_in_parent::gint (AtkObject*) "atk_object_get_index_in_parent")
    (macro atk_object_set_name::void (AtkObject* gchar*) "atk_object_set_name")
    (macro atk_object_set_description::void (AtkObject* gchar*) "atk_object_set_description")
    (macro atk_object_set_parent::void (AtkObject* AtkObject*) "atk_object_set_parent")
    (macro atk_object_set_role::void (AtkObject* AtkRole) "atk_object_set_role")
    (macro atk_object_connect_property_change_handler::guint (AtkObject* AtkPropertyChangeHandler*) "atk_object_connect_property_change_handler")
    (macro atk_object_remove_property_change_handler::void (AtkObject* guint) "atk_object_remove_property_change_handler")
    (macro atk_object_notify_state_change::void (AtkObject* AtkState gboolean) "atk_object_notify_state_change")
    (macro atk_object_initialize::void (AtkObject* gpointer) "atk_object_initialize")
    (macro atk_role_get_name::gchar* (AtkRole) "atk_role_get_name")
    (macro atk_role_for_name::AtkRole (gchar*) "atk_role_for_name")
    (macro atk_object_add_relationship::gboolean (AtkObject* AtkRelationType AtkObject*) "atk_object_add_relationship")
    (macro atk_object_remove_relationship::gboolean (AtkObject* AtkRelationType AtkObject*) "atk_object_remove_relationship")
    (macro atk_role_get_localized_name::gchar* (AtkRole) "atk_role_get_localized_name")
    (macro gtk_widget_get_type::GType () "gtk_widget_get_type")
    (macro gtk_widget_new::GtkWidget* (GType gchar* . gchar*) "gtk_widget_new")
    (macro gtk_widget_ref::GtkWidget* (GtkWidget*) "gtk_widget_ref")
    (macro gtk_widget_unref::void (GtkWidget*) "gtk_widget_unref")
    (macro gtk_widget_destroy::void (GtkWidget*) "gtk_widget_destroy")
    (macro gtk_widget_destroyed::void (GtkWidget* GtkWidget**) "gtk_widget_destroyed")
    (macro gtk_widget_set::void (GtkWidget* gchar* . gchar*) "gtk_widget_set")
    (macro gtk_widget_unparent::void (GtkWidget*) "gtk_widget_unparent")
    (macro gtk_widget_show::void (GtkWidget*) "gtk_widget_show")
    (macro gtk_widget_show_now::void (GtkWidget*) "gtk_widget_show_now")
    (macro gtk_widget_hide::void (GtkWidget*) "gtk_widget_hide")
    (macro gtk_widget_show_all::void (GtkWidget*) "gtk_widget_show_all")
    (macro gtk_widget_hide_all::void (GtkWidget*) "gtk_widget_hide_all")
    (macro gtk_widget_set_no_show_all::void (GtkWidget* gboolean) "gtk_widget_set_no_show_all")
    (macro gtk_widget_get_no_show_all::gboolean (GtkWidget*) "gtk_widget_get_no_show_all")
    (macro gtk_widget_map::void (GtkWidget*) "gtk_widget_map")
    (macro gtk_widget_unmap::void (GtkWidget*) "gtk_widget_unmap")
    (macro gtk_widget_realize::void (GtkWidget*) "gtk_widget_realize")
    (macro gtk_widget_unrealize::void (GtkWidget*) "gtk_widget_unrealize")
    (macro gtk_widget_queue_draw::void (GtkWidget*) "gtk_widget_queue_draw")
    (macro gtk_widget_queue_draw_area::void (GtkWidget* gint gint gint gint) "gtk_widget_queue_draw_area")
    (macro gtk_widget_queue_clear::void (GtkWidget*) "gtk_widget_queue_clear")
    (macro gtk_widget_queue_clear_area::void (GtkWidget* gint gint gint gint) "gtk_widget_queue_clear_area")
    (macro gtk_widget_queue_resize::void (GtkWidget*) "gtk_widget_queue_resize")
    (macro gtk_widget_queue_resize_no_redraw::void (GtkWidget*) "gtk_widget_queue_resize_no_redraw")
    (macro gtk_widget_draw::void (GtkWidget* GdkRectangle*) "gtk_widget_draw")
    (macro gtk_widget_size_request::void (GtkWidget* GtkRequisition*) "gtk_widget_size_request")
    (macro gtk_widget_size_allocate::void (GtkWidget* GtkAllocation*) "gtk_widget_size_allocate")
    (macro gtk_widget_get_child_requisition::void (GtkWidget* GtkRequisition*) "gtk_widget_get_child_requisition")
    (macro gtk_widget_add_accelerator::void (GtkWidget* gchar* GtkAccelGroup* guint GdkModifierType GtkAccelFlags) "gtk_widget_add_accelerator")
    (macro gtk_widget_remove_accelerator::gboolean (GtkWidget* GtkAccelGroup* guint GdkModifierType) "gtk_widget_remove_accelerator")
    (macro gtk_widget_set_accel_path::void (GtkWidget* gchar* GtkAccelGroup*) "gtk_widget_set_accel_path")
    (macro _gtk_widget_get_accel_path::gchar* (GtkWidget* gboolean*) "_gtk_widget_get_accel_path")
    (macro gtk_widget_list_accel_closures::GList* (GtkWidget*) "gtk_widget_list_accel_closures")
    (macro gtk_widget_can_activate_accel::gboolean (GtkWidget* guint) "gtk_widget_can_activate_accel")
    (macro gtk_widget_mnemonic_activate::gboolean (GtkWidget* gboolean) "gtk_widget_mnemonic_activate")
    (macro gtk_widget_event::gboolean (GtkWidget* GdkEvent*) "gtk_widget_event")
    (macro gtk_widget_send_expose::gint (GtkWidget* GdkEvent*) "gtk_widget_send_expose")
    (macro gtk_widget_activate::gboolean (GtkWidget*) "gtk_widget_activate")
    (macro gtk_widget_set_scroll_adjustments::gboolean (GtkWidget* GtkAdjustment* GtkAdjustment*) "gtk_widget_set_scroll_adjustments")
    (macro gtk_widget_reparent::void (GtkWidget* GtkWidget*) "gtk_widget_reparent")
    (macro gtk_widget_intersect::gboolean (GtkWidget* GdkRectangle* GdkRectangle*) "gtk_widget_intersect")
    (macro gtk_widget_region_intersect::GdkRegion* (GtkWidget* GdkRegion*) "gtk_widget_region_intersect")
    (macro gtk_widget_freeze_child_notify::void (GtkWidget*) "gtk_widget_freeze_child_notify")
    (macro gtk_widget_child_notify::void (GtkWidget* gchar*) "gtk_widget_child_notify")
    (macro gtk_widget_thaw_child_notify::void (GtkWidget*) "gtk_widget_thaw_child_notify")
    (macro gtk_widget_is_focus::gboolean (GtkWidget*) "gtk_widget_is_focus")
    (macro gtk_widget_grab_focus::void (GtkWidget*) "gtk_widget_grab_focus")
    (macro gtk_widget_grab_default::void (GtkWidget*) "gtk_widget_grab_default")
    (macro gtk_widget_set_name::void (GtkWidget* gchar*) "gtk_widget_set_name")
    (macro gtk_widget_get_name::gchar* (GtkWidget*) "gtk_widget_get_name")
    (macro gtk_widget_set_state::void (GtkWidget* GtkStateType) "gtk_widget_set_state")
    (macro gtk_widget_set_sensitive::void (GtkWidget* gboolean) "gtk_widget_set_sensitive")
    (macro gtk_widget_set_app_paintable::void (GtkWidget* gboolean) "gtk_widget_set_app_paintable")
    (macro gtk_widget_set_double_buffered::void (GtkWidget* gboolean) "gtk_widget_set_double_buffered")
    (macro gtk_widget_set_redraw_on_allocate::void (GtkWidget* gboolean) "gtk_widget_set_redraw_on_allocate")
    (macro gtk_widget_set_parent::void (GtkWidget* GtkWidget*) "gtk_widget_set_parent")
    (macro gtk_widget_set_parent_window::void (GtkWidget* GdkWindow*) "gtk_widget_set_parent_window")
    (macro gtk_widget_set_child_visible::void (GtkWidget* gboolean) "gtk_widget_set_child_visible")
    (macro gtk_widget_get_child_visible::gboolean (GtkWidget*) "gtk_widget_get_child_visible")
    (macro gtk_widget_get_parent::GtkWidget* (GtkWidget*) "gtk_widget_get_parent")
    (macro gtk_widget_get_parent_window::GdkWindow* (GtkWidget*) "gtk_widget_get_parent_window")
    (macro gtk_widget_child_focus::gboolean (GtkWidget* GtkDirectionType) "gtk_widget_child_focus")
    (macro gtk_widget_set_size_request::void (GtkWidget* gint gint) "gtk_widget_set_size_request")
    (macro gtk_widget_get_size_request::void (GtkWidget* gint* gint*) "gtk_widget_get_size_request")
    (macro gtk_widget_set_uposition::void (GtkWidget* gint gint) "gtk_widget_set_uposition")
    (macro gtk_widget_set_usize::void (GtkWidget* gint gint) "gtk_widget_set_usize")
    (macro gtk_widget_set_events::void (GtkWidget* gint) "gtk_widget_set_events")
    (macro gtk_widget_add_events::void (GtkWidget* gint) "gtk_widget_add_events")
    (macro gtk_widget_set_extension_events::void (GtkWidget* GdkExtensionMode) "gtk_widget_set_extension_events")
    (macro gtk_widget_get_extension_events::GdkExtensionMode (GtkWidget*) "gtk_widget_get_extension_events")
    (macro gtk_widget_get_toplevel::GtkWidget* (GtkWidget*) "gtk_widget_get_toplevel")
    (macro gtk_widget_get_ancestor::GtkWidget* (GtkWidget* GType) "gtk_widget_get_ancestor")
    (macro gtk_widget_get_colormap::GdkColormap* (GtkWidget*) "gtk_widget_get_colormap")
    (macro gtk_widget_get_visual::GdkVisual* (GtkWidget*) "gtk_widget_get_visual")
    (macro gtk_widget_get_screen::GdkScreen* (GtkWidget*) "gtk_widget_get_screen")
    (macro gtk_widget_has_screen::gboolean (GtkWidget*) "gtk_widget_has_screen")
    (macro gtk_widget_get_display::GdkDisplay* (GtkWidget*) "gtk_widget_get_display")
    (macro gtk_widget_get_root_window::GdkWindow* (GtkWidget*) "gtk_widget_get_root_window")
    (macro gtk_widget_get_settings::GtkSettings* (GtkWidget*) "gtk_widget_get_settings")
    (macro gtk_widget_get_clipboard::GtkClipboard* (GtkWidget* GdkAtom) "gtk_widget_get_clipboard")
    (macro gtk_widget_get_accessible::AtkObject* (GtkWidget*) "gtk_widget_get_accessible")
    (macro gtk_widget_set_colormap::void (GtkWidget* GdkColormap*) "gtk_widget_set_colormap")
    (macro gtk_widget_get_events::gint (GtkWidget*) "gtk_widget_get_events")
    (macro gtk_widget_get_pointer::void (GtkWidget* gint* gint*) "gtk_widget_get_pointer")
    (macro gtk_widget_is_ancestor::gboolean (GtkWidget* GtkWidget*) "gtk_widget_is_ancestor")
    (macro gtk_widget_translate_coordinates::gboolean (GtkWidget* GtkWidget* gint gint gint* gint*) "gtk_widget_translate_coordinates")
    (macro gtk_widget_hide_on_delete::gboolean (GtkWidget*) "gtk_widget_hide_on_delete")
    (macro gtk_widget_set_style::void (GtkWidget* GtkStyle*) "gtk_widget_set_style")
    (macro gtk_widget_ensure_style::void (GtkWidget*) "gtk_widget_ensure_style")
    (macro gtk_widget_get_style::GtkStyle* (GtkWidget*) "gtk_widget_get_style")
    (macro gtk_widget_modify_style::void (GtkWidget* GtkRcStyle*) "gtk_widget_modify_style")
    (macro gtk_widget_get_modifier_style::GtkRcStyle* (GtkWidget*) "gtk_widget_get_modifier_style")
    (macro gtk_widget_modify_fg::void (GtkWidget* GtkStateType GdkColor*) "gtk_widget_modify_fg")
    (macro gtk_widget_modify_bg::void (GtkWidget* GtkStateType GdkColor*) "gtk_widget_modify_bg")
    (macro gtk_widget_modify_text::void (GtkWidget* GtkStateType GdkColor*) "gtk_widget_modify_text")
    (macro gtk_widget_modify_base::void (GtkWidget* GtkStateType GdkColor*) "gtk_widget_modify_base")
    (macro gtk_widget_modify_font::void (GtkWidget* PangoFontDescription*) "gtk_widget_modify_font")
    (macro gtk_widget_create_pango_context::PangoContext* (GtkWidget*) "gtk_widget_create_pango_context")
    (macro gtk_widget_get_pango_context::PangoContext* (GtkWidget*) "gtk_widget_get_pango_context")
    (macro gtk_widget_create_pango_layout::PangoLayout* (GtkWidget* gchar*) "gtk_widget_create_pango_layout")
    (macro gtk_widget_render_icon::GdkPixbuf* (GtkWidget* gchar* GtkIconSize gchar*) "gtk_widget_render_icon")
    (macro gtk_widget_set_composite_name::void (GtkWidget* gchar*) "gtk_widget_set_composite_name")
    (macro gtk_widget_get_composite_name::gchar* (GtkWidget*) "gtk_widget_get_composite_name")
    (macro gtk_widget_reset_rc_styles::void (GtkWidget*) "gtk_widget_reset_rc_styles")
    (macro gtk_widget_push_colormap::void (GdkColormap*) "gtk_widget_push_colormap")
    (macro gtk_widget_push_composite_child::void () "gtk_widget_push_composite_child")
    (macro gtk_widget_pop_composite_child::void () "gtk_widget_pop_composite_child")
    (macro gtk_widget_pop_colormap::void () "gtk_widget_pop_colormap")
    (macro gtk_widget_class_install_style_property::void (GtkWidgetClass* GParamSpec*) "gtk_widget_class_install_style_property")
    (macro gtk_widget_class_install_style_property_parser::void (GtkWidgetClass* GParamSpec* GtkRcPropertyParser) "gtk_widget_class_install_style_property_parser")
    (macro gtk_widget_class_find_style_property::GParamSpec* (GtkWidgetClass* gchar*) "gtk_widget_class_find_style_property")
    (macro gtk_widget_class_list_style_properties::GParamSpec** (GtkWidgetClass* guint*) "gtk_widget_class_list_style_properties")
    (macro gtk_widget_style_get_property::void (GtkWidget* gchar* GValue*) "gtk_widget_style_get_property")
    (macro gtk_widget_style_get::void (GtkWidget* gchar* . gchar*) "gtk_widget_style_get")
    (macro gtk_widget_set_default_colormap::void (GdkColormap*) "gtk_widget_set_default_colormap")
    (macro gtk_widget_get_default_style::GtkStyle* () "gtk_widget_get_default_style")
    (macro gtk_widget_get_default_colormap::GdkColormap* () "gtk_widget_get_default_colormap")
    (macro gtk_widget_get_default_visual::GdkVisual* () "gtk_widget_get_default_visual")
    (macro gtk_widget_set_direction::void (GtkWidget* GtkTextDirection) "gtk_widget_set_direction")
    (macro gtk_widget_get_direction::GtkTextDirection (GtkWidget*) "gtk_widget_get_direction")
    (macro gtk_widget_set_default_direction::void (GtkTextDirection) "gtk_widget_set_default_direction")
    (macro gtk_widget_get_default_direction::GtkTextDirection () "gtk_widget_get_default_direction")
    (macro gtk_widget_shape_combine_mask::void (GtkWidget* GdkBitmap* gint gint) "gtk_widget_shape_combine_mask")
    (macro gtk_widget_reset_shapes::void (GtkWidget*) "gtk_widget_reset_shapes")
    (macro gtk_widget_path::void (GtkWidget* guint* gchar** gchar**) "gtk_widget_path")
    (macro gtk_widget_class_path::void (GtkWidget* guint* gchar** gchar**) "gtk_widget_class_path")
    (macro gtk_widget_list_mnemonic_labels::GList* (GtkWidget*) "gtk_widget_list_mnemonic_labels")
    (macro gtk_widget_add_mnemonic_label::void (GtkWidget* GtkWidget*) "gtk_widget_add_mnemonic_label")
    (macro gtk_widget_remove_mnemonic_label::void (GtkWidget* GtkWidget*) "gtk_widget_remove_mnemonic_label")
    (macro gtk_requisition_get_type::GType () "gtk_requisition_get_type")
    (macro gtk_requisition_copy::GtkRequisition* (GtkRequisition*) "gtk_requisition_copy")
    (macro gtk_requisition_free::void (GtkRequisition*) "gtk_requisition_free")
    (macro _gtk_widget_grab_notify::void (GtkWidget* gboolean) "_gtk_widget_grab_notify")
    (macro _gtk_widget_get_aux_info::GtkWidgetAuxInfo* (GtkWidget* gboolean) "_gtk_widget_get_aux_info")
    (macro _gtk_widget_propagate_hierarchy_changed::void (GtkWidget* GtkWidget*) "_gtk_widget_propagate_hierarchy_changed")
    (macro _gtk_widget_propagate_screen_changed::void (GtkWidget* GdkScreen*) "_gtk_widget_propagate_screen_changed")
    (macro _gtk_widget_peek_colormap::GdkColormap* () "_gtk_widget_peek_colormap")
    (macro gtk_container_get_type::GType () "gtk_container_get_type")
    (macro gtk_container_set_border_width::void (GtkContainer* guint) "gtk_container_set_border_width")
    (macro gtk_container_get_border_width::guint (GtkContainer*) "gtk_container_get_border_width")
    (macro gtk_container_add::void (GtkContainer* GtkWidget*) "gtk_container_add")
    (macro gtk_container_remove::void (GtkContainer* GtkWidget*) "gtk_container_remove")
    (macro gtk_container_set_resize_mode::void (GtkContainer* GtkResizeMode) "gtk_container_set_resize_mode")
    (macro gtk_container_get_resize_mode::GtkResizeMode (GtkContainer*) "gtk_container_get_resize_mode")
    (macro gtk_container_check_resize::void (GtkContainer*) "gtk_container_check_resize")
    (macro gtk_container_foreach::void (GtkContainer* GtkCallback gpointer) "gtk_container_foreach")
    (macro gtk_container_foreach_full::void (GtkContainer* GtkCallback GtkCallbackMarshal gpointer GtkDestroyNotify) "gtk_container_foreach_full")
    (macro gtk_container_get_children::GList* (GtkContainer*) "gtk_container_get_children")
    (macro gtk_container_propagate_expose::void (GtkContainer* GtkWidget* GdkEventExpose*) "gtk_container_propagate_expose")
    (macro gtk_container_set_focus_chain::void (GtkContainer* GList*) "gtk_container_set_focus_chain")
    (macro gtk_container_get_focus_chain::gboolean (GtkContainer* GList**) "gtk_container_get_focus_chain")
    (macro gtk_container_unset_focus_chain::void (GtkContainer*) "gtk_container_unset_focus_chain")
    (macro gtk_container_set_reallocate_redraws::void (GtkContainer* gboolean) "gtk_container_set_reallocate_redraws")
    (macro gtk_container_set_focus_child::void (GtkContainer* GtkWidget*) "gtk_container_set_focus_child")
    (macro gtk_container_set_focus_vadjustment::void (GtkContainer* GtkAdjustment*) "gtk_container_set_focus_vadjustment")
    (macro gtk_container_get_focus_vadjustment::GtkAdjustment* (GtkContainer*) "gtk_container_get_focus_vadjustment")
    (macro gtk_container_set_focus_hadjustment::void (GtkContainer* GtkAdjustment*) "gtk_container_set_focus_hadjustment")
    (macro gtk_container_get_focus_hadjustment::GtkAdjustment* (GtkContainer*) "gtk_container_get_focus_hadjustment")
    (macro gtk_container_resize_children::void (GtkContainer*) "gtk_container_resize_children")
    (macro gtk_container_child_type::GType (GtkContainer*) "gtk_container_child_type")
    (macro gtk_container_class_install_child_property::void (GtkContainerClass* guint GParamSpec*) "gtk_container_class_install_child_property")
    (macro gtk_container_class_find_child_property::GParamSpec* (GObjectClass* gchar*) "gtk_container_class_find_child_property")
    (macro gtk_container_class_list_child_properties::GParamSpec** (GObjectClass* guint*) "gtk_container_class_list_child_properties")
    (macro gtk_container_add_with_properties::void (GtkContainer* GtkWidget* gchar* . gchar*) "gtk_container_add_with_properties")
    (macro gtk_container_child_set::void (GtkContainer* GtkWidget* gchar* . gchar*) "gtk_container_child_set")
    (macro gtk_container_child_get::void (GtkContainer* GtkWidget* gchar* . gchar*) "gtk_container_child_get")
    (macro gtk_container_child_set_property::void (GtkContainer* GtkWidget* gchar* GValue*) "gtk_container_child_set_property")
    (macro gtk_container_child_get_property::void (GtkContainer* GtkWidget* gchar* GValue*) "gtk_container_child_get_property")
    (macro gtk_container_forall::void (GtkContainer* GtkCallback gpointer) "gtk_container_forall")
    (macro _gtk_container_queue_resize::void (GtkContainer*) "_gtk_container_queue_resize")
    (macro _gtk_container_clear_resize_widgets::void (GtkContainer*) "_gtk_container_clear_resize_widgets")
    (macro _gtk_container_child_composite_name::gchar* (GtkContainer* GtkWidget*) "_gtk_container_child_composite_name")
    (macro _gtk_container_dequeue_resize_handler::void (GtkContainer*) "_gtk_container_dequeue_resize_handler")
    (macro _gtk_container_focus_sort::GList* (GtkContainer* GList* GtkDirectionType GtkWidget*) "_gtk_container_focus_sort")
    (macro gtk_bin_get_type::GType () "gtk_bin_get_type")
    (macro gtk_bin_get_child::GtkWidget* (GtkBin*) "gtk_bin_get_child")
    (macro gtk_window_get_type::GType () "gtk_window_get_type")
    (macro gtk_window_new::GtkWidget* (GtkWindowType) "gtk_window_new")
    (macro gtk_window_set_title::void (GtkWindow* gchar*) "gtk_window_set_title")
    (macro gtk_window_get_title::gchar* (GtkWindow*) "gtk_window_get_title")
    (macro gtk_window_set_wmclass::void (GtkWindow* gchar* gchar*) "gtk_window_set_wmclass")
    (macro gtk_window_set_role::void (GtkWindow* gchar*) "gtk_window_set_role")
    (macro gtk_window_get_role::gchar* (GtkWindow*) "gtk_window_get_role")
    (macro gtk_window_add_accel_group::void (GtkWindow* GtkAccelGroup*) "gtk_window_add_accel_group")
    (macro gtk_window_remove_accel_group::void (GtkWindow* GtkAccelGroup*) "gtk_window_remove_accel_group")
    (macro gtk_window_set_position::void (GtkWindow* GtkWindowPosition) "gtk_window_set_position")
    (macro gtk_window_activate_focus::gboolean (GtkWindow*) "gtk_window_activate_focus")
    (macro gtk_window_set_focus::void (GtkWindow* GtkWidget*) "gtk_window_set_focus")
    (macro gtk_window_get_focus::GtkWidget* (GtkWindow*) "gtk_window_get_focus")
    (macro gtk_window_set_default::void (GtkWindow* GtkWidget*) "gtk_window_set_default")
    (macro gtk_window_activate_default::gboolean (GtkWindow*) "gtk_window_activate_default")
    (macro gtk_window_set_transient_for::void (GtkWindow* GtkWindow*) "gtk_window_set_transient_for")
    (macro gtk_window_get_transient_for::GtkWindow* (GtkWindow*) "gtk_window_get_transient_for")
    (macro gtk_window_set_type_hint::void (GtkWindow* GdkWindowTypeHint) "gtk_window_set_type_hint")
    (macro gtk_window_get_type_hint::GdkWindowTypeHint (GtkWindow*) "gtk_window_get_type_hint")
    (macro gtk_window_set_skip_taskbar_hint::void (GtkWindow* gboolean) "gtk_window_set_skip_taskbar_hint")
    (macro gtk_window_get_skip_taskbar_hint::gboolean (GtkWindow*) "gtk_window_get_skip_taskbar_hint")
    (macro gtk_window_set_skip_pager_hint::void (GtkWindow* gboolean) "gtk_window_set_skip_pager_hint")
    (macro gtk_window_get_skip_pager_hint::gboolean (GtkWindow*) "gtk_window_get_skip_pager_hint")
    (macro gtk_window_set_accept_focus::void (GtkWindow* gboolean) "gtk_window_set_accept_focus")
    (macro gtk_window_get_accept_focus::gboolean (GtkWindow*) "gtk_window_get_accept_focus")
    (macro gtk_window_set_focus_on_map::void (GtkWindow* gboolean) "gtk_window_set_focus_on_map")
    (macro gtk_window_get_focus_on_map::gboolean (GtkWindow*) "gtk_window_get_focus_on_map")
    (macro gtk_window_set_destroy_with_parent::void (GtkWindow* gboolean) "gtk_window_set_destroy_with_parent")
    (macro gtk_window_get_destroy_with_parent::gboolean (GtkWindow*) "gtk_window_get_destroy_with_parent")
    (macro gtk_window_set_resizable::void (GtkWindow* gboolean) "gtk_window_set_resizable")
    (macro gtk_window_get_resizable::gboolean (GtkWindow*) "gtk_window_get_resizable")
    (macro gtk_window_set_gravity::void (GtkWindow* GdkGravity) "gtk_window_set_gravity")
    (macro gtk_window_get_gravity::GdkGravity (GtkWindow*) "gtk_window_get_gravity")
    (macro gtk_window_set_geometry_hints::void (GtkWindow* GtkWidget* GdkGeometry* GdkWindowHints) "gtk_window_set_geometry_hints")
    (macro gtk_window_set_screen::void (GtkWindow* GdkScreen*) "gtk_window_set_screen")
    (macro gtk_window_get_screen::GdkScreen* (GtkWindow*) "gtk_window_get_screen")
    (macro gtk_window_is_active::gboolean (GtkWindow*) "gtk_window_is_active")
    (macro gtk_window_has_toplevel_focus::gboolean (GtkWindow*) "gtk_window_has_toplevel_focus")
    (macro gtk_window_set_has_frame::void (GtkWindow* gboolean) "gtk_window_set_has_frame")
    (macro gtk_window_get_has_frame::gboolean (GtkWindow*) "gtk_window_get_has_frame")
    (macro gtk_window_set_frame_dimensions::void (GtkWindow* gint gint gint gint) "gtk_window_set_frame_dimensions")
    (macro gtk_window_get_frame_dimensions::void (GtkWindow* gint* gint* gint* gint*) "gtk_window_get_frame_dimensions")
    (macro gtk_window_set_decorated::void (GtkWindow* gboolean) "gtk_window_set_decorated")
    (macro gtk_window_get_decorated::gboolean (GtkWindow*) "gtk_window_get_decorated")
    (macro gtk_window_set_icon_list::void (GtkWindow* GList*) "gtk_window_set_icon_list")
    (macro gtk_window_get_icon_list::GList* (GtkWindow*) "gtk_window_get_icon_list")
    (macro gtk_window_set_icon::void (GtkWindow* GdkPixbuf*) "gtk_window_set_icon")
    (macro gtk_window_set_icon_name::void (GtkWindow* gchar*) "gtk_window_set_icon_name")
    (macro gtk_window_set_icon_from_file::gboolean (GtkWindow* gchar* GError**) "gtk_window_set_icon_from_file")
    (macro gtk_window_get_icon::GdkPixbuf* (GtkWindow*) "gtk_window_get_icon")
    (macro gtk_window_get_icon_name::gchar* (GtkWindow*) "gtk_window_get_icon_name")
    (macro gtk_window_set_default_icon_list::void (GList*) "gtk_window_set_default_icon_list")
    (macro gtk_window_get_default_icon_list::GList* () "gtk_window_get_default_icon_list")
    (macro gtk_window_set_default_icon::void (GdkPixbuf*) "gtk_window_set_default_icon")
    (macro gtk_window_set_default_icon_name::void (gchar*) "gtk_window_set_default_icon_name")
    (macro gtk_window_set_default_icon_from_file::gboolean (gchar* GError**) "gtk_window_set_default_icon_from_file")
    (macro gtk_window_set_auto_startup_notification::void (gboolean) "gtk_window_set_auto_startup_notification")
    (macro gtk_window_set_modal::void (GtkWindow* gboolean) "gtk_window_set_modal")
    (macro gtk_window_get_modal::gboolean (GtkWindow*) "gtk_window_get_modal")
    (macro gtk_window_list_toplevels::GList* () "gtk_window_list_toplevels")
    (macro gtk_window_add_mnemonic::void (GtkWindow* guint GtkWidget*) "gtk_window_add_mnemonic")
    (macro gtk_window_remove_mnemonic::void (GtkWindow* guint GtkWidget*) "gtk_window_remove_mnemonic")
    (macro gtk_window_mnemonic_activate::gboolean (GtkWindow* guint GdkModifierType) "gtk_window_mnemonic_activate")
    (macro gtk_window_set_mnemonic_modifier::void (GtkWindow* GdkModifierType) "gtk_window_set_mnemonic_modifier")
    (macro gtk_window_get_mnemonic_modifier::GdkModifierType (GtkWindow*) "gtk_window_get_mnemonic_modifier")
    (macro gtk_window_activate_key::gboolean (GtkWindow* GdkEventKey*) "gtk_window_activate_key")
    (macro gtk_window_propagate_key_event::gboolean (GtkWindow* GdkEventKey*) "gtk_window_propagate_key_event")
    (macro gtk_window_present::void (GtkWindow*) "gtk_window_present")
    (macro gtk_window_iconify::void (GtkWindow*) "gtk_window_iconify")
    (macro gtk_window_deiconify::void (GtkWindow*) "gtk_window_deiconify")
    (macro gtk_window_stick::void (GtkWindow*) "gtk_window_stick")
    (macro gtk_window_unstick::void (GtkWindow*) "gtk_window_unstick")
    (macro gtk_window_maximize::void (GtkWindow*) "gtk_window_maximize")
    (macro gtk_window_unmaximize::void (GtkWindow*) "gtk_window_unmaximize")
    (macro gtk_window_fullscreen::void (GtkWindow*) "gtk_window_fullscreen")
    (macro gtk_window_unfullscreen::void (GtkWindow*) "gtk_window_unfullscreen")
    (macro gtk_window_set_keep_above::void (GtkWindow* gboolean) "gtk_window_set_keep_above")
    (macro gtk_window_set_keep_below::void (GtkWindow* gboolean) "gtk_window_set_keep_below")
    (macro gtk_window_begin_resize_drag::void (GtkWindow* GdkWindowEdge gint gint gint guint32) "gtk_window_begin_resize_drag")
    (macro gtk_window_begin_move_drag::void (GtkWindow* gint gint gint guint32) "gtk_window_begin_move_drag")
    (macro gtk_window_set_policy::void (GtkWindow* gint gint gint) "gtk_window_set_policy")
    (macro gtk_window_set_default_size::void (GtkWindow* gint gint) "gtk_window_set_default_size")
    (macro gtk_window_get_default_size::void (GtkWindow* gint* gint*) "gtk_window_get_default_size")
    (macro gtk_window_resize::void (GtkWindow* gint gint) "gtk_window_resize")
    (macro gtk_window_get_size::void (GtkWindow* gint* gint*) "gtk_window_get_size")
    (macro gtk_window_move::void (GtkWindow* gint gint) "gtk_window_move")
    (macro gtk_window_get_position::void (GtkWindow* gint* gint*) "gtk_window_get_position")
    (macro gtk_window_parse_geometry::gboolean (GtkWindow* gchar*) "gtk_window_parse_geometry")
    (macro gtk_window_reshow_with_initial_size::void (GtkWindow*) "gtk_window_reshow_with_initial_size")
    (macro gtk_window_group_get_type::GType () "gtk_window_group_get_type")
    (macro gtk_window_group_new::GtkWindowGroup* () "gtk_window_group_new")
    (macro gtk_window_group_add_window::void (GtkWindowGroup* GtkWindow*) "gtk_window_group_add_window")
    (macro gtk_window_group_remove_window::void (GtkWindowGroup* GtkWindow*) "gtk_window_group_remove_window")
    (macro _gtk_window_internal_set_focus::void (GtkWindow* GtkWidget*) "_gtk_window_internal_set_focus")
    (macro gtk_window_remove_embedded_xid::void (GtkWindow* guint) "gtk_window_remove_embedded_xid")
    (macro gtk_window_add_embedded_xid::void (GtkWindow* guint) "gtk_window_add_embedded_xid")
    (macro _gtk_window_reposition::void (GtkWindow* gint gint) "_gtk_window_reposition")
    (macro _gtk_window_constrain_size::void (GtkWindow* gint gint gint* gint*) "_gtk_window_constrain_size")
    (macro _gtk_window_get_group::GtkWindowGroup* (GtkWindow*) "_gtk_window_get_group")
    (macro _gtk_window_set_has_toplevel_focus::void (GtkWindow* gboolean) "_gtk_window_set_has_toplevel_focus")
    (macro _gtk_window_unset_focus_and_default::void (GtkWindow* GtkWidget*) "_gtk_window_unset_focus_and_default")
    (macro _gtk_window_set_is_active::void (GtkWindow* gboolean) "_gtk_window_set_is_active")
    (macro _gtk_window_keys_foreach::void (GtkWindow* GtkWindowKeysForeachFunc gpointer) "_gtk_window_keys_foreach")
    (macro _gtk_window_query_nonaccels::gboolean (GtkWindow* guint GdkModifierType) "_gtk_window_query_nonaccels")
    (macro gtk_dialog_get_type::GType () "gtk_dialog_get_type")
    (macro gtk_dialog_new::GtkWidget* () "gtk_dialog_new")
    (macro gtk_dialog_new_with_buttons::GtkWidget* (gchar* GtkWindow* GtkDialogFlags gchar* . gchar*) "gtk_dialog_new_with_buttons")
    (macro gtk_dialog_add_action_widget::void (GtkDialog* GtkWidget* gint) "gtk_dialog_add_action_widget")
    (macro gtk_dialog_add_button::GtkWidget* (GtkDialog* gchar* gint) "gtk_dialog_add_button")
    (macro gtk_dialog_add_buttons::void (GtkDialog* gchar* . gchar*) "gtk_dialog_add_buttons")
    (macro gtk_dialog_set_response_sensitive::void (GtkDialog* gint gboolean) "gtk_dialog_set_response_sensitive")
    (macro gtk_dialog_set_default_response::void (GtkDialog* gint) "gtk_dialog_set_default_response")
    (macro gtk_dialog_set_has_separator::void (GtkDialog* gboolean) "gtk_dialog_set_has_separator")
    (macro gtk_dialog_get_has_separator::gboolean (GtkDialog*) "gtk_dialog_get_has_separator")
    (macro gtk_alternative_dialog_button_order::gboolean (GdkScreen*) "gtk_alternative_dialog_button_order")
    (macro gtk_dialog_set_alternative_button_order::void (GtkDialog* gint . gint) "gtk_dialog_set_alternative_button_order")
    (macro gtk_dialog_set_alternative_button_order_from_array::void (GtkDialog* gint gint*) "gtk_dialog_set_alternative_button_order_from_array")
    (macro gtk_dialog_response::void (GtkDialog* gint) "gtk_dialog_response")
    (macro gtk_dialog_run::gint (GtkDialog*) "gtk_dialog_run")
    (macro _gtk_dialog_set_ignore_separator::void (GtkDialog* gboolean) "_gtk_dialog_set_ignore_separator")
    (macro _gtk_dialog_get_response_for_widget::gint (GtkDialog* GtkWidget*) "_gtk_dialog_get_response_for_widget")
    (macro gtk_about_dialog_get_type::GType () "gtk_about_dialog_get_type")
    (macro gtk_about_dialog_new::GtkWidget* () "gtk_about_dialog_new")
    (macro gtk_show_about_dialog::void (GtkWindow* gchar* . gchar*) "gtk_show_about_dialog")
    (macro gtk_about_dialog_get_name::gchar* (GtkAboutDialog*) "gtk_about_dialog_get_name")
    (macro gtk_about_dialog_set_name::void (GtkAboutDialog* gchar*) "gtk_about_dialog_set_name")
    (macro gtk_about_dialog_get_version::gchar* (GtkAboutDialog*) "gtk_about_dialog_get_version")
    (macro gtk_about_dialog_set_version::void (GtkAboutDialog* gchar*) "gtk_about_dialog_set_version")
    (macro gtk_about_dialog_get_copyright::gchar* (GtkAboutDialog*) "gtk_about_dialog_get_copyright")
    (macro gtk_about_dialog_set_copyright::void (GtkAboutDialog* gchar*) "gtk_about_dialog_set_copyright")
    (macro gtk_about_dialog_get_comments::gchar* (GtkAboutDialog*) "gtk_about_dialog_get_comments")
    (macro gtk_about_dialog_set_comments::void (GtkAboutDialog* gchar*) "gtk_about_dialog_set_comments")
    (macro gtk_about_dialog_get_license::gchar* (GtkAboutDialog*) "gtk_about_dialog_get_license")
    (macro gtk_about_dialog_set_license::void (GtkAboutDialog* gchar*) "gtk_about_dialog_set_license")
    (macro gtk_about_dialog_get_website::gchar* (GtkAboutDialog*) "gtk_about_dialog_get_website")
    (macro gtk_about_dialog_set_website::void (GtkAboutDialog* gchar*) "gtk_about_dialog_set_website")
    (macro gtk_about_dialog_get_website_label::gchar* (GtkAboutDialog*) "gtk_about_dialog_get_website_label")
    (macro gtk_about_dialog_set_website_label::void (GtkAboutDialog* gchar*) "gtk_about_dialog_set_website_label")
    (macro gtk_about_dialog_get_authors::gchar* (GtkAboutDialog*) "gtk_about_dialog_get_authors")
    (macro gtk_about_dialog_set_authors::void (GtkAboutDialog* gchar**) "gtk_about_dialog_set_authors")
    (macro gtk_about_dialog_get_documenters::gchar* (GtkAboutDialog*) "gtk_about_dialog_get_documenters")
    (macro gtk_about_dialog_set_documenters::void (GtkAboutDialog* gchar**) "gtk_about_dialog_set_documenters")
    (macro gtk_about_dialog_get_artists::gchar* (GtkAboutDialog*) "gtk_about_dialog_get_artists")
    (macro gtk_about_dialog_set_artists::void (GtkAboutDialog* gchar**) "gtk_about_dialog_set_artists")
    (macro gtk_about_dialog_get_translator_credits::gchar* (GtkAboutDialog*) "gtk_about_dialog_get_translator_credits")
    (macro gtk_about_dialog_set_translator_credits::void (GtkAboutDialog* gchar*) "gtk_about_dialog_set_translator_credits")
    (macro gtk_about_dialog_get_logo::GdkPixbuf* (GtkAboutDialog*) "gtk_about_dialog_get_logo")
    (macro gtk_about_dialog_set_logo::void (GtkAboutDialog* GdkPixbuf*) "gtk_about_dialog_set_logo")
    (macro gtk_about_dialog_get_logo_icon_name::gchar* (GtkAboutDialog*) "gtk_about_dialog_get_logo_icon_name")
    (macro gtk_about_dialog_set_logo_icon_name::void (GtkAboutDialog* gchar*) "gtk_about_dialog_set_logo_icon_name")
    (macro gtk_about_dialog_set_email_hook::GtkAboutDialogActivateLinkFunc (GtkAboutDialogActivateLinkFunc gpointer GDestroyNotify) "gtk_about_dialog_set_email_hook")
    (macro gtk_about_dialog_set_url_hook::GtkAboutDialogActivateLinkFunc (GtkAboutDialogActivateLinkFunc gpointer GDestroyNotify) "gtk_about_dialog_set_url_hook")
    (macro gtk_misc_get_type::GType () "gtk_misc_get_type")
    (macro gtk_misc_set_alignment::void (GtkMisc* gfloat gfloat) "gtk_misc_set_alignment")
    (macro gtk_misc_get_alignment::void (GtkMisc* gfloat* gfloat*) "gtk_misc_get_alignment")
    (macro gtk_misc_set_padding::void (GtkMisc* gint gint) "gtk_misc_set_padding")
    (macro gtk_misc_get_padding::void (GtkMisc* gint* gint*) "gtk_misc_get_padding")
    (macro gtk_menu_shell_get_type::GType () "gtk_menu_shell_get_type")
    (macro gtk_menu_shell_append::void (GtkMenuShell* GtkWidget*) "gtk_menu_shell_append")
    (macro gtk_menu_shell_prepend::void (GtkMenuShell* GtkWidget*) "gtk_menu_shell_prepend")
    (macro gtk_menu_shell_insert::void (GtkMenuShell* GtkWidget* gint) "gtk_menu_shell_insert")
    (macro gtk_menu_shell_deactivate::void (GtkMenuShell*) "gtk_menu_shell_deactivate")
    (macro gtk_menu_shell_select_item::void (GtkMenuShell* GtkWidget*) "gtk_menu_shell_select_item")
    (macro gtk_menu_shell_deselect::void (GtkMenuShell*) "gtk_menu_shell_deselect")
    (macro gtk_menu_shell_activate_item::void (GtkMenuShell* GtkWidget* gboolean) "gtk_menu_shell_activate_item")
    (macro gtk_menu_shell_select_first::void (GtkMenuShell* gboolean) "gtk_menu_shell_select_first")
    (macro _gtk_menu_shell_select_last::void (GtkMenuShell* gboolean) "_gtk_menu_shell_select_last")
    (macro _gtk_menu_shell_activate::void (GtkMenuShell*) "_gtk_menu_shell_activate")
    (macro _gtk_menu_shell_get_popup_delay::gint (GtkMenuShell*) "_gtk_menu_shell_get_popup_delay")
    (macro gtk_menu_shell_cancel::void (GtkMenuShell*) "gtk_menu_shell_cancel")
    (macro _gtk_menu_shell_add_mnemonic::void (GtkMenuShell* guint GtkWidget*) "_gtk_menu_shell_add_mnemonic")
    (macro _gtk_menu_shell_remove_mnemonic::void (GtkMenuShell* guint GtkWidget*) "_gtk_menu_shell_remove_mnemonic")
    (macro gtk_menu_get_type::GType () "gtk_menu_get_type")
    (macro gtk_menu_new::GtkWidget* () "gtk_menu_new")
    (macro gtk_menu_popup::void (GtkMenu* GtkWidget* GtkWidget* GtkMenuPositionFunc gpointer guint guint32) "gtk_menu_popup")
    (macro gtk_menu_reposition::void (GtkMenu*) "gtk_menu_reposition")
    (macro gtk_menu_popdown::void (GtkMenu*) "gtk_menu_popdown")
    (macro gtk_menu_get_active::GtkWidget* (GtkMenu*) "gtk_menu_get_active")
    (macro gtk_menu_set_active::void (GtkMenu* guint) "gtk_menu_set_active")
    (macro gtk_menu_set_accel_group::void (GtkMenu* GtkAccelGroup*) "gtk_menu_set_accel_group")
    (macro gtk_menu_get_accel_group::GtkAccelGroup* (GtkMenu*) "gtk_menu_get_accel_group")
    (macro gtk_menu_set_accel_path::void (GtkMenu* gchar*) "gtk_menu_set_accel_path")
    (macro gtk_menu_attach_to_widget::void (GtkMenu* GtkWidget* GtkMenuDetachFunc) "gtk_menu_attach_to_widget")
    (macro gtk_menu_detach::void (GtkMenu*) "gtk_menu_detach")
    (macro gtk_menu_get_attach_widget::GtkWidget* (GtkMenu*) "gtk_menu_get_attach_widget")
    (macro gtk_menu_set_tearoff_state::void (GtkMenu* gboolean) "gtk_menu_set_tearoff_state")
    (macro gtk_menu_get_tearoff_state::gboolean (GtkMenu*) "gtk_menu_get_tearoff_state")
    (macro gtk_menu_set_title::void (GtkMenu* gchar*) "gtk_menu_set_title")
    (macro gtk_menu_get_title::gchar* (GtkMenu*) "gtk_menu_get_title")
    (macro gtk_menu_reorder_child::void (GtkMenu* GtkWidget* gint) "gtk_menu_reorder_child")
    (macro gtk_menu_set_screen::void (GtkMenu* GdkScreen*) "gtk_menu_set_screen")
    (macro gtk_menu_attach::void (GtkMenu* GtkWidget* guint guint guint guint) "gtk_menu_attach")
    (macro gtk_menu_set_monitor::void (GtkMenu* gint) "gtk_menu_set_monitor")
    (macro gtk_menu_get_for_attach_widget::GList* (GtkWidget*) "gtk_menu_get_for_attach_widget")
    (macro gtk_label_get_type::GType () "gtk_label_get_type")
    (macro gtk_label_new::GtkWidget* (string) "gtk_label_new")
    (macro gtk_label_new_with_mnemonic::GtkWidget* (string) "gtk_label_new_with_mnemonic")
    (macro gtk_label_set_text::void (GtkLabel* string) "gtk_label_set_text")
    (macro gtk_label_get_text::gchar* (GtkLabel*) "gtk_label_get_text")
    (macro gtk_label_set_attributes::void (GtkLabel* PangoAttrList*) "gtk_label_set_attributes")
    (macro gtk_label_get_attributes::PangoAttrList* (GtkLabel*) "gtk_label_get_attributes")
    (macro gtk_label_set_label::void (GtkLabel* gchar*) "gtk_label_set_label")
    (macro gtk_label_get_label::gchar* (GtkLabel*) "gtk_label_get_label")
    (macro gtk_label_set_markup::void (GtkLabel* gchar*) "gtk_label_set_markup")
    (macro gtk_label_set_use_markup::void (GtkLabel* gboolean) "gtk_label_set_use_markup")
    (macro gtk_label_get_use_markup::gboolean (GtkLabel*) "gtk_label_get_use_markup")
    (macro gtk_label_set_use_underline::void (GtkLabel* gboolean) "gtk_label_set_use_underline")
    (macro gtk_label_get_use_underline::gboolean (GtkLabel*) "gtk_label_get_use_underline")
    (macro gtk_label_set_markup_with_mnemonic::void (GtkLabel* gchar*) "gtk_label_set_markup_with_mnemonic")
    (macro gtk_label_get_mnemonic_keyval::guint (GtkLabel*) "gtk_label_get_mnemonic_keyval")
    (macro gtk_label_set_mnemonic_widget::void (GtkLabel* GtkWidget*) "gtk_label_set_mnemonic_widget")
    (macro gtk_label_get_mnemonic_widget::GtkWidget* (GtkLabel*) "gtk_label_get_mnemonic_widget")
    (macro gtk_label_set_text_with_mnemonic::void (GtkLabel* gchar*) "gtk_label_set_text_with_mnemonic")
    (macro gtk_label_set_justify::void (GtkLabel* GtkJustification) "gtk_label_set_justify")
    (macro gtk_label_get_justify::GtkJustification (GtkLabel*) "gtk_label_get_justify")
    (macro gtk_label_set_ellipsize::void (GtkLabel* PangoEllipsizeMode) "gtk_label_set_ellipsize")
    (macro gtk_label_get_ellipsize::PangoEllipsizeMode (GtkLabel*) "gtk_label_get_ellipsize")
    (macro gtk_label_set_width_chars::void (GtkLabel* gint) "gtk_label_set_width_chars")
    (macro gtk_label_get_width_chars::gint (GtkLabel*) "gtk_label_get_width_chars")
    (macro gtk_label_set_max_width_chars::void (GtkLabel* gint) "gtk_label_set_max_width_chars")
    (macro gtk_label_get_max_width_chars::gint (GtkLabel*) "gtk_label_get_max_width_chars")
    (macro gtk_label_set_pattern::void (GtkLabel* gchar*) "gtk_label_set_pattern")
    (macro gtk_label_set_line_wrap::void (GtkLabel* gboolean) "gtk_label_set_line_wrap")
    (macro gtk_label_get_line_wrap::gboolean (GtkLabel*) "gtk_label_get_line_wrap")
    (macro gtk_label_set_selectable::void (GtkLabel* gboolean) "gtk_label_set_selectable")
    (macro gtk_label_get_selectable::gboolean (GtkLabel*) "gtk_label_get_selectable")
    (macro gtk_label_set_angle::void (GtkLabel* gdouble) "gtk_label_set_angle")
    (macro gtk_label_get_angle::gdouble (GtkLabel*) "gtk_label_get_angle")
    (macro gtk_label_select_region::void (GtkLabel* gint gint) "gtk_label_select_region")
    (macro gtk_label_get_selection_bounds::gboolean (GtkLabel* gint* gint*) "gtk_label_get_selection_bounds")
    (macro gtk_label_get_layout::PangoLayout* (GtkLabel*) "gtk_label_get_layout")
    (macro gtk_label_get_layout_offsets::void (GtkLabel* gint* gint*) "gtk_label_get_layout_offsets")
    (macro gtk_label_set_single_line_mode::void (GtkLabel* gboolean) "gtk_label_set_single_line_mode")
    (macro gtk_label_get_single_line_mode::gboolean (GtkLabel*) "gtk_label_get_single_line_mode")
    (macro gtk_label_get::void (GtkLabel* string*) "gtk_label_get")
    (macro gtk_label_parse_uline::guint (GtkLabel* gchar*) "gtk_label_parse_uline")
    (macro gtk_accel_label_get_type::GType () "gtk_accel_label_get_type")
    (macro gtk_accel_label_new::GtkWidget* (gchar*) "gtk_accel_label_new")
    (macro gtk_accel_label_get_accel_widget::GtkWidget* (GtkAccelLabel*) "gtk_accel_label_get_accel_widget")
    (macro gtk_accel_label_get_accel_width::guint (GtkAccelLabel*) "gtk_accel_label_get_accel_width")
    (macro gtk_accel_label_set_accel_widget::void (GtkAccelLabel* GtkWidget*) "gtk_accel_label_set_accel_widget")
    (macro gtk_accel_label_set_accel_closure::void (GtkAccelLabel* GClosure*) "gtk_accel_label_set_accel_closure")
    (macro gtk_accel_label_refetch::gboolean (GtkAccelLabel*) "gtk_accel_label_refetch")
    (macro _gtk_accel_label_class_get_accelerator_label::gchar* (GtkAccelLabelClass* guint GdkModifierType) "_gtk_accel_label_class_get_accelerator_label")
    (macro gtk_accel_map_add_entry::void (gchar* guint GdkModifierType) "gtk_accel_map_add_entry")
    (macro gtk_accel_map_lookup_entry::gboolean (gchar* GtkAccelKey*) "gtk_accel_map_lookup_entry")
    (macro gtk_accel_map_change_entry::gboolean (gchar* guint GdkModifierType gboolean) "gtk_accel_map_change_entry")
    (macro gtk_accel_map_load::void (gchar*) "gtk_accel_map_load")
    (macro gtk_accel_map_save::void (gchar*) "gtk_accel_map_save")
    (macro gtk_accel_map_foreach::void (gpointer GtkAccelMapForeach) "gtk_accel_map_foreach")
    (macro gtk_accel_map_load_fd::void (gint) "gtk_accel_map_load_fd")
    (macro gtk_accel_map_load_scanner::void (GScanner*) "gtk_accel_map_load_scanner")
    (macro gtk_accel_map_save_fd::void (gint) "gtk_accel_map_save_fd")
    (macro gtk_accel_map_lock_path::void (gchar*) "gtk_accel_map_lock_path")
    (macro gtk_accel_map_unlock_path::void (gchar*) "gtk_accel_map_unlock_path")
    (macro gtk_accel_map_add_filter::void (gchar*) "gtk_accel_map_add_filter")
    (macro gtk_accel_map_foreach_unfiltered::void (gpointer GtkAccelMapForeach) "gtk_accel_map_foreach_unfiltered")
    (macro gtk_accel_map_get_type::GType () "gtk_accel_map_get_type")
    (macro gtk_accel_map_get::GtkAccelMap* () "gtk_accel_map_get")
    (macro _gtk_accel_map_init::void () "_gtk_accel_map_init")
    (macro _gtk_accel_map_add_group::void (gchar* GtkAccelGroup*) "_gtk_accel_map_add_group")
    (macro _gtk_accel_map_remove_group::void (gchar* GtkAccelGroup*) "_gtk_accel_map_remove_group")
    (macro _gtk_accel_path_is_valid::gboolean (gchar*) "_gtk_accel_path_is_valid")
    (macro atk_action_get_type::GType () "atk_action_get_type")
    (macro atk_action_do_action::gboolean (AtkAction* gint) "atk_action_do_action")
    (macro atk_action_get_n_actions::gint (AtkAction*) "atk_action_get_n_actions")
    (macro atk_action_get_description::gchar* (AtkAction* gint) "atk_action_get_description")
    (macro atk_action_get_name::gchar* (AtkAction* gint) "atk_action_get_name")
    (macro atk_action_get_keybinding::gchar* (AtkAction* gint) "atk_action_get_keybinding")
    (macro atk_action_set_description::gboolean (AtkAction* gint gchar*) "atk_action_set_description")
    (macro atk_action_get_localized_name::gchar* (AtkAction* gint) "atk_action_get_localized_name")
    (macro atk_util_get_type::GType () "atk_util_get_type")
    (macro atk_add_focus_tracker::guint (AtkEventListener) "atk_add_focus_tracker")
    (macro atk_remove_focus_tracker::void (guint) "atk_remove_focus_tracker")
    (macro atk_focus_tracker_init::void (AtkEventListenerInit) "atk_focus_tracker_init")
    (macro atk_focus_tracker_notify::void (AtkObject*) "atk_focus_tracker_notify")
    (macro atk_add_global_event_listener::guint (GSignalEmissionHook gchar*) "atk_add_global_event_listener")
    (macro atk_remove_global_event_listener::void (guint) "atk_remove_global_event_listener")
    (macro atk_add_key_event_listener::guint (AtkKeySnoopFunc gpointer) "atk_add_key_event_listener")
    (macro atk_remove_key_event_listener::void (guint) "atk_remove_key_event_listener")
    (macro atk_get_root::AtkObject* () "atk_get_root")
    (macro atk_get_focus_object::AtkObject* () "atk_get_focus_object")
    (macro atk_get_toolkit_name::gchar* () "atk_get_toolkit_name")
    (macro atk_get_toolkit_version::gchar* () "atk_get_toolkit_version")
    (macro atk_rectangle_get_type::GType () "atk_rectangle_get_type")
    (macro atk_component_get_type::GType () "atk_component_get_type")
    (macro atk_component_add_focus_handler::guint (AtkComponent* AtkFocusHandler) "atk_component_add_focus_handler")
    (macro atk_component_contains::gboolean (AtkComponent* gint gint AtkCoordType) "atk_component_contains")
    (macro atk_component_ref_accessible_at_point::AtkObject* (AtkComponent* gint gint AtkCoordType) "atk_component_ref_accessible_at_point")
    (macro atk_component_get_extents::void (AtkComponent* gint* gint* gint* gint* AtkCoordType) "atk_component_get_extents")
    (macro atk_component_get_position::void (AtkComponent* gint* gint* AtkCoordType) "atk_component_get_position")
    (macro atk_component_get_size::void (AtkComponent* gint* gint*) "atk_component_get_size")
    (macro atk_component_get_layer::AtkLayer (AtkComponent*) "atk_component_get_layer")
    (macro atk_component_get_mdi_zorder::gint (AtkComponent*) "atk_component_get_mdi_zorder")
    (macro atk_component_grab_focus::gboolean (AtkComponent*) "atk_component_grab_focus")
    (macro atk_component_remove_focus_handler::void (AtkComponent* guint) "atk_component_remove_focus_handler")
    (macro atk_component_set_extents::gboolean (AtkComponent* gint gint gint gint AtkCoordType) "atk_component_set_extents")
    (macro atk_component_set_position::gboolean (AtkComponent* gint gint AtkCoordType) "atk_component_set_position")
    (macro atk_component_set_size::gboolean (AtkComponent* gint gint) "atk_component_set_size")
    (macro atk_document_get_type::GType () "atk_document_get_type")
    (macro atk_document_get_document_type::gchar* (AtkDocument*) "atk_document_get_document_type")
    (macro atk_document_get_document::gpointer (AtkDocument*) "atk_document_get_document")
    (macro atk_text_attribute_register::AtkTextAttribute (gchar*) "atk_text_attribute_register")
    (macro atk_text_get_type::GType () "atk_text_get_type")
    (macro atk_text_get_text::gchar* (AtkText* gint gint) "atk_text_get_text")
    (macro atk_text_get_character_at_offset::gunichar (AtkText* gint) "atk_text_get_character_at_offset")
    (macro atk_text_get_text_after_offset::gchar* (AtkText* gint AtkTextBoundary gint* gint*) "atk_text_get_text_after_offset")
    (macro atk_text_get_text_at_offset::gchar* (AtkText* gint AtkTextBoundary gint* gint*) "atk_text_get_text_at_offset")
    (macro atk_text_get_text_before_offset::gchar* (AtkText* gint AtkTextBoundary gint* gint*) "atk_text_get_text_before_offset")
    (macro atk_text_get_caret_offset::gint (AtkText*) "atk_text_get_caret_offset")
    (macro atk_text_get_character_extents::void (AtkText* gint gint* gint* gint* gint* AtkCoordType) "atk_text_get_character_extents")
    (macro atk_text_get_run_attributes::AtkAttributeSet* (AtkText* gint gint* gint*) "atk_text_get_run_attributes")
    (macro atk_text_get_default_attributes::AtkAttributeSet* (AtkText*) "atk_text_get_default_attributes")
    (macro atk_text_get_character_count::gint (AtkText*) "atk_text_get_character_count")
    (macro atk_text_get_offset_at_point::gint (AtkText* gint gint AtkCoordType) "atk_text_get_offset_at_point")
    (macro atk_text_get_n_selections::gint (AtkText*) "atk_text_get_n_selections")
    (macro atk_text_get_selection::gchar* (AtkText* gint gint* gint*) "atk_text_get_selection")
    (macro atk_text_add_selection::gboolean (AtkText* gint gint) "atk_text_add_selection")
    (macro atk_text_remove_selection::gboolean (AtkText* gint) "atk_text_remove_selection")
    (macro atk_text_set_selection::gboolean (AtkText* gint gint gint) "atk_text_set_selection")
    (macro atk_text_set_caret_offset::gboolean (AtkText* gint) "atk_text_set_caret_offset")
    (macro atk_text_get_range_extents::void (AtkText* gint gint AtkCoordType AtkTextRectangle*) "atk_text_get_range_extents")
    (macro atk_text_get_bounded_ranges::AtkTextRange** (AtkText* AtkTextRectangle* AtkCoordType AtkTextClipType AtkTextClipType) "atk_text_get_bounded_ranges")
    (macro atk_text_free_ranges::void (AtkTextRange**) "atk_text_free_ranges")
    (macro atk_attribute_set_free::void (AtkAttributeSet*) "atk_attribute_set_free")
    (macro atk_text_attribute_get_name::gchar* (AtkTextAttribute) "atk_text_attribute_get_name")
    (macro atk_text_attribute_for_name::AtkTextAttribute (gchar*) "atk_text_attribute_for_name")
    (macro atk_text_attribute_get_value::gchar* (AtkTextAttribute gint) "atk_text_attribute_get_value")
    (macro atk_editable_text_get_type::GType () "atk_editable_text_get_type")
    (macro atk_editable_text_set_run_attributes::gboolean (AtkEditableText* AtkAttributeSet* gint gint) "atk_editable_text_set_run_attributes")
    (macro atk_editable_text_set_text_contents::void (AtkEditableText* gchar*) "atk_editable_text_set_text_contents")
    (macro atk_editable_text_insert_text::void (AtkEditableText* gchar* gint gint*) "atk_editable_text_insert_text")
    (macro atk_editable_text_copy_text::void (AtkEditableText* gint gint) "atk_editable_text_copy_text")
    (macro atk_editable_text_cut_text::void (AtkEditableText* gint gint) "atk_editable_text_cut_text")
    (macro atk_editable_text_delete_text::void (AtkEditableText* gint gint) "atk_editable_text_delete_text")
    (macro atk_editable_text_paste_text::void (AtkEditableText* gint) "atk_editable_text_paste_text")
    (macro atk_gobject_accessible_get_type::GType () "atk_gobject_accessible_get_type")
    (macro atk_gobject_accessible_for_object::AtkObject* (GObject*) "atk_gobject_accessible_for_object")
    (macro atk_gobject_accessible_get_object::GObject* (AtkGObjectAccessible*) "atk_gobject_accessible_get_object")
    (macro atk_hyperlink_get_type::GType () "atk_hyperlink_get_type")
    (macro atk_hyperlink_get_uri::gchar* (AtkHyperlink* gint) "atk_hyperlink_get_uri")
    (macro atk_hyperlink_get_object::AtkObject* (AtkHyperlink* gint) "atk_hyperlink_get_object")
    (macro atk_hyperlink_get_end_index::gint (AtkHyperlink*) "atk_hyperlink_get_end_index")
    (macro atk_hyperlink_get_start_index::gint (AtkHyperlink*) "atk_hyperlink_get_start_index")
    (macro atk_hyperlink_is_valid::gboolean (AtkHyperlink*) "atk_hyperlink_is_valid")
    (macro atk_hyperlink_is_inline::gboolean (AtkHyperlink*) "atk_hyperlink_is_inline")
    (macro atk_hyperlink_get_n_anchors::gint (AtkHyperlink*) "atk_hyperlink_get_n_anchors")
(macro atk_hyperlink_is_selected_link::gboolean (AtkHyperlink*) "atk_hyperlink_is_selected_link")
   (macro atk_hypertext_get_type::GType () "atk_hypertext_get_type")
   (macro atk_hypertext_get_link::AtkHyperlink* (AtkHypertext* gint) "atk_hypertext_get_link")
   (macro atk_hypertext_get_n_links::gint (AtkHypertext*) "atk_hypertext_get_n_links")
   (macro atk_hypertext_get_link_index::gint (AtkHypertext* gint) "atk_hypertext_get_link_index")
   (macro atk_image_get_type::GType () "atk_image_get_type")
   (macro atk_image_get_image_description::gchar* (AtkImage*) "atk_image_get_image_description")
   (macro atk_image_get_image_size::void (AtkImage* gint* gint*) "atk_image_get_image_size")
   (macro atk_image_set_image_description::gboolean (AtkImage* gchar*) "atk_image_set_image_description")
   (macro atk_image_get_image_position::void (AtkImage* gint* gint* AtkCoordType) "atk_image_get_image_position")
   (macro atk_no_op_object_get_type::GType () "atk_no_op_object_get_type")
   (macro atk_no_op_object_new::AtkObject* (GObject*) "atk_no_op_object_new")
   (macro atk_object_factory_get_type::GType () "atk_object_factory_get_type")
   (macro atk_object_factory_create_accessible::AtkObject* (AtkObjectFactory* GObject*) "atk_object_factory_create_accessible")
   (macro atk_object_factory_invalidate::void (AtkObjectFactory*) "atk_object_factory_invalidate")
   (macro atk_object_factory_get_accessible_type::GType (AtkObjectFactory*) "atk_object_factory_get_accessible_type")
   (macro atk_no_op_object_factory_get_type::GType () "atk_no_op_object_factory_get_type")
   (macro atk_no_op_object_factory_new::AtkObjectFactory* () "atk_no_op_object_factory_new")
   (macro atk_registry_get_type::GType () "atk_registry_get_type")
   (macro atk_registry_set_factory_type::void (AtkRegistry* GType GType) "atk_registry_set_factory_type")
   (macro atk_registry_get_factory_type::GType (AtkRegistry* GType) "atk_registry_get_factory_type")
   (macro atk_registry_get_factory::AtkObjectFactory* (AtkRegistry* GType) "atk_registry_get_factory")
   (macro atk_get_default_registry::AtkRegistry* () "atk_get_default_registry")
   (macro atk_relation_get_type::GType () "atk_relation_get_type")
   (macro atk_relation_type_register::AtkRelationType (gchar*) "atk_relation_type_register")
   (macro atk_relation_type_get_name::gchar* (AtkRelationType) "atk_relation_type_get_name")
   (macro atk_relation_type_for_name::AtkRelationType (gchar*) "atk_relation_type_for_name")
   (macro atk_relation_new::AtkRelation* (AtkObject** gint AtkRelationType) "atk_relation_new")
   (macro atk_relation_get_relation_type::AtkRelationType (AtkRelation*) "atk_relation_get_relation_type")
   (macro atk_relation_get_target::GPtrArray* (AtkRelation*) "atk_relation_get_target")
   (macro atk_relation_set_get_type::GType () "atk_relation_set_get_type")
   (macro atk_relation_set_new::AtkRelationSet* () "atk_relation_set_new")
   (macro atk_relation_set_contains::gboolean (AtkRelationSet* AtkRelationType) "atk_relation_set_contains")
   (macro atk_relation_set_remove::void (AtkRelationSet* AtkRelation*) "atk_relation_set_remove")
   (macro atk_relation_set_add::void (AtkRelationSet* AtkRelation*) "atk_relation_set_add")
   (macro atk_relation_set_get_n_relations::gint (AtkRelationSet*) "atk_relation_set_get_n_relations")
   (macro atk_relation_set_get_relation::AtkRelation* (AtkRelationSet* gint) "atk_relation_set_get_relation")
   (macro atk_relation_set_get_relation_by_type::AtkRelation* (AtkRelationSet* AtkRelationType) "atk_relation_set_get_relation_by_type")
   (macro atk_selection_get_type::GType () "atk_selection_get_type")
   (macro atk_selection_add_selection::gboolean (AtkSelection* gint) "atk_selection_add_selection")
   (macro atk_selection_clear_selection::gboolean (AtkSelection*) "atk_selection_clear_selection")
   (macro atk_selection_ref_selection::AtkObject* (AtkSelection* gint) "atk_selection_ref_selection")
   (macro atk_selection_get_selection_count::gint (AtkSelection*) "atk_selection_get_selection_count")
   (macro atk_selection_is_child_selected::gboolean (AtkSelection* gint) "atk_selection_is_child_selected")
   (macro atk_selection_remove_selection::gboolean (AtkSelection* gint) "atk_selection_remove_selection")
   (macro atk_selection_select_all_selection::gboolean (AtkSelection*) "atk_selection_select_all_selection")
   (macro atk_state_set_get_type::GType () "atk_state_set_get_type")
   (macro atk_state_set_new::AtkStateSet* () "atk_state_set_new")
   (macro atk_state_set_is_empty::gboolean (AtkStateSet*) "atk_state_set_is_empty")
   (macro atk_state_set_add_state::gboolean (AtkStateSet* AtkStateType) "atk_state_set_add_state")
   (macro atk_state_set_add_states::void (AtkStateSet* AtkStateType* gint) "atk_state_set_add_states")
   (macro atk_state_set_clear_states::void (AtkStateSet*) "atk_state_set_clear_states")
   (macro atk_state_set_contains_state::gboolean (AtkStateSet* AtkStateType) "atk_state_set_contains_state")
   (macro atk_state_set_contains_states::gboolean (AtkStateSet* AtkStateType* gint) "atk_state_set_contains_states")
   (macro atk_state_set_remove_state::gboolean (AtkStateSet* AtkStateType) "atk_state_set_remove_state")
   (macro atk_state_set_and_sets::AtkStateSet* (AtkStateSet* AtkStateSet*) "atk_state_set_and_sets")
   (macro atk_state_set_or_sets::AtkStateSet* (AtkStateSet* AtkStateSet*) "atk_state_set_or_sets")
   (macro atk_state_set_xor_sets::AtkStateSet* (AtkStateSet* AtkStateSet*) "atk_state_set_xor_sets")
   (macro atk_streamable_content_get_type::GType () "atk_streamable_content_get_type")
   (macro atk_streamable_content_get_n_mime_types::gint (AtkStreamableContent*) "atk_streamable_content_get_n_mime_types")
   (macro atk_streamable_content_get_mime_type::gchar* (AtkStreamableContent* gint) "atk_streamable_content_get_mime_type")
   (macro atk_streamable_content_get_stream::GIOChannel* (AtkStreamableContent* gchar*) "atk_streamable_content_get_stream")
   (macro atk_table_get_type::GType () "atk_table_get_type")
   (macro atk_table_ref_at::AtkObject* (AtkTable* gint gint) "atk_table_ref_at")
   (macro atk_table_get_index_at::gint (AtkTable* gint gint) "atk_table_get_index_at")
   (macro atk_table_get_column_at_index::gint (AtkTable* gint) "atk_table_get_column_at_index")
   (macro atk_table_get_row_at_index::gint (AtkTable* gint) "atk_table_get_row_at_index")
   (macro atk_table_get_n_columns::gint (AtkTable*) "atk_table_get_n_columns")
   (macro atk_table_get_n_rows::gint (AtkTable*) "atk_table_get_n_rows")
   (macro atk_table_get_column_extent_at::gint (AtkTable* gint gint) "atk_table_get_column_extent_at")
   (macro atk_table_get_row_extent_at::gint (AtkTable* gint gint) "atk_table_get_row_extent_at")
   (macro atk_table_get_caption::AtkObject* (AtkTable*) "atk_table_get_caption")
   (macro atk_table_get_column_description::gchar* (AtkTable* gint) "atk_table_get_column_description")
   (macro atk_table_get_column_header::AtkObject* (AtkTable* gint) "atk_table_get_column_header")
   (macro atk_table_get_row_description::gchar* (AtkTable* gint) "atk_table_get_row_description")
   (macro atk_table_get_row_header::AtkObject* (AtkTable* gint) "atk_table_get_row_header")
   (macro atk_table_get_summary::AtkObject* (AtkTable*) "atk_table_get_summary")
   (macro atk_table_set_caption::void (AtkTable* AtkObject*) "atk_table_set_caption")
   (macro atk_table_set_column_description::void (AtkTable* gint gchar*) "atk_table_set_column_description")
   (macro atk_table_set_column_header::void (AtkTable* gint AtkObject*) "atk_table_set_column_header")
   (macro atk_table_set_row_description::void (AtkTable* gint gchar*) "atk_table_set_row_description")
   (macro atk_table_set_row_header::void (AtkTable* gint AtkObject*) "atk_table_set_row_header")
   (macro atk_table_set_summary::void (AtkTable* AtkObject*) "atk_table_set_summary")
   (macro atk_table_get_selected_columns::gint (AtkTable* gint**) "atk_table_get_selected_columns")
   (macro atk_table_get_selected_rows::gint (AtkTable* gint**) "atk_table_get_selected_rows")
   (macro atk_table_is_column_selected::gboolean (AtkTable* gint) "atk_table_is_column_selected")
   (macro atk_table_is_row_selected::gboolean (AtkTable* gint) "atk_table_is_row_selected")
   (macro atk_table_is_selected::gboolean (AtkTable* gint gint) "atk_table_is_selected")
   (macro atk_table_add_row_selection::gboolean (AtkTable* gint) "atk_table_add_row_selection")
   (macro atk_table_remove_row_selection::gboolean (AtkTable* gint) "atk_table_remove_row_selection")
   (macro atk_table_add_column_selection::gboolean (AtkTable* gint) "atk_table_add_column_selection")
   (macro atk_table_remove_column_selection::gboolean (AtkTable* gint) "atk_table_remove_column_selection")
   (macro atk_value_get_type::GType () "atk_value_get_type")
   (macro atk_value_get_current_value::void (AtkValue* GValue*) "atk_value_get_current_value")
   (macro atk_value_get_maximum_value::void (AtkValue* GValue*) "atk_value_get_maximum_value")
   (macro atk_value_get_minimum_value::void (AtkValue* GValue*) "atk_value_get_minimum_value")
   (macro atk_value_set_current_value::gboolean (AtkValue* GValue*) "atk_value_set_current_value")
   (macro gtk_accessible_get_type::GType () "gtk_accessible_get_type")
   (macro gtk_accessible_connect_widget_destroyed::void (GtkAccessible*) "gtk_accessible_connect_widget_destroyed")
   (macro gtk_action_get_type::GType () "gtk_action_get_type")
   (macro gtk_action_new::GtkAction* (gchar* gchar* gchar* gchar*) "gtk_action_new")
   (macro gtk_action_get_name::gchar* (GtkAction*) "gtk_action_get_name")
   (macro gtk_action_is_sensitive::gboolean (GtkAction*) "gtk_action_is_sensitive")
   (macro gtk_action_get_sensitive::gboolean (GtkAction*) "gtk_action_get_sensitive")
   (macro gtk_action_set_sensitive::void (GtkAction* gboolean) "gtk_action_set_sensitive")
   (macro gtk_action_is_visible::gboolean (GtkAction*) "gtk_action_is_visible")
   (macro gtk_action_get_visible::gboolean (GtkAction*) "gtk_action_get_visible")
   (macro gtk_action_set_visible::void (GtkAction* gboolean) "gtk_action_set_visible")
   (macro gtk_action_activate::void (GtkAction*) "gtk_action_activate")
   (macro gtk_action_create_icon::GtkWidget* (GtkAction* GtkIconSize) "gtk_action_create_icon")
   (macro gtk_action_create_menu_item::GtkWidget* (GtkAction*) "gtk_action_create_menu_item")
   (macro gtk_action_create_tool_item::GtkWidget* (GtkAction*) "gtk_action_create_tool_item")
   (macro gtk_action_connect_proxy::void (GtkAction* GtkWidget*) "gtk_action_connect_proxy")
   (macro gtk_action_disconnect_proxy::void (GtkAction* GtkWidget*) "gtk_action_disconnect_proxy")
   (macro gtk_action_get_proxies::GSList* (GtkAction*) "gtk_action_get_proxies")
   (macro gtk_action_connect_accelerator::void (GtkAction*) "gtk_action_connect_accelerator")
   (macro gtk_action_disconnect_accelerator::void (GtkAction*) "gtk_action_disconnect_accelerator")
   (macro gtk_action_get_accel_path::gchar* (GtkAction*) "gtk_action_get_accel_path")
   (macro gtk_action_block_activate_from::void (GtkAction* GtkWidget*) "gtk_action_block_activate_from")
   (macro gtk_action_unblock_activate_from::void (GtkAction* GtkWidget*) "gtk_action_unblock_activate_from")
   (macro _gtk_action_emit_activate::void (GtkAction*) "_gtk_action_emit_activate")
   (macro gtk_action_set_accel_path::void (GtkAction* gchar*) "gtk_action_set_accel_path")
   (macro gtk_action_set_accel_group::void (GtkAction* GtkAccelGroup*) "gtk_action_set_accel_group")
   (macro gtk_item_factory_get_type::GType () "gtk_item_factory_get_type")
   (macro gtk_item_factory_new::GtkItemFactory* (GType gchar* GtkAccelGroup*) "gtk_item_factory_new")
   (macro gtk_item_factory_construct::void (GtkItemFactory* GType gchar* GtkAccelGroup*) "gtk_item_factory_construct")
   (macro gtk_item_factory_add_foreign::void (GtkWidget* gchar* GtkAccelGroup* guint GdkModifierType) "gtk_item_factory_add_foreign")
   (macro gtk_item_factory_from_widget::GtkItemFactory* (GtkWidget*) "gtk_item_factory_from_widget")
   (macro gtk_item_factory_path_from_widget::gchar* (GtkWidget*) "gtk_item_factory_path_from_widget")
   (macro gtk_item_factory_get_item::GtkWidget* (GtkItemFactory* gchar*) "gtk_item_factory_get_item")
   (macro gtk_item_factory_get_widget::GtkWidget* (GtkItemFactory* gchar*) "gtk_item_factory_get_widget")
   (macro gtk_item_factory_get_widget_by_action::GtkWidget* (GtkItemFactory* guint) "gtk_item_factory_get_widget_by_action")
   (macro gtk_item_factory_get_item_by_action::GtkWidget* (GtkItemFactory* guint) "gtk_item_factory_get_item_by_action")
   (macro gtk_item_factory_create_item::void (GtkItemFactory* GtkItemFactoryEntry* gpointer guint) "gtk_item_factory_create_item")
   (macro gtk_item_factory_create_items::void (GtkItemFactory* guint GtkItemFactoryEntry* gpointer) "gtk_item_factory_create_items")
   (macro gtk_item_factory_delete_item::void (GtkItemFactory* gchar*) "gtk_item_factory_delete_item")
   (macro gtk_item_factory_delete_entry::void (GtkItemFactory* GtkItemFactoryEntry*) "gtk_item_factory_delete_entry")
   (macro gtk_item_factory_delete_entries::void (GtkItemFactory* guint GtkItemFactoryEntry*) "gtk_item_factory_delete_entries")
   (macro gtk_item_factory_popup::void (GtkItemFactory* guint guint guint guint32) "gtk_item_factory_popup")
   (macro gtk_item_factory_popup_with_data::void (GtkItemFactory* gpointer GtkDestroyNotify guint guint guint guint32) "gtk_item_factory_popup_with_data")
   (macro gtk_item_factory_popup_data::gpointer (GtkItemFactory*) "gtk_item_factory_popup_data")
   (macro gtk_item_factory_popup_data_from_widget::gpointer (GtkWidget*) "gtk_item_factory_popup_data_from_widget")
   (macro gtk_item_factory_set_translate_func::void (GtkItemFactory* GtkTranslateFunc gpointer GtkDestroyNotify) "gtk_item_factory_set_translate_func")
   (macro gtk_item_factory_create_items_ac::void (GtkItemFactory* guint GtkItemFactoryEntry* gpointer guint) "gtk_item_factory_create_items_ac")
   (macro gtk_item_factory_from_path::GtkItemFactory* (gchar*) "gtk_item_factory_from_path")
   (macro gtk_item_factory_create_menu_entries::void (guint GtkMenuEntry*) "gtk_item_factory_create_menu_entries")
   (macro gtk_item_factories_path_delete::void (gchar* gchar*) "gtk_item_factories_path_delete")
   (macro gtk_action_group_get_type::GType () "gtk_action_group_get_type")
   (macro gtk_action_group_new::GtkActionGroup* (gchar*) "gtk_action_group_new")
   (macro gtk_action_group_get_name::gchar* (GtkActionGroup*) "gtk_action_group_get_name")
   (macro gtk_action_group_get_sensitive::gboolean (GtkActionGroup*) "gtk_action_group_get_sensitive")
   (macro gtk_action_group_set_sensitive::void (GtkActionGroup* gboolean) "gtk_action_group_set_sensitive")
   (macro gtk_action_group_get_visible::gboolean (GtkActionGroup*) "gtk_action_group_get_visible")
   (macro gtk_action_group_set_visible::void (GtkActionGroup* gboolean) "gtk_action_group_set_visible")
   (macro gtk_action_group_get_action::GtkAction* (GtkActionGroup* gchar*) "gtk_action_group_get_action")
   (macro gtk_action_group_list_actions::GList* (GtkActionGroup*) "gtk_action_group_list_actions")
   (macro gtk_action_group_add_action::void (GtkActionGroup* GtkAction*) "gtk_action_group_add_action")
   (macro gtk_action_group_add_action_with_accel::void (GtkActionGroup* GtkAction* gchar*) "gtk_action_group_add_action_with_accel")
   (macro gtk_action_group_remove_action::void (GtkActionGroup* GtkAction*) "gtk_action_group_remove_action")
   (macro gtk_action_group_add_actions::void (GtkActionGroup* GtkActionEntry* guint gpointer) "gtk_action_group_add_actions")
   (macro gtk_action_group_add_toggle_actions::void (GtkActionGroup* GtkToggleActionEntry* guint gpointer) "gtk_action_group_add_toggle_actions")
   (macro gtk_action_group_add_radio_actions::void (GtkActionGroup* GtkRadioActionEntry* guint gint GCallback gpointer) "gtk_action_group_add_radio_actions")
   (macro gtk_action_group_add_actions_full::void (GtkActionGroup* GtkActionEntry* guint gpointer GDestroyNotify) "gtk_action_group_add_actions_full")
   (macro gtk_action_group_add_toggle_actions_full::void (GtkActionGroup* GtkToggleActionEntry* guint gpointer GDestroyNotify) "gtk_action_group_add_toggle_actions_full")
   (macro gtk_action_group_add_radio_actions_full::void (GtkActionGroup* GtkRadioActionEntry* guint gint GCallback gpointer GDestroyNotify) "gtk_action_group_add_radio_actions_full")
   (macro gtk_action_group_set_translate_func::void (GtkActionGroup* GtkTranslateFunc gpointer GtkDestroyNotify) "gtk_action_group_set_translate_func")
   (macro gtk_action_group_set_translation_domain::void (GtkActionGroup* gchar*) "gtk_action_group_set_translation_domain")
   (macro gtk_action_group_translate_string::gchar* (GtkActionGroup* gchar*) "gtk_action_group_translate_string")
   (macro _gtk_action_group_emit_connect_proxy::void (GtkActionGroup* GtkAction* GtkWidget*) "_gtk_action_group_emit_connect_proxy")
   (macro _gtk_action_group_emit_disconnect_proxy::void (GtkActionGroup* GtkAction* GtkWidget*) "_gtk_action_group_emit_disconnect_proxy")
   (macro _gtk_action_group_emit_pre_activate::void (GtkActionGroup* GtkAction*) "_gtk_action_group_emit_pre_activate")
   (macro _gtk_action_group_emit_post_activate::void (GtkActionGroup* GtkAction*) "_gtk_action_group_emit_post_activate")
   (macro gtk_alignment_get_type::GType () "gtk_alignment_get_type")
   (macro gtk_alignment_new::GtkWidget* (gfloat gfloat gfloat gfloat) "gtk_alignment_new")
   (macro gtk_alignment_set::void (GtkAlignment* gfloat gfloat gfloat gfloat) "gtk_alignment_set")
   (macro gtk_alignment_set_padding::void (GtkAlignment* guint guint guint guint) "gtk_alignment_set_padding")
   (macro gtk_alignment_get_padding::void (GtkAlignment* guint* guint* guint* guint*) "gtk_alignment_get_padding")
   (macro gtk_arrow_get_type::GType () "gtk_arrow_get_type")
   (macro gtk_arrow_new::GtkWidget* (GtkArrowType GtkShadowType) "gtk_arrow_new")
   (macro gtk_arrow_set::void (GtkArrow* GtkArrowType GtkShadowType) "gtk_arrow_set")
   (macro gtk_frame_get_type::GType () "gtk_frame_get_type")
   (macro gtk_frame_new::GtkWidget* (gchar*) "gtk_frame_new")
   (macro gtk_frame_set_label::void (GtkFrame* gchar*) "gtk_frame_set_label")
   (macro gtk_frame_get_label::gchar* (GtkFrame*) "gtk_frame_get_label")
   (macro gtk_frame_set_label_widget::void (GtkFrame* GtkWidget*) "gtk_frame_set_label_widget")
   (macro gtk_frame_get_label_widget::GtkWidget* (GtkFrame*) "gtk_frame_get_label_widget")
   (macro gtk_frame_set_label_align::void (GtkFrame* gfloat gfloat) "gtk_frame_set_label_align")
   (macro gtk_frame_get_label_align::void (GtkFrame* gfloat* gfloat*) "gtk_frame_get_label_align")
   (macro gtk_frame_set_shadow_type::void (GtkFrame* GtkShadowType) "gtk_frame_set_shadow_type")
   (macro gtk_frame_get_shadow_type::GtkShadowType (GtkFrame*) "gtk_frame_get_shadow_type")
   (macro gtk_aspect_frame_get_type::GType () "gtk_aspect_frame_get_type")
   (macro gtk_aspect_frame_new::GtkWidget* (gchar* gfloat gfloat gfloat gboolean) "gtk_aspect_frame_new")
   (macro gtk_aspect_frame_set::void (GtkAspectFrame* gfloat gfloat gfloat gboolean) "gtk_aspect_frame_set")
   (macro gtk_box_get_type::GType () "gtk_box_get_type")
   (macro gtk_box_pack_start::void (GtkBox* GtkWidget* gboolean gboolean guint) "gtk_box_pack_start")
   (macro gtk_box_pack_end::void (GtkBox* GtkWidget* gboolean gboolean guint) "gtk_box_pack_end")
   (macro gtk_box_pack_start_defaults::void (GtkBox* GtkWidget*) "gtk_box_pack_start_defaults")
   (macro gtk_box_pack_end_defaults::void (GtkBox* GtkWidget*) "gtk_box_pack_end_defaults")
   (macro gtk_box_set_homogeneous::void (GtkBox* gboolean) "gtk_box_set_homogeneous")
   (macro gtk_box_get_homogeneous::gboolean (GtkBox*) "gtk_box_get_homogeneous")
   (macro gtk_box_set_spacing::void (GtkBox* gint) "gtk_box_set_spacing")
   (macro gtk_box_get_spacing::gint (GtkBox*) "gtk_box_get_spacing")
   (macro gtk_box_reorder_child::void (GtkBox* GtkWidget* gint) "gtk_box_reorder_child")
   (macro gtk_box_query_child_packing::void (GtkBox* GtkWidget* gboolean* gboolean* guint* GtkPackType*) "gtk_box_query_child_packing")
   (macro gtk_box_set_child_packing::void (GtkBox* GtkWidget* gboolean gboolean guint GtkPackType) "gtk_box_set_child_packing")
   (macro gtk_button_box_get_type::GType () "gtk_button_box_get_type")
   (macro gtk_button_box_get_layout::GtkButtonBoxStyle (GtkButtonBox*) "gtk_button_box_get_layout")
   (macro gtk_button_box_set_layout::void (GtkButtonBox* GtkButtonBoxStyle) "gtk_button_box_set_layout")
   (macro gtk_button_box_get_child_secondary::gboolean (GtkButtonBox* GtkWidget*) "gtk_button_box_get_child_secondary")
   (macro gtk_button_box_set_child_secondary::void (GtkButtonBox* GtkWidget* gboolean) "gtk_button_box_set_child_secondary")
   (macro gtk_button_box_set_child_size::void (GtkButtonBox* gint gint) "gtk_button_box_set_child_size")
   (macro gtk_button_box_set_child_ipadding::void (GtkButtonBox* gint gint) "gtk_button_box_set_child_ipadding")
   (macro gtk_button_box_get_child_size::void (GtkButtonBox* gint* gint*) "gtk_button_box_get_child_size")
   (macro gtk_button_box_get_child_ipadding::void (GtkButtonBox* gint* gint*) "gtk_button_box_get_child_ipadding")
   (macro _gtk_button_box_child_requisition::void (GtkWidget* int* int* int* int*) "_gtk_button_box_child_requisition")
   (macro gtk_binding_set_new::GtkBindingSet* (gchar*) "gtk_binding_set_new")
   (macro gtk_binding_set_by_class::GtkBindingSet* (gpointer) "gtk_binding_set_by_class")
   (macro gtk_binding_set_find::GtkBindingSet* (gchar*) "gtk_binding_set_find")
   (macro gtk_bindings_activate::gboolean (GtkObject* guint GdkModifierType) "gtk_bindings_activate")
   (macro gtk_bindings_activate_event::gboolean (GtkObject* GdkEventKey*) "gtk_bindings_activate_event")
   (macro gtk_binding_set_activate::gboolean (GtkBindingSet* guint GdkModifierType GtkObject*) "gtk_binding_set_activate")
   (macro gtk_binding_entry_clear::void (GtkBindingSet* guint GdkModifierType) "gtk_binding_entry_clear")
   (macro gtk_binding_entry_add_signal::void (GtkBindingSet* guint GdkModifierType gchar* guint . guint) "gtk_binding_entry_add_signal")
   (macro gtk_binding_set_add_path::void (GtkBindingSet* GtkPathType gchar* GtkPathPriorityType) "gtk_binding_set_add_path")
   (macro gtk_binding_entry_remove::void (GtkBindingSet* guint GdkModifierType) "gtk_binding_entry_remove")
   (macro gtk_binding_entry_add_signall::void (GtkBindingSet* guint GdkModifierType gchar* GSList*) "gtk_binding_entry_add_signall")
   (macro gtk_binding_parse_binding::guint (GScanner*) "gtk_binding_parse_binding")
   (macro _gtk_binding_reset_parsed::void () "_gtk_binding_reset_parsed")
   (macro _gtk_binding_signal_new::guint (gchar* GType GSignalFlags GCallback GSignalAccumulator gpointer GSignalCMarshaller GType guint . guint) "_gtk_binding_signal_new")
   (macro gtk_image_get_type::GType () "gtk_image_get_type")
   (macro gtk_image_new::GtkWidget* () "gtk_image_new")
   (macro gtk_image_new_from_pixmap::GtkWidget* (GdkPixmap* GdkBitmap*) "gtk_image_new_from_pixmap")
   (macro gtk_image_new_from_image::GtkWidget* (GdkImage* GdkBitmap*) "gtk_image_new_from_image")
   (macro gtk_image_new_from_file::GtkWidget* (gchar*) "gtk_image_new_from_file")
   (macro gtk_image_new_from_pixbuf::GtkWidget* (GdkPixbuf*) "gtk_image_new_from_pixbuf")
   (macro gtk_image_new_from_stock::GtkWidget* (gchar* GtkIconSize) "gtk_image_new_from_stock")
   (macro gtk_image_new_from_icon_set::GtkWidget* (GtkIconSet* GtkIconSize) "gtk_image_new_from_icon_set")
   (macro gtk_image_new_from_animation::GtkWidget* (GdkPixbufAnimation*) "gtk_image_new_from_animation")
   (macro gtk_image_new_from_icon_name::GtkWidget* (gchar* GtkIconSize) "gtk_image_new_from_icon_name")
   (macro gtk_image_set_from_pixmap::void (GtkImage* GdkPixmap* GdkBitmap*) "gtk_image_set_from_pixmap")
   (macro gtk_image_set_from_image::void (GtkImage* GdkImage* GdkBitmap*) "gtk_image_set_from_image")
   (macro gtk_image_set_from_file::void (GtkImage* gchar*) "gtk_image_set_from_file")
   (macro gtk_image_set_from_pixbuf::void (GtkImage* GdkPixbuf*) "gtk_image_set_from_pixbuf")
   (macro gtk_image_set_from_stock::void (GtkImage* gchar* GtkIconSize) "gtk_image_set_from_stock")
   (macro gtk_image_set_from_icon_set::void (GtkImage* GtkIconSet* GtkIconSize) "gtk_image_set_from_icon_set")
   (macro gtk_image_set_from_animation::void (GtkImage* GdkPixbufAnimation*) "gtk_image_set_from_animation")
   (macro gtk_image_set_from_icon_name::void (GtkImage* gchar* GtkIconSize) "gtk_image_set_from_icon_name")
   (macro gtk_image_set_pixel_size::void (GtkImage* gint) "gtk_image_set_pixel_size")
   (macro gtk_image_get_storage_type::GtkImageType (GtkImage*) "gtk_image_get_storage_type")
   (macro gtk_image_get_pixmap::void (GtkImage* GdkPixmap** GdkBitmap**) "gtk_image_get_pixmap")
   (macro gtk_image_get_image::void (GtkImage* GdkImage** GdkBitmap**) "gtk_image_get_image")
   (macro gtk_image_get_pixbuf::GdkPixbuf* (GtkImage*) "gtk_image_get_pixbuf")
   (macro gtk_image_get_stock::void (GtkImage* gchar** GtkIconSize*) "gtk_image_get_stock")
   (macro gtk_image_get_icon_set::void (GtkImage* GtkIconSet** GtkIconSize*) "gtk_image_get_icon_set")
   (macro gtk_image_get_animation::GdkPixbufAnimation* (GtkImage*) "gtk_image_get_animation")
   (macro gtk_image_get_icon_name::void (GtkImage* gchar** GtkIconSize*) "gtk_image_get_icon_name")
   (macro gtk_image_get_pixel_size::gint (GtkImage*) "gtk_image_get_pixel_size")
   (macro gtk_image_set::void (GtkImage* GdkImage* GdkBitmap*) "gtk_image_set")
   (macro gtk_image_get::void (GtkImage* GdkImage** GdkBitmap**) "gtk_image_get")
   (macro gtk_button_get_type::GType () "gtk_button_get_type")
   (macro gtk_button_new::GtkWidget* () "gtk_button_new")
   (macro gtk_button_new_with_label::GtkWidget* (gchar*) "gtk_button_new_with_label")
   (macro gtk_button_new_from_stock::GtkWidget* (gchar*) "gtk_button_new_from_stock")
   (macro gtk_button_new_with_mnemonic::GtkWidget* (gchar*) "gtk_button_new_with_mnemonic")
   (macro gtk_button_pressed::void (GtkButton*) "gtk_button_pressed")
   (macro gtk_button_released::void (GtkButton*) "gtk_button_released")
   (macro gtk_button_clicked::void (GtkButton*) "gtk_button_clicked")
   (macro gtk_button_enter::void (GtkButton*) "gtk_button_enter")
   (macro gtk_button_leave::void (GtkButton*) "gtk_button_leave")
   (macro gtk_button_set_relief::void (GtkButton* GtkReliefStyle) "gtk_button_set_relief")
   (macro gtk_button_get_relief::GtkReliefStyle (GtkButton*) "gtk_button_get_relief")
   (macro gtk_button_set_label::void (GtkButton* gchar*) "gtk_button_set_label")
   (macro gtk_button_get_label::gchar* (GtkButton*) "gtk_button_get_label")
   (macro gtk_button_set_use_underline::void (GtkButton* gboolean) "gtk_button_set_use_underline")
   (macro gtk_button_get_use_underline::gboolean (GtkButton*) "gtk_button_get_use_underline")
   (macro gtk_button_set_use_stock::void (GtkButton* gboolean) "gtk_button_set_use_stock")
   (macro gtk_button_get_use_stock::gboolean (GtkButton*) "gtk_button_get_use_stock")
   (macro gtk_button_set_focus_on_click::void (GtkButton* gboolean) "gtk_button_set_focus_on_click")
   (macro gtk_button_get_focus_on_click::gboolean (GtkButton*) "gtk_button_get_focus_on_click")
   (macro gtk_button_set_alignment::void (GtkButton* gfloat gfloat) "gtk_button_set_alignment")
   (macro gtk_button_get_alignment::void (GtkButton* gfloat* gfloat*) "gtk_button_get_alignment")
   (macro gtk_button_set_image::void (GtkButton* GtkWidget*) "gtk_button_set_image")
   (macro gtk_button_get_image::GtkWidget* (GtkButton*) "gtk_button_get_image")
   (macro _gtk_button_set_depressed::void (GtkButton* gboolean) "_gtk_button_set_depressed")
   (macro _gtk_button_paint::void (GtkButton* GdkRectangle* GtkStateType GtkShadowType gchar* gchar*) "_gtk_button_paint")
   (macro gtk_marshal_BOOLEAN__VOID::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_BOOLEAN__VOID")
   (macro gtk_marshal_BOOLEAN__POINTER::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_BOOLEAN__POINTER")
   (macro gtk_marshal_BOOLEAN__POINTER_POINTER_INT_INT::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_BOOLEAN__POINTER_POINTER_INT_INT")
   (macro gtk_marshal_BOOLEAN__POINTER_INT_INT::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_BOOLEAN__POINTER_INT_INT")
   (macro gtk_marshal_BOOLEAN__POINTER_INT_INT_UINT::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_BOOLEAN__POINTER_INT_INT_UINT")
   (macro gtk_marshal_BOOLEAN__POINTER_STRING_STRING_POINTER::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_BOOLEAN__POINTER_STRING_STRING_POINTER")
   (macro gtk_marshal_ENUM__ENUM::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_ENUM__ENUM")
   (macro gtk_marshal_INT__POINTER::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_INT__POINTER")
   (macro gtk_marshal_INT__POINTER_CHAR_CHAR::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_INT__POINTER_CHAR_CHAR")
   (macro gtk_marshal_VOID__ENUM_FLOAT::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_VOID__ENUM_FLOAT")
   (macro gtk_marshal_VOID__ENUM_FLOAT_BOOLEAN::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_VOID__ENUM_FLOAT_BOOLEAN")
   (macro gtk_marshal_VOID__INT_INT::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_VOID__INT_INT")
   (macro gtk_marshal_VOID__INT_INT_POINTER::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_VOID__INT_INT_POINTER")
   (macro gtk_marshal_VOID__POINTER_INT::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_VOID__POINTER_INT")
   (macro gtk_marshal_VOID__POINTER_POINTER::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_VOID__POINTER_POINTER")
   (macro gtk_marshal_VOID__POINTER_POINTER_POINTER::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_VOID__POINTER_POINTER_POINTER")
   (macro gtk_marshal_VOID__POINTER_STRING_STRING::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_VOID__POINTER_STRING_STRING")
   (macro gtk_marshal_VOID__POINTER_UINT::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_VOID__POINTER_UINT")
   (macro gtk_marshal_VOID__POINTER_UINT_ENUM::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_VOID__POINTER_UINT_ENUM")
   (macro gtk_marshal_VOID__POINTER_POINTER_UINT_UINT::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_VOID__POINTER_POINTER_UINT_UINT")
   (macro gtk_marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT")
   (macro gtk_marshal_VOID__POINTER_UINT_UINT::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_VOID__POINTER_UINT_UINT")
   (macro gtk_marshal_VOID__STRING_INT_POINTER::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_VOID__STRING_INT_POINTER")
   (macro gtk_marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER")
   (macro gtk_marshal_VOID__UINT_POINTER_UINT_UINT_ENUM::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_VOID__UINT_POINTER_UINT_UINT_ENUM")
   (macro gtk_marshal_VOID__UINT_STRING::void (GClosure* GValue* guint GValue* gpointer gpointer) "gtk_marshal_VOID__UINT_STRING")
   (macro gtk_signal_newv::guint (gchar* GtkSignalRunType GtkType guint GtkSignalMarshaller GtkType guint GtkType*) "gtk_signal_newv")
   (macro gtk_signal_new::guint (gchar* GtkSignalRunType GtkType guint GtkSignalMarshaller GtkType guint . guint) "gtk_signal_new")
   (macro gtk_signal_emit_stop_by_name::void (GtkObject* gchar*) "gtk_signal_emit_stop_by_name")
   (macro gtk_signal_connect_object_while_alive::void (GtkObject* gchar* GtkSignalFunc GtkObject*) "gtk_signal_connect_object_while_alive")
   (macro gtk_signal_connect_while_alive::void (GtkObject* gchar* GtkSignalFunc gpointer GtkObject*) "gtk_signal_connect_while_alive")
   (macro gtk_signal_connect_full::gulong (GtkObject* gchar* GtkSignalFunc GtkCallbackMarshal gpointer GtkDestroyNotify gint gint) "gtk_signal_connect_full")
   (macro gtk_signal_emitv::void (GtkObject* guint GtkArg*) "gtk_signal_emitv")
   (macro gtk_signal_emit::void (GtkObject* guint . guint) "gtk_signal_emit")
   (macro gtk_signal_emit_by_name::void (GtkObject* gchar* . gchar*) "gtk_signal_emit_by_name")
   (macro gtk_signal_emitv_by_name::void (GtkObject* gchar* GtkArg*) "gtk_signal_emitv_by_name")
   (macro gtk_signal_compat_matched::void (GtkObject* GtkSignalFunc gpointer GSignalMatchType guint) "gtk_signal_compat_matched")
   (macro gtk_calendar_get_type::GType () "gtk_calendar_get_type")
   (macro gtk_calendar_new::GtkWidget* () "gtk_calendar_new")
   (macro gtk_calendar_select_month::gboolean (GtkCalendar* guint guint) "gtk_calendar_select_month")
   (macro gtk_calendar_select_day::void (GtkCalendar* guint) "gtk_calendar_select_day")
   (macro gtk_calendar_mark_day::gboolean (GtkCalendar* guint) "gtk_calendar_mark_day")
   (macro gtk_calendar_unmark_day::gboolean (GtkCalendar* guint) "gtk_calendar_unmark_day")
   (macro gtk_calendar_clear_marks::void (GtkCalendar*) "gtk_calendar_clear_marks")
   (macro gtk_calendar_set_display_options::void (GtkCalendar* GtkCalendarDisplayOptions) "gtk_calendar_set_display_options")
   (macro gtk_calendar_get_display_options::GtkCalendarDisplayOptions (GtkCalendar*) "gtk_calendar_get_display_options")
   (macro gtk_calendar_display_options::void (GtkCalendar* GtkCalendarDisplayOptions) "gtk_calendar_display_options")
   (macro gtk_calendar_get_date::void (GtkCalendar* guint* guint* guint*) "gtk_calendar_get_date")
   (macro gtk_calendar_freeze::void (GtkCalendar*) "gtk_calendar_freeze")
   (macro gtk_calendar_thaw::void (GtkCalendar*) "gtk_calendar_thaw")
   (macro gtk_cell_editable_get_type::GType () "gtk_cell_editable_get_type")
   (macro gtk_cell_editable_start_editing::void (GtkCellEditable* GdkEvent*) "gtk_cell_editable_start_editing")
   (macro gtk_cell_editable_editing_done::void (GtkCellEditable*) "gtk_cell_editable_editing_done")
   (macro gtk_cell_editable_remove_widget::void (GtkCellEditable*) "gtk_cell_editable_remove_widget")
   (macro gtk_cell_renderer_get_type::GType () "gtk_cell_renderer_get_type")
   (macro gtk_cell_renderer_get_size::void (GtkCellRenderer* GtkWidget* GdkRectangle* gint* gint* gint* gint*) "gtk_cell_renderer_get_size")
   (macro gtk_cell_renderer_render::void (GtkCellRenderer* GdkWindow* GtkWidget* GdkRectangle* GdkRectangle* GdkRectangle* GtkCellRendererState) "gtk_cell_renderer_render")
   (macro gtk_cell_renderer_activate::gboolean (GtkCellRenderer* GdkEvent* GtkWidget* gchar* GdkRectangle* GdkRectangle* GtkCellRendererState) "gtk_cell_renderer_activate")
   (macro gtk_cell_renderer_start_editing::GtkCellEditable* (GtkCellRenderer* GdkEvent* GtkWidget* gchar* GdkRectangle* GdkRectangle* GtkCellRendererState) "gtk_cell_renderer_start_editing")
   (macro gtk_cell_renderer_set_fixed_size::void (GtkCellRenderer* gint gint) "gtk_cell_renderer_set_fixed_size")
   (macro gtk_cell_renderer_get_fixed_size::void (GtkCellRenderer* gint* gint*) "gtk_cell_renderer_get_fixed_size")
   (macro gtk_cell_renderer_editing_canceled::void (GtkCellRenderer*) "gtk_cell_renderer_editing_canceled")
   (macro gtk_cell_renderer_stop_editing::void (GtkCellRenderer* gboolean) "gtk_cell_renderer_stop_editing")
   (macro gtk_tree_path_new::GtkTreePath* () "gtk_tree_path_new")
   (macro gtk_tree_path_new_from_string::GtkTreePath* (gchar*) "gtk_tree_path_new_from_string")
   (macro gtk_tree_path_new_from_indices::GtkTreePath* (gint . gint) "gtk_tree_path_new_from_indices")
   (macro gtk_tree_path_to_string::gchar* (GtkTreePath*) "gtk_tree_path_to_string")
   (macro gtk_tree_path_new_first::GtkTreePath* () "gtk_tree_path_new_first")
   (macro gtk_tree_path_append_index::void (GtkTreePath* gint) "gtk_tree_path_append_index")
   (macro gtk_tree_path_prepend_index::void (GtkTreePath* gint) "gtk_tree_path_prepend_index")
   (macro gtk_tree_path_get_depth::gint (GtkTreePath*) "gtk_tree_path_get_depth")
   (macro gtk_tree_path_get_indices::gint* (GtkTreePath*) "gtk_tree_path_get_indices")
   (macro gtk_tree_path_free::void (GtkTreePath*) "gtk_tree_path_free")
   (macro gtk_tree_path_copy::GtkTreePath* (GtkTreePath*) "gtk_tree_path_copy")
   (macro gtk_tree_path_get_type::GType () "gtk_tree_path_get_type")
   (macro gtk_tree_path_compare::gint (GtkTreePath* GtkTreePath*) "gtk_tree_path_compare")
   (macro gtk_tree_path_next::void (GtkTreePath*) "gtk_tree_path_next")
   (macro gtk_tree_path_prev::gboolean (GtkTreePath*) "gtk_tree_path_prev")
   (macro gtk_tree_path_up::gboolean (GtkTreePath*) "gtk_tree_path_up")
   (macro gtk_tree_path_down::void (GtkTreePath*) "gtk_tree_path_down")
   (macro gtk_tree_path_is_ancestor::gboolean (GtkTreePath* GtkTreePath*) "gtk_tree_path_is_ancestor")
   (macro gtk_tree_path_is_descendant::gboolean (GtkTreePath* GtkTreePath*) "gtk_tree_path_is_descendant")
   (macro gtk_tree_row_reference_get_type::GType () "gtk_tree_row_reference_get_type")
   (macro gtk_tree_row_reference_new::GtkTreeRowReference* (GtkTreeModel* GtkTreePath*) "gtk_tree_row_reference_new")
   (macro gtk_tree_row_reference_new_proxy::GtkTreeRowReference* (GObject* GtkTreeModel* GtkTreePath*) "gtk_tree_row_reference_new_proxy")
   (macro gtk_tree_row_reference_get_path::GtkTreePath* (GtkTreeRowReference*) "gtk_tree_row_reference_get_path")
   (macro gtk_tree_row_reference_valid::gboolean (GtkTreeRowReference*) "gtk_tree_row_reference_valid")
   (macro gtk_tree_row_reference_copy::GtkTreeRowReference* (GtkTreeRowReference*) "gtk_tree_row_reference_copy")
   (macro gtk_tree_row_reference_free::void (GtkTreeRowReference*) "gtk_tree_row_reference_free")
   (macro gtk_tree_row_reference_inserted::void (GObject* GtkTreePath*) "gtk_tree_row_reference_inserted")
   (macro gtk_tree_row_reference_deleted::void (GObject* GtkTreePath*) "gtk_tree_row_reference_deleted")
   (macro gtk_tree_row_reference_reordered::void (GObject* GtkTreePath* GtkTreeIter* gint*) "gtk_tree_row_reference_reordered")
   (macro gtk_tree_iter_copy::GtkTreeIter* (GtkTreeIter*) "gtk_tree_iter_copy")
   (macro gtk_tree_iter_free::void (GtkTreeIter*) "gtk_tree_iter_free")
   (macro gtk_tree_iter_get_type::GType () "gtk_tree_iter_get_type")
   (macro gtk_tree_model_get_type::GType () "gtk_tree_model_get_type")
   (macro gtk_tree_model_get_flags::GtkTreeModelFlags (GtkTreeModel*) "gtk_tree_model_get_flags")
   (macro gtk_tree_model_get_n_columns::gint (GtkTreeModel*) "gtk_tree_model_get_n_columns")
   (macro gtk_tree_model_get_column_type::GType (GtkTreeModel* gint) "gtk_tree_model_get_column_type")
   (macro gtk_tree_model_get_iter::gboolean (GtkTreeModel* GtkTreeIter* GtkTreePath*) "gtk_tree_model_get_iter")
   (macro gtk_tree_model_get_iter_from_string::gboolean (GtkTreeModel* GtkTreeIter* gchar*) "gtk_tree_model_get_iter_from_string")
   (macro gtk_tree_model_get_string_from_iter::gchar* (GtkTreeModel* GtkTreeIter*) "gtk_tree_model_get_string_from_iter")
   (macro gtk_tree_model_get_iter_first::gboolean (GtkTreeModel* GtkTreeIter*) "gtk_tree_model_get_iter_first")
   (macro gtk_tree_model_get_path::GtkTreePath* (GtkTreeModel* GtkTreeIter*) "gtk_tree_model_get_path")
   (macro gtk_tree_model_get_value::void (GtkTreeModel* GtkTreeIter* gint GValue*) "gtk_tree_model_get_value")
   (macro gtk_tree_model_iter_next::gboolean (GtkTreeModel* GtkTreeIter*) "gtk_tree_model_iter_next")
   (macro gtk_tree_model_iter_children::gboolean (GtkTreeModel* GtkTreeIter* GtkTreeIter*) "gtk_tree_model_iter_children")
   (macro gtk_tree_model_iter_has_child::gboolean (GtkTreeModel* GtkTreeIter*) "gtk_tree_model_iter_has_child")
   (macro gtk_tree_model_iter_n_children::gint (GtkTreeModel* GtkTreeIter*) "gtk_tree_model_iter_n_children")
   (macro gtk_tree_model_iter_nth_child::gboolean (GtkTreeModel* GtkTreeIter* GtkTreeIter* gint) "gtk_tree_model_iter_nth_child")
   (macro gtk_tree_model_iter_parent::gboolean (GtkTreeModel* GtkTreeIter* GtkTreeIter*) "gtk_tree_model_iter_parent")
   (macro gtk_tree_model_ref_node::void (GtkTreeModel* GtkTreeIter*) "gtk_tree_model_ref_node")
   (macro gtk_tree_model_unref_node::void (GtkTreeModel* GtkTreeIter*) "gtk_tree_model_unref_node")
   (macro gtk_tree_model_get::void (GtkTreeModel* GtkTreeIter* . GtkTreeIter*) "gtk_tree_model_get")
   (macro gtk_tree_model_foreach::void (GtkTreeModel* GtkTreeModelForeachFunc gpointer) "gtk_tree_model_foreach")
   (macro gtk_tree_model_row_changed::void (GtkTreeModel* GtkTreePath* GtkTreeIter*) "gtk_tree_model_row_changed")
   (macro gtk_tree_model_row_inserted::void (GtkTreeModel* GtkTreePath* GtkTreeIter*) "gtk_tree_model_row_inserted")
   (macro gtk_tree_model_row_has_child_toggled::void (GtkTreeModel* GtkTreePath* GtkTreeIter*) "gtk_tree_model_row_has_child_toggled")
   (macro gtk_tree_model_row_deleted::void (GtkTreeModel* GtkTreePath*) "gtk_tree_model_row_deleted")
   (macro gtk_tree_model_rows_reordered::void (GtkTreeModel* GtkTreePath* GtkTreeIter* gint*) "gtk_tree_model_rows_reordered")
   (macro gtk_tree_sortable_get_type::GType () "gtk_tree_sortable_get_type")
   (macro gtk_tree_sortable_sort_column_changed::void (GtkTreeSortable*) "gtk_tree_sortable_sort_column_changed")
   (macro gtk_tree_sortable_get_sort_column_id::gboolean (GtkTreeSortable* gint* GtkSortType*) "gtk_tree_sortable_get_sort_column_id")
   (macro gtk_tree_sortable_set_sort_column_id::void (GtkTreeSortable* gint GtkSortType) "gtk_tree_sortable_set_sort_column_id")
   (macro gtk_tree_sortable_set_sort_func::void (GtkTreeSortable* gint GtkTreeIterCompareFunc gpointer GtkDestroyNotify) "gtk_tree_sortable_set_sort_func")
   (macro gtk_tree_sortable_set_default_sort_func::void (GtkTreeSortable* GtkTreeIterCompareFunc gpointer GtkDestroyNotify) "gtk_tree_sortable_set_default_sort_func")
   (macro gtk_tree_sortable_has_default_sort_func::gboolean (GtkTreeSortable*) "gtk_tree_sortable_has_default_sort_func")
   (macro gtk_tree_view_column_get_type::GType () "gtk_tree_view_column_get_type")
   (macro gtk_tree_view_column_new::GtkTreeViewColumn* () "gtk_tree_view_column_new")
   (macro gtk_tree_view_column_new_with_attributes::GtkTreeViewColumn* (gchar* GtkCellRenderer* . GtkCellRenderer*) "gtk_tree_view_column_new_with_attributes")
   (macro gtk_tree_view_column_pack_start::void (GtkTreeViewColumn* GtkCellRenderer* gboolean) "gtk_tree_view_column_pack_start")
   (macro gtk_tree_view_column_pack_end::void (GtkTreeViewColumn* GtkCellRenderer* gboolean) "gtk_tree_view_column_pack_end")
   (macro gtk_tree_view_column_clear::void (GtkTreeViewColumn*) "gtk_tree_view_column_clear")
   (macro gtk_tree_view_column_get_cell_renderers::GList* (GtkTreeViewColumn*) "gtk_tree_view_column_get_cell_renderers")
   (macro gtk_tree_view_column_add_attribute::void (GtkTreeViewColumn* GtkCellRenderer* gchar* gint) "gtk_tree_view_column_add_attribute")
   (macro gtk_tree_view_column_set_attributes::void (GtkTreeViewColumn* GtkCellRenderer* . GtkCellRenderer*) "gtk_tree_view_column_set_attributes")
   (macro gtk_tree_view_column_set_cell_data_func::void (GtkTreeViewColumn* GtkCellRenderer* GtkTreeCellDataFunc gpointer GtkDestroyNotify) "gtk_tree_view_column_set_cell_data_func")
   (macro gtk_tree_view_column_clear_attributes::void (GtkTreeViewColumn* GtkCellRenderer*) "gtk_tree_view_column_clear_attributes")
   (macro gtk_tree_view_column_set_spacing::void (GtkTreeViewColumn* gint) "gtk_tree_view_column_set_spacing")
   (macro gtk_tree_view_column_get_spacing::gint (GtkTreeViewColumn*) "gtk_tree_view_column_get_spacing")
   (macro gtk_tree_view_column_set_visible::void (GtkTreeViewColumn* gboolean) "gtk_tree_view_column_set_visible")
   (macro gtk_tree_view_column_get_visible::gboolean (GtkTreeViewColumn*) "gtk_tree_view_column_get_visible")
   (macro gtk_tree_view_column_set_resizable::void (GtkTreeViewColumn* gboolean) "gtk_tree_view_column_set_resizable")
   (macro gtk_tree_view_column_get_resizable::gboolean (GtkTreeViewColumn*) "gtk_tree_view_column_get_resizable")
   (macro gtk_tree_view_column_set_sizing::void (GtkTreeViewColumn* GtkTreeViewColumnSizing) "gtk_tree_view_column_set_sizing")
   (macro gtk_tree_view_column_get_sizing::GtkTreeViewColumnSizing (GtkTreeViewColumn*) "gtk_tree_view_column_get_sizing")
   (macro gtk_tree_view_column_get_width::gint (GtkTreeViewColumn*) "gtk_tree_view_column_get_width")
   (macro gtk_tree_view_column_get_fixed_width::gint (GtkTreeViewColumn*) "gtk_tree_view_column_get_fixed_width")
   (macro gtk_tree_view_column_set_fixed_width::void (GtkTreeViewColumn* gint) "gtk_tree_view_column_set_fixed_width")
   (macro gtk_tree_view_column_set_min_width::void (GtkTreeViewColumn* gint) "gtk_tree_view_column_set_min_width")
   (macro gtk_tree_view_column_get_min_width::gint (GtkTreeViewColumn*) "gtk_tree_view_column_get_min_width")
   (macro gtk_tree_view_column_set_max_width::void (GtkTreeViewColumn* gint) "gtk_tree_view_column_set_max_width")
   (macro gtk_tree_view_column_get_max_width::gint (GtkTreeViewColumn*) "gtk_tree_view_column_get_max_width")
   (macro gtk_tree_view_column_clicked::void (GtkTreeViewColumn*) "gtk_tree_view_column_clicked")
   (macro gtk_tree_view_column_set_title::void (GtkTreeViewColumn* gchar*) "gtk_tree_view_column_set_title")
   (macro gtk_tree_view_column_get_title::gchar* (GtkTreeViewColumn*) "gtk_tree_view_column_get_title")
   (macro gtk_tree_view_column_set_expand::void (GtkTreeViewColumn* gboolean) "gtk_tree_view_column_set_expand")
   (macro gtk_tree_view_column_get_expand::gboolean (GtkTreeViewColumn*) "gtk_tree_view_column_get_expand")
   (macro gtk_tree_view_column_set_clickable::void (GtkTreeViewColumn* gboolean) "gtk_tree_view_column_set_clickable")
   (macro gtk_tree_view_column_get_clickable::gboolean (GtkTreeViewColumn*) "gtk_tree_view_column_get_clickable")
   (macro gtk_tree_view_column_set_widget::void (GtkTreeViewColumn* GtkWidget*) "gtk_tree_view_column_set_widget")
   (macro gtk_tree_view_column_get_widget::GtkWidget* (GtkTreeViewColumn*) "gtk_tree_view_column_get_widget")
   (macro gtk_tree_view_column_set_alignment::void (GtkTreeViewColumn* gfloat) "gtk_tree_view_column_set_alignment")
   (macro gtk_tree_view_column_get_alignment::gfloat (GtkTreeViewColumn*) "gtk_tree_view_column_get_alignment")
   (macro gtk_tree_view_column_set_reorderable::void (GtkTreeViewColumn* gboolean) "gtk_tree_view_column_set_reorderable")
   (macro gtk_tree_view_column_get_reorderable::gboolean (GtkTreeViewColumn*) "gtk_tree_view_column_get_reorderable")
   (macro gtk_tree_view_column_set_sort_column_id::void (GtkTreeViewColumn* gint) "gtk_tree_view_column_set_sort_column_id")
   (macro gtk_tree_view_column_get_sort_column_id::gint (GtkTreeViewColumn*) "gtk_tree_view_column_get_sort_column_id")
   (macro gtk_tree_view_column_set_sort_indicator::void (GtkTreeViewColumn* gboolean) "gtk_tree_view_column_set_sort_indicator")
   (macro gtk_tree_view_column_get_sort_indicator::gboolean (GtkTreeViewColumn*) "gtk_tree_view_column_get_sort_indicator")
   (macro gtk_tree_view_column_set_sort_order::void (GtkTreeViewColumn* GtkSortType) "gtk_tree_view_column_set_sort_order")
   (macro gtk_tree_view_column_get_sort_order::GtkSortType (GtkTreeViewColumn*) "gtk_tree_view_column_get_sort_order")
   (macro gtk_tree_view_column_cell_set_cell_data::void (GtkTreeViewColumn* GtkTreeModel* GtkTreeIter* gboolean gboolean) "gtk_tree_view_column_cell_set_cell_data")
   (macro gtk_tree_view_column_cell_get_size::void (GtkTreeViewColumn* GdkRectangle* gint* gint* gint* gint*) "gtk_tree_view_column_cell_get_size")
   (macro gtk_tree_view_column_cell_is_visible::gboolean (GtkTreeViewColumn*) "gtk_tree_view_column_cell_is_visible")
   (macro gtk_tree_view_column_focus_cell::void (GtkTreeViewColumn* GtkCellRenderer*) "gtk_tree_view_column_focus_cell")
   (macro gtk_tree_view_column_cell_get_position::gboolean (GtkTreeViewColumn* GtkCellRenderer* gint* gint*) "gtk_tree_view_column_cell_get_position")
   (macro gtk_cell_layout_get_type::GType () "gtk_cell_layout_get_type")
   (macro gtk_cell_layout_pack_start::void (GtkCellLayout* GtkCellRenderer* gboolean) "gtk_cell_layout_pack_start")
   (macro gtk_cell_layout_pack_end::void (GtkCellLayout* GtkCellRenderer* gboolean) "gtk_cell_layout_pack_end")
   (macro gtk_cell_layout_clear::void (GtkCellLayout*) "gtk_cell_layout_clear")
   (macro gtk_cell_layout_set_attributes::void (GtkCellLayout* GtkCellRenderer* . GtkCellRenderer*) "gtk_cell_layout_set_attributes")
   (macro gtk_cell_layout_add_attribute::void (GtkCellLayout* GtkCellRenderer* gchar* gint) "gtk_cell_layout_add_attribute")
   (macro gtk_cell_layout_set_cell_data_func::void (GtkCellLayout* GtkCellRenderer* GtkCellLayoutDataFunc gpointer GDestroyNotify) "gtk_cell_layout_set_cell_data_func")
   (macro gtk_cell_layout_clear_attributes::void (GtkCellLayout* GtkCellRenderer*) "gtk_cell_layout_clear_attributes")
   (macro gtk_cell_layout_reorder::void (GtkCellLayout* GtkCellRenderer* gint) "gtk_cell_layout_reorder")
   (macro gtk_cell_renderer_text_get_type::GType () "gtk_cell_renderer_text_get_type")
   (macro gtk_cell_renderer_text_new::GtkCellRenderer* () "gtk_cell_renderer_text_new")
   (macro gtk_cell_renderer_text_set_fixed_height_from_font::void (GtkCellRendererText* gint) "gtk_cell_renderer_text_set_fixed_height_from_font")
   (macro gtk_cell_renderer_combo_get_type::GType () "gtk_cell_renderer_combo_get_type")
   (macro gtk_cell_renderer_combo_new::GtkCellRenderer* () "gtk_cell_renderer_combo_new")
   (macro gtk_cell_renderer_pixbuf_get_type::GType () "gtk_cell_renderer_pixbuf_get_type")
   (macro gtk_cell_renderer_pixbuf_new::GtkCellRenderer* () "gtk_cell_renderer_pixbuf_new")
   (macro gtk_cell_renderer_progress_get_type::GType () "gtk_cell_renderer_progress_get_type")
   (macro gtk_cell_renderer_progress_new::GtkCellRenderer* () "gtk_cell_renderer_progress_new")
   (macro gtk_cell_renderer_toggle_get_type::GType () "gtk_cell_renderer_toggle_get_type")
   (macro gtk_cell_renderer_toggle_new::GtkCellRenderer* () "gtk_cell_renderer_toggle_new")
   (macro gtk_cell_renderer_toggle_get_radio::gboolean (GtkCellRendererToggle*) "gtk_cell_renderer_toggle_get_radio")
   (macro gtk_cell_renderer_toggle_set_radio::void (GtkCellRendererToggle* gboolean) "gtk_cell_renderer_toggle_set_radio")
   (macro gtk_cell_renderer_toggle_get_active::gboolean (GtkCellRendererToggle*) "gtk_cell_renderer_toggle_get_active")
   (macro gtk_cell_renderer_toggle_set_active::void (GtkCellRendererToggle* gboolean) "gtk_cell_renderer_toggle_set_active")
   (macro gtk_cell_view_get_type::GType () "gtk_cell_view_get_type")
   (macro gtk_cell_view_new::GtkWidget* () "gtk_cell_view_new")
   (macro gtk_cell_view_new_with_text::GtkWidget* (gchar*) "gtk_cell_view_new_with_text")
   (macro gtk_cell_view_new_with_markup::GtkWidget* (gchar*) "gtk_cell_view_new_with_markup")
   (macro gtk_cell_view_new_with_pixbuf::GtkWidget* (GdkPixbuf*) "gtk_cell_view_new_with_pixbuf")
   (macro gtk_cell_view_set_model::void (GtkCellView* GtkTreeModel*) "gtk_cell_view_set_model")
   (macro gtk_cell_view_set_displayed_row::void (GtkCellView* GtkTreePath*) "gtk_cell_view_set_displayed_row")
   (macro gtk_cell_view_get_displayed_row::GtkTreePath* (GtkCellView*) "gtk_cell_view_get_displayed_row")
   (macro gtk_cell_view_get_size_of_row::gboolean (GtkCellView* GtkTreePath* GtkRequisition*) "gtk_cell_view_get_size_of_row")
   (macro gtk_cell_view_set_background_color::void (GtkCellView* GdkColor*) "gtk_cell_view_set_background_color")
   (macro gtk_cell_view_get_cell_renderers::GList* (GtkCellView*) "gtk_cell_view_get_cell_renderers")
   (macro gtk_toggle_button_get_type::GType () "gtk_toggle_button_get_type")
   (macro gtk_toggle_button_new::GtkWidget* () "gtk_toggle_button_new")
   (macro gtk_toggle_button_new_with_label::GtkWidget* (gchar*) "gtk_toggle_button_new_with_label")
   (macro gtk_toggle_button_new_with_mnemonic::GtkWidget* (gchar*) "gtk_toggle_button_new_with_mnemonic")
   (macro gtk_toggle_button_set_mode::void (GtkToggleButton* gboolean) "gtk_toggle_button_set_mode")
   (macro gtk_toggle_button_get_mode::gboolean (GtkToggleButton*) "gtk_toggle_button_get_mode")
   (macro gtk_toggle_button_set_active::void (GtkToggleButton* gboolean) "gtk_toggle_button_set_active")
   (macro gtk_toggle_button_get_active::gboolean (GtkToggleButton*) "gtk_toggle_button_get_active")
   (macro gtk_toggle_button_toggled::void (GtkToggleButton*) "gtk_toggle_button_toggled")
   (macro gtk_toggle_button_set_inconsistent::void (GtkToggleButton* gboolean) "gtk_toggle_button_set_inconsistent")
   (macro gtk_toggle_button_get_inconsistent::gboolean (GtkToggleButton*) "gtk_toggle_button_get_inconsistent")
   (macro gtk_check_button_get_type::GType () "gtk_check_button_get_type")
   (macro gtk_check_button_new::GtkWidget* () "gtk_check_button_new")
   (macro gtk_check_button_new_with_label::GtkWidget* (gchar*) "gtk_check_button_new_with_label")
   (macro gtk_check_button_new_with_mnemonic::GtkWidget* (gchar*) "gtk_check_button_new_with_mnemonic")
   (macro _gtk_check_button_get_props::void (GtkCheckButton* gint* gint*) "_gtk_check_button_get_props")
   (macro gtk_item_get_type::GType () "gtk_item_get_type")
   (macro gtk_item_select::void (GtkItem*) "gtk_item_select")
   (macro gtk_item_deselect::void (GtkItem*) "gtk_item_deselect")
   (macro gtk_item_toggle::void (GtkItem*) "gtk_item_toggle")
   (macro gtk_menu_item_get_type::GType () "gtk_menu_item_get_type")
   (macro gtk_menu_item_new::GtkWidget* () "gtk_menu_item_new")
   (macro gtk_menu_item_new_with_label::GtkWidget* (gchar*) "gtk_menu_item_new_with_label")
   (macro gtk_menu_item_new_with_mnemonic::GtkWidget* (gchar*) "gtk_menu_item_new_with_mnemonic")
   (macro gtk_menu_item_set_submenu::void (GtkMenuItem* GtkWidget*) "gtk_menu_item_set_submenu")
   (macro gtk_menu_item_get_submenu::GtkWidget* (GtkMenuItem*) "gtk_menu_item_get_submenu")
   (macro gtk_menu_item_remove_submenu::void (GtkMenuItem*) "gtk_menu_item_remove_submenu")
   (macro gtk_menu_item_select::void (GtkMenuItem*) "gtk_menu_item_select")
   (macro gtk_menu_item_deselect::void (GtkMenuItem*) "gtk_menu_item_deselect")
   (macro gtk_menu_item_activate::void (GtkMenuItem*) "gtk_menu_item_activate")
   (macro gtk_menu_item_toggle_size_request::void (GtkMenuItem* gint*) "gtk_menu_item_toggle_size_request")
   (macro gtk_menu_item_toggle_size_allocate::void (GtkMenuItem* gint) "gtk_menu_item_toggle_size_allocate")
   (macro gtk_menu_item_set_right_justified::void (GtkMenuItem* gboolean) "gtk_menu_item_set_right_justified")
   (macro gtk_menu_item_get_right_justified::gboolean (GtkMenuItem*) "gtk_menu_item_get_right_justified")
   (macro gtk_menu_item_set_accel_path::void (GtkMenuItem* gchar*) "gtk_menu_item_set_accel_path")
   (macro _gtk_menu_item_refresh_accel_path::void (GtkMenuItem* gchar* GtkAccelGroup* gboolean) "_gtk_menu_item_refresh_accel_path")
   (macro _gtk_menu_item_is_selectable::gboolean (GtkWidget*) "_gtk_menu_item_is_selectable")
   (macro _gtk_menu_item_popup_submenu::void (GtkWidget*) "_gtk_menu_item_popup_submenu")
   (macro gtk_check_menu_item_get_type::GType () "gtk_check_menu_item_get_type")
   (macro gtk_check_menu_item_new::GtkWidget* () "gtk_check_menu_item_new")
   (macro gtk_check_menu_item_new_with_label::GtkWidget* (gchar*) "gtk_check_menu_item_new_with_label")
   (macro gtk_check_menu_item_new_with_mnemonic::GtkWidget* (gchar*) "gtk_check_menu_item_new_with_mnemonic")
   (macro gtk_check_menu_item_set_active::void (GtkCheckMenuItem* gboolean) "gtk_check_menu_item_set_active")
   (macro gtk_check_menu_item_get_active::gboolean (GtkCheckMenuItem*) "gtk_check_menu_item_get_active")
   (macro gtk_check_menu_item_toggled::void (GtkCheckMenuItem*) "gtk_check_menu_item_toggled")
   (macro gtk_check_menu_item_set_inconsistent::void (GtkCheckMenuItem* gboolean) "gtk_check_menu_item_set_inconsistent")
   (macro gtk_check_menu_item_get_inconsistent::gboolean (GtkCheckMenuItem*) "gtk_check_menu_item_get_inconsistent")
   (macro gtk_check_menu_item_set_draw_as_radio::void (GtkCheckMenuItem* gboolean) "gtk_check_menu_item_set_draw_as_radio")
   (macro gtk_check_menu_item_get_draw_as_radio::gboolean (GtkCheckMenuItem*) "gtk_check_menu_item_get_draw_as_radio")
   (macro gtk_check_menu_item_set_show_toggle::void (GtkCheckMenuItem* gboolean) "gtk_check_menu_item_set_show_toggle")
   (macro gtk_target_list_new::GtkTargetList* (GtkTargetEntry* guint) "gtk_target_list_new")
   (macro gtk_target_list_ref::void (GtkTargetList*) "gtk_target_list_ref")
   (macro gtk_target_list_unref::void (GtkTargetList*) "gtk_target_list_unref")
   (macro gtk_target_list_add::void (GtkTargetList* GdkAtom guint guint) "gtk_target_list_add")
   (macro gtk_target_list_add_text_targets::void (GtkTargetList* guint) "gtk_target_list_add_text_targets")
   (macro gtk_target_list_add_image_targets::void (GtkTargetList* guint gboolean) "gtk_target_list_add_image_targets")
   (macro gtk_target_list_add_uri_targets::void (GtkTargetList* guint) "gtk_target_list_add_uri_targets")
   (macro gtk_target_list_add_table::void (GtkTargetList* GtkTargetEntry* guint) "gtk_target_list_add_table")
   (macro gtk_target_list_remove::void (GtkTargetList* GdkAtom) "gtk_target_list_remove")
   (macro gtk_target_list_find::gboolean (GtkTargetList* GdkAtom guint*) "gtk_target_list_find")
   (macro gtk_selection_owner_set::gboolean (GtkWidget* GdkAtom guint32) "gtk_selection_owner_set")
   (macro gtk_selection_owner_set_for_display::gboolean (GdkDisplay* GtkWidget* GdkAtom guint32) "gtk_selection_owner_set_for_display")
   (macro gtk_selection_add_target::void (GtkWidget* GdkAtom GdkAtom guint) "gtk_selection_add_target")
   (macro gtk_selection_add_targets::void (GtkWidget* GdkAtom GtkTargetEntry* guint) "gtk_selection_add_targets")
   (macro gtk_selection_clear_targets::void (GtkWidget* GdkAtom) "gtk_selection_clear_targets")
   (macro gtk_selection_convert::gboolean (GtkWidget* GdkAtom GdkAtom guint32) "gtk_selection_convert")
   (macro gtk_selection_data_set::void (GtkSelectionData* GdkAtom gint guchar* gint) "gtk_selection_data_set")
   (macro gtk_selection_data_set_text::gboolean (GtkSelectionData* gchar* gint) "gtk_selection_data_set_text")
   (macro gtk_selection_data_get_text::guchar* (GtkSelectionData*) "gtk_selection_data_get_text")
   (macro gtk_selection_data_set_pixbuf::gboolean (GtkSelectionData* GdkPixbuf*) "gtk_selection_data_set_pixbuf")
   (macro gtk_selection_data_get_pixbuf::GdkPixbuf* (GtkSelectionData*) "gtk_selection_data_get_pixbuf")
   (macro gtk_selection_data_set_uris::gboolean (GtkSelectionData* gchar**) "gtk_selection_data_set_uris")
   (macro gtk_selection_data_get_uris::gchar** (GtkSelectionData*) "gtk_selection_data_get_uris")
   (macro gtk_selection_data_get_targets::gboolean (GtkSelectionData* GdkAtom** gint*) "gtk_selection_data_get_targets")
   (macro gtk_selection_data_targets_include_text::gboolean (GtkSelectionData*) "gtk_selection_data_targets_include_text")
   (macro gtk_selection_data_targets_include_image::gboolean (GtkSelectionData* gboolean) "gtk_selection_data_targets_include_image")
   (macro gtk_selection_remove_all::void (GtkWidget*) "gtk_selection_remove_all")
   (macro gtk_selection_clear::gboolean (GtkWidget* GdkEventSelection*) "gtk_selection_clear")
   (macro _gtk_selection_request::gboolean (GtkWidget* GdkEventSelection*) "_gtk_selection_request")
   (macro _gtk_selection_incr_event::gboolean (GdkWindow* GdkEventProperty*) "_gtk_selection_incr_event")
   (macro _gtk_selection_notify::gboolean (GtkWidget* GdkEventSelection*) "_gtk_selection_notify")
   (macro _gtk_selection_property_notify::gboolean (GtkWidget* GdkEventProperty*) "_gtk_selection_property_notify")
   (macro gtk_selection_data_get_type::GType () "gtk_selection_data_get_type")
   (macro gtk_selection_data_copy::GtkSelectionData* (GtkSelectionData*) "gtk_selection_data_copy")
   (macro gtk_selection_data_free::void (GtkSelectionData*) "gtk_selection_data_free")
   (macro gtk_clipboard_get_type::GType () "gtk_clipboard_get_type")
   (macro gtk_clipboard_get_for_display::GtkClipboard* (GdkDisplay* GdkAtom) "gtk_clipboard_get_for_display")
   (macro gtk_clipboard_get::GtkClipboard* (GdkAtom) "gtk_clipboard_get")
   (macro gtk_clipboard_get_display::GdkDisplay* (GtkClipboard*) "gtk_clipboard_get_display")
   (macro gtk_clipboard_set_with_data::gboolean (GtkClipboard* GtkTargetEntry* guint GtkClipboardGetFunc GtkClipboardClearFunc gpointer) "gtk_clipboard_set_with_data")
   (macro gtk_clipboard_set_with_owner::gboolean (GtkClipboard* GtkTargetEntry* guint GtkClipboardGetFunc GtkClipboardClearFunc GObject*) "gtk_clipboard_set_with_owner")
   (macro gtk_clipboard_get_owner::GObject* (GtkClipboard*) "gtk_clipboard_get_owner")
   (macro gtk_clipboard_clear::void (GtkClipboard*) "gtk_clipboard_clear")
   (macro gtk_clipboard_set_text::void (GtkClipboard* gchar* gint) "gtk_clipboard_set_text")
   (macro gtk_clipboard_set_image::void (GtkClipboard* GdkPixbuf*) "gtk_clipboard_set_image")
   (macro gtk_clipboard_request_contents::void (GtkClipboard* GdkAtom GtkClipboardReceivedFunc gpointer) "gtk_clipboard_request_contents")
   (macro gtk_clipboard_request_text::void (GtkClipboard* GtkClipboardTextReceivedFunc gpointer) "gtk_clipboard_request_text")
   (macro gtk_clipboard_request_image::void (GtkClipboard* GtkClipboardImageReceivedFunc gpointer) "gtk_clipboard_request_image")
   (macro gtk_clipboard_request_targets::void (GtkClipboard* GtkClipboardTargetsReceivedFunc gpointer) "gtk_clipboard_request_targets")
   (macro gtk_clipboard_wait_for_contents::GtkSelectionData* (GtkClipboard* GdkAtom) "gtk_clipboard_wait_for_contents")
   (macro gtk_clipboard_wait_for_text::gchar* (GtkClipboard*) "gtk_clipboard_wait_for_text")
   (macro gtk_clipboard_wait_for_image::GdkPixbuf* (GtkClipboard*) "gtk_clipboard_wait_for_image")
   (macro gtk_clipboard_wait_for_targets::gboolean (GtkClipboard* GdkAtom** gint*) "gtk_clipboard_wait_for_targets")
   (macro gtk_clipboard_wait_is_text_available::gboolean (GtkClipboard*) "gtk_clipboard_wait_is_text_available")
   (macro gtk_clipboard_wait_is_image_available::gboolean (GtkClipboard*) "gtk_clipboard_wait_is_image_available")
   (macro gtk_clipboard_wait_is_target_available::gboolean (GtkClipboard* GdkAtom) "gtk_clipboard_wait_is_target_available")
   (macro gtk_clipboard_set_can_store::void (GtkClipboard* GtkTargetEntry* gint) "gtk_clipboard_set_can_store")
   (macro gtk_clipboard_store::void (GtkClipboard*) "gtk_clipboard_store")
   (macro _gtk_clipboard_handle_event::void (GdkEventOwnerChange*) "_gtk_clipboard_handle_event")
   (macro _gtk_clipboard_store_all::void () "_gtk_clipboard_store_all")
   (macro gtk_range_get_type::GType () "gtk_range_get_type")
   (macro gtk_range_set_update_policy::void (GtkRange* GtkUpdateType) "gtk_range_set_update_policy")
   (macro gtk_range_get_update_policy::GtkUpdateType (GtkRange*) "gtk_range_get_update_policy")
   (macro gtk_range_set_adjustment::void (GtkRange* GtkAdjustment*) "gtk_range_set_adjustment")
   (macro gtk_range_get_adjustment::GtkAdjustment* (GtkRange*) "gtk_range_get_adjustment")
   (macro gtk_range_set_inverted::void (GtkRange* gboolean) "gtk_range_set_inverted")
   (macro gtk_range_get_inverted::gboolean (GtkRange*) "gtk_range_get_inverted")
   (macro gtk_range_set_increments::void (GtkRange* gdouble gdouble) "gtk_range_set_increments")
   (macro gtk_range_set_range::void (GtkRange* gdouble gdouble) "gtk_range_set_range")
   (macro gtk_range_set_value::void (GtkRange* gdouble) "gtk_range_set_value")
   (macro gtk_range_get_value::gdouble (GtkRange*) "gtk_range_get_value")
   (macro _gtk_range_get_wheel_delta::gdouble (GtkRange* GdkScrollDirection) "_gtk_range_get_wheel_delta")
   (macro gtk_scrollbar_get_type::GType () "gtk_scrollbar_get_type")
   (macro gtk_hscrollbar_get_type::GType () "gtk_hscrollbar_get_type")
   (macro gtk_hscrollbar_new::GtkWidget* (GtkAdjustment*) "gtk_hscrollbar_new")
   (macro gtk_vscrollbar_get_type::GType () "gtk_vscrollbar_get_type")
   (macro gtk_vscrollbar_new::GtkWidget* (GtkAdjustment*) "gtk_vscrollbar_new")
   (macro gtk_clist_get_type::GtkType () "gtk_clist_get_type")
   (macro gtk_clist_new::GtkWidget* (gint) "gtk_clist_new")
   (macro gtk_clist_new_with_titles::GtkWidget* (gint gchar**) "gtk_clist_new_with_titles")
   (macro gtk_clist_set_hadjustment::void (GtkCList* GtkAdjustment*) "gtk_clist_set_hadjustment")
   (macro gtk_clist_set_vadjustment::void (GtkCList* GtkAdjustment*) "gtk_clist_set_vadjustment")
   (macro gtk_clist_get_hadjustment::GtkAdjustment* (GtkCList*) "gtk_clist_get_hadjustment")
   (macro gtk_clist_get_vadjustment::GtkAdjustment* (GtkCList*) "gtk_clist_get_vadjustment")
   (macro gtk_clist_set_shadow_type::void (GtkCList* GtkShadowType) "gtk_clist_set_shadow_type")
   (macro gtk_clist_set_selection_mode::void (GtkCList* GtkSelectionMode) "gtk_clist_set_selection_mode")
   (macro gtk_clist_set_reorderable::void (GtkCList* gboolean) "gtk_clist_set_reorderable")
   (macro gtk_clist_set_use_drag_icons::void (GtkCList* gboolean) "gtk_clist_set_use_drag_icons")
   (macro gtk_clist_set_button_actions::void (GtkCList* guint guint8) "gtk_clist_set_button_actions")
   (macro gtk_clist_freeze::void (GtkCList*) "gtk_clist_freeze")
   (macro gtk_clist_thaw::void (GtkCList*) "gtk_clist_thaw")
   (macro gtk_clist_column_titles_show::void (GtkCList*) "gtk_clist_column_titles_show")
   (macro gtk_clist_column_titles_hide::void (GtkCList*) "gtk_clist_column_titles_hide")
   (macro gtk_clist_column_title_active::void (GtkCList* gint) "gtk_clist_column_title_active")
   (macro gtk_clist_column_title_passive::void (GtkCList* gint) "gtk_clist_column_title_passive")
   (macro gtk_clist_column_titles_active::void (GtkCList*) "gtk_clist_column_titles_active")
   (macro gtk_clist_column_titles_passive::void (GtkCList*) "gtk_clist_column_titles_passive")
   (macro gtk_clist_set_column_title::void (GtkCList* gint gchar*) "gtk_clist_set_column_title")
   (macro gtk_clist_get_column_title::gchar* (GtkCList* gint) "gtk_clist_get_column_title")
   (macro gtk_clist_set_column_widget::void (GtkCList* gint GtkWidget*) "gtk_clist_set_column_widget")
   (macro gtk_clist_get_column_widget::GtkWidget* (GtkCList* gint) "gtk_clist_get_column_widget")
   (macro gtk_clist_set_column_justification::void (GtkCList* gint GtkJustification) "gtk_clist_set_column_justification")
   (macro gtk_clist_set_column_visibility::void (GtkCList* gint gboolean) "gtk_clist_set_column_visibility")
   (macro gtk_clist_set_column_resizeable::void (GtkCList* gint gboolean) "gtk_clist_set_column_resizeable")
   (macro gtk_clist_set_column_auto_resize::void (GtkCList* gint gboolean) "gtk_clist_set_column_auto_resize")
   (macro gtk_clist_columns_autosize::gint (GtkCList*) "gtk_clist_columns_autosize")
   (macro gtk_clist_optimal_column_width::gint (GtkCList* gint) "gtk_clist_optimal_column_width")
   (macro gtk_clist_set_column_width::void (GtkCList* gint gint) "gtk_clist_set_column_width")
   (macro gtk_clist_set_column_min_width::void (GtkCList* gint gint) "gtk_clist_set_column_min_width")
   (macro gtk_clist_set_column_max_width::void (GtkCList* gint gint) "gtk_clist_set_column_max_width")
   (macro gtk_clist_set_row_height::void (GtkCList* guint) "gtk_clist_set_row_height")
   (macro gtk_clist_moveto::void (GtkCList* gint gint gfloat gfloat) "gtk_clist_moveto")
   (macro gtk_clist_row_is_visible::GtkVisibility (GtkCList* gint) "gtk_clist_row_is_visible")
   (macro gtk_clist_get_cell_type::GtkCellType (GtkCList* gint gint) "gtk_clist_get_cell_type")
   (macro gtk_clist_set_text::void (GtkCList* gint gint gchar*) "gtk_clist_set_text")
   (macro gtk_clist_get_text::gint (GtkCList* gint gint gchar**) "gtk_clist_get_text")
   (macro gtk_clist_set_pixmap::void (GtkCList* gint gint GdkPixmap* GdkBitmap*) "gtk_clist_set_pixmap")
   (macro gtk_clist_get_pixmap::gint (GtkCList* gint gint GdkPixmap** GdkBitmap**) "gtk_clist_get_pixmap")
   (macro gtk_clist_set_pixtext::void (GtkCList* gint gint gchar* guint8 GdkPixmap* GdkBitmap*) "gtk_clist_set_pixtext")
   (macro gtk_clist_get_pixtext::gint (GtkCList* gint gint gchar** guint8* GdkPixmap** GdkBitmap**) "gtk_clist_get_pixtext")
   (macro gtk_clist_set_foreground::void (GtkCList* gint GdkColor*) "gtk_clist_set_foreground")
   (macro gtk_clist_set_background::void (GtkCList* gint GdkColor*) "gtk_clist_set_background")
   (macro gtk_clist_set_cell_style::void (GtkCList* gint gint GtkStyle*) "gtk_clist_set_cell_style")
   (macro gtk_clist_get_cell_style::GtkStyle* (GtkCList* gint gint) "gtk_clist_get_cell_style")
   (macro gtk_clist_set_row_style::void (GtkCList* gint GtkStyle*) "gtk_clist_set_row_style")
   (macro gtk_clist_get_row_style::GtkStyle* (GtkCList* gint) "gtk_clist_get_row_style")
   (macro gtk_clist_set_shift::void (GtkCList* gint gint gint gint) "gtk_clist_set_shift")
   (macro gtk_clist_set_selectable::void (GtkCList* gint gboolean) "gtk_clist_set_selectable")
   (macro gtk_clist_get_selectable::gboolean (GtkCList* gint) "gtk_clist_get_selectable")
   (macro gtk_clist_prepend::gint (GtkCList* gchar**) "gtk_clist_prepend")
   (macro gtk_clist_append::gint (GtkCList* gchar**) "gtk_clist_append")
   (macro gtk_clist_insert::gint (GtkCList* gint gchar**) "gtk_clist_insert")
   (macro gtk_clist_remove::void (GtkCList* gint) "gtk_clist_remove")
   (macro gtk_clist_set_row_data::void (GtkCList* gint gpointer) "gtk_clist_set_row_data")
   (macro gtk_clist_set_row_data_full::void (GtkCList* gint gpointer GtkDestroyNotify) "gtk_clist_set_row_data_full")
   (macro gtk_clist_get_row_data::gpointer (GtkCList* gint) "gtk_clist_get_row_data")
   (macro gtk_clist_find_row_from_data::gint (GtkCList* gpointer) "gtk_clist_find_row_from_data")
   (macro gtk_clist_select_row::void (GtkCList* gint gint) "gtk_clist_select_row")
   (macro gtk_clist_unselect_row::void (GtkCList* gint gint) "gtk_clist_unselect_row")
   (macro gtk_clist_undo_selection::void (GtkCList*) "gtk_clist_undo_selection")
   (macro gtk_clist_clear::void (GtkCList*) "gtk_clist_clear")
   (macro gtk_clist_get_selection_info::gint (GtkCList* gint gint gint* gint*) "gtk_clist_get_selection_info")
   (macro gtk_clist_select_all::void (GtkCList*) "gtk_clist_select_all")
   (macro gtk_clist_unselect_all::void (GtkCList*) "gtk_clist_unselect_all")
   (macro gtk_clist_swap_rows::void (GtkCList* gint gint) "gtk_clist_swap_rows")
   (macro gtk_clist_row_move::void (GtkCList* gint gint) "gtk_clist_row_move")
   (macro gtk_clist_set_compare_func::void (GtkCList* GtkCListCompareFunc) "gtk_clist_set_compare_func")
   (macro gtk_clist_set_sort_column::void (GtkCList* gint) "gtk_clist_set_sort_column")
   (macro gtk_clist_set_sort_type::void (GtkCList* GtkSortType) "gtk_clist_set_sort_type")
   (macro gtk_clist_sort::void (GtkCList*) "gtk_clist_sort")
   (macro gtk_clist_set_auto_sort::void (GtkCList* gboolean) "gtk_clist_set_auto_sort")
   (macro _gtk_clist_create_cell_layout::PangoLayout* (GtkCList* GtkCListRow* gint) "_gtk_clist_create_cell_layout")
   (macro gtk_color_button_get_type::GType () "gtk_color_button_get_type")
   (macro gtk_color_button_new::GtkWidget* () "gtk_color_button_new")
   (macro gtk_color_button_new_with_color::GtkWidget* (GdkColor*) "gtk_color_button_new_with_color")
   (macro gtk_color_button_set_color::void (GtkColorButton* GdkColor*) "gtk_color_button_set_color")
   (macro gtk_color_button_set_alpha::void (GtkColorButton* guint16) "gtk_color_button_set_alpha")
   (macro gtk_color_button_get_color::void (GtkColorButton* GdkColor*) "gtk_color_button_get_color")
   (macro gtk_color_button_get_alpha::guint16 (GtkColorButton*) "gtk_color_button_get_alpha")
   (macro gtk_color_button_set_use_alpha::void (GtkColorButton* gboolean) "gtk_color_button_set_use_alpha")
   (macro gtk_color_button_get_use_alpha::gboolean (GtkColorButton*) "gtk_color_button_get_use_alpha")
   (macro gtk_color_button_set_title::void (GtkColorButton* gchar*) "gtk_color_button_set_title")
   (macro gtk_color_button_get_title::gchar* (GtkColorButton*) "gtk_color_button_get_title")
   (macro gtk_vbox_get_type::GType () "gtk_vbox_get_type")
   (macro gtk_vbox_new::GtkWidget* (gboolean gint) "gtk_vbox_new")
   (macro gtk_color_selection_get_type::GType () "gtk_color_selection_get_type")
   (macro gtk_color_selection_new::GtkWidget* () "gtk_color_selection_new")
   (macro gtk_color_selection_get_has_opacity_control::gboolean (GtkColorSelection*) "gtk_color_selection_get_has_opacity_control")
   (macro gtk_color_selection_set_has_opacity_control::void (GtkColorSelection* gboolean) "gtk_color_selection_set_has_opacity_control")
   (macro gtk_color_selection_get_has_palette::gboolean (GtkColorSelection*) "gtk_color_selection_get_has_palette")
   (macro gtk_color_selection_set_has_palette::void (GtkColorSelection* gboolean) "gtk_color_selection_set_has_palette")
   (macro gtk_color_selection_set_current_color::void (GtkColorSelection* GdkColor*) "gtk_color_selection_set_current_color")
   (macro gtk_color_selection_set_current_alpha::void (GtkColorSelection* guint16) "gtk_color_selection_set_current_alpha")
   (macro gtk_color_selection_get_current_color::void (GtkColorSelection* GdkColor*) "gtk_color_selection_get_current_color")
   (macro gtk_color_selection_get_current_alpha::guint16 (GtkColorSelection*) "gtk_color_selection_get_current_alpha")
   (macro gtk_color_selection_set_previous_color::void (GtkColorSelection* GdkColor*) "gtk_color_selection_set_previous_color")
   (macro gtk_color_selection_set_previous_alpha::void (GtkColorSelection* guint16) "gtk_color_selection_set_previous_alpha")
   (macro gtk_color_selection_get_previous_color::void (GtkColorSelection* GdkColor*) "gtk_color_selection_get_previous_color")
   (macro gtk_color_selection_get_previous_alpha::guint16 (GtkColorSelection*) "gtk_color_selection_get_previous_alpha")
   (macro gtk_color_selection_is_adjusting::gboolean (GtkColorSelection*) "gtk_color_selection_is_adjusting")
   (macro gtk_color_selection_palette_from_string::gboolean (gchar* GdkColor** gint*) "gtk_color_selection_palette_from_string")
   (macro gtk_color_selection_palette_to_string::gchar* (GdkColor* gint) "gtk_color_selection_palette_to_string")
   (macro gtk_color_selection_set_change_palette_hook::GtkColorSelectionChangePaletteFunc (GtkColorSelectionChangePaletteFunc) "gtk_color_selection_set_change_palette_hook")
   (macro gtk_color_selection_set_change_palette_with_screen_hook::GtkColorSelectionChangePaletteWithScreenFunc (GtkColorSelectionChangePaletteWithScreenFunc) "gtk_color_selection_set_change_palette_with_screen_hook")
   (macro gtk_color_selection_set_color::void (GtkColorSelection* gdouble*) "gtk_color_selection_set_color")
   (macro gtk_color_selection_get_color::void (GtkColorSelection* gdouble*) "gtk_color_selection_get_color")
   (macro gtk_color_selection_set_update_policy::void (GtkColorSelection* GtkUpdateType) "gtk_color_selection_set_update_policy")
   (macro gtk_color_selection_dialog_get_type::GType () "gtk_color_selection_dialog_get_type")
   (macro gtk_color_selection_dialog_new::GtkWidget* (gchar*) "gtk_color_selection_dialog_new")
   (macro gtk_hbox_get_type::GType () "gtk_hbox_get_type")
   (macro gtk_hbox_new::GtkWidget* (gboolean gint) "gtk_hbox_new")
   (macro gtk_combo_get_type::GType () "gtk_combo_get_type")
   (macro gtk_combo_new::GtkWidget* () "gtk_combo_new")
   (macro gtk_combo_set_value_in_list::void (GtkCombo* gboolean gboolean) "gtk_combo_set_value_in_list")
   (macro gtk_combo_set_use_arrows::void (GtkCombo* gboolean) "gtk_combo_set_use_arrows")
   (macro gtk_combo_set_use_arrows_always::void (GtkCombo* gboolean) "gtk_combo_set_use_arrows_always")
   (macro gtk_combo_set_case_sensitive::void (GtkCombo* gboolean) "gtk_combo_set_case_sensitive")
   (macro gtk_combo_set_item_string::void (GtkCombo* GtkItem* gchar*) "gtk_combo_set_item_string")
   (macro gtk_combo_set_popdown_strings::void (GtkCombo* GList*) "gtk_combo_set_popdown_strings")
   (macro gtk_combo_disable_activate::void (GtkCombo*) "gtk_combo_disable_activate")
   (macro gtk_drag_get_data::void (GtkWidget* GdkDragContext* GdkAtom guint32) "gtk_drag_get_data")
   (macro gtk_drag_finish::void (GdkDragContext* gboolean gboolean guint32) "gtk_drag_finish")
   (macro gtk_drag_get_source_widget::GtkWidget* (GdkDragContext*) "gtk_drag_get_source_widget")
   (macro gtk_drag_highlight::void (GtkWidget*) "gtk_drag_highlight")
   (macro gtk_drag_unhighlight::void (GtkWidget*) "gtk_drag_unhighlight")
   (macro gtk_drag_dest_set::void (GtkWidget* GtkDestDefaults GtkTargetEntry* gint GdkDragAction) "gtk_drag_dest_set")
   (macro gtk_drag_dest_set_proxy::void (GtkWidget* GdkWindow* GdkDragProtocol gboolean) "gtk_drag_dest_set_proxy")
   (macro gtk_drag_dest_unset::void (GtkWidget*) "gtk_drag_dest_unset")
   (macro gtk_drag_dest_find_target::GdkAtom (GtkWidget* GdkDragContext* GtkTargetList*) "gtk_drag_dest_find_target")
   (macro gtk_drag_dest_get_target_list::GtkTargetList* (GtkWidget*) "gtk_drag_dest_get_target_list")
   (macro gtk_drag_dest_set_target_list::void (GtkWidget* GtkTargetList*) "gtk_drag_dest_set_target_list")
   (macro gtk_drag_dest_add_text_targets::void (GtkWidget*) "gtk_drag_dest_add_text_targets")
   (macro gtk_drag_dest_add_image_targets::void (GtkWidget*) "gtk_drag_dest_add_image_targets")
   (macro gtk_drag_dest_add_uri_targets::void (GtkWidget*) "gtk_drag_dest_add_uri_targets")
   (macro gtk_drag_source_set::void (GtkWidget* GdkModifierType GtkTargetEntry* gint GdkDragAction) "gtk_drag_source_set")
   (macro gtk_drag_source_unset::void (GtkWidget*) "gtk_drag_source_unset")
   (macro gtk_drag_source_get_target_list::GtkTargetList* (GtkWidget*) "gtk_drag_source_get_target_list")
   (macro gtk_drag_source_set_target_list::void (GtkWidget* GtkTargetList*) "gtk_drag_source_set_target_list")
   (macro gtk_drag_source_add_text_targets::void (GtkWidget*) "gtk_drag_source_add_text_targets")
   (macro gtk_drag_source_add_image_targets::void (GtkWidget*) "gtk_drag_source_add_image_targets")
   (macro gtk_drag_source_add_uri_targets::void (GtkWidget*) "gtk_drag_source_add_uri_targets")
   (macro gtk_drag_source_set_icon::void (GtkWidget* GdkColormap* GdkPixmap* GdkBitmap*) "gtk_drag_source_set_icon")
   (macro gtk_drag_source_set_icon_pixbuf::void (GtkWidget* GdkPixbuf*) "gtk_drag_source_set_icon_pixbuf")
   (macro gtk_drag_source_set_icon_stock::void (GtkWidget* gchar*) "gtk_drag_source_set_icon_stock")
   (macro gtk_drag_begin::GdkDragContext* (GtkWidget* GtkTargetList* GdkDragAction gint GdkEvent*) "gtk_drag_begin")
   (macro gtk_drag_set_icon_widget::void (GdkDragContext* GtkWidget* gint gint) "gtk_drag_set_icon_widget")
   (macro gtk_drag_set_icon_pixmap::void (GdkDragContext* GdkColormap* GdkPixmap* GdkBitmap* gint gint) "gtk_drag_set_icon_pixmap")
   (macro gtk_drag_set_icon_pixbuf::void (GdkDragContext* GdkPixbuf* gint gint) "gtk_drag_set_icon_pixbuf")
   (macro gtk_drag_set_icon_stock::void (GdkDragContext* gchar* gint gint) "gtk_drag_set_icon_stock")
   (macro gtk_drag_set_icon_default::void (GdkDragContext*) "gtk_drag_set_icon_default")
   (macro gtk_drag_check_threshold::gboolean (GtkWidget* gint gint gint gint) "gtk_drag_check_threshold")
   (macro _gtk_drag_source_handle_event::void (GtkWidget* GdkEvent*) "_gtk_drag_source_handle_event")
   (macro _gtk_drag_dest_handle_event::void (GtkWidget* GdkEvent*) "_gtk_drag_dest_handle_event")
   (macro gtk_drag_set_default_icon::void (GdkColormap* GdkPixmap* GdkBitmap* gint gint) "gtk_drag_set_default_icon")
   (macro gtk_tree_view_get_type::GType () "gtk_tree_view_get_type")
   (macro gtk_tree_view_new::GtkWidget* () "gtk_tree_view_new")
   (macro gtk_tree_view_new_with_model::GtkWidget* (GtkTreeModel*) "gtk_tree_view_new_with_model")
   (macro gtk_tree_view_get_model::GtkTreeModel* (GtkTreeView*) "gtk_tree_view_get_model")
   (macro gtk_tree_view_set_model::void (GtkTreeView* GtkTreeModel*) "gtk_tree_view_set_model")
   (macro gtk_tree_view_get_selection::GtkTreeSelection* (GtkTreeView*) "gtk_tree_view_get_selection")
   (macro gtk_tree_view_get_hadjustment::GtkAdjustment* (GtkTreeView*) "gtk_tree_view_get_hadjustment")
   (macro gtk_tree_view_set_hadjustment::void (GtkTreeView* GtkAdjustment*) "gtk_tree_view_set_hadjustment")
   (macro gtk_tree_view_get_vadjustment::GtkAdjustment* (GtkTreeView*) "gtk_tree_view_get_vadjustment")
   (macro gtk_tree_view_set_vadjustment::void (GtkTreeView* GtkAdjustment*) "gtk_tree_view_set_vadjustment")
   (macro gtk_tree_view_get_headers_visible::gboolean (GtkTreeView*) "gtk_tree_view_get_headers_visible")
   (macro gtk_tree_view_set_headers_visible::void (GtkTreeView* gboolean) "gtk_tree_view_set_headers_visible")
   (macro gtk_tree_view_columns_autosize::void (GtkTreeView*) "gtk_tree_view_columns_autosize")
   (macro gtk_tree_view_set_headers_clickable::void (GtkTreeView* gboolean) "gtk_tree_view_set_headers_clickable")
   (macro gtk_tree_view_set_rules_hint::void (GtkTreeView* gboolean) "gtk_tree_view_set_rules_hint")
   (macro gtk_tree_view_get_rules_hint::gboolean (GtkTreeView*) "gtk_tree_view_get_rules_hint")
   (macro gtk_tree_view_append_column::gint (GtkTreeView* GtkTreeViewColumn*) "gtk_tree_view_append_column")
   (macro gtk_tree_view_remove_column::gint (GtkTreeView* GtkTreeViewColumn*) "gtk_tree_view_remove_column")
   (macro gtk_tree_view_insert_column::gint (GtkTreeView* GtkTreeViewColumn* gint) "gtk_tree_view_insert_column")
   (macro gtk_tree_view_insert_column_with_attributes::gint (GtkTreeView* gint gchar* GtkCellRenderer* . GtkCellRenderer*) "gtk_tree_view_insert_column_with_attributes")
   (macro gtk_tree_view_insert_column_with_data_func::gint (GtkTreeView* gint gchar* GtkCellRenderer* GtkTreeCellDataFunc gpointer GDestroyNotify) "gtk_tree_view_insert_column_with_data_func")
   (macro gtk_tree_view_get_column::GtkTreeViewColumn* (GtkTreeView* gint) "gtk_tree_view_get_column")
   (macro gtk_tree_view_get_columns::GList* (GtkTreeView*) "gtk_tree_view_get_columns")
   (macro gtk_tree_view_move_column_after::void (GtkTreeView* GtkTreeViewColumn* GtkTreeViewColumn*) "gtk_tree_view_move_column_after")
   (macro gtk_tree_view_set_expander_column::void (GtkTreeView* GtkTreeViewColumn*) "gtk_tree_view_set_expander_column")
   (macro gtk_tree_view_get_expander_column::GtkTreeViewColumn* (GtkTreeView*) "gtk_tree_view_get_expander_column")
   (macro gtk_tree_view_set_column_drag_function::void (GtkTreeView* GtkTreeViewColumnDropFunc gpointer GtkDestroyNotify) "gtk_tree_view_set_column_drag_function")
   (macro gtk_tree_view_scroll_to_point::void (GtkTreeView* gint gint) "gtk_tree_view_scroll_to_point")
   (macro gtk_tree_view_scroll_to_cell::void (GtkTreeView* GtkTreePath* GtkTreeViewColumn* gboolean gfloat gfloat) "gtk_tree_view_scroll_to_cell")
   (macro gtk_tree_view_row_activated::void (GtkTreeView* GtkTreePath* GtkTreeViewColumn*) "gtk_tree_view_row_activated")
   (macro gtk_tree_view_expand_all::void (GtkTreeView*) "gtk_tree_view_expand_all")
   (macro gtk_tree_view_collapse_all::void (GtkTreeView*) "gtk_tree_view_collapse_all")
   (macro gtk_tree_view_expand_to_path::void (GtkTreeView* GtkTreePath*) "gtk_tree_view_expand_to_path")
   (macro gtk_tree_view_expand_row::gboolean (GtkTreeView* GtkTreePath* gboolean) "gtk_tree_view_expand_row")
   (macro gtk_tree_view_collapse_row::gboolean (GtkTreeView* GtkTreePath*) "gtk_tree_view_collapse_row")
   (macro gtk_tree_view_map_expanded_rows::void (GtkTreeView* GtkTreeViewMappingFunc gpointer) "gtk_tree_view_map_expanded_rows")
   (macro gtk_tree_view_row_expanded::gboolean (GtkTreeView* GtkTreePath*) "gtk_tree_view_row_expanded")
   (macro gtk_tree_view_set_reorderable::void (GtkTreeView* gboolean) "gtk_tree_view_set_reorderable")
   (macro gtk_tree_view_get_reorderable::gboolean (GtkTreeView*) "gtk_tree_view_get_reorderable")
   (macro gtk_tree_view_set_cursor::void (GtkTreeView* GtkTreePath* GtkTreeViewColumn* gboolean) "gtk_tree_view_set_cursor")
   (macro gtk_tree_view_set_cursor_on_cell::void (GtkTreeView* GtkTreePath* GtkTreeViewColumn* GtkCellRenderer* gboolean) "gtk_tree_view_set_cursor_on_cell")
   (macro gtk_tree_view_get_cursor::void (GtkTreeView* GtkTreePath** GtkTreeViewColumn**) "gtk_tree_view_get_cursor")
   (macro gtk_tree_view_get_bin_window::GdkWindow* (GtkTreeView*) "gtk_tree_view_get_bin_window")
   (macro gtk_tree_view_get_path_at_pos::gboolean (GtkTreeView* gint gint GtkTreePath** GtkTreeViewColumn** gint* gint*) "gtk_tree_view_get_path_at_pos")
   (macro gtk_tree_view_get_cell_area::void (GtkTreeView* GtkTreePath* GtkTreeViewColumn* GdkRectangle*) "gtk_tree_view_get_cell_area")
   (macro gtk_tree_view_get_background_area::void (GtkTreeView* GtkTreePath* GtkTreeViewColumn* GdkRectangle*) "gtk_tree_view_get_background_area")
   (macro gtk_tree_view_get_visible_rect::void (GtkTreeView* GdkRectangle*) "gtk_tree_view_get_visible_rect")
   (macro gtk_tree_view_widget_to_tree_coords::void (GtkTreeView* gint gint gint* gint*) "gtk_tree_view_widget_to_tree_coords")
   (macro gtk_tree_view_tree_to_widget_coords::void (GtkTreeView* gint gint gint* gint*) "gtk_tree_view_tree_to_widget_coords")
   (macro gtk_tree_view_enable_model_drag_source::void (GtkTreeView* GdkModifierType GtkTargetEntry* gint GdkDragAction) "gtk_tree_view_enable_model_drag_source")
   (macro gtk_tree_view_enable_model_drag_dest::void (GtkTreeView* GtkTargetEntry* gint GdkDragAction) "gtk_tree_view_enable_model_drag_dest")
   (macro gtk_tree_view_unset_rows_drag_source::void (GtkTreeView*) "gtk_tree_view_unset_rows_drag_source")
   (macro gtk_tree_view_unset_rows_drag_dest::void (GtkTreeView*) "gtk_tree_view_unset_rows_drag_dest")
   (macro gtk_tree_view_set_drag_dest_row::void (GtkTreeView* GtkTreePath* GtkTreeViewDropPosition) "gtk_tree_view_set_drag_dest_row")
   (macro gtk_tree_view_get_drag_dest_row::void (GtkTreeView* GtkTreePath** GtkTreeViewDropPosition*) "gtk_tree_view_get_drag_dest_row")
   (macro gtk_tree_view_get_dest_row_at_pos::gboolean (GtkTreeView* gint gint GtkTreePath** GtkTreeViewDropPosition*) "gtk_tree_view_get_dest_row_at_pos")
   (macro gtk_tree_view_create_row_drag_icon::GdkPixmap* (GtkTreeView* GtkTreePath*) "gtk_tree_view_create_row_drag_icon")
   (macro gtk_tree_view_set_enable_search::void (GtkTreeView* gboolean) "gtk_tree_view_set_enable_search")
   (macro gtk_tree_view_get_enable_search::gboolean (GtkTreeView*) "gtk_tree_view_get_enable_search")
   (macro gtk_tree_view_get_search_column::gint (GtkTreeView*) "gtk_tree_view_get_search_column")
   (macro gtk_tree_view_set_search_column::void (GtkTreeView* gint) "gtk_tree_view_set_search_column")
   (macro gtk_tree_view_get_search_equal_func::GtkTreeViewSearchEqualFunc (GtkTreeView*) "gtk_tree_view_get_search_equal_func")
   (macro gtk_tree_view_set_search_equal_func::void (GtkTreeView* GtkTreeViewSearchEqualFunc gpointer GtkDestroyNotify) "gtk_tree_view_set_search_equal_func")
   (macro gtk_tree_view_set_destroy_count_func::void (GtkTreeView* GtkTreeDestroyCountFunc gpointer GtkDestroyNotify) "gtk_tree_view_set_destroy_count_func")
   (macro gtk_tree_view_set_fixed_height_mode::void (GtkTreeView* gboolean) "gtk_tree_view_set_fixed_height_mode")
   (macro gtk_tree_view_get_fixed_height_mode::gboolean (GtkTreeView*) "gtk_tree_view_get_fixed_height_mode")
   (macro gtk_tree_view_set_hover_selection::void (GtkTreeView* gboolean) "gtk_tree_view_set_hover_selection")
   (macro gtk_tree_view_get_hover_selection::gboolean (GtkTreeView*) "gtk_tree_view_get_hover_selection")
   (macro gtk_tree_view_set_hover_expand::void (GtkTreeView* gboolean) "gtk_tree_view_set_hover_expand")
   (macro gtk_tree_view_get_hover_expand::gboolean (GtkTreeView*) "gtk_tree_view_get_hover_expand")
   (macro gtk_tree_view_get_row_separator_func::GtkTreeViewRowSeparatorFunc (GtkTreeView*) "gtk_tree_view_get_row_separator_func")
   (macro gtk_tree_view_set_row_separator_func::void (GtkTreeView* GtkTreeViewRowSeparatorFunc gpointer GtkDestroyNotify) "gtk_tree_view_set_row_separator_func")
   (macro gtk_combo_box_get_type::GType () "gtk_combo_box_get_type")
   (macro gtk_combo_box_new::GtkWidget* () "gtk_combo_box_new")
   (macro gtk_combo_box_new_with_model::GtkWidget* (GtkTreeModel*) "gtk_combo_box_new_with_model")
   (macro gtk_combo_box_get_wrap_width::gint (GtkComboBox*) "gtk_combo_box_get_wrap_width")
   (macro gtk_combo_box_set_wrap_width::void (GtkComboBox* gint) "gtk_combo_box_set_wrap_width")
   (macro gtk_combo_box_get_row_span_column::gint (GtkComboBox*) "gtk_combo_box_get_row_span_column")
   (macro gtk_combo_box_set_row_span_column::void (GtkComboBox* gint) "gtk_combo_box_set_row_span_column")
   (macro gtk_combo_box_get_column_span_column::gint (GtkComboBox*) "gtk_combo_box_get_column_span_column")
   (macro gtk_combo_box_set_column_span_column::void (GtkComboBox* gint) "gtk_combo_box_set_column_span_column")
   (macro gtk_combo_box_get_add_tearoffs::gboolean (GtkComboBox*) "gtk_combo_box_get_add_tearoffs")
   (macro gtk_combo_box_set_add_tearoffs::void (GtkComboBox* gboolean) "gtk_combo_box_set_add_tearoffs")
   (macro gtk_combo_box_get_focus_on_click::gboolean (GtkComboBox*) "gtk_combo_box_get_focus_on_click")
   (macro gtk_combo_box_set_focus_on_click::void (GtkComboBox* gboolean) "gtk_combo_box_set_focus_on_click")
   (macro gtk_combo_box_get_active::gint (GtkComboBox*) "gtk_combo_box_get_active")
   (macro gtk_combo_box_set_active::void (GtkComboBox* gint) "gtk_combo_box_set_active")
   (macro gtk_combo_box_get_active_iter::gboolean (GtkComboBox* GtkTreeIter*) "gtk_combo_box_get_active_iter")
   (macro gtk_combo_box_set_active_iter::void (GtkComboBox* GtkTreeIter*) "gtk_combo_box_set_active_iter")
   (macro gtk_combo_box_set_model::void (GtkComboBox* GtkTreeModel*) "gtk_combo_box_set_model")
   (macro gtk_combo_box_get_model::GtkTreeModel* (GtkComboBox*) "gtk_combo_box_get_model")
   (macro gtk_combo_box_get_row_separator_func::GtkTreeViewRowSeparatorFunc (GtkComboBox*) "gtk_combo_box_get_row_separator_func")
   (macro gtk_combo_box_set_row_separator_func::void (GtkComboBox* GtkTreeViewRowSeparatorFunc gpointer GtkDestroyNotify) "gtk_combo_box_set_row_separator_func")
   (macro gtk_combo_box_new_text::GtkWidget* () "gtk_combo_box_new_text")
   (macro gtk_combo_box_append_text::void (GtkComboBox* gchar*) "gtk_combo_box_append_text")
   (macro gtk_combo_box_insert_text::void (GtkComboBox* gint gchar*) "gtk_combo_box_insert_text")
   (macro gtk_combo_box_prepend_text::void (GtkComboBox* gchar*) "gtk_combo_box_prepend_text")
   (macro gtk_combo_box_remove_text::void (GtkComboBox* gint) "gtk_combo_box_remove_text")
   (macro gtk_combo_box_get_active_text::gchar* (GtkComboBox*) "gtk_combo_box_get_active_text")
   (macro gtk_combo_box_popup::void (GtkComboBox*) "gtk_combo_box_popup")
   (macro gtk_combo_box_popdown::void (GtkComboBox*) "gtk_combo_box_popdown")
   (macro gtk_combo_box_get_popup_accessible::AtkObject* (GtkComboBox*) "gtk_combo_box_get_popup_accessible")
   (macro _gtk_combo_box_editing_canceled::gboolean (GtkComboBox*) "_gtk_combo_box_editing_canceled")
   (macro gtk_combo_box_entry_get_type::GType () "gtk_combo_box_entry_get_type")
   (macro gtk_combo_box_entry_new::GtkWidget* () "gtk_combo_box_entry_new")
   (macro gtk_combo_box_entry_new_with_model::GtkWidget* (GtkTreeModel* gint) "gtk_combo_box_entry_new_with_model")
   (macro gtk_combo_box_entry_set_text_column::void (GtkComboBoxEntry* gint) "gtk_combo_box_entry_set_text_column")
   (macro gtk_combo_box_entry_get_text_column::gint (GtkComboBoxEntry*) "gtk_combo_box_entry_get_text_column")
   (macro gtk_combo_box_entry_new_text::GtkWidget* () "gtk_combo_box_entry_new_text")
   (macro gtk_ctree_get_type::GtkType () "gtk_ctree_get_type")
   (macro gtk_ctree_new_with_titles::GtkWidget* (gint gint gchar**) "gtk_ctree_new_with_titles")
   (macro gtk_ctree_new::GtkWidget* (gint gint) "gtk_ctree_new")
   (macro gtk_ctree_insert_node::GtkCTreeNode* (GtkCTree* GtkCTreeNode* GtkCTreeNode* gchar** guint8 GdkPixmap* GdkBitmap* GdkPixmap* GdkBitmap* gboolean gboolean) "gtk_ctree_insert_node")
   (macro gtk_ctree_remove_node::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_remove_node")
   (macro gtk_ctree_insert_gnode::GtkCTreeNode* (GtkCTree* GtkCTreeNode* GtkCTreeNode* GNode* GtkCTreeGNodeFunc gpointer) "gtk_ctree_insert_gnode")
   (macro gtk_ctree_export_to_gnode::GNode* (GtkCTree* GNode* GNode* GtkCTreeNode* GtkCTreeGNodeFunc gpointer) "gtk_ctree_export_to_gnode")
   (macro gtk_ctree_post_recursive::void (GtkCTree* GtkCTreeNode* GtkCTreeFunc gpointer) "gtk_ctree_post_recursive")
   (macro gtk_ctree_post_recursive_to_depth::void (GtkCTree* GtkCTreeNode* gint GtkCTreeFunc gpointer) "gtk_ctree_post_recursive_to_depth")
   (macro gtk_ctree_pre_recursive::void (GtkCTree* GtkCTreeNode* GtkCTreeFunc gpointer) "gtk_ctree_pre_recursive")
   (macro gtk_ctree_pre_recursive_to_depth::void (GtkCTree* GtkCTreeNode* gint GtkCTreeFunc gpointer) "gtk_ctree_pre_recursive_to_depth")
   (macro gtk_ctree_is_viewable::gboolean (GtkCTree* GtkCTreeNode*) "gtk_ctree_is_viewable")
   (macro gtk_ctree_last::GtkCTreeNode* (GtkCTree* GtkCTreeNode*) "gtk_ctree_last")
   (macro gtk_ctree_find_node_ptr::GtkCTreeNode* (GtkCTree* GtkCTreeRow*) "gtk_ctree_find_node_ptr")
   (macro gtk_ctree_node_nth::GtkCTreeNode* (GtkCTree* guint) "gtk_ctree_node_nth")
   (macro gtk_ctree_find::gboolean (GtkCTree* GtkCTreeNode* GtkCTreeNode*) "gtk_ctree_find")
   (macro gtk_ctree_is_ancestor::gboolean (GtkCTree* GtkCTreeNode* GtkCTreeNode*) "gtk_ctree_is_ancestor")
   (macro gtk_ctree_find_by_row_data::GtkCTreeNode* (GtkCTree* GtkCTreeNode* gpointer) "gtk_ctree_find_by_row_data")
   (macro gtk_ctree_find_all_by_row_data::GList* (GtkCTree* GtkCTreeNode* gpointer) "gtk_ctree_find_all_by_row_data")
   (macro gtk_ctree_find_by_row_data_custom::GtkCTreeNode* (GtkCTree* GtkCTreeNode* gpointer GCompareFunc) "gtk_ctree_find_by_row_data_custom")
   (macro gtk_ctree_find_all_by_row_data_custom::GList* (GtkCTree* GtkCTreeNode* gpointer GCompareFunc) "gtk_ctree_find_all_by_row_data_custom")
   (macro gtk_ctree_is_hot_spot::gboolean (GtkCTree* gint gint) "gtk_ctree_is_hot_spot")
   (macro gtk_ctree_move::void (GtkCTree* GtkCTreeNode* GtkCTreeNode* GtkCTreeNode*) "gtk_ctree_move")
   (macro gtk_ctree_expand::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_expand")
   (macro gtk_ctree_expand_recursive::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_expand_recursive")
   (macro gtk_ctree_expand_to_depth::void (GtkCTree* GtkCTreeNode* gint) "gtk_ctree_expand_to_depth")
   (macro gtk_ctree_collapse::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_collapse")
   (macro gtk_ctree_collapse_recursive::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_collapse_recursive")
   (macro gtk_ctree_collapse_to_depth::void (GtkCTree* GtkCTreeNode* gint) "gtk_ctree_collapse_to_depth")
   (macro gtk_ctree_toggle_expansion::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_toggle_expansion")
   (macro gtk_ctree_toggle_expansion_recursive::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_toggle_expansion_recursive")
   (macro gtk_ctree_select::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_select")
   (macro gtk_ctree_select_recursive::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_select_recursive")
   (macro gtk_ctree_unselect::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_unselect")
   (macro gtk_ctree_unselect_recursive::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_unselect_recursive")
   (macro gtk_ctree_real_select_recursive::void (GtkCTree* GtkCTreeNode* gint) "gtk_ctree_real_select_recursive")
   (macro gtk_ctree_node_set_text::void (GtkCTree* GtkCTreeNode* gint gchar*) "gtk_ctree_node_set_text")
   (macro gtk_ctree_node_set_pixmap::void (GtkCTree* GtkCTreeNode* gint GdkPixmap* GdkBitmap*) "gtk_ctree_node_set_pixmap")
   (macro gtk_ctree_node_set_pixtext::void (GtkCTree* GtkCTreeNode* gint gchar* guint8 GdkPixmap* GdkBitmap*) "gtk_ctree_node_set_pixtext")
   (macro gtk_ctree_set_node_info::void (GtkCTree* GtkCTreeNode* gchar* guint8 GdkPixmap* GdkBitmap* GdkPixmap* GdkBitmap* gboolean gboolean) "gtk_ctree_set_node_info")
   (macro gtk_ctree_node_set_shift::void (GtkCTree* GtkCTreeNode* gint gint gint) "gtk_ctree_node_set_shift")
   (macro gtk_ctree_node_set_selectable::void (GtkCTree* GtkCTreeNode* gboolean) "gtk_ctree_node_set_selectable")
   (macro gtk_ctree_node_get_selectable::gboolean (GtkCTree* GtkCTreeNode*) "gtk_ctree_node_get_selectable")
   (macro gtk_ctree_node_get_cell_type::GtkCellType (GtkCTree* GtkCTreeNode* gint) "gtk_ctree_node_get_cell_type")
   (macro gtk_ctree_node_get_text::gboolean (GtkCTree* GtkCTreeNode* gint gchar**) "gtk_ctree_node_get_text")
   (macro gtk_ctree_node_get_pixmap::gboolean (GtkCTree* GtkCTreeNode* gint GdkPixmap** GdkBitmap**) "gtk_ctree_node_get_pixmap")
   (macro gtk_ctree_node_get_pixtext::gboolean (GtkCTree* GtkCTreeNode* gint gchar** guint8* GdkPixmap** GdkBitmap**) "gtk_ctree_node_get_pixtext")
   (macro gtk_ctree_get_node_info::gboolean (GtkCTree* GtkCTreeNode* gchar** guint8* GdkPixmap** GdkBitmap** GdkPixmap** GdkBitmap** gboolean* gboolean*) "gtk_ctree_get_node_info")
   (macro gtk_ctree_node_set_row_style::void (GtkCTree* GtkCTreeNode* GtkStyle*) "gtk_ctree_node_set_row_style")
   (macro gtk_ctree_node_get_row_style::GtkStyle* (GtkCTree* GtkCTreeNode*) "gtk_ctree_node_get_row_style")
   (macro gtk_ctree_node_set_cell_style::void (GtkCTree* GtkCTreeNode* gint GtkStyle*) "gtk_ctree_node_set_cell_style")
   (macro gtk_ctree_node_get_cell_style::GtkStyle* (GtkCTree* GtkCTreeNode* gint) "gtk_ctree_node_get_cell_style")
   (macro gtk_ctree_node_set_foreground::void (GtkCTree* GtkCTreeNode* GdkColor*) "gtk_ctree_node_set_foreground")
   (macro gtk_ctree_node_set_background::void (GtkCTree* GtkCTreeNode* GdkColor*) "gtk_ctree_node_set_background")
   (macro gtk_ctree_node_set_row_data::void (GtkCTree* GtkCTreeNode* gpointer) "gtk_ctree_node_set_row_data")
   (macro gtk_ctree_node_set_row_data_full::void (GtkCTree* GtkCTreeNode* gpointer GtkDestroyNotify) "gtk_ctree_node_set_row_data_full")
   (macro gtk_ctree_node_get_row_data::gpointer (GtkCTree* GtkCTreeNode*) "gtk_ctree_node_get_row_data")
   (macro gtk_ctree_node_moveto::void (GtkCTree* GtkCTreeNode* gint gfloat gfloat) "gtk_ctree_node_moveto")
   (macro gtk_ctree_node_is_visible::GtkVisibility (GtkCTree* GtkCTreeNode*) "gtk_ctree_node_is_visible")
   (macro gtk_ctree_set_indent::void (GtkCTree* gint) "gtk_ctree_set_indent")
   (macro gtk_ctree_set_spacing::void (GtkCTree* gint) "gtk_ctree_set_spacing")
   (macro gtk_ctree_set_show_stub::void (GtkCTree* gboolean) "gtk_ctree_set_show_stub")
   (macro gtk_ctree_set_line_style::void (GtkCTree* GtkCTreeLineStyle) "gtk_ctree_set_line_style")
   (macro gtk_ctree_set_expander_style::void (GtkCTree* GtkCTreeExpanderStyle) "gtk_ctree_set_expander_style")
   (macro gtk_ctree_set_drag_compare_func::void (GtkCTree* GtkCTreeCompareDragFunc) "gtk_ctree_set_drag_compare_func")
   (macro gtk_ctree_sort_node::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_sort_node")
   (macro gtk_ctree_sort_recursive::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_sort_recursive")
   (macro gtk_ctree_node_get_type::GType () "gtk_ctree_node_get_type")
   (macro gtk_drawing_area_get_type::GType () "gtk_drawing_area_get_type")
   (macro gtk_drawing_area_new::GtkWidget* () "gtk_drawing_area_new")
   (macro gtk_drawing_area_size::void (GtkDrawingArea* gint gint) "gtk_drawing_area_size")
   (macro gtk_curve_get_type::GType () "gtk_curve_get_type")
   (macro gtk_curve_new::GtkWidget* () "gtk_curve_new")
   (macro gtk_curve_reset::void (GtkCurve*) "gtk_curve_reset")
   (macro gtk_curve_set_gamma::void (GtkCurve* gfloat) "gtk_curve_set_gamma")
   (macro gtk_curve_set_range::void (GtkCurve* gfloat gfloat gfloat gfloat) "gtk_curve_set_range")
   (macro gtk_curve_get_vector::void (GtkCurve* int gfloat*) "gtk_curve_get_vector")
   (macro gtk_curve_set_vector::void (GtkCurve* int gfloat*) "gtk_curve_set_vector")
   (macro gtk_curve_set_curve_type::void (GtkCurve* GtkCurveType) "gtk_curve_set_curve_type")
   (macro gtk_editable_get_type::GType () "gtk_editable_get_type")
   (macro gtk_editable_select_region::void (GtkEditable* gint gint) "gtk_editable_select_region")
   (macro gtk_editable_get_selection_bounds::gboolean (GtkEditable* gint* gint*) "gtk_editable_get_selection_bounds")
   (macro gtk_editable_insert_text::void (GtkEditable* gchar* gint gint*) "gtk_editable_insert_text")
   (macro gtk_editable_delete_text::void (GtkEditable* gint gint) "gtk_editable_delete_text")
   (macro gtk_editable_get_chars::gchar* (GtkEditable* gint gint) "gtk_editable_get_chars")
   (macro gtk_editable_cut_clipboard::void (GtkEditable*) "gtk_editable_cut_clipboard")
   (macro gtk_editable_copy_clipboard::void (GtkEditable*) "gtk_editable_copy_clipboard")
   (macro gtk_editable_paste_clipboard::void (GtkEditable*) "gtk_editable_paste_clipboard")
   (macro gtk_editable_delete_selection::void (GtkEditable*) "gtk_editable_delete_selection")
   (macro gtk_editable_set_position::void (GtkEditable* gint) "gtk_editable_set_position")
   (macro gtk_editable_get_position::gint (GtkEditable*) "gtk_editable_get_position")
   (macro gtk_editable_set_editable::void (GtkEditable* gboolean) "gtk_editable_set_editable")
   (macro gtk_editable_get_editable::gboolean (GtkEditable*) "gtk_editable_get_editable")
   (macro gtk_im_context_get_type::GType () "gtk_im_context_get_type")
   (macro gtk_im_context_set_client_window::void (GtkIMContext* GdkWindow*) "gtk_im_context_set_client_window")
   (macro gtk_im_context_get_preedit_string::void (GtkIMContext* gchar** PangoAttrList** gint*) "gtk_im_context_get_preedit_string")
   (macro gtk_im_context_filter_keypress::gboolean (GtkIMContext* GdkEventKey*) "gtk_im_context_filter_keypress")
   (macro gtk_im_context_focus_in::void (GtkIMContext*) "gtk_im_context_focus_in")
   (macro gtk_im_context_focus_out::void (GtkIMContext*) "gtk_im_context_focus_out")
   (macro gtk_im_context_reset::void (GtkIMContext*) "gtk_im_context_reset")
   (macro gtk_im_context_set_cursor_location::void (GtkIMContext* GdkRectangle*) "gtk_im_context_set_cursor_location")
   (macro gtk_im_context_set_use_preedit::void (GtkIMContext* gboolean) "gtk_im_context_set_use_preedit")
   (macro gtk_im_context_set_surrounding::void (GtkIMContext* gchar* gint gint) "gtk_im_context_set_surrounding")
   (macro gtk_im_context_get_surrounding::gboolean (GtkIMContext* gchar** gint*) "gtk_im_context_get_surrounding")
   (macro gtk_im_context_delete_surrounding::gboolean (GtkIMContext* gint gint) "gtk_im_context_delete_surrounding")
   (macro gtk_list_store_get_type::GType () "gtk_list_store_get_type")
   (macro gtk_list_store_new::GtkListStore* (gint . gint) "gtk_list_store_new")
   (macro gtk_list_store_newv::GtkListStore* (gint GType*) "gtk_list_store_newv")
   (macro gtk_list_store_set_column_types::void (GtkListStore* gint GType*) "gtk_list_store_set_column_types")
   (macro gtk_list_store_set_value::void (GtkListStore* GtkTreeIter* gint GValue*) "gtk_list_store_set_value")
   (macro gtk_list_store_set::void (GtkListStore* GtkTreeIter* . GtkTreeIter*) "gtk_list_store_set")
   (macro gtk_list_store_remove::gboolean (GtkListStore* GtkTreeIter*) "gtk_list_store_remove")
   (macro gtk_list_store_insert::void (GtkListStore* GtkTreeIter* gint) "gtk_list_store_insert")
   (macro gtk_list_store_insert_before::void (GtkListStore* GtkTreeIter* GtkTreeIter*) "gtk_list_store_insert_before")
   (macro gtk_list_store_insert_after::void (GtkListStore* GtkTreeIter* GtkTreeIter*) "gtk_list_store_insert_after")
   (macro gtk_list_store_insert_with_values::void (GtkListStore* GtkTreeIter* gint . gint) "gtk_list_store_insert_with_values")
   (macro gtk_list_store_insert_with_valuesv::void (GtkListStore* GtkTreeIter* gint gint* GValue* gint) "gtk_list_store_insert_with_valuesv")
   (macro gtk_list_store_prepend::void (GtkListStore* GtkTreeIter*) "gtk_list_store_prepend")
   (macro gtk_list_store_append::void (GtkListStore* GtkTreeIter*) "gtk_list_store_append")
   (macro gtk_list_store_clear::void (GtkListStore*) "gtk_list_store_clear")
   (macro gtk_list_store_iter_is_valid::gboolean (GtkListStore* GtkTreeIter*) "gtk_list_store_iter_is_valid")
   (macro gtk_list_store_reorder::void (GtkListStore* gint*) "gtk_list_store_reorder")
   (macro gtk_list_store_swap::void (GtkListStore* GtkTreeIter* GtkTreeIter*) "gtk_list_store_swap")
   (macro gtk_list_store_move_after::void (GtkListStore* GtkTreeIter* GtkTreeIter*) "gtk_list_store_move_after")
   (macro gtk_list_store_move_before::void (GtkListStore* GtkTreeIter* GtkTreeIter*) "gtk_list_store_move_before")
   (macro gtk_tree_model_filter_get_type::GType () "gtk_tree_model_filter_get_type")
   (macro gtk_tree_model_filter_new::GtkTreeModel* (GtkTreeModel* GtkTreePath*) "gtk_tree_model_filter_new")
   (macro gtk_tree_model_filter_set_visible_func::void (GtkTreeModelFilter* GtkTreeModelFilterVisibleFunc gpointer GtkDestroyNotify) "gtk_tree_model_filter_set_visible_func")
   (macro gtk_tree_model_filter_set_modify_func::void (GtkTreeModelFilter* gint GType* GtkTreeModelFilterModifyFunc gpointer GtkDestroyNotify) "gtk_tree_model_filter_set_modify_func")
   (macro gtk_tree_model_filter_set_visible_column::void (GtkTreeModelFilter* gint) "gtk_tree_model_filter_set_visible_column")
   (macro gtk_tree_model_filter_get_model::GtkTreeModel* (GtkTreeModelFilter*) "gtk_tree_model_filter_get_model")
   (macro gtk_tree_model_filter_convert_child_iter_to_iter::void (GtkTreeModelFilter* GtkTreeIter* GtkTreeIter*) "gtk_tree_model_filter_convert_child_iter_to_iter")
   (macro gtk_tree_model_filter_convert_iter_to_child_iter::void (GtkTreeModelFilter* GtkTreeIter* GtkTreeIter*) "gtk_tree_model_filter_convert_iter_to_child_iter")
   (macro gtk_tree_model_filter_convert_child_path_to_path::GtkTreePath* (GtkTreeModelFilter* GtkTreePath*) "gtk_tree_model_filter_convert_child_path_to_path")
   (macro gtk_tree_model_filter_convert_path_to_child_path::GtkTreePath* (GtkTreeModelFilter* GtkTreePath*) "gtk_tree_model_filter_convert_path_to_child_path")
   (macro gtk_tree_model_filter_refilter::void (GtkTreeModelFilter*) "gtk_tree_model_filter_refilter")
   (macro gtk_tree_model_filter_clear_cache::void (GtkTreeModelFilter*) "gtk_tree_model_filter_clear_cache")
   (macro gtk_entry_completion_get_type::GType () "gtk_entry_completion_get_type")
   (macro gtk_entry_completion_new::GtkEntryCompletion* () "gtk_entry_completion_new")
   (macro gtk_entry_completion_get_entry::GtkWidget* (GtkEntryCompletion*) "gtk_entry_completion_get_entry")
   (macro gtk_entry_completion_set_model::void (GtkEntryCompletion* GtkTreeModel*) "gtk_entry_completion_set_model")
   (macro gtk_entry_completion_get_model::GtkTreeModel* (GtkEntryCompletion*) "gtk_entry_completion_get_model")
   (macro gtk_entry_completion_set_match_func::void (GtkEntryCompletion* GtkEntryCompletionMatchFunc gpointer GDestroyNotify) "gtk_entry_completion_set_match_func")
   (macro gtk_entry_completion_set_minimum_key_length::void (GtkEntryCompletion* gint) "gtk_entry_completion_set_minimum_key_length")
   (macro gtk_entry_completion_get_minimum_key_length::gint (GtkEntryCompletion*) "gtk_entry_completion_get_minimum_key_length")
   (macro gtk_entry_completion_complete::void (GtkEntryCompletion*) "gtk_entry_completion_complete")
   (macro gtk_entry_completion_insert_prefix::void (GtkEntryCompletion*) "gtk_entry_completion_insert_prefix")
   (macro gtk_entry_completion_insert_action_text::void (GtkEntryCompletion* gint gchar*) "gtk_entry_completion_insert_action_text")
   (macro gtk_entry_completion_insert_action_markup::void (GtkEntryCompletion* gint gchar*) "gtk_entry_completion_insert_action_markup")
   (macro gtk_entry_completion_delete_action::void (GtkEntryCompletion* gint) "gtk_entry_completion_delete_action")
   (macro gtk_entry_completion_set_inline_completion::void (GtkEntryCompletion* gboolean) "gtk_entry_completion_set_inline_completion")
   (macro gtk_entry_completion_get_inline_completion::gboolean (GtkEntryCompletion*) "gtk_entry_completion_get_inline_completion")
   (macro gtk_entry_completion_set_popup_completion::void (GtkEntryCompletion* gboolean) "gtk_entry_completion_set_popup_completion")
   (macro gtk_entry_completion_get_popup_completion::gboolean (GtkEntryCompletion*) "gtk_entry_completion_get_popup_completion")
   (macro gtk_entry_completion_set_text_column::void (GtkEntryCompletion* gint) "gtk_entry_completion_set_text_column")
   (macro gtk_entry_completion_get_text_column::gint (GtkEntryCompletion*) "gtk_entry_completion_get_text_column")
   (macro gtk_entry_get_type::GType () "gtk_entry_get_type")
   (macro gtk_entry_new::GtkWidget* () "gtk_entry_new")
   (macro gtk_entry_set_visibility::void (GtkEntry* gboolean) "gtk_entry_set_visibility")
   (macro gtk_entry_get_visibility::gboolean (GtkEntry*) "gtk_entry_get_visibility")
   (macro gtk_entry_set_invisible_char::void (GtkEntry* gunichar) "gtk_entry_set_invisible_char")
   (macro gtk_entry_get_invisible_char::gunichar (GtkEntry*) "gtk_entry_get_invisible_char")
   (macro gtk_entry_set_has_frame::void (GtkEntry* gboolean) "gtk_entry_set_has_frame")
   (macro gtk_entry_get_has_frame::gboolean (GtkEntry*) "gtk_entry_get_has_frame")
   (macro gtk_entry_set_max_length::void (GtkEntry* gint) "gtk_entry_set_max_length")
   (macro gtk_entry_get_max_length::gint (GtkEntry*) "gtk_entry_get_max_length")
   (macro gtk_entry_set_activates_default::void (GtkEntry* gboolean) "gtk_entry_set_activates_default")
   (macro gtk_entry_get_activates_default::gboolean (GtkEntry*) "gtk_entry_get_activates_default")
   (macro gtk_entry_set_width_chars::void (GtkEntry* gint) "gtk_entry_set_width_chars")
   (macro gtk_entry_get_width_chars::gint (GtkEntry*) "gtk_entry_get_width_chars")
   (macro gtk_entry_set_text::void (GtkEntry* gchar*) "gtk_entry_set_text")
   (macro gtk_entry_get_text::gchar* (GtkEntry*) "gtk_entry_get_text")
   (macro gtk_entry_get_layout::PangoLayout* (GtkEntry*) "gtk_entry_get_layout")
   (macro gtk_entry_get_layout_offsets::void (GtkEntry* gint* gint*) "gtk_entry_get_layout_offsets")
   (macro gtk_entry_set_alignment::void (GtkEntry* gfloat) "gtk_entry_set_alignment")
   (macro gtk_entry_get_alignment::gfloat (GtkEntry*) "gtk_entry_get_alignment")
   (macro gtk_entry_set_completion::void (GtkEntry* GtkEntryCompletion*) "gtk_entry_set_completion")
   (macro gtk_entry_get_completion::GtkEntryCompletion* (GtkEntry*) "gtk_entry_get_completion")
   (macro gtk_entry_layout_index_to_text_index::gint (GtkEntry* gint) "gtk_entry_layout_index_to_text_index")
   (macro gtk_entry_text_index_to_layout_index::gint (GtkEntry* gint) "gtk_entry_text_index_to_layout_index")
   (macro gtk_entry_new_with_max_length::GtkWidget* (gint) "gtk_entry_new_with_max_length")
   (macro gtk_entry_append_text::void (GtkEntry* gchar*) "gtk_entry_append_text")
   (macro gtk_entry_prepend_text::void (GtkEntry* gchar*) "gtk_entry_prepend_text")
   (macro gtk_entry_set_position::void (GtkEntry* gint) "gtk_entry_set_position")
   (macro gtk_entry_select_region::void (GtkEntry* gint gint) "gtk_entry_select_region")
   (macro gtk_entry_set_editable::void (GtkEntry* gboolean) "gtk_entry_set_editable")
   (macro _gtk_entry_get_borders::void (GtkEntry* gint* gint*) "_gtk_entry_get_borders")
   (macro gtk_event_box_get_type::GType () "gtk_event_box_get_type")
   (macro gtk_event_box_new::GtkWidget* () "gtk_event_box_new")
   (macro gtk_event_box_get_visible_window::gboolean (GtkEventBox*) "gtk_event_box_get_visible_window")
   (macro gtk_event_box_set_visible_window::void (GtkEventBox* gboolean) "gtk_event_box_set_visible_window")
   (macro gtk_event_box_get_above_child::gboolean (GtkEventBox*) "gtk_event_box_get_above_child")
   (macro gtk_event_box_set_above_child::void (GtkEventBox* gboolean) "gtk_event_box_set_above_child")
   (macro gtk_expander_get_type::GType () "gtk_expander_get_type")
   (macro gtk_expander_new::GtkWidget* (gchar*) "gtk_expander_new")
   (macro gtk_expander_new_with_mnemonic::GtkWidget* (gchar*) "gtk_expander_new_with_mnemonic")
   (macro gtk_expander_set_expanded::void (GtkExpander* gboolean) "gtk_expander_set_expanded")
   (macro gtk_expander_get_expanded::gboolean (GtkExpander*) "gtk_expander_get_expanded")
   (macro gtk_expander_set_spacing::void (GtkExpander* gint) "gtk_expander_set_spacing")
   (macro gtk_expander_get_spacing::gint (GtkExpander*) "gtk_expander_get_spacing")
   (macro gtk_expander_set_label::void (GtkExpander* gchar*) "gtk_expander_set_label")
   (macro gtk_expander_get_label::gchar* (GtkExpander*) "gtk_expander_get_label")
   (macro gtk_expander_set_use_underline::void (GtkExpander* gboolean) "gtk_expander_set_use_underline")
   (macro gtk_expander_get_use_underline::gboolean (GtkExpander*) "gtk_expander_get_use_underline")
   (macro gtk_expander_set_use_markup::void (GtkExpander* gboolean) "gtk_expander_set_use_markup")
   (macro gtk_expander_get_use_markup::gboolean (GtkExpander*) "gtk_expander_get_use_markup")
   (macro gtk_expander_set_label_widget::void (GtkExpander* GtkWidget*) "gtk_expander_set_label_widget")
   (macro gtk_expander_get_label_widget::GtkWidget* (GtkExpander*) "gtk_expander_get_label_widget")
   (macro gtk_file_selection_get_type::GType () "gtk_file_selection_get_type")
   (macro gtk_file_selection_new::GtkWidget* (gchar*) "gtk_file_selection_new")
   (macro gtk_file_selection_set_filename::void (GtkFileSelection* gchar*) "gtk_file_selection_set_filename")
   (macro gtk_file_selection_get_filename::gchar* (GtkFileSelection*) "gtk_file_selection_get_filename")
   (macro gtk_file_selection_complete::void (GtkFileSelection* gchar*) "gtk_file_selection_complete")
   (macro gtk_file_selection_show_fileop_buttons::void (GtkFileSelection*) "gtk_file_selection_show_fileop_buttons")
   (macro gtk_file_selection_hide_fileop_buttons::void (GtkFileSelection*) "gtk_file_selection_hide_fileop_buttons")
   (macro gtk_file_selection_get_selections::gchar** (GtkFileSelection*) "gtk_file_selection_get_selections")
   (macro gtk_file_selection_set_select_multiple::void (GtkFileSelection* gboolean) "gtk_file_selection_set_select_multiple")
   (macro gtk_file_selection_get_select_multiple::gboolean (GtkFileSelection*) "gtk_file_selection_get_select_multiple")
   (macro gtk_fixed_get_type::GType () "gtk_fixed_get_type")
   (macro gtk_fixed_new::GtkWidget* () "gtk_fixed_new")
   (macro gtk_fixed_put::void (GtkFixed* GtkWidget* gint gint) "gtk_fixed_put")
   (macro gtk_fixed_move::void (GtkFixed* GtkWidget* gint gint) "gtk_fixed_move")
   (macro gtk_fixed_set_has_window::void (GtkFixed* gboolean) "gtk_fixed_set_has_window")
   (macro gtk_fixed_get_has_window::gboolean (GtkFixed*) "gtk_fixed_get_has_window")
   (macro gtk_file_filter_get_type::GType () "gtk_file_filter_get_type")
   (macro gtk_file_filter_new::GtkFileFilter* () "gtk_file_filter_new")
   (macro gtk_file_filter_set_name::void (GtkFileFilter* gchar*) "gtk_file_filter_set_name")
   (macro gtk_file_filter_get_name::gchar* (GtkFileFilter*) "gtk_file_filter_get_name")
   (macro gtk_file_filter_add_mime_type::void (GtkFileFilter* gchar*) "gtk_file_filter_add_mime_type")
   (macro gtk_file_filter_add_pattern::void (GtkFileFilter* gchar*) "gtk_file_filter_add_pattern")
   (macro gtk_file_filter_add_pixbuf_formats::void (GtkFileFilter*) "gtk_file_filter_add_pixbuf_formats")
   (macro gtk_file_filter_add_custom::void (GtkFileFilter* GtkFileFilterFlags GtkFileFilterFunc gpointer GDestroyNotify) "gtk_file_filter_add_custom")
   (macro gtk_file_filter_get_needed::GtkFileFilterFlags (GtkFileFilter*) "gtk_file_filter_get_needed")
   (macro gtk_file_filter_filter::gboolean (GtkFileFilter* GtkFileFilterInfo*) "gtk_file_filter_filter")
   (macro gtk_file_chooser_get_type::GType () "gtk_file_chooser_get_type")
   (macro gtk_file_chooser_error_quark::GQuark () "gtk_file_chooser_error_quark")
   (macro gtk_file_chooser_set_action::void (GtkFileChooser* GtkFileChooserAction) "gtk_file_chooser_set_action")
   (macro gtk_file_chooser_get_action::GtkFileChooserAction (GtkFileChooser*) "gtk_file_chooser_get_action")
   (macro gtk_file_chooser_set_local_only::void (GtkFileChooser* gboolean) "gtk_file_chooser_set_local_only")
   (macro gtk_file_chooser_get_local_only::gboolean (GtkFileChooser*) "gtk_file_chooser_get_local_only")
   (macro gtk_file_chooser_set_select_multiple::void (GtkFileChooser* gboolean) "gtk_file_chooser_set_select_multiple")
   (macro gtk_file_chooser_get_select_multiple::gboolean (GtkFileChooser*) "gtk_file_chooser_get_select_multiple")
   (macro gtk_file_chooser_set_show_hidden::void (GtkFileChooser* gboolean) "gtk_file_chooser_set_show_hidden")
   (macro gtk_file_chooser_get_show_hidden::gboolean (GtkFileChooser*) "gtk_file_chooser_get_show_hidden")
   (macro gtk_file_chooser_set_current_name::void (GtkFileChooser* gchar*) "gtk_file_chooser_set_current_name")
   (macro gtk_file_chooser_get_filename::gchar* (GtkFileChooser*) "gtk_file_chooser_get_filename")
   (macro gtk_file_chooser_set_filename::gboolean (GtkFileChooser* string) "gtk_file_chooser_set_filename")
   (macro gtk_file_chooser_select_filename::gboolean (GtkFileChooser* string) "gtk_file_chooser_select_filename")
   (macro gtk_file_chooser_unselect_filename::void (GtkFileChooser* string) "gtk_file_chooser_unselect_filename")
   (macro gtk_file_chooser_select_all::void (GtkFileChooser*) "gtk_file_chooser_select_all")
   (macro gtk_file_chooser_unselect_all::void (GtkFileChooser*) "gtk_file_chooser_unselect_all")
   (macro gtk_file_chooser_get_filenames::GSList* (GtkFileChooser*) "gtk_file_chooser_get_filenames")
   (macro gtk_file_chooser_set_current_folder::gboolean (GtkFileChooser* gchar*) "gtk_file_chooser_set_current_folder")
   (macro gtk_file_chooser_get_current_folder::gchar* (GtkFileChooser*) "gtk_file_chooser_get_current_folder")
   (macro gtk_file_chooser_get_uri::gchar* (GtkFileChooser*) "gtk_file_chooser_get_uri")
   (macro gtk_file_chooser_set_uri::gboolean (GtkFileChooser* string) "gtk_file_chooser_set_uri")
   (macro gtk_file_chooser_select_uri::gboolean (GtkFileChooser* string) "gtk_file_chooser_select_uri")
   (macro gtk_file_chooser_unselect_uri::void (GtkFileChooser* string) "gtk_file_chooser_unselect_uri")
   (macro gtk_file_chooser_get_uris::GSList* (GtkFileChooser*) "gtk_file_chooser_get_uris")
   (macro gtk_file_chooser_set_current_folder_uri::gboolean (GtkFileChooser* gchar*) "gtk_file_chooser_set_current_folder_uri")
   (macro gtk_file_chooser_get_current_folder_uri::gchar* (GtkFileChooser*) "gtk_file_chooser_get_current_folder_uri")
   (macro gtk_file_chooser_set_preview_widget::void (GtkFileChooser* GtkWidget*) "gtk_file_chooser_set_preview_widget")
   (macro gtk_file_chooser_get_preview_widget::GtkWidget* (GtkFileChooser*) "gtk_file_chooser_get_preview_widget")
   (macro gtk_file_chooser_set_preview_widget_active::void (GtkFileChooser* gboolean) "gtk_file_chooser_set_preview_widget_active")
   (macro gtk_file_chooser_get_preview_widget_active::gboolean (GtkFileChooser*) "gtk_file_chooser_get_preview_widget_active")
   (macro gtk_file_chooser_set_use_preview_label::void (GtkFileChooser* gboolean) "gtk_file_chooser_set_use_preview_label")
   (macro gtk_file_chooser_get_use_preview_label::gboolean (GtkFileChooser*) "gtk_file_chooser_get_use_preview_label")
   (macro gtk_file_chooser_get_preview_filename::string (GtkFileChooser*) "gtk_file_chooser_get_preview_filename")
   (macro gtk_file_chooser_get_preview_uri::string (GtkFileChooser*) "gtk_file_chooser_get_preview_uri")
   (macro gtk_file_chooser_set_extra_widget::void (GtkFileChooser* GtkWidget*) "gtk_file_chooser_set_extra_widget")
   (macro gtk_file_chooser_get_extra_widget::GtkWidget* (GtkFileChooser*) "gtk_file_chooser_get_extra_widget")
   (macro gtk_file_chooser_add_filter::void (GtkFileChooser* GtkFileFilter*) "gtk_file_chooser_add_filter")
   (macro gtk_file_chooser_remove_filter::void (GtkFileChooser* GtkFileFilter*) "gtk_file_chooser_remove_filter")
   (macro gtk_file_chooser_list_filters::GSList* (GtkFileChooser*) "gtk_file_chooser_list_filters")
   (macro gtk_file_chooser_set_filter::void (GtkFileChooser* GtkFileFilter*) "gtk_file_chooser_set_filter")
   (macro gtk_file_chooser_get_filter::GtkFileFilter* (GtkFileChooser*) "gtk_file_chooser_get_filter")
   (macro gtk_file_chooser_add_shortcut_folder::gboolean (GtkFileChooser* string GError**) "gtk_file_chooser_add_shortcut_folder")
   (macro gtk_file_chooser_remove_shortcut_folder::gboolean (GtkFileChooser* string GError**) "gtk_file_chooser_remove_shortcut_folder")
   (macro gtk_file_chooser_list_shortcut_folders::GSList* (GtkFileChooser*) "gtk_file_chooser_list_shortcut_folders")
   (macro gtk_file_chooser_add_shortcut_folder_uri::gboolean (GtkFileChooser* string GError**) "gtk_file_chooser_add_shortcut_folder_uri")
   (macro gtk_file_chooser_remove_shortcut_folder_uri::gboolean (GtkFileChooser* string GError**) "gtk_file_chooser_remove_shortcut_folder_uri")
   (macro gtk_file_chooser_list_shortcut_folder_uris::GSList* (GtkFileChooser*) "gtk_file_chooser_list_shortcut_folder_uris")
   (macro gtk_file_chooser_button_get_type::GType () "gtk_file_chooser_button_get_type")
   (macro gtk_file_chooser_button_new::GtkWidget* (gchar* GtkFileChooserAction) "gtk_file_chooser_button_new")
   (macro gtk_file_chooser_button_new_with_backend::GtkWidget* (gchar* GtkFileChooserAction gchar*) "gtk_file_chooser_button_new_with_backend")
   (macro gtk_file_chooser_button_new_with_dialog::GtkWidget* (GtkWidget*) "gtk_file_chooser_button_new_with_dialog")
   (macro gtk_file_chooser_button_get_title::gchar* (GtkFileChooserButton*) "gtk_file_chooser_button_get_title")
   (macro gtk_file_chooser_button_set_title::void (GtkFileChooserButton* gchar*) "gtk_file_chooser_button_set_title")
   (macro gtk_file_chooser_button_get_width_chars::gint (GtkFileChooserButton*) "gtk_file_chooser_button_get_width_chars")
   (macro gtk_file_chooser_button_set_width_chars::void (GtkFileChooserButton* gint) "gtk_file_chooser_button_set_width_chars")
   (macro gtk_file_chooser_dialog_get_type::GType () "gtk_file_chooser_dialog_get_type")
   (macro gtk_file_chooser_dialog_new::GtkWidget* (gchar* GtkWindow* GtkFileChooserAction gchar* . gchar*) "gtk_file_chooser_dialog_new")
   (macro gtk_file_chooser_dialog_new_with_backend::GtkWidget* (gchar* GtkWindow* GtkFileChooserAction gchar* gchar* . gchar*) "gtk_file_chooser_dialog_new_with_backend")
   (macro gtk_file_chooser_widget_get_type::GType () "gtk_file_chooser_widget_get_type")
   (macro gtk_file_chooser_widget_new::GtkWidget* (GtkFileChooserAction) "gtk_file_chooser_widget_new")
   (macro gtk_file_chooser_widget_new_with_backend::GtkWidget* (GtkFileChooserAction gchar*) "gtk_file_chooser_widget_new_with_backend")
   (macro gtk_font_button_get_type::GType () "gtk_font_button_get_type")
   (macro gtk_font_button_new::GtkWidget* () "gtk_font_button_new")
   (macro gtk_font_button_new_with_font::GtkWidget* (gchar*) "gtk_font_button_new_with_font")
   (macro gtk_font_button_get_title::gchar* (GtkFontButton*) "gtk_font_button_get_title")
   (macro gtk_font_button_set_title::void (GtkFontButton* gchar*) "gtk_font_button_set_title")
   (macro gtk_font_button_get_use_font::gboolean (GtkFontButton*) "gtk_font_button_get_use_font")
   (macro gtk_font_button_set_use_font::void (GtkFontButton* gboolean) "gtk_font_button_set_use_font")
   (macro gtk_font_button_get_use_size::gboolean (GtkFontButton*) "gtk_font_button_get_use_size")
   (macro gtk_font_button_set_use_size::void (GtkFontButton* gboolean) "gtk_font_button_set_use_size")
   (macro gtk_font_button_get_font_name::gchar* (GtkFontButton*) "gtk_font_button_get_font_name")
   (macro gtk_font_button_set_font_name::gboolean (GtkFontButton* gchar*) "gtk_font_button_set_font_name")
   (macro gtk_font_button_get_show_style::gboolean (GtkFontButton*) "gtk_font_button_get_show_style")
   (macro gtk_font_button_set_show_style::void (GtkFontButton* gboolean) "gtk_font_button_set_show_style")
   (macro gtk_font_button_get_show_size::gboolean (GtkFontButton*) "gtk_font_button_get_show_size")
   (macro gtk_font_button_set_show_size::void (GtkFontButton* gboolean) "gtk_font_button_set_show_size")
   (macro gtk_font_selection_get_type::GType () "gtk_font_selection_get_type")
   (macro gtk_font_selection_new::GtkWidget* () "gtk_font_selection_new")
   (macro gtk_font_selection_get_font_name::gchar* (GtkFontSelection*) "gtk_font_selection_get_font_name")
   (macro gtk_font_selection_get_font::GdkFont* (GtkFontSelection*) "gtk_font_selection_get_font")
   (macro gtk_font_selection_set_font_name::gboolean (GtkFontSelection* gchar*) "gtk_font_selection_set_font_name")
   (macro gtk_font_selection_get_preview_text::gchar* (GtkFontSelection*) "gtk_font_selection_get_preview_text")
   (macro gtk_font_selection_set_preview_text::void (GtkFontSelection* gchar*) "gtk_font_selection_set_preview_text")
   (macro gtk_font_selection_dialog_get_type::GType () "gtk_font_selection_dialog_get_type")
   (macro gtk_font_selection_dialog_new::GtkWidget* (gchar*) "gtk_font_selection_dialog_new")
   (macro gtk_font_selection_dialog_get_font_name::gchar* (GtkFontSelectionDialog*) "gtk_font_selection_dialog_get_font_name")
   (macro gtk_font_selection_dialog_get_font::GdkFont* (GtkFontSelectionDialog*) "gtk_font_selection_dialog_get_font")
   (macro gtk_font_selection_dialog_set_font_name::gboolean (GtkFontSelectionDialog* gchar*) "gtk_font_selection_dialog_set_font_name")
   (macro gtk_font_selection_dialog_get_preview_text::gchar* (GtkFontSelectionDialog*) "gtk_font_selection_dialog_get_preview_text")
   (macro gtk_font_selection_dialog_set_preview_text::void (GtkFontSelectionDialog* gchar*) "gtk_font_selection_dialog_set_preview_text")
   (macro gtk_gamma_curve_get_type::GType () "gtk_gamma_curve_get_type")
   (macro gtk_gamma_curve_new::GtkWidget* () "gtk_gamma_curve_new")
   (macro gtk_gc_get::GdkGC* (gint GdkColormap* GdkGCValues* GdkGCValuesMask) "gtk_gc_get")
   (macro gtk_gc_release::void (GdkGC*) "gtk_gc_release")
   (macro gtk_handle_box_get_type::GType () "gtk_handle_box_get_type")
   (macro gtk_handle_box_new::GtkWidget* () "gtk_handle_box_new")
   (macro gtk_handle_box_set_shadow_type::void (GtkHandleBox* GtkShadowType) "gtk_handle_box_set_shadow_type")
   (macro gtk_handle_box_get_shadow_type::GtkShadowType (GtkHandleBox*) "gtk_handle_box_get_shadow_type")
   (macro gtk_handle_box_set_handle_position::void (GtkHandleBox* GtkPositionType) "gtk_handle_box_set_handle_position")
   (macro gtk_handle_box_get_handle_position::GtkPositionType (GtkHandleBox*) "gtk_handle_box_get_handle_position")
   (macro gtk_handle_box_set_snap_edge::void (GtkHandleBox* GtkPositionType) "gtk_handle_box_set_snap_edge")
   (macro gtk_handle_box_get_snap_edge::GtkPositionType (GtkHandleBox*) "gtk_handle_box_get_snap_edge")
   (macro gtk_hbutton_box_get_type::GType () "gtk_hbutton_box_get_type")
   (macro gtk_hbutton_box_new::GtkWidget* () "gtk_hbutton_box_new")
   (macro gtk_hbutton_box_get_spacing_default::gint () "gtk_hbutton_box_get_spacing_default")
   (macro gtk_hbutton_box_get_layout_default::GtkButtonBoxStyle () "gtk_hbutton_box_get_layout_default")
   (macro gtk_hbutton_box_set_spacing_default::void (gint) "gtk_hbutton_box_set_spacing_default")
   (macro gtk_hbutton_box_set_layout_default::void (GtkButtonBoxStyle) "gtk_hbutton_box_set_layout_default")
   (macro gtk_paned_get_type::GType () "gtk_paned_get_type")
   (macro gtk_paned_add1::void (GtkPaned* GtkWidget*) "gtk_paned_add1")
   (macro gtk_paned_add2::void (GtkPaned* GtkWidget*) "gtk_paned_add2")
   (macro gtk_paned_pack1::void (GtkPaned* GtkWidget* gboolean gboolean) "gtk_paned_pack1")
   (macro gtk_paned_pack2::void (GtkPaned* GtkWidget* gboolean gboolean) "gtk_paned_pack2")
   (macro gtk_paned_get_position::gint (GtkPaned*) "gtk_paned_get_position")
   (macro gtk_paned_set_position::void (GtkPaned* gint) "gtk_paned_set_position")
   (macro gtk_paned_get_child1::GtkWidget* (GtkPaned*) "gtk_paned_get_child1")
   (macro gtk_paned_get_child2::GtkWidget* (GtkPaned*) "gtk_paned_get_child2")
   (macro gtk_paned_compute_position::void (GtkPaned* gint gint gint) "gtk_paned_compute_position")
   (macro gtk_hpaned_get_type::GType () "gtk_hpaned_get_type")
   (macro gtk_hpaned_new::GtkWidget* () "gtk_hpaned_new")
   (macro gtk_ruler_get_type::GType () "gtk_ruler_get_type")
   (macro gtk_ruler_set_metric::void (GtkRuler* GtkMetricType) "gtk_ruler_set_metric")
   (macro gtk_ruler_set_range::void (GtkRuler* gdouble gdouble gdouble gdouble) "gtk_ruler_set_range")
   (macro gtk_ruler_draw_ticks::void (GtkRuler*) "gtk_ruler_draw_ticks")
   (macro gtk_ruler_draw_pos::void (GtkRuler*) "gtk_ruler_draw_pos")
   (macro gtk_ruler_get_metric::GtkMetricType (GtkRuler*) "gtk_ruler_get_metric")
   (macro gtk_ruler_get_range::void (GtkRuler* gdouble* gdouble* gdouble* gdouble*) "gtk_ruler_get_range")
   (macro gtk_hruler_get_type::GType () "gtk_hruler_get_type")
   (macro gtk_hruler_new::GtkWidget* () "gtk_hruler_new")
   (macro gtk_scale_get_type::GType () "gtk_scale_get_type")
   (macro gtk_scale_set_digits::void (GtkScale* gint) "gtk_scale_set_digits")
   (macro gtk_scale_get_digits::gint (GtkScale*) "gtk_scale_get_digits")
   (macro gtk_scale_set_draw_value::void (GtkScale* gboolean) "gtk_scale_set_draw_value")
   (macro gtk_scale_get_draw_value::gboolean (GtkScale*) "gtk_scale_get_draw_value")
   (macro gtk_scale_set_value_pos::void (GtkScale* GtkPositionType) "gtk_scale_set_value_pos")
   (macro gtk_scale_get_value_pos::GtkPositionType (GtkScale*) "gtk_scale_get_value_pos")
   (macro gtk_scale_get_layout::PangoLayout* (GtkScale*) "gtk_scale_get_layout")
   (macro gtk_scale_get_layout_offsets::void (GtkScale* gint* gint*) "gtk_scale_get_layout_offsets")
   (macro _gtk_scale_clear_layout::void (GtkScale*) "_gtk_scale_clear_layout")
   (macro _gtk_scale_get_value_size::void (GtkScale* gint* gint*) "_gtk_scale_get_value_size")
   (macro _gtk_scale_format_value::gchar* (GtkScale* gdouble) "_gtk_scale_format_value")
   (macro gtk_hscale_get_type::GType () "gtk_hscale_get_type")
   (macro gtk_hscale_new::GtkWidget* (GtkAdjustment*) "gtk_hscale_new")
   (macro gtk_hscale_new_with_range::GtkWidget* (gdouble gdouble gdouble) "gtk_hscale_new_with_range")
   (macro gtk_separator_get_type::GType () "gtk_separator_get_type")
   (macro gtk_hseparator_get_type::GType () "gtk_hseparator_get_type")
   (macro gtk_hseparator_new::GtkWidget* () "gtk_hseparator_new")
   (macro gtk_icon_factory_get_type::GType () "gtk_icon_factory_get_type")
   (macro gtk_icon_factory_new::GtkIconFactory* () "gtk_icon_factory_new")
   (macro gtk_icon_factory_add::void (GtkIconFactory* gchar* GtkIconSet*) "gtk_icon_factory_add")
   (macro gtk_icon_factory_lookup::GtkIconSet* (GtkIconFactory* gchar*) "gtk_icon_factory_lookup")
   (macro gtk_icon_factory_add_default::void (GtkIconFactory*) "gtk_icon_factory_add_default")
   (macro gtk_icon_factory_remove_default::void (GtkIconFactory*) "gtk_icon_factory_remove_default")
   (macro gtk_icon_factory_lookup_default::GtkIconSet* (gchar*) "gtk_icon_factory_lookup_default")
   (macro gtk_icon_size_lookup::gboolean (GtkIconSize gint* gint*) "gtk_icon_size_lookup")
   (macro gtk_icon_size_lookup_for_settings::gboolean (GtkSettings* GtkIconSize gint* gint*) "gtk_icon_size_lookup_for_settings")
   (macro gtk_icon_size_register::GtkIconSize (gchar* gint gint) "gtk_icon_size_register")
   (macro gtk_icon_size_register_alias::void (gchar* GtkIconSize) "gtk_icon_size_register_alias")
   (macro gtk_icon_size_from_name::GtkIconSize (gchar*) "gtk_icon_size_from_name")
   (macro gtk_icon_size_get_name::gchar* (GtkIconSize) "gtk_icon_size_get_name")
   (macro gtk_icon_set_get_type::GType () "gtk_icon_set_get_type")
   (macro gtk_icon_set_new::GtkIconSet* () "gtk_icon_set_new")
   (macro gtk_icon_set_new_from_pixbuf::GtkIconSet* (GdkPixbuf*) "gtk_icon_set_new_from_pixbuf")
   (macro gtk_icon_set_ref::GtkIconSet* (GtkIconSet*) "gtk_icon_set_ref")
   (macro gtk_icon_set_unref::void (GtkIconSet*) "gtk_icon_set_unref")
   (macro gtk_icon_set_copy::GtkIconSet* (GtkIconSet*) "gtk_icon_set_copy")
   (macro gtk_icon_set_render_icon::GdkPixbuf* (GtkIconSet* GtkStyle* GtkTextDirection GtkStateType GtkIconSize GtkWidget* string) "gtk_icon_set_render_icon")
   (macro gtk_icon_set_add_source::void (GtkIconSet* GtkIconSource*) "gtk_icon_set_add_source")
   (macro gtk_icon_set_get_sizes::void (GtkIconSet* GtkIconSize** gint*) "gtk_icon_set_get_sizes")
   (macro gtk_icon_source_get_type::GType () "gtk_icon_source_get_type")
   (macro gtk_icon_source_new::GtkIconSource* () "gtk_icon_source_new")
   (macro gtk_icon_source_copy::GtkIconSource* (GtkIconSource*) "gtk_icon_source_copy")
   (macro gtk_icon_source_free::void (GtkIconSource*) "gtk_icon_source_free")
   (macro gtk_icon_source_set_filename::void (GtkIconSource* gchar*) "gtk_icon_source_set_filename")
   (macro gtk_icon_source_set_icon_name::void (GtkIconSource* gchar*) "gtk_icon_source_set_icon_name")
   (macro gtk_icon_source_set_pixbuf::void (GtkIconSource* GdkPixbuf*) "gtk_icon_source_set_pixbuf")
   (macro gtk_icon_source_get_filename::gchar* (GtkIconSource*) "gtk_icon_source_get_filename")
   (macro gtk_icon_source_get_icon_name::gchar* (GtkIconSource*) "gtk_icon_source_get_icon_name")
   (macro gtk_icon_source_get_pixbuf::GdkPixbuf* (GtkIconSource*) "gtk_icon_source_get_pixbuf")
   (macro gtk_icon_source_set_direction_wildcarded::void (GtkIconSource* gboolean) "gtk_icon_source_set_direction_wildcarded")
   (macro gtk_icon_source_set_state_wildcarded::void (GtkIconSource* gboolean) "gtk_icon_source_set_state_wildcarded")
   (macro gtk_icon_source_set_size_wildcarded::void (GtkIconSource* gboolean) "gtk_icon_source_set_size_wildcarded")
   (macro gtk_icon_source_get_size_wildcarded::gboolean (GtkIconSource*) "gtk_icon_source_get_size_wildcarded")
   (macro gtk_icon_source_get_state_wildcarded::gboolean (GtkIconSource*) "gtk_icon_source_get_state_wildcarded")
   (macro gtk_icon_source_get_direction_wildcarded::gboolean (GtkIconSource*) "gtk_icon_source_get_direction_wildcarded")
   (macro gtk_icon_source_set_direction::void (GtkIconSource* GtkTextDirection) "gtk_icon_source_set_direction")
   (macro gtk_icon_source_set_state::void (GtkIconSource* GtkStateType) "gtk_icon_source_set_state")
   (macro gtk_icon_source_set_size::void (GtkIconSource* GtkIconSize) "gtk_icon_source_set_size")
   (macro gtk_icon_source_get_direction::GtkTextDirection (GtkIconSource*) "gtk_icon_source_get_direction")
   (macro gtk_icon_source_get_state::GtkStateType (GtkIconSource*) "gtk_icon_source_get_state")
   (macro gtk_icon_source_get_size::GtkIconSize (GtkIconSource*) "gtk_icon_source_get_size")
   (macro _gtk_icon_set_invalidate_caches::void () "_gtk_icon_set_invalidate_caches")
   (macro _gtk_icon_factory_list_ids::GSList* () "_gtk_icon_factory_list_ids")
   (macro _gtk_icon_factory_ensure_default_icons::void () "_gtk_icon_factory_ensure_default_icons")
   (macro gtk_icon_theme_error_quark::GQuark () "gtk_icon_theme_error_quark")
   (macro gtk_icon_theme_get_type::GType () "gtk_icon_theme_get_type")
   (macro gtk_icon_theme_new::GtkIconTheme* () "gtk_icon_theme_new")
   (macro gtk_icon_theme_get_default::GtkIconTheme* () "gtk_icon_theme_get_default")
   (macro gtk_icon_theme_get_for_screen::GtkIconTheme* (GdkScreen*) "gtk_icon_theme_get_for_screen")
   (macro gtk_icon_theme_set_screen::void (GtkIconTheme* GdkScreen*) "gtk_icon_theme_set_screen")
   (macro gtk_icon_theme_set_search_path::void (GtkIconTheme* gchar** gint) "gtk_icon_theme_set_search_path")
   (macro gtk_icon_theme_get_search_path::void (GtkIconTheme* gchar*** gint*) "gtk_icon_theme_get_search_path")
   (macro gtk_icon_theme_append_search_path::void (GtkIconTheme* gchar*) "gtk_icon_theme_append_search_path")
   (macro gtk_icon_theme_prepend_search_path::void (GtkIconTheme* gchar*) "gtk_icon_theme_prepend_search_path")
   (macro gtk_icon_theme_set_custom_theme::void (GtkIconTheme* gchar*) "gtk_icon_theme_set_custom_theme")
   (macro gtk_icon_theme_has_icon::gboolean (GtkIconTheme* gchar*) "gtk_icon_theme_has_icon")
   (macro gtk_icon_theme_get_icon_sizes::gint* (GtkIconTheme* gchar*) "gtk_icon_theme_get_icon_sizes")
   (macro gtk_icon_theme_lookup_icon::GtkIconInfo* (GtkIconTheme* gchar* gint GtkIconLookupFlags) "gtk_icon_theme_lookup_icon")
   (macro gtk_icon_theme_load_icon::GdkPixbuf* (GtkIconTheme* gchar* gint GtkIconLookupFlags GError**) "gtk_icon_theme_load_icon")
   (macro gtk_icon_theme_list_icons::GList* (GtkIconTheme* gchar*) "gtk_icon_theme_list_icons")
   (macro gtk_icon_theme_get_example_icon_name::string (GtkIconTheme*) "gtk_icon_theme_get_example_icon_name")
   (macro gtk_icon_theme_rescan_if_needed::gboolean (GtkIconTheme*) "gtk_icon_theme_rescan_if_needed")
   (macro gtk_icon_theme_add_builtin_icon::void (gchar* gint GdkPixbuf*) "gtk_icon_theme_add_builtin_icon")
   (macro gtk_icon_info_get_type::GType () "gtk_icon_info_get_type")
   (macro gtk_icon_info_copy::GtkIconInfo* (GtkIconInfo*) "gtk_icon_info_copy")
   (macro gtk_icon_info_free::void (GtkIconInfo*) "gtk_icon_info_free")
   (macro gtk_icon_info_get_base_size::gint (GtkIconInfo*) "gtk_icon_info_get_base_size")
   (macro gtk_icon_info_get_filename::gchar* (GtkIconInfo*) "gtk_icon_info_get_filename")
   (macro gtk_icon_info_get_builtin_pixbuf::GdkPixbuf* (GtkIconInfo*) "gtk_icon_info_get_builtin_pixbuf")
   (macro gtk_icon_info_load_icon::GdkPixbuf* (GtkIconInfo* GError**) "gtk_icon_info_load_icon")
   (macro gtk_icon_info_set_raw_coordinates::void (GtkIconInfo* gboolean) "gtk_icon_info_set_raw_coordinates")
   (macro gtk_icon_info_get_embedded_rect::gboolean (GtkIconInfo* GdkRectangle*) "gtk_icon_info_get_embedded_rect")
   (macro gtk_icon_info_get_attach_points::gboolean (GtkIconInfo* GdkPoint** gint*) "gtk_icon_info_get_attach_points")
   (macro gtk_icon_info_get_display_name::gchar* (GtkIconInfo*) "gtk_icon_info_get_display_name")
   (macro gtk_icon_view_get_type::GType () "gtk_icon_view_get_type")
   (macro gtk_icon_view_new::GtkWidget* () "gtk_icon_view_new")
   (macro gtk_icon_view_new_with_model::GtkWidget* (GtkTreeModel*) "gtk_icon_view_new_with_model")
   (macro gtk_icon_view_set_model::void (GtkIconView* GtkTreeModel*) "gtk_icon_view_set_model")
   (macro gtk_icon_view_get_model::GtkTreeModel* (GtkIconView*) "gtk_icon_view_get_model")
   (macro gtk_icon_view_set_text_column::void (GtkIconView* gint) "gtk_icon_view_set_text_column")
   (macro gtk_icon_view_get_text_column::gint (GtkIconView*) "gtk_icon_view_get_text_column")
   (macro gtk_icon_view_set_markup_column::void (GtkIconView* gint) "gtk_icon_view_set_markup_column")
   (macro gtk_icon_view_get_markup_column::gint (GtkIconView*) "gtk_icon_view_get_markup_column")
   (macro gtk_icon_view_set_pixbuf_column::void (GtkIconView* gint) "gtk_icon_view_set_pixbuf_column")
   (macro gtk_icon_view_get_pixbuf_column::gint (GtkIconView*) "gtk_icon_view_get_pixbuf_column")
   (macro gtk_icon_view_set_orientation::void (GtkIconView* GtkOrientation) "gtk_icon_view_set_orientation")
   (macro gtk_icon_view_get_orientation::GtkOrientation (GtkIconView*) "gtk_icon_view_get_orientation")
   (macro gtk_icon_view_set_columns::void (GtkIconView* gint) "gtk_icon_view_set_columns")
   (macro gtk_icon_view_get_columns::gint (GtkIconView*) "gtk_icon_view_get_columns")
   (macro gtk_icon_view_set_item_width::void (GtkIconView* gint) "gtk_icon_view_set_item_width")
   (macro gtk_icon_view_get_item_width::gint (GtkIconView*) "gtk_icon_view_get_item_width")
   (macro gtk_icon_view_set_spacing::void (GtkIconView* gint) "gtk_icon_view_set_spacing")
   (macro gtk_icon_view_get_spacing::gint (GtkIconView*) "gtk_icon_view_get_spacing")
   (macro gtk_icon_view_set_row_spacing::void (GtkIconView* gint) "gtk_icon_view_set_row_spacing")
   (macro gtk_icon_view_get_row_spacing::gint (GtkIconView*) "gtk_icon_view_get_row_spacing")
   (macro gtk_icon_view_set_column_spacing::void (GtkIconView* gint) "gtk_icon_view_set_column_spacing")
   (macro gtk_icon_view_get_column_spacing::gint (GtkIconView*) "gtk_icon_view_get_column_spacing")
   (macro gtk_icon_view_set_margin::void (GtkIconView* gint) "gtk_icon_view_set_margin")
   (macro gtk_icon_view_get_margin::gint (GtkIconView*) "gtk_icon_view_get_margin")
   (macro gtk_icon_view_get_path_at_pos::GtkTreePath* (GtkIconView* gint gint) "gtk_icon_view_get_path_at_pos")
   (macro gtk_icon_view_selected_foreach::void (GtkIconView* GtkIconViewForeachFunc gpointer) "gtk_icon_view_selected_foreach")
   (macro gtk_icon_view_set_selection_mode::void (GtkIconView* GtkSelectionMode) "gtk_icon_view_set_selection_mode")
   (macro gtk_icon_view_get_selection_mode::GtkSelectionMode (GtkIconView*) "gtk_icon_view_get_selection_mode")
   (macro gtk_icon_view_select_path::void (GtkIconView* GtkTreePath*) "gtk_icon_view_select_path")
   (macro gtk_icon_view_unselect_path::void (GtkIconView* GtkTreePath*) "gtk_icon_view_unselect_path")
   (macro gtk_icon_view_path_is_selected::gboolean (GtkIconView* GtkTreePath*) "gtk_icon_view_path_is_selected")
   (macro gtk_icon_view_get_selected_items::GList* (GtkIconView*) "gtk_icon_view_get_selected_items")
   (macro gtk_icon_view_select_all::void (GtkIconView*) "gtk_icon_view_select_all")
   (macro gtk_icon_view_unselect_all::void (GtkIconView*) "gtk_icon_view_unselect_all")
   (macro gtk_icon_view_item_activated::void (GtkIconView* GtkTreePath*) "gtk_icon_view_item_activated")
   (macro gtk_image_menu_item_get_type::GType () "gtk_image_menu_item_get_type")
   (macro gtk_image_menu_item_new::GtkWidget* () "gtk_image_menu_item_new")
   (macro gtk_image_menu_item_new_with_label::GtkWidget* (gchar*) "gtk_image_menu_item_new_with_label")
   (macro gtk_image_menu_item_new_with_mnemonic::GtkWidget* (gchar*) "gtk_image_menu_item_new_with_mnemonic")
   (macro gtk_image_menu_item_new_from_stock::GtkWidget* (gchar* GtkAccelGroup*) "gtk_image_menu_item_new_from_stock")
   (macro gtk_image_menu_item_set_image::void (GtkImageMenuItem* GtkWidget*) "gtk_image_menu_item_set_image")
   (macro gtk_image_menu_item_get_image::GtkWidget* (GtkImageMenuItem*) "gtk_image_menu_item_get_image")
   (macro gtk_im_context_simple_get_type::GType () "gtk_im_context_simple_get_type")
   (macro gtk_im_context_simple_new::GtkIMContext* () "gtk_im_context_simple_new")
   (macro gtk_im_context_simple_add_table::void (GtkIMContextSimple* guint16* gint gint) "gtk_im_context_simple_add_table")
   (macro gtk_im_multicontext_get_type::GType () "gtk_im_multicontext_get_type")
   (macro gtk_im_multicontext_new::GtkIMContext* () "gtk_im_multicontext_new")
   (macro gtk_im_multicontext_append_menuitems::void (GtkIMMulticontext* GtkMenuShell*) "gtk_im_multicontext_append_menuitems")
   (macro gtk_input_dialog_get_type::GType () "gtk_input_dialog_get_type")
   (macro gtk_input_dialog_new::GtkWidget* () "gtk_input_dialog_new")
   (macro gtk_invisible_get_type::GType () "gtk_invisible_get_type")
   (macro gtk_invisible_new::GtkWidget* () "gtk_invisible_new")
   (macro gtk_invisible_new_for_screen::GtkWidget* (GdkScreen*) "gtk_invisible_new_for_screen")
   (macro gtk_invisible_set_screen::void (GtkInvisible* GdkScreen*) "gtk_invisible_set_screen")
   (macro gtk_invisible_get_screen::GdkScreen* (GtkInvisible*) "gtk_invisible_get_screen")
   (macro gtk_layout_get_type::GType () "gtk_layout_get_type")
   (macro gtk_layout_new::GtkWidget* (GtkAdjustment* GtkAdjustment*) "gtk_layout_new")
   (macro gtk_layout_put::void (GtkLayout* GtkWidget* gint gint) "gtk_layout_put")
   (macro gtk_layout_move::void (GtkLayout* GtkWidget* gint gint) "gtk_layout_move")
   (macro gtk_layout_set_size::void (GtkLayout* guint guint) "gtk_layout_set_size")
   (macro gtk_layout_get_size::void (GtkLayout* guint* guint*) "gtk_layout_get_size")
   (macro gtk_layout_get_hadjustment::GtkAdjustment* (GtkLayout*) "gtk_layout_get_hadjustment")
   (macro gtk_layout_get_vadjustment::GtkAdjustment* (GtkLayout*) "gtk_layout_get_vadjustment")
   (macro gtk_layout_set_hadjustment::void (GtkLayout* GtkAdjustment*) "gtk_layout_set_hadjustment")
   (macro gtk_layout_set_vadjustment::void (GtkLayout* GtkAdjustment*) "gtk_layout_set_vadjustment")
   (macro gtk_layout_freeze::void (GtkLayout*) "gtk_layout_freeze")
   (macro gtk_layout_thaw::void (GtkLayout*) "gtk_layout_thaw")
   (macro gtk_list_item_get_type::GtkType () "gtk_list_item_get_type")
   (macro gtk_list_item_new::GtkWidget* () "gtk_list_item_new")
   (macro gtk_list_item_new_with_label::GtkWidget* (gchar*) "gtk_list_item_new_with_label")
   (macro gtk_list_item_select::void (GtkListItem*) "gtk_list_item_select")
   (macro gtk_list_item_deselect::void (GtkListItem*) "gtk_list_item_deselect")
   (macro gtk_list_get_type::GtkType () "gtk_list_get_type")
   (macro gtk_list_new::GtkWidget* () "gtk_list_new")
   (macro gtk_list_insert_items::void (GtkList* GList* gint) "gtk_list_insert_items")
   (macro gtk_list_append_items::void (GtkList* GList*) "gtk_list_append_items")
   (macro gtk_list_prepend_items::void (GtkList* GList*) "gtk_list_prepend_items")
   (macro gtk_list_remove_items::void (GtkList* GList*) "gtk_list_remove_items")
   (macro gtk_list_remove_items_no_unref::void (GtkList* GList*) "gtk_list_remove_items_no_unref")
   (macro gtk_list_clear_items::void (GtkList* gint gint) "gtk_list_clear_items")
   (macro gtk_list_select_item::void (GtkList* gint) "gtk_list_select_item")
   (macro gtk_list_unselect_item::void (GtkList* gint) "gtk_list_unselect_item")
   (macro gtk_list_select_child::void (GtkList* GtkWidget*) "gtk_list_select_child")
   (macro gtk_list_unselect_child::void (GtkList* GtkWidget*) "gtk_list_unselect_child")
   (macro gtk_list_child_position::gint (GtkList* GtkWidget*) "gtk_list_child_position")
   (macro gtk_list_set_selection_mode::void (GtkList* GtkSelectionMode) "gtk_list_set_selection_mode")
   (macro gtk_list_extend_selection::void (GtkList* GtkScrollType gfloat gboolean) "gtk_list_extend_selection")
   (macro gtk_list_start_selection::void (GtkList*) "gtk_list_start_selection")
   (macro gtk_list_end_selection::void (GtkList*) "gtk_list_end_selection")
   (macro gtk_list_select_all::void (GtkList*) "gtk_list_select_all")
   (macro gtk_list_unselect_all::void (GtkList*) "gtk_list_unselect_all")
   (macro gtk_list_scroll_horizontal::void (GtkList* GtkScrollType gfloat) "gtk_list_scroll_horizontal")
   (macro gtk_list_scroll_vertical::void (GtkList* GtkScrollType gfloat) "gtk_list_scroll_vertical")
   (macro gtk_list_toggle_add_mode::void (GtkList*) "gtk_list_toggle_add_mode")
   (macro gtk_list_toggle_focus_row::void (GtkList*) "gtk_list_toggle_focus_row")
   (macro gtk_list_toggle_row::void (GtkList* GtkWidget*) "gtk_list_toggle_row")
   (macro gtk_list_undo_selection::void (GtkList*) "gtk_list_undo_selection")
   (macro gtk_list_end_drag_selection::void (GtkList*) "gtk_list_end_drag_selection")
   (macro gtk_check_version::gchar* (guint guint guint) "gtk_check_version")
   (macro gtk_parse_args::gboolean (int* string**) "gtk_parse_args")
   (macro gtk_init::void (int* string**) "gtk_init")
   (macro gtk_init_check::gboolean (int* string**) "gtk_init_check")
   (macro gtk_init_with_args::gboolean (int* string** string GOptionEntry* string GError**) "gtk_init_with_args")
   (macro gtk_get_option_group::GOptionGroup* (gboolean) "gtk_get_option_group")
   (macro gtk_exit::void (gint) "gtk_exit")
   (macro gtk_disable_setlocale::void () "gtk_disable_setlocale")
   (macro gtk_set_locale::gchar* () "gtk_set_locale")
   (macro gtk_get_default_language::PangoLanguage* () "gtk_get_default_language")
   (macro gtk_events_pending::gboolean () "gtk_events_pending")
   (macro gtk_main_do_event::void (GdkEvent*) "gtk_main_do_event")
   (macro gtk_main::void () "gtk_main")
   (macro gtk_main_level::guint () "gtk_main_level")
   (macro gtk_main_quit::void () "gtk_main_quit")
   (macro gtk_main_iteration::gboolean () "gtk_main_iteration")
   (macro gtk_main_iteration_do::gboolean (gboolean) "gtk_main_iteration_do")
   (macro gtk_true::gboolean () "gtk_true")
   (macro gtk_false::gboolean () "gtk_false")
   (macro gtk_grab_add::void (GtkWidget*) "gtk_grab_add")
   (macro gtk_grab_get_current::GtkWidget* () "gtk_grab_get_current")
   (macro gtk_grab_remove::void (GtkWidget*) "gtk_grab_remove")
   (macro gtk_init_add::void (GtkFunction gpointer) "gtk_init_add")
   (macro gtk_quit_add_destroy::void (guint GtkObject*) "gtk_quit_add_destroy")
   (macro gtk_quit_add::guint (guint GtkFunction gpointer) "gtk_quit_add")
   (macro gtk_quit_add_full::guint (guint GtkFunction GtkCallbackMarshal gpointer GtkDestroyNotify) "gtk_quit_add_full")
   (macro gtk_quit_remove::void (guint) "gtk_quit_remove")
   (macro gtk_quit_remove_by_data::void (gpointer) "gtk_quit_remove_by_data")
   (macro gtk_timeout_add::guint (guint32 GtkFunction gpointer) "gtk_timeout_add")
   (macro gtk_timeout_add_full::guint (guint32 GtkFunction GtkCallbackMarshal gpointer GtkDestroyNotify) "gtk_timeout_add_full")
   (macro gtk_timeout_remove::void (guint) "gtk_timeout_remove")
   (macro gtk_idle_add::guint (GtkFunction gpointer) "gtk_idle_add")
   (macro gtk_idle_add_priority::guint (gint GtkFunction gpointer) "gtk_idle_add_priority")
   (macro gtk_idle_add_full::guint (gint GtkFunction GtkCallbackMarshal gpointer GtkDestroyNotify) "gtk_idle_add_full")
   (macro gtk_idle_remove::void (guint) "gtk_idle_remove")
   (macro gtk_idle_remove_by_data::void (gpointer) "gtk_idle_remove_by_data")
   (macro gtk_input_add_full::guint (gint GdkInputCondition GdkInputFunction GtkCallbackMarshal gpointer GtkDestroyNotify) "gtk_input_add_full")
   (macro gtk_input_remove::void (guint) "gtk_input_remove")
   (macro gtk_key_snooper_install::guint (GtkKeySnoopFunc gpointer) "gtk_key_snooper_install")
   (macro gtk_key_snooper_remove::void (guint) "gtk_key_snooper_remove")
   (macro gtk_get_current_event::GdkEvent* () "gtk_get_current_event")
   (macro gtk_get_current_event_time::guint32 () "gtk_get_current_event_time")
   (macro gtk_get_current_event_state::gboolean (GdkModifierType*) "gtk_get_current_event_state")
   (macro gtk_get_event_widget::GtkWidget* (GdkEvent*) "gtk_get_event_widget")
   (macro gtk_propagate_event::void (GtkWidget* GdkEvent*) "gtk_propagate_event")
   (macro _gtk_boolean_handled_accumulator::gboolean (GSignalInvocationHint* GValue* GValue* gpointer) "_gtk_boolean_handled_accumulator")
   (macro _gtk_get_lc_ctype::gchar* () "_gtk_get_lc_ctype")
   (macro gtk_menu_bar_get_type::GType () "gtk_menu_bar_get_type")
   (macro gtk_menu_bar_new::GtkWidget* () "gtk_menu_bar_new")
   (macro _gtk_menu_bar_cycle_focus::void (GtkMenuBar* GtkDirectionType) "_gtk_menu_bar_cycle_focus")
   (macro gtk_tooltips_get_type::GType () "gtk_tooltips_get_type")
   (macro gtk_tooltips_new::GtkTooltips* () "gtk_tooltips_new")
   (macro gtk_tooltips_enable::void (GtkTooltips*) "gtk_tooltips_enable")
   (macro gtk_tooltips_disable::void (GtkTooltips*) "gtk_tooltips_disable")
   (macro gtk_tooltips_set_delay::void (GtkTooltips* guint) "gtk_tooltips_set_delay")
   (macro gtk_tooltips_set_tip::void (GtkTooltips* GtkWidget* gchar* gchar*) "gtk_tooltips_set_tip")
   (macro gtk_tooltips_data_get::GtkTooltipsData* (GtkWidget*) "gtk_tooltips_data_get")
   (macro gtk_tooltips_force_window::void (GtkTooltips*) "gtk_tooltips_force_window")
   (macro _gtk_tooltips_toggle_keyboard_mode::void (GtkWidget*) "_gtk_tooltips_toggle_keyboard_mode")
   (macro gtk_tooltips_get_info_from_tip_window::gboolean (GtkWindow* GtkTooltips** GtkWidget**) "gtk_tooltips_get_info_from_tip_window")
   (macro gtk_tool_item_get_type::GType () "gtk_tool_item_get_type")
   (macro gtk_tool_item_new::GtkToolItem* () "gtk_tool_item_new")
   (macro gtk_tool_item_set_homogeneous::void (GtkToolItem* gboolean) "gtk_tool_item_set_homogeneous")
   (macro gtk_tool_item_get_homogeneous::gboolean (GtkToolItem*) "gtk_tool_item_get_homogeneous")
   (macro gtk_tool_item_set_expand::void (GtkToolItem* gboolean) "gtk_tool_item_set_expand")
   (macro gtk_tool_item_get_expand::gboolean (GtkToolItem*) "gtk_tool_item_get_expand")
   (macro gtk_tool_item_set_tooltip::void (GtkToolItem* GtkTooltips* gchar* gchar*) "gtk_tool_item_set_tooltip")
   (macro gtk_tool_item_set_use_drag_window::void (GtkToolItem* gboolean) "gtk_tool_item_set_use_drag_window")
   (macro gtk_tool_item_get_use_drag_window::gboolean (GtkToolItem*) "gtk_tool_item_get_use_drag_window")
   (macro gtk_tool_item_set_visible_horizontal::void (GtkToolItem* gboolean) "gtk_tool_item_set_visible_horizontal")
   (macro gtk_tool_item_get_visible_horizontal::gboolean (GtkToolItem*) "gtk_tool_item_get_visible_horizontal")
   (macro gtk_tool_item_set_visible_vertical::void (GtkToolItem* gboolean) "gtk_tool_item_set_visible_vertical")
   (macro gtk_tool_item_get_visible_vertical::gboolean (GtkToolItem*) "gtk_tool_item_get_visible_vertical")
   (macro gtk_tool_item_get_is_important::gboolean (GtkToolItem*) "gtk_tool_item_get_is_important")
   (macro gtk_tool_item_set_is_important::void (GtkToolItem* gboolean) "gtk_tool_item_set_is_important")
   (macro gtk_tool_item_get_icon_size::GtkIconSize (GtkToolItem*) "gtk_tool_item_get_icon_size")
   (macro gtk_tool_item_get_orientation::GtkOrientation (GtkToolItem*) "gtk_tool_item_get_orientation")
   (macro gtk_tool_item_get_toolbar_style::GtkToolbarStyle (GtkToolItem*) "gtk_tool_item_get_toolbar_style")
   (macro gtk_tool_item_get_relief_style::GtkReliefStyle (GtkToolItem*) "gtk_tool_item_get_relief_style")
   (macro gtk_tool_item_retrieve_proxy_menu_item::GtkWidget* (GtkToolItem*) "gtk_tool_item_retrieve_proxy_menu_item")
   (macro gtk_tool_item_get_proxy_menu_item::GtkWidget* (GtkToolItem* gchar*) "gtk_tool_item_get_proxy_menu_item")
   (macro gtk_tool_item_set_proxy_menu_item::void (GtkToolItem* gchar* GtkWidget*) "gtk_tool_item_set_proxy_menu_item")
   (macro gtk_tool_item_rebuild_menu::void (GtkToolItem*) "gtk_tool_item_rebuild_menu")
   (macro _gtk_tool_item_toolbar_reconfigured::void (GtkToolItem*) "_gtk_tool_item_toolbar_reconfigured")
   (macro gtk_tool_button_get_type::GType () "gtk_tool_button_get_type")
   (macro gtk_tool_button_new::GtkToolItem* (GtkWidget* gchar*) "gtk_tool_button_new")
   (macro gtk_tool_button_new_from_stock::GtkToolItem* (gchar*) "gtk_tool_button_new_from_stock")
   (macro gtk_tool_button_set_label::void (GtkToolButton* gchar*) "gtk_tool_button_set_label")
   (macro gtk_tool_button_get_label::gchar* (GtkToolButton*) "gtk_tool_button_get_label")
   (macro gtk_tool_button_set_use_underline::void (GtkToolButton* gboolean) "gtk_tool_button_set_use_underline")
   (macro gtk_tool_button_get_use_underline::gboolean (GtkToolButton*) "gtk_tool_button_get_use_underline")
   (macro gtk_tool_button_set_stock_id::void (GtkToolButton* gchar*) "gtk_tool_button_set_stock_id")
   (macro gtk_tool_button_get_stock_id::gchar* (GtkToolButton*) "gtk_tool_button_get_stock_id")
   (macro gtk_tool_button_set_icon_widget::void (GtkToolButton* GtkWidget*) "gtk_tool_button_set_icon_widget")
   (macro gtk_tool_button_get_icon_widget::GtkWidget* (GtkToolButton*) "gtk_tool_button_get_icon_widget")
   (macro gtk_tool_button_set_label_widget::void (GtkToolButton* GtkWidget*) "gtk_tool_button_set_label_widget")
   (macro gtk_tool_button_get_label_widget::GtkWidget* (GtkToolButton*) "gtk_tool_button_get_label_widget")
   (macro _gtk_tool_button_get_button::GtkWidget* (GtkToolButton*) "_gtk_tool_button_get_button")
   (macro gtk_menu_tool_button_get_type::GType () "gtk_menu_tool_button_get_type")
   (macro gtk_menu_tool_button_new::GtkToolItem* (GtkWidget* gchar*) "gtk_menu_tool_button_new")
   (macro gtk_menu_tool_button_new_from_stock::GtkToolItem* (gchar*) "gtk_menu_tool_button_new_from_stock")
   (macro gtk_menu_tool_button_set_menu::void (GtkMenuToolButton* GtkWidget*) "gtk_menu_tool_button_set_menu")
   (macro gtk_menu_tool_button_get_menu::GtkWidget* (GtkMenuToolButton*) "gtk_menu_tool_button_get_menu")
   (macro gtk_menu_tool_button_set_arrow_tooltip::void (GtkMenuToolButton* GtkTooltips* gchar* gchar*) "gtk_menu_tool_button_set_arrow_tooltip")
   (macro gtk_message_dialog_get_type::GType () "gtk_message_dialog_get_type")
   (macro gtk_message_dialog_new::GtkWidget* (GtkWindow* GtkDialogFlags GtkMessageType GtkButtonsType gchar* . gchar*) "gtk_message_dialog_new")
   (macro gtk_message_dialog_new_with_markup::GtkWidget* (GtkWindow* GtkDialogFlags GtkMessageType GtkButtonsType gchar* . gchar*) "gtk_message_dialog_new_with_markup")
   (macro gtk_message_dialog_set_markup::void (GtkMessageDialog* gchar*) "gtk_message_dialog_set_markup")
   (macro gtk_message_dialog_format_secondary_text::void (GtkMessageDialog* gchar* . gchar*) "gtk_message_dialog_format_secondary_text")
   (macro gtk_message_dialog_format_secondary_markup::void (GtkMessageDialog* gchar* . gchar*) "gtk_message_dialog_format_secondary_markup")
   (macro _gtk_find_module::gchar* (gchar* gchar*) "_gtk_find_module")
   (macro _gtk_get_module_path::gchar** (gchar*) "_gtk_get_module_path")
   (macro _gtk_modules_init::void (gint* gchar*** gchar*) "_gtk_modules_init")
   (macro _gtk_modules_settings_changed::void (GtkSettings* gchar*) "_gtk_modules_settings_changed")
   (macro gtk_notebook_get_type::GType () "gtk_notebook_get_type")
   (macro gtk_notebook_new::GtkWidget* () "gtk_notebook_new")
   (macro gtk_notebook_append_page::gint (GtkNotebook* GtkWidget* GtkWidget*) "gtk_notebook_append_page")
   (macro gtk_notebook_append_page_menu::gint (GtkNotebook* GtkWidget* GtkWidget* GtkWidget*) "gtk_notebook_append_page_menu")
   (macro gtk_notebook_prepend_page::gint (GtkNotebook* GtkWidget* GtkWidget*) "gtk_notebook_prepend_page")
   (macro gtk_notebook_prepend_page_menu::gint (GtkNotebook* GtkWidget* GtkWidget* GtkWidget*) "gtk_notebook_prepend_page_menu")
   (macro gtk_notebook_insert_page::gint (GtkNotebook* GtkWidget* GtkWidget* gint) "gtk_notebook_insert_page")
   (macro gtk_notebook_insert_page_menu::gint (GtkNotebook* GtkWidget* GtkWidget* GtkWidget* gint) "gtk_notebook_insert_page_menu")
   (macro gtk_notebook_remove_page::void (GtkNotebook* gint) "gtk_notebook_remove_page")
   (macro gtk_notebook_get_current_page::gint (GtkNotebook*) "gtk_notebook_get_current_page")
   (macro gtk_notebook_get_nth_page::GtkWidget* (GtkNotebook* gint) "gtk_notebook_get_nth_page")
   (macro gtk_notebook_get_n_pages::gint (GtkNotebook*) "gtk_notebook_get_n_pages")
   (macro gtk_notebook_page_num::gint (GtkNotebook* GtkWidget*) "gtk_notebook_page_num")
   (macro gtk_notebook_set_current_page::void (GtkNotebook* gint) "gtk_notebook_set_current_page")
   (macro gtk_notebook_next_page::void (GtkNotebook*) "gtk_notebook_next_page")
   (macro gtk_notebook_prev_page::void (GtkNotebook*) "gtk_notebook_prev_page")
   (macro gtk_notebook_set_show_border::void (GtkNotebook* gboolean) "gtk_notebook_set_show_border")
   (macro gtk_notebook_get_show_border::gboolean (GtkNotebook*) "gtk_notebook_get_show_border")
   (macro gtk_notebook_set_show_tabs::void (GtkNotebook* gboolean) "gtk_notebook_set_show_tabs")
   (macro gtk_notebook_get_show_tabs::gboolean (GtkNotebook*) "gtk_notebook_get_show_tabs")
   (macro gtk_notebook_set_tab_pos::void (GtkNotebook* GtkPositionType) "gtk_notebook_set_tab_pos")
   (macro gtk_notebook_get_tab_pos::GtkPositionType (GtkNotebook*) "gtk_notebook_get_tab_pos")
   (macro gtk_notebook_set_homogeneous_tabs::void (GtkNotebook* gboolean) "gtk_notebook_set_homogeneous_tabs")
   (macro gtk_notebook_set_tab_border::void (GtkNotebook* guint) "gtk_notebook_set_tab_border")
   (macro gtk_notebook_set_tab_hborder::void (GtkNotebook* guint) "gtk_notebook_set_tab_hborder")
   (macro gtk_notebook_set_tab_vborder::void (GtkNotebook* guint) "gtk_notebook_set_tab_vborder")
   (macro gtk_notebook_set_scrollable::void (GtkNotebook* gboolean) "gtk_notebook_set_scrollable")
   (macro gtk_notebook_get_scrollable::gboolean (GtkNotebook*) "gtk_notebook_get_scrollable")
   (macro gtk_notebook_popup_enable::void (GtkNotebook*) "gtk_notebook_popup_enable")
   (macro gtk_notebook_popup_disable::void (GtkNotebook*) "gtk_notebook_popup_disable")
   (macro gtk_notebook_get_tab_label::GtkWidget* (GtkNotebook* GtkWidget*) "gtk_notebook_get_tab_label")
   (macro gtk_notebook_set_tab_label::void (GtkNotebook* GtkWidget* GtkWidget*) "gtk_notebook_set_tab_label")
   (macro gtk_notebook_set_tab_label_text::void (GtkNotebook* GtkWidget* gchar*) "gtk_notebook_set_tab_label_text")
   (macro gtk_notebook_get_tab_label_text::gchar* (GtkNotebook* GtkWidget*) "gtk_notebook_get_tab_label_text")
   (macro gtk_notebook_get_menu_label::GtkWidget* (GtkNotebook* GtkWidget*) "gtk_notebook_get_menu_label")
   (macro gtk_notebook_set_menu_label::void (GtkNotebook* GtkWidget* GtkWidget*) "gtk_notebook_set_menu_label")
   (macro gtk_notebook_set_menu_label_text::void (GtkNotebook* GtkWidget* gchar*) "gtk_notebook_set_menu_label_text")
   (macro gtk_notebook_get_menu_label_text::gchar* (GtkNotebook* GtkWidget*) "gtk_notebook_get_menu_label_text")
   (macro gtk_notebook_query_tab_label_packing::void (GtkNotebook* GtkWidget* gboolean* gboolean* GtkPackType*) "gtk_notebook_query_tab_label_packing")
   (macro gtk_notebook_set_tab_label_packing::void (GtkNotebook* GtkWidget* gboolean gboolean GtkPackType) "gtk_notebook_set_tab_label_packing")
   (macro gtk_notebook_reorder_child::void (GtkNotebook* GtkWidget* gint) "gtk_notebook_reorder_child")
   (macro gtk_old_editable_get_type::GtkType () "gtk_old_editable_get_type")
   (macro gtk_old_editable_claim_selection::void (GtkOldEditable* gboolean guint32) "gtk_old_editable_claim_selection")
   (macro gtk_old_editable_changed::void (GtkOldEditable*) "gtk_old_editable_changed")
   (macro gtk_option_menu_get_type::GType () "gtk_option_menu_get_type")
   (macro gtk_option_menu_new::GtkWidget* () "gtk_option_menu_new")
   (macro gtk_option_menu_get_menu::GtkWidget* (GtkOptionMenu*) "gtk_option_menu_get_menu")
   (macro gtk_option_menu_set_menu::void (GtkOptionMenu* GtkWidget*) "gtk_option_menu_set_menu")
   (macro gtk_option_menu_remove_menu::void (GtkOptionMenu*) "gtk_option_menu_remove_menu")
   (macro gtk_option_menu_get_history::gint (GtkOptionMenu*) "gtk_option_menu_get_history")
   (macro gtk_option_menu_set_history::void (GtkOptionMenu* guint) "gtk_option_menu_set_history")
   (macro gtk_pixmap_get_type::GtkType () "gtk_pixmap_get_type")
   (macro gtk_pixmap_new::GtkWidget* (GdkPixmap* GdkBitmap*) "gtk_pixmap_new")
   (macro gtk_pixmap_set::void (GtkPixmap* GdkPixmap* GdkBitmap*) "gtk_pixmap_set")
   (macro gtk_pixmap_get::void (GtkPixmap* GdkPixmap** GdkBitmap**) "gtk_pixmap_get")
   (macro gtk_pixmap_set_build_insensitive::void (GtkPixmap* gboolean) "gtk_pixmap_set_build_insensitive")
   (macro gtk_socket_get_type::GType () "gtk_socket_get_type")
   (macro gtk_socket_new::GtkWidget* () "gtk_socket_new")
   (macro gtk_socket_add_id::void (GtkSocket* GdkNativeWindow) "gtk_socket_add_id")
   (macro gtk_socket_get_id::GdkNativeWindow (GtkSocket*) "gtk_socket_get_id")
   (macro gtk_socket_steal::void (GtkSocket* GdkNativeWindow) "gtk_socket_steal")
   (macro gtk_plug_get_type::GType () "gtk_plug_get_type")
   (macro gtk_plug_construct::void (GtkPlug* GdkNativeWindow) "gtk_plug_construct")
   (macro gtk_plug_new::GtkWidget* (GdkNativeWindow) "gtk_plug_new")
   (macro gtk_plug_construct_for_display::void (GtkPlug* GdkDisplay* GdkNativeWindow) "gtk_plug_construct_for_display")
   (macro gtk_plug_new_for_display::GtkWidget* (GdkDisplay* GdkNativeWindow) "gtk_plug_new_for_display")
   (macro gtk_plug_get_id::GdkNativeWindow (GtkPlug*) "gtk_plug_get_id")
   (macro _gtk_plug_add_to_socket::void (GtkPlug* GtkSocket*) "_gtk_plug_add_to_socket")
   (macro _gtk_plug_remove_from_socket::void (GtkPlug* GtkSocket*) "_gtk_plug_remove_from_socket")
   (macro gtk_preview_get_type::GtkType () "gtk_preview_get_type")
   (macro gtk_preview_uninit::void () "gtk_preview_uninit")
   (macro gtk_preview_new::GtkWidget* (GtkPreviewType) "gtk_preview_new")
   (macro gtk_preview_size::void (GtkPreview* gint gint) "gtk_preview_size")
   (macro gtk_preview_put::void (GtkPreview* GdkWindow* GdkGC* gint gint gint gint gint gint) "gtk_preview_put")
   (macro gtk_preview_draw_row::void (GtkPreview* guchar* gint gint gint) "gtk_preview_draw_row")
   (macro gtk_preview_set_expand::void (GtkPreview* gboolean) "gtk_preview_set_expand")
   (macro gtk_preview_set_gamma::void (double) "gtk_preview_set_gamma")
   (macro gtk_preview_set_color_cube::void (guint guint guint guint) "gtk_preview_set_color_cube")
   (macro gtk_preview_set_install_cmap::void (gint) "gtk_preview_set_install_cmap")
   (macro gtk_preview_set_reserved::void (gint) "gtk_preview_set_reserved")
   (macro gtk_preview_set_dither::void (GtkPreview* GdkRgbDither) "gtk_preview_set_dither")
   (macro gtk_preview_get_visual::GdkVisual* () "gtk_preview_get_visual")
   (macro gtk_preview_get_cmap::GdkColormap* () "gtk_preview_get_cmap")
   (macro gtk_preview_get_info::GtkPreviewInfo* () "gtk_preview_get_info")
   (macro gtk_preview_reset::void () "gtk_preview_reset")
   (macro gtk_progress_get_type::GType () "gtk_progress_get_type")
   (macro gtk_progress_set_show_text::void (GtkProgress* gboolean) "gtk_progress_set_show_text")
   (macro gtk_progress_set_text_alignment::void (GtkProgress* gfloat gfloat) "gtk_progress_set_text_alignment")
   (macro gtk_progress_set_format_string::void (GtkProgress* gchar*) "gtk_progress_set_format_string")
   (macro gtk_progress_set_adjustment::void (GtkProgress* GtkAdjustment*) "gtk_progress_set_adjustment")
   (macro gtk_progress_configure::void (GtkProgress* gdouble gdouble gdouble) "gtk_progress_configure")
   (macro gtk_progress_set_percentage::void (GtkProgress* gdouble) "gtk_progress_set_percentage")
   (macro gtk_progress_set_value::void (GtkProgress* gdouble) "gtk_progress_set_value")
   (macro gtk_progress_get_value::gdouble (GtkProgress*) "gtk_progress_get_value")
   (macro gtk_progress_set_activity_mode::void (GtkProgress* gboolean) "gtk_progress_set_activity_mode")
   (macro gtk_progress_get_current_text::gchar* (GtkProgress*) "gtk_progress_get_current_text")
   (macro gtk_progress_get_text_from_value::gchar* (GtkProgress* gdouble) "gtk_progress_get_text_from_value")
   (macro gtk_progress_get_current_percentage::gdouble (GtkProgress*) "gtk_progress_get_current_percentage")
   (macro gtk_progress_get_percentage_from_value::gdouble (GtkProgress* gdouble) "gtk_progress_get_percentage_from_value")
   (macro gtk_progress_bar_get_type::GType () "gtk_progress_bar_get_type")
   (macro gtk_progress_bar_new::GtkWidget* () "gtk_progress_bar_new")
   (macro gtk_progress_bar_pulse::void (GtkProgressBar*) "gtk_progress_bar_pulse")
   (macro gtk_progress_bar_set_text::void (GtkProgressBar* gchar*) "gtk_progress_bar_set_text")
   (macro gtk_progress_bar_set_fraction::void (GtkProgressBar* gdouble) "gtk_progress_bar_set_fraction")
   (macro gtk_progress_bar_set_pulse_step::void (GtkProgressBar* gdouble) "gtk_progress_bar_set_pulse_step")
   (macro gtk_progress_bar_set_orientation::void (GtkProgressBar* GtkProgressBarOrientation) "gtk_progress_bar_set_orientation")
   (macro gtk_progress_bar_get_text::gchar* (GtkProgressBar*) "gtk_progress_bar_get_text")
   (macro gtk_progress_bar_get_fraction::gdouble (GtkProgressBar*) "gtk_progress_bar_get_fraction")
   (macro gtk_progress_bar_get_pulse_step::gdouble (GtkProgressBar*) "gtk_progress_bar_get_pulse_step")
   (macro gtk_progress_bar_get_orientation::GtkProgressBarOrientation (GtkProgressBar*) "gtk_progress_bar_get_orientation")
   (macro gtk_progress_bar_set_ellipsize::void (GtkProgressBar* PangoEllipsizeMode) "gtk_progress_bar_set_ellipsize")
   (macro gtk_progress_bar_get_ellipsize::PangoEllipsizeMode (GtkProgressBar*) "gtk_progress_bar_get_ellipsize")
   (macro gtk_progress_bar_new_with_adjustment::GtkWidget* (GtkAdjustment*) "gtk_progress_bar_new_with_adjustment")
   (macro gtk_progress_bar_set_bar_style::void (GtkProgressBar* GtkProgressBarStyle) "gtk_progress_bar_set_bar_style")
   (macro gtk_progress_bar_set_discrete_blocks::void (GtkProgressBar* guint) "gtk_progress_bar_set_discrete_blocks")
   (macro gtk_progress_bar_set_activity_step::void (GtkProgressBar* guint) "gtk_progress_bar_set_activity_step")
   (macro gtk_progress_bar_set_activity_blocks::void (GtkProgressBar* guint) "gtk_progress_bar_set_activity_blocks")
   (macro gtk_progress_bar_update::void (GtkProgressBar* gdouble) "gtk_progress_bar_update")
   (macro gtk_toggle_action_get_type::GType () "gtk_toggle_action_get_type")
   (macro gtk_toggle_action_new::GtkToggleAction* (gchar* gchar* gchar* gchar*) "gtk_toggle_action_new")
   (macro gtk_toggle_action_toggled::void (GtkToggleAction*) "gtk_toggle_action_toggled")
   (macro gtk_toggle_action_set_active::void (GtkToggleAction* gboolean) "gtk_toggle_action_set_active")
   (macro gtk_toggle_action_get_active::gboolean (GtkToggleAction*) "gtk_toggle_action_get_active")
   (macro gtk_toggle_action_set_draw_as_radio::void (GtkToggleAction* gboolean) "gtk_toggle_action_set_draw_as_radio")
   (macro gtk_toggle_action_get_draw_as_radio::gboolean (GtkToggleAction*) "gtk_toggle_action_get_draw_as_radio")
   (macro gtk_radio_action_get_type::GType () "gtk_radio_action_get_type")
   (macro gtk_radio_action_new::GtkRadioAction* (gchar* gchar* gchar* gchar* gint) "gtk_radio_action_new")
   (macro gtk_radio_action_get_group::GSList* (GtkRadioAction*) "gtk_radio_action_get_group")
   (macro gtk_radio_action_set_group::void (GtkRadioAction* GSList*) "gtk_radio_action_set_group")
   (macro gtk_radio_action_get_current_value::gint (GtkRadioAction*) "gtk_radio_action_get_current_value")
   (macro gtk_radio_button_get_type::GType () "gtk_radio_button_get_type")
   (macro gtk_radio_button_new::GtkWidget* (GSList*) "gtk_radio_button_new")
   (macro gtk_radio_button_new_from_widget::GtkWidget* (GtkRadioButton*) "gtk_radio_button_new_from_widget")
   (macro gtk_radio_button_new_with_label::GtkWidget* (GSList* gchar*) "gtk_radio_button_new_with_label")
   (macro gtk_radio_button_new_with_label_from_widget::GtkWidget* (GtkRadioButton* gchar*) "gtk_radio_button_new_with_label_from_widget")
   (macro gtk_radio_button_new_with_mnemonic::GtkWidget* (GSList* gchar*) "gtk_radio_button_new_with_mnemonic")
   (macro gtk_radio_button_new_with_mnemonic_from_widget::GtkWidget* (GtkRadioButton* gchar*) "gtk_radio_button_new_with_mnemonic_from_widget")
   (macro gtk_radio_button_get_group::GSList* (GtkRadioButton*) "gtk_radio_button_get_group")
   (macro gtk_radio_button_set_group::void (GtkRadioButton* GSList*) "gtk_radio_button_set_group")
   (macro gtk_radio_menu_item_get_type::GType () "gtk_radio_menu_item_get_type")
   (macro gtk_radio_menu_item_new::GtkWidget* (GSList*) "gtk_radio_menu_item_new")
   (macro gtk_radio_menu_item_new_with_label::GtkWidget* (GSList* gchar*) "gtk_radio_menu_item_new_with_label")
   (macro gtk_radio_menu_item_new_with_mnemonic::GtkWidget* (GSList* gchar*) "gtk_radio_menu_item_new_with_mnemonic")
   (macro gtk_radio_menu_item_new_from_widget::GtkWidget* (GtkRadioMenuItem*) "gtk_radio_menu_item_new_from_widget")
   (macro gtk_radio_menu_item_new_with_mnemonic_from_widget::GtkWidget* (GtkRadioMenuItem* gchar*) "gtk_radio_menu_item_new_with_mnemonic_from_widget")
   (macro gtk_radio_menu_item_new_with_label_from_widget::GtkWidget* (GtkRadioMenuItem* gchar*) "gtk_radio_menu_item_new_with_label_from_widget")
   (macro gtk_radio_menu_item_get_group::GSList* (GtkRadioMenuItem*) "gtk_radio_menu_item_get_group")
   (macro gtk_radio_menu_item_set_group::void (GtkRadioMenuItem* GSList*) "gtk_radio_menu_item_set_group")
   (macro gtk_toggle_tool_button_get_type::GType () "gtk_toggle_tool_button_get_type")
   (macro gtk_toggle_tool_button_new::GtkToolItem* () "gtk_toggle_tool_button_new")
   (macro gtk_toggle_tool_button_new_from_stock::GtkToolItem* (gchar*) "gtk_toggle_tool_button_new_from_stock")
   (macro gtk_toggle_tool_button_set_active::void (GtkToggleToolButton* gboolean) "gtk_toggle_tool_button_set_active")
   (macro gtk_toggle_tool_button_get_active::gboolean (GtkToggleToolButton*) "gtk_toggle_tool_button_get_active")
   (macro gtk_radio_tool_button_get_type::GType () "gtk_radio_tool_button_get_type")
   (macro gtk_radio_tool_button_new::GtkToolItem* (GSList*) "gtk_radio_tool_button_new")
   (macro gtk_radio_tool_button_new_from_stock::GtkToolItem* (GSList* gchar*) "gtk_radio_tool_button_new_from_stock")
   (macro gtk_radio_tool_button_new_from_widget::GtkToolItem* (GtkRadioToolButton*) "gtk_radio_tool_button_new_from_widget")
   (macro gtk_radio_tool_button_new_with_stock_from_widget::GtkToolItem* (GtkRadioToolButton* gchar*) "gtk_radio_tool_button_new_with_stock_from_widget")
   (macro gtk_radio_tool_button_get_group::GSList* (GtkRadioToolButton*) "gtk_radio_tool_button_get_group")
   (macro gtk_radio_tool_button_set_group::void (GtkRadioToolButton* GSList*) "gtk_radio_tool_button_set_group")
   (macro gtk_viewport_get_type::GType () "gtk_viewport_get_type")
   (macro gtk_viewport_new::GtkWidget* (GtkAdjustment* GtkAdjustment*) "gtk_viewport_new")
   (macro gtk_viewport_get_hadjustment::GtkAdjustment* (GtkViewport*) "gtk_viewport_get_hadjustment")
   (macro gtk_viewport_get_vadjustment::GtkAdjustment* (GtkViewport*) "gtk_viewport_get_vadjustment")
   (macro gtk_viewport_set_hadjustment::void (GtkViewport* GtkAdjustment*) "gtk_viewport_set_hadjustment")
   (macro gtk_viewport_set_vadjustment::void (GtkViewport* GtkAdjustment*) "gtk_viewport_set_vadjustment")
   (macro gtk_viewport_set_shadow_type::void (GtkViewport* GtkShadowType) "gtk_viewport_set_shadow_type")
   (macro gtk_viewport_get_shadow_type::GtkShadowType (GtkViewport*) "gtk_viewport_get_shadow_type")
   (macro gtk_scrolled_window_get_type::GType () "gtk_scrolled_window_get_type")
   (macro gtk_scrolled_window_new::GtkWidget* (GtkAdjustment* GtkAdjustment*) "gtk_scrolled_window_new")
   (macro gtk_scrolled_window_set_hadjustment::void (GtkScrolledWindow* GtkAdjustment*) "gtk_scrolled_window_set_hadjustment")
   (macro gtk_scrolled_window_set_vadjustment::void (GtkScrolledWindow* GtkAdjustment*) "gtk_scrolled_window_set_vadjustment")
   (macro gtk_scrolled_window_get_hadjustment::GtkAdjustment* (GtkScrolledWindow*) "gtk_scrolled_window_get_hadjustment")
   (macro gtk_scrolled_window_get_vadjustment::GtkAdjustment* (GtkScrolledWindow*) "gtk_scrolled_window_get_vadjustment")
   (macro gtk_scrolled_window_set_policy::void (GtkScrolledWindow* GtkPolicyType GtkPolicyType) "gtk_scrolled_window_set_policy")
   (macro gtk_scrolled_window_get_policy::void (GtkScrolledWindow* GtkPolicyType* GtkPolicyType*) "gtk_scrolled_window_get_policy")
   (macro gtk_scrolled_window_set_placement::void (GtkScrolledWindow* GtkCornerType) "gtk_scrolled_window_set_placement")
   (macro gtk_scrolled_window_get_placement::GtkCornerType (GtkScrolledWindow*) "gtk_scrolled_window_get_placement")
   (macro gtk_scrolled_window_set_shadow_type::void (GtkScrolledWindow* GtkShadowType) "gtk_scrolled_window_set_shadow_type")
   (macro gtk_scrolled_window_get_shadow_type::GtkShadowType (GtkScrolledWindow*) "gtk_scrolled_window_get_shadow_type")
   (macro gtk_scrolled_window_add_with_viewport::void (GtkScrolledWindow* GtkWidget*) "gtk_scrolled_window_add_with_viewport")
   (macro _gtk_scrolled_window_get_scrollbar_spacing::gint (GtkScrolledWindow*) "_gtk_scrolled_window_get_scrollbar_spacing")
   (macro gtk_separator_menu_item_get_type::GType () "gtk_separator_menu_item_get_type")
   (macro gtk_separator_menu_item_new::GtkWidget* () "gtk_separator_menu_item_new")
   (macro gtk_separator_tool_item_get_type::GType () "gtk_separator_tool_item_get_type")
   (macro gtk_separator_tool_item_new::GtkToolItem* () "gtk_separator_tool_item_new")
   (macro gtk_separator_tool_item_get_draw::gboolean (GtkSeparatorToolItem*) "gtk_separator_tool_item_get_draw")
   (macro gtk_separator_tool_item_set_draw::void (GtkSeparatorToolItem* gboolean) "gtk_separator_tool_item_set_draw")
   (macro gtk_size_group_get_type::GType () "gtk_size_group_get_type")
   (macro gtk_size_group_new::GtkSizeGroup* (GtkSizeGroupMode) "gtk_size_group_new")
   (macro gtk_size_group_set_mode::void (GtkSizeGroup* GtkSizeGroupMode) "gtk_size_group_set_mode")
   (macro gtk_size_group_get_mode::GtkSizeGroupMode (GtkSizeGroup*) "gtk_size_group_get_mode")
   (macro gtk_size_group_add_widget::void (GtkSizeGroup* GtkWidget*) "gtk_size_group_add_widget")
   (macro gtk_size_group_remove_widget::void (GtkSizeGroup* GtkWidget*) "gtk_size_group_remove_widget")
   (macro _gtk_size_group_get_child_requisition::void (GtkWidget* GtkRequisition*) "_gtk_size_group_get_child_requisition")
   (macro _gtk_size_group_compute_requisition::void (GtkWidget* GtkRequisition*) "_gtk_size_group_compute_requisition")
   (macro _gtk_size_group_queue_resize::void (GtkWidget*) "_gtk_size_group_queue_resize")
   (macro gtk_spin_button_get_type::GType () "gtk_spin_button_get_type")
   (macro gtk_spin_button_configure::void (GtkSpinButton* GtkAdjustment* gdouble guint) "gtk_spin_button_configure")
   (macro gtk_spin_button_new::GtkWidget* (GtkAdjustment* gdouble guint) "gtk_spin_button_new")
   (macro gtk_spin_button_new_with_range::GtkWidget* (gdouble gdouble gdouble) "gtk_spin_button_new_with_range")
   (macro gtk_spin_button_set_adjustment::void (GtkSpinButton* GtkAdjustment*) "gtk_spin_button_set_adjustment")
   (macro gtk_spin_button_get_adjustment::GtkAdjustment* (GtkSpinButton*) "gtk_spin_button_get_adjustment")
   (macro gtk_spin_button_set_digits::void (GtkSpinButton* guint) "gtk_spin_button_set_digits")
   (macro gtk_spin_button_get_digits::guint (GtkSpinButton*) "gtk_spin_button_get_digits")
   (macro gtk_spin_button_set_increments::void (GtkSpinButton* gdouble gdouble) "gtk_spin_button_set_increments")
   (macro gtk_spin_button_get_increments::void (GtkSpinButton* gdouble* gdouble*) "gtk_spin_button_get_increments")
   (macro gtk_spin_button_set_range::void (GtkSpinButton* gdouble gdouble) "gtk_spin_button_set_range")
   (macro gtk_spin_button_get_range::void (GtkSpinButton* gdouble* gdouble*) "gtk_spin_button_get_range")
   (macro gtk_spin_button_get_value::gdouble (GtkSpinButton*) "gtk_spin_button_get_value")
   (macro gtk_spin_button_get_value_as_int::gint (GtkSpinButton*) "gtk_spin_button_get_value_as_int")
   (macro gtk_spin_button_set_value::void (GtkSpinButton* gdouble) "gtk_spin_button_set_value")
   (macro gtk_spin_button_set_update_policy::void (GtkSpinButton* GtkSpinButtonUpdatePolicy) "gtk_spin_button_set_update_policy")
   (macro gtk_spin_button_get_update_policy::GtkSpinButtonUpdatePolicy (GtkSpinButton*) "gtk_spin_button_get_update_policy")
   (macro gtk_spin_button_set_numeric::void (GtkSpinButton* gboolean) "gtk_spin_button_set_numeric")
   (macro gtk_spin_button_get_numeric::gboolean (GtkSpinButton*) "gtk_spin_button_get_numeric")
   (macro gtk_spin_button_spin::void (GtkSpinButton* GtkSpinType gdouble) "gtk_spin_button_spin")
   (macro gtk_spin_button_set_wrap::void (GtkSpinButton* gboolean) "gtk_spin_button_set_wrap")
   (macro gtk_spin_button_get_wrap::gboolean (GtkSpinButton*) "gtk_spin_button_get_wrap")
   (macro gtk_spin_button_set_snap_to_ticks::void (GtkSpinButton* gboolean) "gtk_spin_button_set_snap_to_ticks")
   (macro gtk_spin_button_get_snap_to_ticks::gboolean (GtkSpinButton*) "gtk_spin_button_get_snap_to_ticks")
   (macro gtk_spin_button_update::void (GtkSpinButton*) "gtk_spin_button_update")
   (macro gtk_statusbar_get_type::GType () "gtk_statusbar_get_type")
   (macro gtk_statusbar_new::GtkWidget* () "gtk_statusbar_new")
   (macro gtk_statusbar_get_context_id::guint (GtkStatusbar* gchar*) "gtk_statusbar_get_context_id")
   (macro gtk_statusbar_push::guint (GtkStatusbar* guint gchar*) "gtk_statusbar_push")
   (macro gtk_statusbar_pop::void (GtkStatusbar* guint) "gtk_statusbar_pop")
   (macro gtk_statusbar_remove::void (GtkStatusbar* guint guint) "gtk_statusbar_remove")
   (macro gtk_statusbar_set_has_resize_grip::void (GtkStatusbar* gboolean) "gtk_statusbar_set_has_resize_grip")
   (macro gtk_statusbar_get_has_resize_grip::gboolean (GtkStatusbar*) "gtk_statusbar_get_has_resize_grip")
   (macro gtk_stock_add::void (GtkStockItem* guint) "gtk_stock_add")
   (macro gtk_stock_add_static::void (GtkStockItem* guint) "gtk_stock_add_static")
   (macro gtk_stock_lookup::gboolean (gchar* GtkStockItem*) "gtk_stock_lookup")
   (macro gtk_stock_list_ids::GSList* () "gtk_stock_list_ids")
   (macro gtk_stock_item_copy::GtkStockItem* (GtkStockItem*) "gtk_stock_item_copy")
   (macro gtk_stock_item_free::void (GtkStockItem*) "gtk_stock_item_free")
   (macro gtk_table_get_type::GType () "gtk_table_get_type")
   (macro gtk_table_new::GtkWidget* (guint guint gboolean) "gtk_table_new")
   (macro gtk_table_resize::void (GtkTable* guint guint) "gtk_table_resize")
   (macro gtk_table_attach::void (GtkTable* GtkWidget* guint guint guint guint GtkAttachOptions GtkAttachOptions guint guint) "gtk_table_attach")
   (macro gtk_table_attach_defaults::void (GtkTable* GtkWidget* guint guint guint guint) "gtk_table_attach_defaults")
   (macro gtk_table_set_row_spacing::void (GtkTable* guint guint) "gtk_table_set_row_spacing")
   (macro gtk_table_get_row_spacing::guint (GtkTable* guint) "gtk_table_get_row_spacing")
   (macro gtk_table_set_col_spacing::void (GtkTable* guint guint) "gtk_table_set_col_spacing")
   (macro gtk_table_get_col_spacing::guint (GtkTable* guint) "gtk_table_get_col_spacing")
   (macro gtk_table_set_row_spacings::void (GtkTable* guint) "gtk_table_set_row_spacings")
   (macro gtk_table_get_default_row_spacing::guint (GtkTable*) "gtk_table_get_default_row_spacing")
   (macro gtk_table_set_col_spacings::void (GtkTable* guint) "gtk_table_set_col_spacings")
   (macro gtk_table_get_default_col_spacing::guint (GtkTable*) "gtk_table_get_default_col_spacing")
   (macro gtk_table_set_homogeneous::void (GtkTable* gboolean) "gtk_table_set_homogeneous")
   (macro gtk_table_get_homogeneous::gboolean (GtkTable*) "gtk_table_get_homogeneous")
   (macro gtk_tearoff_menu_item_get_type::GType () "gtk_tearoff_menu_item_get_type")
   (macro gtk_tearoff_menu_item_new::GtkWidget* () "gtk_tearoff_menu_item_new")
   (macro gtk_text_tag_get_type::GType () "gtk_text_tag_get_type")
   (macro gtk_text_tag_new::GtkTextTag* (gchar*) "gtk_text_tag_new")
   (macro gtk_text_tag_get_priority::gint (GtkTextTag*) "gtk_text_tag_get_priority")
   (macro gtk_text_tag_set_priority::void (GtkTextTag* gint) "gtk_text_tag_set_priority")
   (macro gtk_text_tag_event::gboolean (GtkTextTag* GObject* GdkEvent* GtkTextIter*) "gtk_text_tag_event")
   (macro gtk_text_attributes_new::GtkTextAttributes* () "gtk_text_attributes_new")
   (macro gtk_text_attributes_copy::GtkTextAttributes* (GtkTextAttributes*) "gtk_text_attributes_copy")
   (macro gtk_text_attributes_copy_values::void (GtkTextAttributes* GtkTextAttributes*) "gtk_text_attributes_copy_values")
   (macro gtk_text_attributes_unref::void (GtkTextAttributes*) "gtk_text_attributes_unref")
   (macro gtk_text_attributes_ref::void (GtkTextAttributes*) "gtk_text_attributes_ref")
   (macro gtk_text_attributes_get_type::GType () "gtk_text_attributes_get_type")
   (macro gtk_text_tag_table_get_type::GType () "gtk_text_tag_table_get_type")
   (macro gtk_text_tag_table_new::GtkTextTagTable* () "gtk_text_tag_table_new")
   (macro gtk_text_tag_table_add::void (GtkTextTagTable* GtkTextTag*) "gtk_text_tag_table_add")
   (macro gtk_text_tag_table_remove::void (GtkTextTagTable* GtkTextTag*) "gtk_text_tag_table_remove")
   (macro gtk_text_tag_table_lookup::GtkTextTag* (GtkTextTagTable* gchar*) "gtk_text_tag_table_lookup")
   (macro gtk_text_tag_table_foreach::void (GtkTextTagTable* GtkTextTagTableForeach gpointer) "gtk_text_tag_table_foreach")
   (macro gtk_text_tag_table_get_size::gint (GtkTextTagTable*) "gtk_text_tag_table_get_size")
   (macro _gtk_text_tag_table_add_buffer::void (GtkTextTagTable* gpointer) "_gtk_text_tag_table_add_buffer")
   (macro _gtk_text_tag_table_remove_buffer::void (GtkTextTagTable* gpointer) "_gtk_text_tag_table_remove_buffer")
   (macro gtk_text_child_anchor_get_type::GType () "gtk_text_child_anchor_get_type")
   (macro gtk_text_child_anchor_new::GtkTextChildAnchor* () "gtk_text_child_anchor_new")
   (macro gtk_text_child_anchor_get_widgets::GList* (GtkTextChildAnchor*) "gtk_text_child_anchor_get_widgets")
   (macro gtk_text_child_anchor_get_deleted::gboolean (GtkTextChildAnchor*) "gtk_text_child_anchor_get_deleted")
   (macro gtk_text_iter_get_buffer::GtkTextBuffer* (GtkTextIter*) "gtk_text_iter_get_buffer")
   (macro gtk_text_iter_copy::GtkTextIter* (GtkTextIter*) "gtk_text_iter_copy")
   (macro gtk_text_iter_free::void (GtkTextIter*) "gtk_text_iter_free")
   (macro gtk_text_iter_get_type::GType () "gtk_text_iter_get_type")
   (macro gtk_text_iter_get_offset::gint (GtkTextIter*) "gtk_text_iter_get_offset")
   (macro gtk_text_iter_get_line::gint (GtkTextIter*) "gtk_text_iter_get_line")
   (macro gtk_text_iter_get_line_offset::gint (GtkTextIter*) "gtk_text_iter_get_line_offset")
   (macro gtk_text_iter_get_line_index::gint (GtkTextIter*) "gtk_text_iter_get_line_index")
   (macro gtk_text_iter_get_visible_line_offset::gint (GtkTextIter*) "gtk_text_iter_get_visible_line_offset")
   (macro gtk_text_iter_get_visible_line_index::gint (GtkTextIter*) "gtk_text_iter_get_visible_line_index")
   (macro gtk_text_iter_get_char::gunichar (GtkTextIter*) "gtk_text_iter_get_char")
   (macro gtk_text_iter_get_slice::gchar* (GtkTextIter* GtkTextIter*) "gtk_text_iter_get_slice")
   (macro gtk_text_iter_get_text::gchar* (GtkTextIter* GtkTextIter*) "gtk_text_iter_get_text")
   (macro gtk_text_iter_get_visible_slice::gchar* (GtkTextIter* GtkTextIter*) "gtk_text_iter_get_visible_slice")
   (macro gtk_text_iter_get_visible_text::gchar* (GtkTextIter* GtkTextIter*) "gtk_text_iter_get_visible_text")
   (macro gtk_text_iter_get_pixbuf::GdkPixbuf* (GtkTextIter*) "gtk_text_iter_get_pixbuf")
   (macro gtk_text_iter_get_marks::GSList* (GtkTextIter*) "gtk_text_iter_get_marks")
   (macro gtk_text_iter_get_child_anchor::GtkTextChildAnchor* (GtkTextIter*) "gtk_text_iter_get_child_anchor")
   (macro gtk_text_iter_get_toggled_tags::GSList* (GtkTextIter* gboolean) "gtk_text_iter_get_toggled_tags")
   (macro gtk_text_iter_begins_tag::gboolean (GtkTextIter* GtkTextTag*) "gtk_text_iter_begins_tag")
   (macro gtk_text_iter_ends_tag::gboolean (GtkTextIter* GtkTextTag*) "gtk_text_iter_ends_tag")
   (macro gtk_text_iter_toggles_tag::gboolean (GtkTextIter* GtkTextTag*) "gtk_text_iter_toggles_tag")
   (macro gtk_text_iter_has_tag::gboolean (GtkTextIter* GtkTextTag*) "gtk_text_iter_has_tag")
   (macro gtk_text_iter_get_tags::GSList* (GtkTextIter*) "gtk_text_iter_get_tags")
   (macro gtk_text_iter_editable::gboolean (GtkTextIter* gboolean) "gtk_text_iter_editable")
   (macro gtk_text_iter_can_insert::gboolean (GtkTextIter* gboolean) "gtk_text_iter_can_insert")
   (macro gtk_text_iter_starts_word::gboolean (GtkTextIter*) "gtk_text_iter_starts_word")
   (macro gtk_text_iter_ends_word::gboolean (GtkTextIter*) "gtk_text_iter_ends_word")
   (macro gtk_text_iter_inside_word::gboolean (GtkTextIter*) "gtk_text_iter_inside_word")
   (macro gtk_text_iter_starts_sentence::gboolean (GtkTextIter*) "gtk_text_iter_starts_sentence")
   (macro gtk_text_iter_ends_sentence::gboolean (GtkTextIter*) "gtk_text_iter_ends_sentence")
   (macro gtk_text_iter_inside_sentence::gboolean (GtkTextIter*) "gtk_text_iter_inside_sentence")
   (macro gtk_text_iter_starts_line::gboolean (GtkTextIter*) "gtk_text_iter_starts_line")
   (macro gtk_text_iter_ends_line::gboolean (GtkTextIter*) "gtk_text_iter_ends_line")
   (macro gtk_text_iter_is_cursor_position::gboolean (GtkTextIter*) "gtk_text_iter_is_cursor_position")
   (macro gtk_text_iter_get_chars_in_line::gint (GtkTextIter*) "gtk_text_iter_get_chars_in_line")
   (macro gtk_text_iter_get_bytes_in_line::gint (GtkTextIter*) "gtk_text_iter_get_bytes_in_line")
   (macro gtk_text_iter_get_attributes::gboolean (GtkTextIter* GtkTextAttributes*) "gtk_text_iter_get_attributes")
   (macro gtk_text_iter_get_language::PangoLanguage* (GtkTextIter*) "gtk_text_iter_get_language")
   (macro gtk_text_iter_is_end::gboolean (GtkTextIter*) "gtk_text_iter_is_end")
   (macro gtk_text_iter_is_start::gboolean (GtkTextIter*) "gtk_text_iter_is_start")
   (macro gtk_text_iter_forward_char::gboolean (GtkTextIter*) "gtk_text_iter_forward_char")
   (macro gtk_text_iter_backward_char::gboolean (GtkTextIter*) "gtk_text_iter_backward_char")
   (macro gtk_text_iter_forward_chars::gboolean (GtkTextIter* gint) "gtk_text_iter_forward_chars")
   (macro gtk_text_iter_backward_chars::gboolean (GtkTextIter* gint) "gtk_text_iter_backward_chars")
   (macro gtk_text_iter_forward_line::gboolean (GtkTextIter*) "gtk_text_iter_forward_line")
   (macro gtk_text_iter_backward_line::gboolean (GtkTextIter*) "gtk_text_iter_backward_line")
   (macro gtk_text_iter_forward_lines::gboolean (GtkTextIter* gint) "gtk_text_iter_forward_lines")
   (macro gtk_text_iter_backward_lines::gboolean (GtkTextIter* gint) "gtk_text_iter_backward_lines")
   (macro gtk_text_iter_forward_word_end::gboolean (GtkTextIter*) "gtk_text_iter_forward_word_end")
   (macro gtk_text_iter_backward_word_start::gboolean (GtkTextIter*) "gtk_text_iter_backward_word_start")
   (macro gtk_text_iter_forward_word_ends::gboolean (GtkTextIter* gint) "gtk_text_iter_forward_word_ends")
   (macro gtk_text_iter_backward_word_starts::gboolean (GtkTextIter* gint) "gtk_text_iter_backward_word_starts")
   (macro gtk_text_iter_forward_visible_word_end::gboolean (GtkTextIter*) "gtk_text_iter_forward_visible_word_end")
   (macro gtk_text_iter_backward_visible_word_start::gboolean (GtkTextIter*) "gtk_text_iter_backward_visible_word_start")
   (macro gtk_text_iter_forward_visible_word_ends::gboolean (GtkTextIter* gint) "gtk_text_iter_forward_visible_word_ends")
   (macro gtk_text_iter_backward_visible_word_starts::gboolean (GtkTextIter* gint) "gtk_text_iter_backward_visible_word_starts")
   (macro gtk_text_iter_forward_sentence_end::gboolean (GtkTextIter*) "gtk_text_iter_forward_sentence_end")
   (macro gtk_text_iter_backward_sentence_start::gboolean (GtkTextIter*) "gtk_text_iter_backward_sentence_start")
   (macro gtk_text_iter_forward_sentence_ends::gboolean (GtkTextIter* gint) "gtk_text_iter_forward_sentence_ends")
   (macro gtk_text_iter_backward_sentence_starts::gboolean (GtkTextIter* gint) "gtk_text_iter_backward_sentence_starts")
   (macro gtk_text_iter_forward_cursor_position::gboolean (GtkTextIter*) "gtk_text_iter_forward_cursor_position")
   (macro gtk_text_iter_backward_cursor_position::gboolean (GtkTextIter*) "gtk_text_iter_backward_cursor_position")
   (macro gtk_text_iter_forward_cursor_positions::gboolean (GtkTextIter* gint) "gtk_text_iter_forward_cursor_positions")
   (macro gtk_text_iter_backward_cursor_positions::gboolean (GtkTextIter* gint) "gtk_text_iter_backward_cursor_positions")
   (macro gtk_text_iter_forward_visible_cursor_position::gboolean (GtkTextIter*) "gtk_text_iter_forward_visible_cursor_position")
   (macro gtk_text_iter_backward_visible_cursor_position::gboolean (GtkTextIter*) "gtk_text_iter_backward_visible_cursor_position")
   (macro gtk_text_iter_forward_visible_cursor_positions::gboolean (GtkTextIter* gint) "gtk_text_iter_forward_visible_cursor_positions")
   (macro gtk_text_iter_backward_visible_cursor_positions::gboolean (GtkTextIter* gint) "gtk_text_iter_backward_visible_cursor_positions")
   (macro gtk_text_iter_set_offset::void (GtkTextIter* gint) "gtk_text_iter_set_offset")
   (macro gtk_text_iter_set_line::void (GtkTextIter* gint) "gtk_text_iter_set_line")
   (macro gtk_text_iter_set_line_offset::void (GtkTextIter* gint) "gtk_text_iter_set_line_offset")
   (macro gtk_text_iter_set_line_index::void (GtkTextIter* gint) "gtk_text_iter_set_line_index")
   (macro gtk_text_iter_forward_to_end::void (GtkTextIter*) "gtk_text_iter_forward_to_end")
   (macro gtk_text_iter_forward_to_line_end::gboolean (GtkTextIter*) "gtk_text_iter_forward_to_line_end")
   (macro gtk_text_iter_set_visible_line_offset::void (GtkTextIter* gint) "gtk_text_iter_set_visible_line_offset")
   (macro gtk_text_iter_set_visible_line_index::void (GtkTextIter* gint) "gtk_text_iter_set_visible_line_index")
   (macro gtk_text_iter_forward_to_tag_toggle::gboolean (GtkTextIter* GtkTextTag*) "gtk_text_iter_forward_to_tag_toggle")
   (macro gtk_text_iter_backward_to_tag_toggle::gboolean (GtkTextIter* GtkTextTag*) "gtk_text_iter_backward_to_tag_toggle")
   (macro gtk_text_iter_forward_find_char::gboolean (GtkTextIter* GtkTextCharPredicate gpointer GtkTextIter*) "gtk_text_iter_forward_find_char")
   (macro gtk_text_iter_backward_find_char::gboolean (GtkTextIter* GtkTextCharPredicate gpointer GtkTextIter*) "gtk_text_iter_backward_find_char")
   (macro gtk_text_iter_forward_search::gboolean (GtkTextIter* gchar* GtkTextSearchFlags GtkTextIter* GtkTextIter* GtkTextIter*) "gtk_text_iter_forward_search")
   (macro gtk_text_iter_backward_search::gboolean (GtkTextIter* gchar* GtkTextSearchFlags GtkTextIter* GtkTextIter* GtkTextIter*) "gtk_text_iter_backward_search")
   (macro gtk_text_iter_equal::gboolean (GtkTextIter* GtkTextIter*) "gtk_text_iter_equal")
   (macro gtk_text_iter_compare::gint (GtkTextIter* GtkTextIter*) "gtk_text_iter_compare")
   (macro gtk_text_iter_in_range::gboolean (GtkTextIter* GtkTextIter* GtkTextIter*) "gtk_text_iter_in_range")
   (macro gtk_text_iter_order::void (GtkTextIter* GtkTextIter*) "gtk_text_iter_order")
   (macro gtk_text_mark_get_type::GType () "gtk_text_mark_get_type")
   (macro gtk_text_mark_set_visible::void (GtkTextMark* gboolean) "gtk_text_mark_set_visible")
   (macro gtk_text_mark_get_visible::gboolean (GtkTextMark*) "gtk_text_mark_get_visible")
   (macro gtk_text_mark_get_name::gchar* (GtkTextMark*) "gtk_text_mark_get_name")
   (macro gtk_text_mark_get_deleted::gboolean (GtkTextMark*) "gtk_text_mark_get_deleted")
   (macro gtk_text_mark_get_buffer::GtkTextBuffer* (GtkTextMark*) "gtk_text_mark_get_buffer")
   (macro gtk_text_mark_get_left_gravity::gboolean (GtkTextMark*) "gtk_text_mark_get_left_gravity")
   (macro gtk_text_buffer_get_type::GType () "gtk_text_buffer_get_type")
   (macro gtk_text_buffer_new::GtkTextBuffer* (GtkTextTagTable*) "gtk_text_buffer_new")
   (macro gtk_text_buffer_get_line_count::gint (GtkTextBuffer*) "gtk_text_buffer_get_line_count")
   (macro gtk_text_buffer_get_char_count::gint (GtkTextBuffer*) "gtk_text_buffer_get_char_count")
   (macro gtk_text_buffer_get_tag_table::GtkTextTagTable* (GtkTextBuffer*) "gtk_text_buffer_get_tag_table")
   (macro gtk_text_buffer_set_text::void (GtkTextBuffer* gchar* gint) "gtk_text_buffer_set_text")
   (macro gtk_text_buffer_insert::void (GtkTextBuffer* GtkTextIter* gchar* gint) "gtk_text_buffer_insert")
   (macro gtk_text_buffer_insert_at_cursor::void (GtkTextBuffer* gchar* gint) "gtk_text_buffer_insert_at_cursor")
   (macro gtk_text_buffer_insert_interactive::gboolean (GtkTextBuffer* GtkTextIter* gchar* gint gboolean) "gtk_text_buffer_insert_interactive")
   (macro gtk_text_buffer_insert_interactive_at_cursor::gboolean (GtkTextBuffer* gchar* gint gboolean) "gtk_text_buffer_insert_interactive_at_cursor")
   (macro gtk_text_buffer_insert_range::void (GtkTextBuffer* GtkTextIter* GtkTextIter* GtkTextIter*) "gtk_text_buffer_insert_range")
   (macro gtk_text_buffer_insert_range_interactive::gboolean (GtkTextBuffer* GtkTextIter* GtkTextIter* GtkTextIter* gboolean) "gtk_text_buffer_insert_range_interactive")
   (macro gtk_text_buffer_insert_with_tags::void (GtkTextBuffer* GtkTextIter* gchar* gint GtkTextTag* . GtkTextTag*) "gtk_text_buffer_insert_with_tags")
   (macro gtk_text_buffer_insert_with_tags_by_name::void (GtkTextBuffer* GtkTextIter* gchar* gint gchar* . gchar*) "gtk_text_buffer_insert_with_tags_by_name")
   (macro gtk_text_buffer_delete::void (GtkTextBuffer* GtkTextIter* GtkTextIter*) "gtk_text_buffer_delete")
   (macro gtk_text_buffer_delete_interactive::gboolean (GtkTextBuffer* GtkTextIter* GtkTextIter* gboolean) "gtk_text_buffer_delete_interactive")
   (macro gtk_text_buffer_backspace::gboolean (GtkTextBuffer* GtkTextIter* gboolean gboolean) "gtk_text_buffer_backspace")
   (macro gtk_text_buffer_get_text::gchar* (GtkTextBuffer* GtkTextIter* GtkTextIter* gboolean) "gtk_text_buffer_get_text")
   (macro gtk_text_buffer_get_slice::gchar* (GtkTextBuffer* GtkTextIter* GtkTextIter* gboolean) "gtk_text_buffer_get_slice")
   (macro gtk_text_buffer_insert_pixbuf::void (GtkTextBuffer* GtkTextIter* GdkPixbuf*) "gtk_text_buffer_insert_pixbuf")
   (macro gtk_text_buffer_insert_child_anchor::void (GtkTextBuffer* GtkTextIter* GtkTextChildAnchor*) "gtk_text_buffer_insert_child_anchor")
   (macro gtk_text_buffer_create_child_anchor::GtkTextChildAnchor* (GtkTextBuffer* GtkTextIter*) "gtk_text_buffer_create_child_anchor")
   (macro gtk_text_buffer_create_mark::GtkTextMark* (GtkTextBuffer* gchar* GtkTextIter* gboolean) "gtk_text_buffer_create_mark")
   (macro gtk_text_buffer_move_mark::void (GtkTextBuffer* GtkTextMark* GtkTextIter*) "gtk_text_buffer_move_mark")
   (macro gtk_text_buffer_delete_mark::void (GtkTextBuffer* GtkTextMark*) "gtk_text_buffer_delete_mark")
   (macro gtk_text_buffer_get_mark::GtkTextMark* (GtkTextBuffer* gchar*) "gtk_text_buffer_get_mark")
   (macro gtk_text_buffer_move_mark_by_name::void (GtkTextBuffer* gchar* GtkTextIter*) "gtk_text_buffer_move_mark_by_name")
   (macro gtk_text_buffer_delete_mark_by_name::void (GtkTextBuffer* gchar*) "gtk_text_buffer_delete_mark_by_name")
   (macro gtk_text_buffer_get_insert::GtkTextMark* (GtkTextBuffer*) "gtk_text_buffer_get_insert")
   (macro gtk_text_buffer_get_selection_bound::GtkTextMark* (GtkTextBuffer*) "gtk_text_buffer_get_selection_bound")
   (macro gtk_text_buffer_place_cursor::void (GtkTextBuffer* GtkTextIter*) "gtk_text_buffer_place_cursor")
   (macro gtk_text_buffer_select_range::void (GtkTextBuffer* GtkTextIter* GtkTextIter*) "gtk_text_buffer_select_range")
   (macro gtk_text_buffer_apply_tag::void (GtkTextBuffer* GtkTextTag* GtkTextIter* GtkTextIter*) "gtk_text_buffer_apply_tag")
   (macro gtk_text_buffer_remove_tag::void (GtkTextBuffer* GtkTextTag* GtkTextIter* GtkTextIter*) "gtk_text_buffer_remove_tag")
   (macro gtk_text_buffer_apply_tag_by_name::void (GtkTextBuffer* gchar* GtkTextIter* GtkTextIter*) "gtk_text_buffer_apply_tag_by_name")
   (macro gtk_text_buffer_remove_tag_by_name::void (GtkTextBuffer* gchar* GtkTextIter* GtkTextIter*) "gtk_text_buffer_remove_tag_by_name")
   (macro gtk_text_buffer_remove_all_tags::void (GtkTextBuffer* GtkTextIter* GtkTextIter*) "gtk_text_buffer_remove_all_tags")
   (macro gtk_text_buffer_create_tag::GtkTextTag* (GtkTextBuffer* gchar* gchar* . gchar*) "gtk_text_buffer_create_tag")
   (macro gtk_text_buffer_get_iter_at_line_offset::void (GtkTextBuffer* GtkTextIter* gint gint) "gtk_text_buffer_get_iter_at_line_offset")
   (macro gtk_text_buffer_get_iter_at_line_index::void (GtkTextBuffer* GtkTextIter* gint gint) "gtk_text_buffer_get_iter_at_line_index")
   (macro gtk_text_buffer_get_iter_at_offset::void (GtkTextBuffer* GtkTextIter* gint) "gtk_text_buffer_get_iter_at_offset")
   (macro gtk_text_buffer_get_iter_at_line::void (GtkTextBuffer* GtkTextIter* gint) "gtk_text_buffer_get_iter_at_line")
   (macro gtk_text_buffer_get_start_iter::void (GtkTextBuffer* GtkTextIter*) "gtk_text_buffer_get_start_iter")
   (macro gtk_text_buffer_get_end_iter::void (GtkTextBuffer* GtkTextIter*) "gtk_text_buffer_get_end_iter")
   (macro gtk_text_buffer_get_bounds::void (GtkTextBuffer* GtkTextIter* GtkTextIter*) "gtk_text_buffer_get_bounds")
   (macro gtk_text_buffer_get_iter_at_mark::void (GtkTextBuffer* GtkTextIter* GtkTextMark*) "gtk_text_buffer_get_iter_at_mark")
   (macro gtk_text_buffer_get_iter_at_child_anchor::void (GtkTextBuffer* GtkTextIter* GtkTextChildAnchor*) "gtk_text_buffer_get_iter_at_child_anchor")
   (macro gtk_text_buffer_get_modified::gboolean (GtkTextBuffer*) "gtk_text_buffer_get_modified")
   (macro gtk_text_buffer_set_modified::void (GtkTextBuffer* gboolean) "gtk_text_buffer_set_modified")
   (macro gtk_text_buffer_add_selection_clipboard::void (GtkTextBuffer* GtkClipboard*) "gtk_text_buffer_add_selection_clipboard")
   (macro gtk_text_buffer_remove_selection_clipboard::void (GtkTextBuffer* GtkClipboard*) "gtk_text_buffer_remove_selection_clipboard")
   (macro gtk_text_buffer_cut_clipboard::void (GtkTextBuffer* GtkClipboard* gboolean) "gtk_text_buffer_cut_clipboard")
   (macro gtk_text_buffer_copy_clipboard::void (GtkTextBuffer* GtkClipboard*) "gtk_text_buffer_copy_clipboard")
   (macro gtk_text_buffer_paste_clipboard::void (GtkTextBuffer* GtkClipboard* GtkTextIter* gboolean) "gtk_text_buffer_paste_clipboard")
   (macro gtk_text_buffer_get_selection_bounds::gboolean (GtkTextBuffer* GtkTextIter* GtkTextIter*) "gtk_text_buffer_get_selection_bounds")
   (macro gtk_text_buffer_delete_selection::gboolean (GtkTextBuffer* gboolean gboolean) "gtk_text_buffer_delete_selection")
   (macro gtk_text_buffer_begin_user_action::void (GtkTextBuffer*) "gtk_text_buffer_begin_user_action")
   (macro gtk_text_buffer_end_user_action::void (GtkTextBuffer*) "gtk_text_buffer_end_user_action")
   (macro _gtk_text_buffer_spew::void (GtkTextBuffer*) "_gtk_text_buffer_spew")
   (macro _gtk_text_buffer_get_btree::GtkTextBTree* (GtkTextBuffer*) "_gtk_text_buffer_get_btree")
   (macro _gtk_text_buffer_get_line_log_attrs::PangoLogAttr* (GtkTextBuffer* GtkTextIter* gint*) "_gtk_text_buffer_get_line_log_attrs")
   (macro _gtk_text_buffer_notify_will_remove_tag::void (GtkTextBuffer* GtkTextTag*) "_gtk_text_buffer_notify_will_remove_tag")
   (macro gtk_text_view_get_type::GType () "gtk_text_view_get_type")
   (macro gtk_text_view_new::GtkWidget* () "gtk_text_view_new")
   (macro gtk_text_view_new_with_buffer::GtkWidget* (GtkTextBuffer*) "gtk_text_view_new_with_buffer")
   (macro gtk_text_view_set_buffer::void (GtkTextView* GtkTextBuffer*) "gtk_text_view_set_buffer")
   (macro gtk_text_view_get_buffer::GtkTextBuffer* (GtkTextView*) "gtk_text_view_get_buffer")
   (macro gtk_text_view_scroll_to_iter::gboolean (GtkTextView* GtkTextIter* gdouble gboolean gdouble gdouble) "gtk_text_view_scroll_to_iter")
   (macro gtk_text_view_scroll_to_mark::void (GtkTextView* GtkTextMark* gdouble gboolean gdouble gdouble) "gtk_text_view_scroll_to_mark")
   (macro gtk_text_view_scroll_mark_onscreen::void (GtkTextView* GtkTextMark*) "gtk_text_view_scroll_mark_onscreen")
   (macro gtk_text_view_move_mark_onscreen::gboolean (GtkTextView* GtkTextMark*) "gtk_text_view_move_mark_onscreen")
   (macro gtk_text_view_place_cursor_onscreen::gboolean (GtkTextView*) "gtk_text_view_place_cursor_onscreen")
   (macro gtk_text_view_get_visible_rect::void (GtkTextView* GdkRectangle*) "gtk_text_view_get_visible_rect")
   (macro gtk_text_view_set_cursor_visible::void (GtkTextView* gboolean) "gtk_text_view_set_cursor_visible")
   (macro gtk_text_view_get_cursor_visible::gboolean (GtkTextView*) "gtk_text_view_get_cursor_visible")
   (macro gtk_text_view_get_iter_location::void (GtkTextView* GtkTextIter* GdkRectangle*) "gtk_text_view_get_iter_location")
   (macro gtk_text_view_get_iter_at_location::void (GtkTextView* GtkTextIter* gint gint) "gtk_text_view_get_iter_at_location")
   (macro gtk_text_view_get_iter_at_position::void (GtkTextView* GtkTextIter* gint* gint gint) "gtk_text_view_get_iter_at_position")
   (macro gtk_text_view_get_line_yrange::void (GtkTextView* GtkTextIter* gint* gint*) "gtk_text_view_get_line_yrange")
   (macro gtk_text_view_get_line_at_y::void (GtkTextView* GtkTextIter* gint gint*) "gtk_text_view_get_line_at_y")
   (macro gtk_text_view_buffer_to_window_coords::void (GtkTextView* GtkTextWindowType gint gint gint* gint*) "gtk_text_view_buffer_to_window_coords")
   (macro gtk_text_view_window_to_buffer_coords::void (GtkTextView* GtkTextWindowType gint gint gint* gint*) "gtk_text_view_window_to_buffer_coords")
   (macro gtk_text_view_get_window::GdkWindow* (GtkTextView* GtkTextWindowType) "gtk_text_view_get_window")
   (macro gtk_text_view_get_window_type::GtkTextWindowType (GtkTextView* GdkWindow*) "gtk_text_view_get_window_type")
   (macro gtk_text_view_set_border_window_size::void (GtkTextView* GtkTextWindowType gint) "gtk_text_view_set_border_window_size")
   (macro gtk_text_view_get_border_window_size::gint (GtkTextView* GtkTextWindowType) "gtk_text_view_get_border_window_size")
   (macro gtk_text_view_forward_display_line::gboolean (GtkTextView* GtkTextIter*) "gtk_text_view_forward_display_line")
   (macro gtk_text_view_backward_display_line::gboolean (GtkTextView* GtkTextIter*) "gtk_text_view_backward_display_line")
   (macro gtk_text_view_forward_display_line_end::gboolean (GtkTextView* GtkTextIter*) "gtk_text_view_forward_display_line_end")
   (macro gtk_text_view_backward_display_line_start::gboolean (GtkTextView* GtkTextIter*) "gtk_text_view_backward_display_line_start")
   (macro gtk_text_view_starts_display_line::gboolean (GtkTextView* GtkTextIter*) "gtk_text_view_starts_display_line")
   (macro gtk_text_view_move_visually::gboolean (GtkTextView* GtkTextIter* gint) "gtk_text_view_move_visually")
   (macro gtk_text_view_add_child_at_anchor::void (GtkTextView* GtkWidget* GtkTextChildAnchor*) "gtk_text_view_add_child_at_anchor")
   (macro gtk_text_view_add_child_in_window::void (GtkTextView* GtkWidget* GtkTextWindowType gint gint) "gtk_text_view_add_child_in_window")
   (macro gtk_text_view_move_child::void (GtkTextView* GtkWidget* gint gint) "gtk_text_view_move_child")
   (macro gtk_text_view_set_wrap_mode::void (GtkTextView* GtkWrapMode) "gtk_text_view_set_wrap_mode")
   (macro gtk_text_view_get_wrap_mode::GtkWrapMode (GtkTextView*) "gtk_text_view_get_wrap_mode")
   (macro gtk_text_view_set_editable::void (GtkTextView* gboolean) "gtk_text_view_set_editable")
   (macro gtk_text_view_get_editable::gboolean (GtkTextView*) "gtk_text_view_get_editable")
   (macro gtk_text_view_set_overwrite::void (GtkTextView* gboolean) "gtk_text_view_set_overwrite")
   (macro gtk_text_view_get_overwrite::gboolean (GtkTextView*) "gtk_text_view_get_overwrite")
   (macro gtk_text_view_set_accepts_tab::void (GtkTextView* gboolean) "gtk_text_view_set_accepts_tab")
   (macro gtk_text_view_get_accepts_tab::gboolean (GtkTextView*) "gtk_text_view_get_accepts_tab")
   (macro gtk_text_view_set_pixels_above_lines::void (GtkTextView* gint) "gtk_text_view_set_pixels_above_lines")
   (macro gtk_text_view_get_pixels_above_lines::gint (GtkTextView*) "gtk_text_view_get_pixels_above_lines")
   (macro gtk_text_view_set_pixels_below_lines::void (GtkTextView* gint) "gtk_text_view_set_pixels_below_lines")
   (macro gtk_text_view_get_pixels_below_lines::gint (GtkTextView*) "gtk_text_view_get_pixels_below_lines")
   (macro gtk_text_view_set_pixels_inside_wrap::void (GtkTextView* gint) "gtk_text_view_set_pixels_inside_wrap")
   (macro gtk_text_view_get_pixels_inside_wrap::gint (GtkTextView*) "gtk_text_view_get_pixels_inside_wrap")
   (macro gtk_text_view_set_justification::void (GtkTextView* GtkJustification) "gtk_text_view_set_justification")
   (macro gtk_text_view_get_justification::GtkJustification (GtkTextView*) "gtk_text_view_get_justification")
   (macro gtk_text_view_set_left_margin::void (GtkTextView* gint) "gtk_text_view_set_left_margin")
   (macro gtk_text_view_get_left_margin::gint (GtkTextView*) "gtk_text_view_get_left_margin")
   (macro gtk_text_view_set_right_margin::void (GtkTextView* gint) "gtk_text_view_set_right_margin")
   (macro gtk_text_view_get_right_margin::gint (GtkTextView*) "gtk_text_view_get_right_margin")
   (macro gtk_text_view_set_indent::void (GtkTextView* gint) "gtk_text_view_set_indent")
   (macro gtk_text_view_get_indent::gint (GtkTextView*) "gtk_text_view_get_indent")
   (macro gtk_text_view_set_tabs::void (GtkTextView* PangoTabArray*) "gtk_text_view_set_tabs")
   (macro gtk_text_view_get_tabs::PangoTabArray* (GtkTextView*) "gtk_text_view_get_tabs")
   (macro gtk_text_view_get_default_attributes::GtkTextAttributes* (GtkTextView*) "gtk_text_view_get_default_attributes")
   (macro gtk_tips_query_get_type::GtkType () "gtk_tips_query_get_type")
   (macro gtk_tips_query_new::GtkWidget* () "gtk_tips_query_new")
   (macro gtk_tips_query_start_query::void (GtkTipsQuery*) "gtk_tips_query_start_query")
   (macro gtk_tips_query_stop_query::void (GtkTipsQuery*) "gtk_tips_query_stop_query")
   (macro gtk_tips_query_set_caller::void (GtkTipsQuery* GtkWidget*) "gtk_tips_query_set_caller")
   (macro gtk_tips_query_set_labels::void (GtkTipsQuery* gchar* gchar*) "gtk_tips_query_set_labels")
   (macro gtk_toolbar_get_type::GType () "gtk_toolbar_get_type")
   (macro gtk_toolbar_new::GtkWidget* () "gtk_toolbar_new")
   (macro gtk_toolbar_insert::void (GtkToolbar* GtkToolItem* gint) "gtk_toolbar_insert")
   (macro gtk_toolbar_get_item_index::gint (GtkToolbar* GtkToolItem*) "gtk_toolbar_get_item_index")
   (macro gtk_toolbar_get_n_items::gint (GtkToolbar*) "gtk_toolbar_get_n_items")
   (macro gtk_toolbar_get_nth_item::GtkToolItem* (GtkToolbar* gint) "gtk_toolbar_get_nth_item")
   (macro gtk_toolbar_get_show_arrow::gboolean (GtkToolbar*) "gtk_toolbar_get_show_arrow")
   (macro gtk_toolbar_set_show_arrow::void (GtkToolbar* gboolean) "gtk_toolbar_set_show_arrow")
   (macro gtk_toolbar_get_orientation::GtkOrientation (GtkToolbar*) "gtk_toolbar_get_orientation")
   (macro gtk_toolbar_set_orientation::void (GtkToolbar* GtkOrientation) "gtk_toolbar_set_orientation")
   (macro gtk_toolbar_get_tooltips::gboolean (GtkToolbar*) "gtk_toolbar_get_tooltips")
   (macro gtk_toolbar_set_tooltips::void (GtkToolbar* gboolean) "gtk_toolbar_set_tooltips")
   (macro gtk_toolbar_get_style::GtkToolbarStyle (GtkToolbar*) "gtk_toolbar_get_style")
   (macro gtk_toolbar_set_style::void (GtkToolbar* GtkToolbarStyle) "gtk_toolbar_set_style")
   (macro gtk_toolbar_unset_style::void (GtkToolbar*) "gtk_toolbar_unset_style")
   (macro gtk_toolbar_get_icon_size::GtkIconSize (GtkToolbar*) "gtk_toolbar_get_icon_size")
   (macro gtk_toolbar_get_relief_style::GtkReliefStyle (GtkToolbar*) "gtk_toolbar_get_relief_style")
   (macro gtk_toolbar_get_drop_index::gint (GtkToolbar* gint gint) "gtk_toolbar_get_drop_index")
   (macro gtk_toolbar_set_drop_highlight_item::void (GtkToolbar* GtkToolItem* gint) "gtk_toolbar_set_drop_highlight_item")
   (macro _gtk_toolbar_elide_underscores::gchar* (gchar*) "_gtk_toolbar_elide_underscores")
   (macro _gtk_toolbar_paint_space_line::void (GtkWidget* GtkToolbar* GdkRectangle* GtkAllocation*) "_gtk_toolbar_paint_space_line")
   (macro _gtk_toolbar_get_default_space_size::gint () "_gtk_toolbar_get_default_space_size")
   (macro _gtk_toolbar_rebuild_menu::void (GtkToolbar*) "_gtk_toolbar_rebuild_menu")
   (macro gtk_toolbar_set_icon_size::void (GtkToolbar* GtkIconSize) "gtk_toolbar_set_icon_size")
   (macro gtk_toolbar_unset_icon_size::void (GtkToolbar*) "gtk_toolbar_unset_icon_size")
   (macro gtk_toolbar_append_item::GtkWidget* (GtkToolbar* string string string GtkWidget* GtkSignalFunc gpointer) "gtk_toolbar_append_item")
   (macro gtk_toolbar_prepend_item::GtkWidget* (GtkToolbar* string string string GtkWidget* GtkSignalFunc gpointer) "gtk_toolbar_prepend_item")
   (macro gtk_toolbar_insert_item::GtkWidget* (GtkToolbar* string string string GtkWidget* GtkSignalFunc gpointer gint) "gtk_toolbar_insert_item")
   (macro gtk_toolbar_insert_stock::GtkWidget* (GtkToolbar* gchar* string string GtkSignalFunc gpointer gint) "gtk_toolbar_insert_stock")
   (macro gtk_toolbar_append_space::void (GtkToolbar*) "gtk_toolbar_append_space")
   (macro gtk_toolbar_prepend_space::void (GtkToolbar*) "gtk_toolbar_prepend_space")
   (macro gtk_toolbar_insert_space::void (GtkToolbar* gint) "gtk_toolbar_insert_space")
   (macro gtk_toolbar_remove_space::void (GtkToolbar* gint) "gtk_toolbar_remove_space")
   (macro gtk_toolbar_append_element::GtkWidget* (GtkToolbar* GtkToolbarChildType GtkWidget* string string string GtkWidget* GtkSignalFunc gpointer) "gtk_toolbar_append_element")
   (macro gtk_toolbar_prepend_element::GtkWidget* (GtkToolbar* GtkToolbarChildType GtkWidget* string string string GtkWidget* GtkSignalFunc gpointer) "gtk_toolbar_prepend_element")
   (macro gtk_toolbar_insert_element::GtkWidget* (GtkToolbar* GtkToolbarChildType GtkWidget* string string string GtkWidget* GtkSignalFunc gpointer gint) "gtk_toolbar_insert_element")
   (macro gtk_toolbar_append_widget::void (GtkToolbar* GtkWidget* string string) "gtk_toolbar_append_widget")
   (macro gtk_toolbar_prepend_widget::void (GtkToolbar* GtkWidget* string string) "gtk_toolbar_prepend_widget")
   (macro gtk_toolbar_insert_widget::void (GtkToolbar* GtkWidget* string string gint) "gtk_toolbar_insert_widget")
   (macro gtk_tree_drag_source_get_type::GType () "gtk_tree_drag_source_get_type")
   (macro gtk_tree_drag_source_row_draggable::gboolean (GtkTreeDragSource* GtkTreePath*) "gtk_tree_drag_source_row_draggable")
   (macro gtk_tree_drag_source_drag_data_delete::gboolean (GtkTreeDragSource* GtkTreePath*) "gtk_tree_drag_source_drag_data_delete")
   (macro gtk_tree_drag_source_drag_data_get::gboolean (GtkTreeDragSource* GtkTreePath* GtkSelectionData*) "gtk_tree_drag_source_drag_data_get")
   (macro gtk_tree_drag_dest_get_type::GType () "gtk_tree_drag_dest_get_type")
   (macro gtk_tree_drag_dest_drag_data_received::gboolean (GtkTreeDragDest* GtkTreePath* GtkSelectionData*) "gtk_tree_drag_dest_drag_data_received")
   (macro gtk_tree_drag_dest_row_drop_possible::gboolean (GtkTreeDragDest* GtkTreePath* GtkSelectionData*) "gtk_tree_drag_dest_row_drop_possible")
   (macro gtk_tree_set_row_drag_data::gboolean (GtkSelectionData* GtkTreeModel* GtkTreePath*) "gtk_tree_set_row_drag_data")
   (macro gtk_tree_get_row_drag_data::gboolean (GtkSelectionData* GtkTreeModel** GtkTreePath**) "gtk_tree_get_row_drag_data")
   (macro gtk_tree_model_sort_get_type::GType () "gtk_tree_model_sort_get_type")
   (macro gtk_tree_model_sort_new_with_model::GtkTreeModel* (GtkTreeModel*) "gtk_tree_model_sort_new_with_model")
   (macro gtk_tree_model_sort_get_model::GtkTreeModel* (GtkTreeModelSort*) "gtk_tree_model_sort_get_model")
   (macro gtk_tree_model_sort_convert_child_path_to_path::GtkTreePath* (GtkTreeModelSort* GtkTreePath*) "gtk_tree_model_sort_convert_child_path_to_path")
   (macro gtk_tree_model_sort_convert_child_iter_to_iter::void (GtkTreeModelSort* GtkTreeIter* GtkTreeIter*) "gtk_tree_model_sort_convert_child_iter_to_iter")
   (macro gtk_tree_model_sort_convert_path_to_child_path::GtkTreePath* (GtkTreeModelSort* GtkTreePath*) "gtk_tree_model_sort_convert_path_to_child_path")
   (macro gtk_tree_model_sort_convert_iter_to_child_iter::void (GtkTreeModelSort* GtkTreeIter* GtkTreeIter*) "gtk_tree_model_sort_convert_iter_to_child_iter")
   (macro gtk_tree_model_sort_reset_default_sort_func::void (GtkTreeModelSort*) "gtk_tree_model_sort_reset_default_sort_func")
   (macro gtk_tree_model_sort_clear_cache::void (GtkTreeModelSort*) "gtk_tree_model_sort_clear_cache")
   (macro gtk_tree_model_sort_iter_is_valid::gboolean (GtkTreeModelSort* GtkTreeIter*) "gtk_tree_model_sort_iter_is_valid")
   (macro gtk_tree_selection_get_type::GType () "gtk_tree_selection_get_type")
   (macro gtk_tree_selection_set_mode::void (GtkTreeSelection* GtkSelectionMode) "gtk_tree_selection_set_mode")
   (macro gtk_tree_selection_get_mode::GtkSelectionMode (GtkTreeSelection*) "gtk_tree_selection_get_mode")
   (macro gtk_tree_selection_set_select_function::void (GtkTreeSelection* GtkTreeSelectionFunc gpointer GtkDestroyNotify) "gtk_tree_selection_set_select_function")
   (macro gtk_tree_selection_get_user_data::gpointer (GtkTreeSelection*) "gtk_tree_selection_get_user_data")
   (macro gtk_tree_selection_get_tree_view::GtkTreeView* (GtkTreeSelection*) "gtk_tree_selection_get_tree_view")
   (macro gtk_tree_selection_get_selected::gboolean (GtkTreeSelection* GtkTreeModel** GtkTreeIter*) "gtk_tree_selection_get_selected")
   (macro gtk_tree_selection_get_selected_rows::GList* (GtkTreeSelection* GtkTreeModel**) "gtk_tree_selection_get_selected_rows")
   (macro gtk_tree_selection_count_selected_rows::gint (GtkTreeSelection*) "gtk_tree_selection_count_selected_rows")
   (macro gtk_tree_selection_selected_foreach::void (GtkTreeSelection* GtkTreeSelectionForeachFunc gpointer) "gtk_tree_selection_selected_foreach")
   (macro gtk_tree_selection_select_path::void (GtkTreeSelection* GtkTreePath*) "gtk_tree_selection_select_path")
   (macro gtk_tree_selection_unselect_path::void (GtkTreeSelection* GtkTreePath*) "gtk_tree_selection_unselect_path")
   (macro gtk_tree_selection_select_iter::void (GtkTreeSelection* GtkTreeIter*) "gtk_tree_selection_select_iter")
   (macro gtk_tree_selection_unselect_iter::void (GtkTreeSelection* GtkTreeIter*) "gtk_tree_selection_unselect_iter")
   (macro gtk_tree_selection_path_is_selected::gboolean (GtkTreeSelection* GtkTreePath*) "gtk_tree_selection_path_is_selected")
   (macro gtk_tree_selection_iter_is_selected::gboolean (GtkTreeSelection* GtkTreeIter*) "gtk_tree_selection_iter_is_selected")
   (macro gtk_tree_selection_select_all::void (GtkTreeSelection*) "gtk_tree_selection_select_all")
   (macro gtk_tree_selection_unselect_all::void (GtkTreeSelection*) "gtk_tree_selection_unselect_all")
   (macro gtk_tree_selection_select_range::void (GtkTreeSelection* GtkTreePath* GtkTreePath*) "gtk_tree_selection_select_range")
   (macro gtk_tree_selection_unselect_range::void (GtkTreeSelection* GtkTreePath* GtkTreePath*) "gtk_tree_selection_unselect_range")
   (macro gtk_tree_store_get_type::GType () "gtk_tree_store_get_type")
   (macro gtk_tree_store_new::GtkTreeStore* (gint . gint) "gtk_tree_store_new")
   (macro gtk_tree_store_newv::GtkTreeStore* (gint GType*) "gtk_tree_store_newv")
   (macro gtk_tree_store_set_column_types::void (GtkTreeStore* gint GType*) "gtk_tree_store_set_column_types")
   (macro gtk_tree_store_set_value::void (GtkTreeStore* GtkTreeIter* gint GValue*) "gtk_tree_store_set_value")
   (macro gtk_tree_store_set::void (GtkTreeStore* GtkTreeIter* . GtkTreeIter*) "gtk_tree_store_set")
   (macro gtk_tree_store_remove::gboolean (GtkTreeStore* GtkTreeIter*) "gtk_tree_store_remove")
   (macro gtk_tree_store_insert::void (GtkTreeStore* GtkTreeIter* GtkTreeIter* gint) "gtk_tree_store_insert")
   (macro gtk_tree_store_insert_before::void (GtkTreeStore* GtkTreeIter* GtkTreeIter* GtkTreeIter*) "gtk_tree_store_insert_before")
   (macro gtk_tree_store_insert_after::void (GtkTreeStore* GtkTreeIter* GtkTreeIter* GtkTreeIter*) "gtk_tree_store_insert_after")
   (macro gtk_tree_store_prepend::void (GtkTreeStore* GtkTreeIter* GtkTreeIter*) "gtk_tree_store_prepend")
   (macro gtk_tree_store_append::void (GtkTreeStore* GtkTreeIter* GtkTreeIter*) "gtk_tree_store_append")
   (macro gtk_tree_store_is_ancestor::gboolean (GtkTreeStore* GtkTreeIter* GtkTreeIter*) "gtk_tree_store_is_ancestor")
   (macro gtk_tree_store_iter_depth::gint (GtkTreeStore* GtkTreeIter*) "gtk_tree_store_iter_depth")
   (macro gtk_tree_store_clear::void (GtkTreeStore*) "gtk_tree_store_clear")
   (macro gtk_tree_store_iter_is_valid::gboolean (GtkTreeStore* GtkTreeIter*) "gtk_tree_store_iter_is_valid")
   (macro gtk_tree_store_reorder::void (GtkTreeStore* GtkTreeIter* gint*) "gtk_tree_store_reorder")
   (macro gtk_tree_store_swap::void (GtkTreeStore* GtkTreeIter* GtkTreeIter*) "gtk_tree_store_swap")
   (macro gtk_tree_store_move_before::void (GtkTreeStore* GtkTreeIter* GtkTreeIter*) "gtk_tree_store_move_before")
   (macro gtk_tree_store_move_after::void (GtkTreeStore* GtkTreeIter* GtkTreeIter*) "gtk_tree_store_move_after")
   (macro gtk_ui_manager_get_type::GType () "gtk_ui_manager_get_type")
   (macro gtk_ui_manager_new::GtkUIManager* () "gtk_ui_manager_new")
   (macro gtk_ui_manager_set_add_tearoffs::void (GtkUIManager* gboolean) "gtk_ui_manager_set_add_tearoffs")
   (macro gtk_ui_manager_get_add_tearoffs::gboolean (GtkUIManager*) "gtk_ui_manager_get_add_tearoffs")
   (macro gtk_ui_manager_insert_action_group::void (GtkUIManager* GtkActionGroup* gint) "gtk_ui_manager_insert_action_group")
   (macro gtk_ui_manager_remove_action_group::void (GtkUIManager* GtkActionGroup*) "gtk_ui_manager_remove_action_group")
   (macro gtk_ui_manager_get_action_groups::GList* (GtkUIManager*) "gtk_ui_manager_get_action_groups")
   (macro gtk_ui_manager_get_accel_group::GtkAccelGroup* (GtkUIManager*) "gtk_ui_manager_get_accel_group")
   (macro gtk_ui_manager_get_widget::GtkWidget* (GtkUIManager* gchar*) "gtk_ui_manager_get_widget")
   (macro gtk_ui_manager_get_toplevels::GSList* (GtkUIManager* GtkUIManagerItemType) "gtk_ui_manager_get_toplevels")
   (macro gtk_ui_manager_get_action::GtkAction* (GtkUIManager* gchar*) "gtk_ui_manager_get_action")
   (macro gtk_ui_manager_add_ui_from_string::guint (GtkUIManager* gchar* gssize GError**) "gtk_ui_manager_add_ui_from_string")
   (macro gtk_ui_manager_add_ui_from_file::guint (GtkUIManager* gchar* GError**) "gtk_ui_manager_add_ui_from_file")
   (macro gtk_ui_manager_add_ui::void (GtkUIManager* guint gchar* gchar* gchar* GtkUIManagerItemType gboolean) "gtk_ui_manager_add_ui")
   (macro gtk_ui_manager_remove_ui::void (GtkUIManager* guint) "gtk_ui_manager_remove_ui")
   (macro gtk_ui_manager_get_ui::gchar* (GtkUIManager*) "gtk_ui_manager_get_ui")
   (macro gtk_ui_manager_ensure_update::void (GtkUIManager*) "gtk_ui_manager_ensure_update")
   (macro gtk_ui_manager_new_merge_id::guint (GtkUIManager*) "gtk_ui_manager_new_merge_id")
   (macro gtk_vbutton_box_get_type::GType () "gtk_vbutton_box_get_type")
   (macro gtk_vbutton_box_new::GtkWidget* () "gtk_vbutton_box_new")
   (macro gtk_vbutton_box_get_spacing_default::gint () "gtk_vbutton_box_get_spacing_default")
   (macro gtk_vbutton_box_set_spacing_default::void (gint) "gtk_vbutton_box_set_spacing_default")
   (macro gtk_vbutton_box_get_layout_default::GtkButtonBoxStyle () "gtk_vbutton_box_get_layout_default")
   (macro gtk_vbutton_box_set_layout_default::void (GtkButtonBoxStyle) "gtk_vbutton_box_set_layout_default")
   (macro gtk_vpaned_get_type::GType () "gtk_vpaned_get_type")
   (macro gtk_vpaned_new::GtkWidget* () "gtk_vpaned_new")
   (macro gtk_vruler_get_type::GType () "gtk_vruler_get_type")
   (macro gtk_vruler_new::GtkWidget* () "gtk_vruler_new")
   (macro gtk_vscale_get_type::GType () "gtk_vscale_get_type")
   (macro gtk_vscale_new::GtkWidget* (GtkAdjustment*) "gtk_vscale_new")
   (macro gtk_vscale_new_with_range::GtkWidget* (gdouble gdouble gdouble) "gtk_vscale_new_with_range")
   (macro gtk_vseparator_get_type::GType () "gtk_vseparator_get_type")
   (macro gtk_vseparator_new::GtkWidget* () "gtk_vseparator_new")
    (type ptrdiff_t int "ptrdiff_t")
    (type size_t uint "size_t")
    (type wchar_t long "wchar_t")
    (type gint8 schar "gint8")
    (type guint8 uchar "guint8")
    (type gint16 short "gint16")
    (type guint16 ushort "guint16")
    (type gint32 int "gint32")
    (type guint32 uint "guint32")
    (type gint64 llong "gint64")
    (type guint64 llong "guint64")
    (type gssize int "gssize")
    (type gsize uint "gsize")
    (type s-_GStaticMutex (struct (runtime_mutex::s-_GMutex* "runtime_mutex") (static_mutex::s-monster__s1001 "static_mutex")) "struct _GStaticMutex")
    (type GStaticMutex s-_GStaticMutex "GStaticMutex")
    (type s-_GMutex (struct) "struct _GMutex")
    (type s-monster__s1001 (union (pad::char-array-24 "pad") (dummy_double::double "dummy_double") (dummy_pointer::void* "dummy_pointer") (dummy_long::long "dummy_long")) "void")
    (type char-array-24 (array char) "char $[ 24 ]")
    (type void* (pointer void) "void *")
    (type s-_GSystemThread (union (data::char-array-4 "data") (dummy_double::double "dummy_double") (dummy_pointer::void* "dummy_pointer") (dummy_long::long "dummy_long")) "union _GSystemThread")
    (type GSystemThread s-_GSystemThread "GSystemThread")
    (type char-array-4 (array char) "char $[ 4 ]")
    (type GPid int "GPid")
    (type gchar char "gchar")
    (type gshort short "gshort")
    (type glong long "glong")
    (type gint int "gint")
    (type gboolean gint "gboolean")
    (type guchar uchar "guchar")
    (type gushort ushort "gushort")
    (type gulong ulong "gulong")
    (type guint uint "guint")
    (type gfloat float "gfloat")
    (type gdouble double "gdouble")
    (type gpointer void* "gpointer")
    (type gconstpointer void* "gconstpointer")
    (type gconstpointer,gconstpointer->gint "gint ($(gconstpointer,gconstpointer))")
    (type *gconstpointer,gconstpointer->gint (function gint (gconstpointer gconstpointer)) "gint ((*$)(gconstpointer,gconstpointer))")
    (type GCompareFunc *gconstpointer,gconstpointer->gint "GCompareFunc")
    (type gconstpointer,gconstpointer,gpointer->gint "gint ($(gconstpointer,gconstpointer,gpointer))")
    (type *gconstpointer,gconstpointer,gpointer->gint (function gint (gconstpointer gconstpointer gpointer)) "gint ((*$)(gconstpointer,gconstpointer,gpointer))")
    (type GCompareDataFunc *gconstpointer,gconstpointer,gpointer->gint "GCompareDataFunc")
    (type gconstpointer,gconstpointer->gboolean "gboolean ($(gconstpointer,gconstpointer))")
    (type *gconstpointer,gconstpointer->gboolean (function gboolean (gconstpointer gconstpointer)) "gboolean ((*$)(gconstpointer,gconstpointer))")
    (type GEqualFunc *gconstpointer,gconstpointer->gboolean "GEqualFunc")
    (type gpointer->void "void ($(gpointer))")
    (type *gpointer->void (function void (gpointer)) "void ((*$)(gpointer))")
    (type GDestroyNotify *gpointer->void "GDestroyNotify")
    (type gpointer,gpointer->void "void ($(gpointer,gpointer))")
    (type *gpointer,gpointer->void (function void (gpointer gpointer)) "void ((*$)(gpointer,gpointer))")
    (type GFunc *gpointer,gpointer->void "GFunc")
    (type gconstpointer->guint "guint ($(gconstpointer))")
    (type *gconstpointer->guint (function guint (gconstpointer)) "guint ((*$)(gconstpointer))")
    (type GHashFunc *gconstpointer->guint "GHashFunc")
    (type gpointer,gpointer,gpointer->void "void ($(gpointer,gpointer,gpointer))")
    (type *gpointer,gpointer,gpointer->void (function void (gpointer gpointer gpointer)) "void ((*$)(gpointer,gpointer,gpointer))")
    (type GHFunc *gpointer,gpointer,gpointer->void "GHFunc")
    (type GFreeFunc *gpointer->void "GFreeFunc")
;    (type gchar* (pointer gchar) "gchar *")
    (type gchar* string "gchar *")
    (type gchar*,gpointer->gchar* "gchar *($(gchar *,gpointer))")
    (type *gchar*,gpointer->gchar* (function gchar* (gchar* gpointer)) "gchar *((*$)(gchar *,gpointer))")
    (type GTranslateFunc *gchar*,gpointer->gchar* "GTranslateFunc")
    (type s-_GDoubleIEEE754 (union (v_double::gdouble "v_double") (mpn::s-monster__s1003 "mpn")) "union _GDoubleIEEE754")
    (type GDoubleIEEE754 s-_GDoubleIEEE754 "GDoubleIEEE754")
    (type s-_GFloatIEEE754 (union (v_float::gfloat "v_float") (mpn::s-monster__s1002 "mpn")) "union _GFloatIEEE754")
    (type GFloatIEEE754 s-_GFloatIEEE754 "GFloatIEEE754")
    (type s-monster__s1002 (struct (mantissa::guint "mantissa") (biased_exponent::guint "biased_exponent") (sign::guint "sign")) "void")
    (type s-monster__s1003 (struct (mantissa_low::guint "mantissa_low") (mantissa_high::guint "mantissa_high") (biased_exponent::guint "biased_exponent") (sign::guint "sign")) "void")
    (type s-_GTimeVal (struct (tv_sec::glong "tv_sec") (tv_usec::glong "tv_usec")) "struct _GTimeVal")
    (type GTimeVal s-_GTimeVal "GTimeVal")
    (type s-_GArray (struct (data::gchar* "data") (len::guint "len")) "struct _GArray")
    (type GArray s-_GArray "GArray")
    (type s-_GByteArray (struct (data::guint8* "data") (len::guint "len")) "struct _GByteArray")
    (type GByteArray s-_GByteArray "GByteArray")
    (type s-_GPtrArray (struct (pdata::gpointer* "pdata") (len::guint "len")) "struct _GPtrArray")
    (type GPtrArray s-_GPtrArray "GPtrArray")
    (type guint8* (pointer guint8) "guint8 *")
    (type gpointer* (pointer gpointer) "gpointer *")
    (type GQuark guint32 "GQuark")
    (type s-_GError (struct (domain::GQuark "domain") (code::gint "code") (message::gchar* "message")) "struct _GError")
    (type GError s-_GError "GError")
    (type monster__e1023 int "long")
    (macro G_THREAD_ERROR_AGAIN::int "G_THREAD_ERROR_AGAIN")
    (type GThreadError monster__e1023 "GThreadError")
    (type gpointer->gpointer "gpointer ($(gpointer))")
    (type *gpointer->gpointer (function gpointer (gpointer)) "gpointer ((*$)(gpointer))")
    (type GThreadFunc *gpointer->gpointer "GThreadFunc")
    (type monster__e1024 int "long")
    (macro G_THREAD_PRIORITY_LOW::int "G_THREAD_PRIORITY_LOW")
    (macro G_THREAD_PRIORITY_NORMAL::int "G_THREAD_PRIORITY_NORMAL")
    (macro G_THREAD_PRIORITY_HIGH::int "G_THREAD_PRIORITY_HIGH")
    (macro G_THREAD_PRIORITY_URGENT::int "G_THREAD_PRIORITY_URGENT")
    (type GThreadPriority monster__e1024 "GThreadPriority")
    (type s-_GThread (struct (func::GThreadFunc "func") (data::gpointer "data") (joinable::gboolean "joinable") (priority::GThreadPriority "priority")) "struct _GThread")
    (type GThread s-_GThread "GThread")
    (type GMutex s-_GMutex "GMutex")
    (type s-_GCond (struct) "struct _GCond")
    (type GCond s-_GCond "GCond")
    (type s-_GPrivate (struct) "struct _GPrivate")
    (type GPrivate s-_GPrivate "GPrivate")
    (type s-_GStaticPrivate (struct (index::guint "index")) "struct _GStaticPrivate")
    (type GStaticPrivate s-_GStaticPrivate "GStaticPrivate")
    (type s-_GThreadFunctions (struct (mutex_new::*void->GMutex* "mutex_new") (mutex_lock::*GMutex*->void "mutex_lock") (mutex_trylock::*GMutex*->gboolean "mutex_trylock") (mutex_unlock::*GMutex*->void "mutex_unlock") (mutex_free::*GMutex*->void "mutex_free") (cond_new::*void->GCond* "cond_new") (cond_signal::*GCond*->void "cond_signal") (cond_broadcast::*GCond*->void "cond_broadcast") (cond_wait::*GCond*,GMutex*->void "cond_wait") (cond_timed_wait::*GCond*,GMutex*,GTimeVal*->gboolean "cond_timed_wait") (cond_free::*GCond*->void "cond_free") (private_new::*GDestroyNotify->GPrivate* "private_new") (private_get::*GPrivate*->gpointer "private_get") (private_set::*GPrivate*,gpointer->void "private_set") (thread_create::*GThreadFunc,gpointer,gulong,gboolean,gboolean,GThreadPriority,gpointer,GError**->void "thread_create") (thread_yield::*void->void "thread_yield") (thread_join::*gpointer->void "thread_join") (thread_exit::*void->void "thread_exit") (thread_set_priority::*gpointer,GThreadPriority->void "thread_set_priority") (thread_self::*gpointer->void "thread_self") (thread_equal::*gpointer,gpointer->gboolean "thread_equal")) "struct _GThreadFunctions")
    (type GThreadFunctions s-_GThreadFunctions "GThreadFunctions")
    (type void->GMutex* "GMutex *($(void))")
    (type *void->GMutex* (function GMutex* (void)) "GMutex *((*$)(void))")
    (type GMutex*->void "void ($(GMutex *))")
    (type *GMutex*->void (function void (GMutex*)) "void ((*$)(GMutex *))")
    (type GMutex*->gboolean "gboolean ($(GMutex *))")
    (type *GMutex*->gboolean (function gboolean (GMutex*)) "gboolean ((*$)(GMutex *))")
    (type void->GCond* "GCond *($(void))")
    (type *void->GCond* (function GCond* (void)) "GCond *((*$)(void))")
    (type GCond*->void "void ($(GCond *))")
    (type *GCond*->void (function void (GCond*)) "void ((*$)(GCond *))")
    (type GCond*,GMutex*->void "void ($(GCond *,GMutex *))")
    (type *GCond*,GMutex*->void (function void (GCond* GMutex*)) "void ((*$)(GCond *,GMutex *))")
    (type GCond*,GMutex*,GTimeVal*->gboolean "gboolean ($(GCond *,GMutex *,GTimeVal *))")
    (type *GCond*,GMutex*,GTimeVal*->gboolean (function gboolean (GCond* GMutex* GTimeVal*)) "gboolean ((*$)(GCond *,GMutex *,GTimeVal *))")
    (type GDestroyNotify->GPrivate* "GPrivate *($(GDestroyNotify))")
    (type *GDestroyNotify->GPrivate* (function GPrivate* (GDestroyNotify)) "GPrivate *((*$)(GDestroyNotify))")
    (type GPrivate*->gpointer "gpointer ($(GPrivate *))")
    (type *GPrivate*->gpointer (function gpointer (GPrivate*)) "gpointer ((*$)(GPrivate *))")
    (type GPrivate*,gpointer->void "void ($(GPrivate *,gpointer))")
    (type *GPrivate*,gpointer->void (function void (GPrivate* gpointer)) "void ((*$)(GPrivate *,gpointer))")
    (type GError** (pointer GError*) "GError **")
    (type GThreadFunc,gpointer,gulong,gboolean,gboolean,GThreadPriority,gpointer,GError**->void "void ($(GThreadFunc,gpointer,gulong,gboolean,gboolean,GThreadPriority,gpointer,GError **))")
    (type *GThreadFunc,gpointer,gulong,gboolean,gboolean,GThreadPriority,gpointer,GError**->void (function void (GThreadFunc gpointer gulong gboolean gboolean GThreadPriority gpointer GError**)) "void ((*$)(GThreadFunc,gpointer,gulong,gboolean,gboolean,GThreadPriority,gpointer,GError **))")
    (type void->void "void ($(void))")
    (type *void->void (function void (void)) "void ((*$)(void))")
    (type gpointer,GThreadPriority->void "void ($(gpointer,GThreadPriority))")
    (type *gpointer,GThreadPriority->void (function void (gpointer GThreadPriority)) "void ((*$)(gpointer,GThreadPriority))")
    (type gpointer,gpointer->gboolean "gboolean ($(gpointer,gpointer))")
    (type *gpointer,gpointer->gboolean (function gboolean (gpointer gpointer)) "gboolean ((*$)(gpointer,gpointer))")
    (type s-_GStaticRecMutex (struct (mutex::GStaticMutex "mutex") (depth::guint "depth") (owner::GSystemThread "owner")) "struct _GStaticRecMutex")
    (type GStaticRecMutex s-_GStaticRecMutex "GStaticRecMutex")
    (type s-_GStaticRWLock (struct (mutex::GStaticMutex "mutex") (read_cond::GCond* "read_cond") (write_cond::GCond* "write_cond") (read_counter::guint "read_counter") (have_writer::gboolean "have_writer") (want_to_read::guint "want_to_read") (want_to_write::guint "want_to_write")) "struct _GStaticRWLock")
    (type GStaticRWLock s-_GStaticRWLock "GStaticRWLock")
    (type monster__e1025 int "long")
    (macro G_ONCE_STATUS_NOTCALLED::int "G_ONCE_STATUS_NOTCALLED")
    (macro G_ONCE_STATUS_PROGRESS::int "G_ONCE_STATUS_PROGRESS")
    (macro G_ONCE_STATUS_READY::int "G_ONCE_STATUS_READY")
    (type GOnceStatus monster__e1025 "GOnceStatus")
    (type s-_GOnce (struct (status::GOnceStatus "status") (retval::gpointer "retval")) "struct _GOnce")
    (type GOnce s-_GOnce "GOnce")
    (type s-_GAsyncQueue (struct) "struct _GAsyncQueue")
    (type GAsyncQueue s-_GAsyncQueue "GAsyncQueue")
    (type s-_GAllocator (struct) "struct _GAllocator")
    (type GAllocator s-_GAllocator "GAllocator")
    (type s-_GMemChunk (struct) "struct _GMemChunk")
    (type GMemChunk s-_GMemChunk "GMemChunk")
    (type s-_GMemVTable (struct (malloc::*gsize->gpointer "malloc") (realloc::*gpointer,gsize->gpointer "realloc") (free::*gpointer->void "free") (calloc::*gsize,gsize->gpointer "calloc") (try_malloc::*gsize->gpointer "try_malloc") (try_realloc::*gpointer,gsize->gpointer "try_realloc")) "struct _GMemVTable")
    (type GMemVTable s-_GMemVTable "GMemVTable")
    (type gsize->gpointer "gpointer ($(gsize))")
    (type *gsize->gpointer (function gpointer (gsize)) "gpointer ((*$)(gsize))")
    (type gpointer,gsize->gpointer "gpointer ($(gpointer,gsize))")
    (type *gpointer,gsize->gpointer (function gpointer (gpointer gsize)) "gpointer ((*$)(gpointer,gsize))")
    (type gsize,gsize->gpointer "gpointer ($(gsize,gsize))")
    (type *gsize,gsize->gpointer (function gpointer (gsize gsize)) "gpointer ((*$)(gsize,gsize))")
    (type s-_GList (struct (data::gpointer "data") (next::GList* "next") (prev::GList* "prev")) "struct _GList")
    (type GList s-_GList "GList")
    (type s-_GCache (struct) "struct _GCache")
    (type GCache s-_GCache "GCache")
    (type GCacheNewFunc *gpointer->gpointer "GCacheNewFunc")
    (type GCacheDupFunc *gpointer->gpointer "GCacheDupFunc")
    (type GCacheDestroyFunc *gpointer->void "GCacheDestroyFunc")
    (type s-_GCompletion (struct (items::GList* "items") (func::GCompletionFunc "func") (prefix::gchar* "prefix") (cache::GList* "cache") (strncmp_func::GCompletionStrncmpFunc "strncmp_func")) "struct _GCompletion")
    (type GCompletion s-_GCompletion "GCompletion")
    (type gpointer->gchar* "gchar *($(gpointer))")
    (type *gpointer->gchar* (function gchar* (gpointer)) "gchar *((*$)(gpointer))")
    (type GCompletionFunc *gpointer->gchar* "GCompletionFunc")
    (type gchar*,gchar*,gsize->gint "gint ($(gchar *,gchar *,gsize))")
    (type *gchar*,gchar*,gsize->gint (function gint (gchar* gchar* gsize)) "gint ((*$)(gchar *,gchar *,gsize))")
    (type GCompletionStrncmpFunc *gchar*,gchar*,gsize->gint "GCompletionStrncmpFunc")
    (type monster__e1026 int "long")
    (macro G_CONVERT_ERROR_NO_CONVERSION::int "G_CONVERT_ERROR_NO_CONVERSION")
    (macro G_CONVERT_ERROR_ILLEGAL_SEQUENCE::int "G_CONVERT_ERROR_ILLEGAL_SEQUENCE")
    (macro G_CONVERT_ERROR_FAILED::int "G_CONVERT_ERROR_FAILED")
    (macro G_CONVERT_ERROR_PARTIAL_INPUT::int "G_CONVERT_ERROR_PARTIAL_INPUT")
    (macro G_CONVERT_ERROR_BAD_URI::int "G_CONVERT_ERROR_BAD_URI")
    (macro G_CONVERT_ERROR_NOT_ABSOLUTE_PATH::int "G_CONVERT_ERROR_NOT_ABSOLUTE_PATH")
    (type GConvertError monster__e1026 "GConvertError")
    (type s-_GIConv (struct) "struct _GIConv")
    (type GIConv s-_GIConv* "GIConv")
    (type s-_GData (struct) "struct _GData")
    (type GData s-_GData "GData")
    (type GQuark,gpointer,gpointer->void "void ($(GQuark,gpointer,gpointer))")
    (type *GQuark,gpointer,gpointer->void (function void (GQuark gpointer gpointer)) "void ((*$)(GQuark,gpointer,gpointer))")
    (type GDataForeachFunc *GQuark,gpointer,gpointer->void "GDataForeachFunc")
    (type GTime gint32 "GTime")
    (type GDateYear guint16 "GDateYear")
    (type GDateDay guint8 "GDateDay")
    (type s-_GDate (struct (julian_days::guint "julian_days") (julian::guint "julian") (dmy::guint "dmy") (day::guint "day") (month::guint "month") (year::guint "year")) "struct _GDate")
    (type GDate s-_GDate "GDate")
    (type s-tm (struct) "struct tm")
    (type monster__e1027 int "long")
    (macro G_DATE_DAY::int "G_DATE_DAY")
    (macro G_DATE_MONTH::int "G_DATE_MONTH")
    (macro G_DATE_YEAR::int "G_DATE_YEAR")
    (type GDateDMY monster__e1027 "GDateDMY")
    (type monster__e1028 int "long")
    (macro G_DATE_BAD_WEEKDAY::int "G_DATE_BAD_WEEKDAY")
    (macro G_DATE_MONDAY::int "G_DATE_MONDAY")
    (macro G_DATE_TUESDAY::int "G_DATE_TUESDAY")
    (macro G_DATE_WEDNESDAY::int "G_DATE_WEDNESDAY")
    (macro G_DATE_THURSDAY::int "G_DATE_THURSDAY")
    (macro G_DATE_FRIDAY::int "G_DATE_FRIDAY")
    (macro G_DATE_SATURDAY::int "G_DATE_SATURDAY")
    (macro G_DATE_SUNDAY::int "G_DATE_SUNDAY")
    (type GDateWeekday monster__e1028 "GDateWeekday")
    (type monster__e1029 int "long")
    (macro G_DATE_BAD_MONTH::int "G_DATE_BAD_MONTH")
    (macro G_DATE_JANUARY::int "G_DATE_JANUARY")
    (macro G_DATE_FEBRUARY::int "G_DATE_FEBRUARY")
    (macro G_DATE_MARCH::int "G_DATE_MARCH")
    (macro G_DATE_APRIL::int "G_DATE_APRIL")
    (macro G_DATE_MAY::int "G_DATE_MAY")
    (macro G_DATE_JUNE::int "G_DATE_JUNE")
    (macro G_DATE_JULY::int "G_DATE_JULY")
    (macro G_DATE_AUGUST::int "G_DATE_AUGUST")
    (macro G_DATE_SEPTEMBER::int "G_DATE_SEPTEMBER")
    (macro G_DATE_OCTOBER::int "G_DATE_OCTOBER")
    (macro G_DATE_NOVEMBER::int "G_DATE_NOVEMBER")
    (macro G_DATE_DECEMBER::int "G_DATE_DECEMBER")
    (type GDateMonth monster__e1029 "GDateMonth")
    (type s-_GDir (struct) "struct _GDir")
    (type GDir s-_GDir "GDir")
    (type monster__e1030 int "long")
    (macro G_FILE_ERROR_EXIST::int "G_FILE_ERROR_EXIST")
    (macro G_FILE_ERROR_ISDIR::int "G_FILE_ERROR_ISDIR")
    (macro G_FILE_ERROR_ACCES::int "G_FILE_ERROR_ACCES")
    (macro G_FILE_ERROR_NAMETOOLONG::int "G_FILE_ERROR_NAMETOOLONG")
    (macro G_FILE_ERROR_NOENT::int "G_FILE_ERROR_NOENT")
    (macro G_FILE_ERROR_NOTDIR::int "G_FILE_ERROR_NOTDIR")
    (macro G_FILE_ERROR_NXIO::int "G_FILE_ERROR_NXIO")
    (macro G_FILE_ERROR_NODEV::int "G_FILE_ERROR_NODEV")
    (macro G_FILE_ERROR_ROFS::int "G_FILE_ERROR_ROFS")
    (macro G_FILE_ERROR_TXTBSY::int "G_FILE_ERROR_TXTBSY")
    (macro G_FILE_ERROR_FAULT::int "G_FILE_ERROR_FAULT")
    (macro G_FILE_ERROR_LOOP::int "G_FILE_ERROR_LOOP")
    (macro G_FILE_ERROR_NOSPC::int "G_FILE_ERROR_NOSPC")
    (macro G_FILE_ERROR_NOMEM::int "G_FILE_ERROR_NOMEM")
    (macro G_FILE_ERROR_MFILE::int "G_FILE_ERROR_MFILE")
    (macro G_FILE_ERROR_NFILE::int "G_FILE_ERROR_NFILE")
    (macro G_FILE_ERROR_BADF::int "G_FILE_ERROR_BADF")
    (macro G_FILE_ERROR_INVAL::int "G_FILE_ERROR_INVAL")
    (macro G_FILE_ERROR_PIPE::int "G_FILE_ERROR_PIPE")
    (macro G_FILE_ERROR_AGAIN::int "G_FILE_ERROR_AGAIN")
    (macro G_FILE_ERROR_INTR::int "G_FILE_ERROR_INTR")
    (macro G_FILE_ERROR_IO::int "G_FILE_ERROR_IO")
    (macro G_FILE_ERROR_PERM::int "G_FILE_ERROR_PERM")
    (macro G_FILE_ERROR_NOSYS::int "G_FILE_ERROR_NOSYS")
    (macro G_FILE_ERROR_FAILED::int "G_FILE_ERROR_FAILED")
    (type GFileError monster__e1030 "GFileError")
    (type monster__e1031 int "long")
    (macro G_FILE_TEST_IS_REGULAR::int "G_FILE_TEST_IS_REGULAR")
    (macro G_FILE_TEST_IS_SYMLINK::int "G_FILE_TEST_IS_SYMLINK")
    (macro G_FILE_TEST_IS_DIR::int "G_FILE_TEST_IS_DIR")
    (macro G_FILE_TEST_IS_EXECUTABLE::int "G_FILE_TEST_IS_EXECUTABLE")
    (macro G_FILE_TEST_EXISTS::int "G_FILE_TEST_EXISTS")
    (type GFileTest monster__e1031 "GFileTest")
    (type s-_GHashTable (struct) "struct _GHashTable")
    (type GHashTable s-_GHashTable "GHashTable")
    (type gpointer,gpointer,gpointer->gboolean "gboolean ($(gpointer,gpointer,gpointer))")
    (type *gpointer,gpointer,gpointer->gboolean (function gboolean (gpointer gpointer gpointer)) "gboolean ((*$)(gpointer,gpointer,gpointer))")
    (type GHRFunc *gpointer,gpointer,gpointer->gboolean "GHRFunc")
    (type s-_GHook (struct (data::gpointer "data") (next::GHook* "next") (prev::GHook* "prev") (ref_count::guint "ref_count") (hook_id::gulong "hook_id") (flags::guint "flags") (func::gpointer "func") (destroy::GDestroyNotify "destroy")) "struct _GHook")
    (type GHook s-_GHook "GHook")
    (type s-_GHookList (struct (seq_id::gulong "seq_id") (hook_size::guint "hook_size") (is_setup::guint "is_setup") (hooks::GHook* "hooks") (hook_memchunk::GMemChunk* "hook_memchunk") (finalize_hook::GHookFinalizeFunc "finalize_hook") (dummy::gpointer-array-2 "dummy")) "struct _GHookList")
    (type GHookList s-_GHookList "GHookList")
    (type GHook*,GHook*->gint "gint ($(GHook *,GHook *))")
    (type *GHook*,GHook*->gint (function gint (GHook* GHook*)) "gint ((*$)(GHook *,GHook *))")
    (type GHookCompareFunc *GHook*,GHook*->gint "GHookCompareFunc")
    (type GHook*,gpointer->gboolean "gboolean ($(GHook *,gpointer))")
    (type *GHook*,gpointer->gboolean (function gboolean (GHook* gpointer)) "gboolean ((*$)(GHook *,gpointer))")
    (type GHookFindFunc *GHook*,gpointer->gboolean "GHookFindFunc")
    (type GHook*,gpointer->void "void ($(GHook *,gpointer))")
    (type *GHook*,gpointer->void (function void (GHook* gpointer)) "void ((*$)(GHook *,gpointer))")
    (type GHookMarshaller *GHook*,gpointer->void "GHookMarshaller")
    (type GHookCheckMarshaller *GHook*,gpointer->gboolean "GHookCheckMarshaller")
    (type GHookFunc *gpointer->void "GHookFunc")
    (type gpointer->gboolean "gboolean ($(gpointer))")
    (type *gpointer->gboolean (function gboolean (gpointer)) "gboolean ((*$)(gpointer))")
    (type GHookCheckFunc *gpointer->gboolean "GHookCheckFunc")
    (type GHookList*,GHook*->void "void ($(GHookList *,GHook *))")
    (type *GHookList*,GHook*->void (function void (GHookList* GHook*)) "void ((*$)(GHookList *,GHook *))")
    (type GHookFinalizeFunc *GHookList*,GHook*->void "GHookFinalizeFunc")
    (type monster__e1032 int "long")
    (macro G_HOOK_FLAG_ACTIVE::int "G_HOOK_FLAG_ACTIVE")
    (macro G_HOOK_FLAG_IN_CALL::int "G_HOOK_FLAG_IN_CALL")
    (macro G_HOOK_FLAG_MASK::int "G_HOOK_FLAG_MASK")
    (type GHookFlagMask monster__e1032 "GHookFlagMask")
    (type gpointer-array-2 (array gpointer) "gpointer $[ 2 ]")
    (type s-_GSList (struct (data::gpointer "data") (next::GSList* "next")) "struct _GSList")
    (type GSList s-_GSList "GSList")
    (type s-_GMainContext (struct) "struct _GMainContext")
    (type GMainContext s-_GMainContext "GMainContext")
    (type s-_GMainLoop (struct) "struct _GMainLoop")
    (type GMainLoop s-_GMainLoop "GMainLoop")
    (type s-_GSource (struct (callback_data::gpointer "callback_data") (callback_funcs::GSourceCallbackFuncs* "callback_funcs") (source_funcs::GSourceFuncs* "source_funcs") (ref_count::guint "ref_count") (context::GMainContext* "context") (priority::gint "priority") (flags::guint "flags") (source_id::guint "source_id") (poll_fds::GSList* "poll_fds") (prev::GSource* "prev") (next::GSource* "next") (reserved1::gpointer "reserved1") (reserved2::gpointer "reserved2")) "struct _GSource")
    (type GSource s-_GSource "GSource")
    (type s-_GSourceCallbackFuncs (struct (ref::*gpointer->void "ref") (unref::*gpointer->void "unref") (get::*gpointer,GSource*,GSourceFunc*,gpointer*->void "get")) "struct _GSourceCallbackFuncs")
    (type GSourceCallbackFuncs s-_GSourceCallbackFuncs "GSourceCallbackFuncs")
    (type s-_GSourceFuncs (struct (prepare::*GSource*,gint*->gboolean "prepare") (check::*GSource*->gboolean "check") (dispatch::*GSource*,GSourceFunc,gpointer->gboolean "dispatch") (finalize::*GSource*->void "finalize") (closure_callback::GSourceFunc "closure_callback") (closure_marshal::GSourceDummyMarshal "closure_marshal")) "struct _GSourceFuncs")
    (type GSourceFuncs s-_GSourceFuncs "GSourceFuncs")
    (type GSourceFunc *gpointer->gboolean "GSourceFunc")
    (type GPid,gint,gpointer->void "void ($(GPid,gint,gpointer))")
    (type *GPid,gint,gpointer->void (function void (GPid gint gpointer)) "void ((*$)(GPid,gint,gpointer))")
    (type GChildWatchFunc *GPid,gint,gpointer->void "GChildWatchFunc")
    (type GSourceFunc* (pointer GSourceFunc) "GSourceFunc *")
    (type gpointer,GSource*,GSourceFunc*,gpointer*->void "void ($(gpointer,GSource *,GSourceFunc *,gpointer *))")
    (type *gpointer,GSource*,GSourceFunc*,gpointer*->void (function void (gpointer GSource* GSourceFunc* gpointer*)) "void ((*$)(gpointer,GSource *,GSourceFunc *,gpointer *))")
    (type GSourceDummyMarshal *void->void "GSourceDummyMarshal")
    (type gint* (pointer gint) "gint *")
    (type GSource*,gint*->gboolean "gboolean ($(GSource *,gint *))")
    (type *GSource*,gint*->gboolean (function gboolean (GSource* gint*)) "gboolean ((*$)(GSource *,gint *))")
    (type GSource*->gboolean "gboolean ($(GSource *))")
    (type *GSource*->gboolean (function gboolean (GSource*)) "gboolean ((*$)(GSource *))")
    (type GSource*,GSourceFunc,gpointer->gboolean "gboolean ($(GSource *,GSourceFunc,gpointer))")
    (type *GSource*,GSourceFunc,gpointer->gboolean (function gboolean (GSource* GSourceFunc gpointer)) "gboolean ((*$)(GSource *,GSourceFunc,gpointer))")
    (type GSource*->void "void ($(GSource *))")
    (type *GSource*->void (function void (GSource*)) "void ((*$)(GSource *))")
    (type s-_GPollFD (struct (fd::gint "fd") (events::gushort "events") (revents::gushort "revents")) "struct _GPollFD")
    (type GPollFD s-_GPollFD "GPollFD")
    (type GPollFD*,guint,gint->gint "gint ($(GPollFD *,guint,gint))")
    (type *GPollFD*,guint,gint->gint (function gint (GPollFD* guint gint)) "gint ((*$)(GPollFD *,guint,gint))")
    (type GPollFunc *GPollFD*,guint,gint->gint "GPollFunc")
    (type gunichar guint32 "gunichar")
    (type gunichar2 guint16 "gunichar2")
    (type monster__e1033 int "long")
    (macro G_UNICODE_CONTROL::int "G_UNICODE_CONTROL")
    (macro G_UNICODE_FORMAT::int "G_UNICODE_FORMAT")
    (macro G_UNICODE_UNASSIGNED::int "G_UNICODE_UNASSIGNED")
    (macro G_UNICODE_PRIVATE_USE::int "G_UNICODE_PRIVATE_USE")
    (macro G_UNICODE_SURROGATE::int "G_UNICODE_SURROGATE")
    (macro G_UNICODE_LOWERCASE_LETTER::int "G_UNICODE_LOWERCASE_LETTER")
    (macro G_UNICODE_MODIFIER_LETTER::int "G_UNICODE_MODIFIER_LETTER")
    (macro G_UNICODE_OTHER_LETTER::int "G_UNICODE_OTHER_LETTER")
    (macro G_UNICODE_TITLECASE_LETTER::int "G_UNICODE_TITLECASE_LETTER")
    (macro G_UNICODE_UPPERCASE_LETTER::int "G_UNICODE_UPPERCASE_LETTER")
    (macro G_UNICODE_COMBINING_MARK::int "G_UNICODE_COMBINING_MARK")
    (macro G_UNICODE_ENCLOSING_MARK::int "G_UNICODE_ENCLOSING_MARK")
    (macro G_UNICODE_NON_SPACING_MARK::int "G_UNICODE_NON_SPACING_MARK")
    (macro G_UNICODE_DECIMAL_NUMBER::int "G_UNICODE_DECIMAL_NUMBER")
    (macro G_UNICODE_LETTER_NUMBER::int "G_UNICODE_LETTER_NUMBER")
    (macro G_UNICODE_OTHER_NUMBER::int "G_UNICODE_OTHER_NUMBER")
    (macro G_UNICODE_CONNECT_PUNCTUATION::int "G_UNICODE_CONNECT_PUNCTUATION")
    (macro G_UNICODE_DASH_PUNCTUATION::int "G_UNICODE_DASH_PUNCTUATION")
    (macro G_UNICODE_CLOSE_PUNCTUATION::int "G_UNICODE_CLOSE_PUNCTUATION")
    (macro G_UNICODE_FINAL_PUNCTUATION::int "G_UNICODE_FINAL_PUNCTUATION")
    (macro G_UNICODE_INITIAL_PUNCTUATION::int "G_UNICODE_INITIAL_PUNCTUATION")
    (macro G_UNICODE_OTHER_PUNCTUATION::int "G_UNICODE_OTHER_PUNCTUATION")
    (macro G_UNICODE_OPEN_PUNCTUATION::int "G_UNICODE_OPEN_PUNCTUATION")
    (macro G_UNICODE_CURRENCY_SYMBOL::int "G_UNICODE_CURRENCY_SYMBOL")
    (macro G_UNICODE_MODIFIER_SYMBOL::int "G_UNICODE_MODIFIER_SYMBOL")
    (macro G_UNICODE_MATH_SYMBOL::int "G_UNICODE_MATH_SYMBOL")
    (macro G_UNICODE_OTHER_SYMBOL::int "G_UNICODE_OTHER_SYMBOL")
    (macro G_UNICODE_LINE_SEPARATOR::int "G_UNICODE_LINE_SEPARATOR")
    (macro G_UNICODE_PARAGRAPH_SEPARATOR::int "G_UNICODE_PARAGRAPH_SEPARATOR")
    (macro G_UNICODE_SPACE_SEPARATOR::int "G_UNICODE_SPACE_SEPARATOR")
    (type GUnicodeType monster__e1033 "GUnicodeType")
    (type monster__e1034 int "long")
    (macro G_UNICODE_BREAK_MANDATORY::int "G_UNICODE_BREAK_MANDATORY")
    (macro G_UNICODE_BREAK_CARRIAGE_RETURN::int "G_UNICODE_BREAK_CARRIAGE_RETURN")
    (macro G_UNICODE_BREAK_LINE_FEED::int "G_UNICODE_BREAK_LINE_FEED")
    (macro G_UNICODE_BREAK_COMBINING_MARK::int "G_UNICODE_BREAK_COMBINING_MARK")
    (macro G_UNICODE_BREAK_SURROGATE::int "G_UNICODE_BREAK_SURROGATE")
    (macro G_UNICODE_BREAK_ZERO_WIDTH_SPACE::int "G_UNICODE_BREAK_ZERO_WIDTH_SPACE")
    (macro G_UNICODE_BREAK_INSEPARABLE::int "G_UNICODE_BREAK_INSEPARABLE")
    (macro G_UNICODE_BREAK_NON_BREAKING_GLUE::int "G_UNICODE_BREAK_NON_BREAKING_GLUE")
    (macro G_UNICODE_BREAK_CONTINGENT::int "G_UNICODE_BREAK_CONTINGENT")
    (macro G_UNICODE_BREAK_SPACE::int "G_UNICODE_BREAK_SPACE")
    (macro G_UNICODE_BREAK_AFTER::int "G_UNICODE_BREAK_AFTER")
    (macro G_UNICODE_BREAK_BEFORE::int "G_UNICODE_BREAK_BEFORE")
    (macro G_UNICODE_BREAK_BEFORE_AND_AFTER::int "G_UNICODE_BREAK_BEFORE_AND_AFTER")
    (macro G_UNICODE_BREAK_HYPHEN::int "G_UNICODE_BREAK_HYPHEN")
    (macro G_UNICODE_BREAK_NON_STARTER::int "G_UNICODE_BREAK_NON_STARTER")
    (macro G_UNICODE_BREAK_OPEN_PUNCTUATION::int "G_UNICODE_BREAK_OPEN_PUNCTUATION")
    (macro G_UNICODE_BREAK_CLOSE_PUNCTUATION::int "G_UNICODE_BREAK_CLOSE_PUNCTUATION")
    (macro G_UNICODE_BREAK_QUOTATION::int "G_UNICODE_BREAK_QUOTATION")
    (macro G_UNICODE_BREAK_EXCLAMATION::int "G_UNICODE_BREAK_EXCLAMATION")
    (macro G_UNICODE_BREAK_IDEOGRAPHIC::int "G_UNICODE_BREAK_IDEOGRAPHIC")
    (macro G_UNICODE_BREAK_NUMERIC::int "G_UNICODE_BREAK_NUMERIC")
    (macro G_UNICODE_BREAK_INFIX_SEPARATOR::int "G_UNICODE_BREAK_INFIX_SEPARATOR")
    (macro G_UNICODE_BREAK_SYMBOL::int "G_UNICODE_BREAK_SYMBOL")
    (macro G_UNICODE_BREAK_ALPHABETIC::int "G_UNICODE_BREAK_ALPHABETIC")
    (macro G_UNICODE_BREAK_PREFIX::int "G_UNICODE_BREAK_PREFIX")
    (macro G_UNICODE_BREAK_POSTFIX::int "G_UNICODE_BREAK_POSTFIX")
    (macro G_UNICODE_BREAK_COMPLEX_CONTEXT::int "G_UNICODE_BREAK_COMPLEX_CONTEXT")
    (macro G_UNICODE_BREAK_AMBIGUOUS::int "G_UNICODE_BREAK_AMBIGUOUS")
    (macro G_UNICODE_BREAK_UNKNOWN::int "G_UNICODE_BREAK_UNKNOWN")
    (macro G_UNICODE_BREAK_NEXT_LINE::int "G_UNICODE_BREAK_NEXT_LINE")
    (macro G_UNICODE_BREAK_WORD_JOINER::int "G_UNICODE_BREAK_WORD_JOINER")
    (type GUnicodeBreakType monster__e1034 "GUnicodeBreakType")
    (type monster__e1035 int "long")
    (macro G_NORMALIZE_DEFAULT::int "G_NORMALIZE_DEFAULT")
    (macro G_NORMALIZE_NFD::int "G_NORMALIZE_NFD")
    (macro G_NORMALIZE_DEFAULT_COMPOSE::int "G_NORMALIZE_DEFAULT_COMPOSE")
    (macro G_NORMALIZE_NFC::int "G_NORMALIZE_NFC")
    (macro G_NORMALIZE_ALL::int "G_NORMALIZE_ALL")
    (macro G_NORMALIZE_NFKD::int "G_NORMALIZE_NFKD")
    (macro G_NORMALIZE_ALL_COMPOSE::int "G_NORMALIZE_ALL_COMPOSE")
    (macro G_NORMALIZE_NFKC::int "G_NORMALIZE_NFKC")
    (type GNormalizeMode monster__e1035 "GNormalizeMode")
    (type s-_GDebugKey (struct (key::gchar* "key") (value::guint "value")) "struct _GDebugKey")
    (type GDebugKey s-_GDebugKey "GDebugKey")
    (type GVoidFunc *void->void "GVoidFunc")
    (type s-_GTrashStack (struct (next::GTrashStack* "next")) "struct _GTrashStack")
    (type GTrashStack s-_GTrashStack "GTrashStack")
    (type s-_GString (struct (str::gchar* "str") (len::gsize "len") (allocated_len::gsize "allocated_len")) "struct _GString")
    (type GString s-_GString "GString")
    (type s-_GStringChunk (struct) "struct _GStringChunk")
    (type GStringChunk s-_GStringChunk "GStringChunk")
    (type s-_GIOChannel (struct (ref_count::guint "ref_count") (funcs::GIOFuncs* "funcs") (encoding::gchar* "encoding") (read_cd::GIConv "read_cd") (write_cd::GIConv "write_cd") (line_term::gchar* "line_term") (line_term_len::guint "line_term_len") (buf_size::gsize "buf_size") (read_buf::GString* "read_buf") (encoded_read_buf::GString* "encoded_read_buf") (write_buf::GString* "write_buf") (partial_write_buf::gchar-array-6 "partial_write_buf") (use_buffer::guint "use_buffer") (do_encode::guint "do_encode") (close_on_unref::guint "close_on_unref") (is_readable::guint "is_readable") (is_writeable::guint "is_writeable") (is_seekable::guint "is_seekable") (reserved1::gpointer "reserved1") (reserved2::gpointer "reserved2")) "struct _GIOChannel")
    (type GIOChannel s-_GIOChannel "GIOChannel")
    (type s-_GIOFuncs (struct (io_read::*GIOChannel*,gchar*,gsize,gsize*,GError**->GIOStatus "io_read") (io_write::*GIOChannel*,gchar*,gsize,gsize*,GError**->GIOStatus "io_write") (io_seek::*GIOChannel*,gint64,GSeekType,GError**->GIOStatus "io_seek") (io_close::*GIOChannel*,GError**->GIOStatus "io_close") (io_create_watch::*GIOChannel*,GIOCondition->GSource* "io_create_watch") (io_free::*GIOChannel*->void "io_free") (io_set_flags::*GIOChannel*,GIOFlags,GError**->GIOStatus "io_set_flags") (io_get_flags::*GIOChannel*->GIOFlags "io_get_flags")) "struct _GIOFuncs")
    (type GIOFuncs s-_GIOFuncs "GIOFuncs")
    (type monster__e1036 int "long")
    (macro G_IO_ERROR_NONE::int "G_IO_ERROR_NONE")
    (macro G_IO_ERROR_AGAIN::int "G_IO_ERROR_AGAIN")
    (macro G_IO_ERROR_INVAL::int "G_IO_ERROR_INVAL")
    (macro G_IO_ERROR_UNKNOWN::int "G_IO_ERROR_UNKNOWN")
    (type GIOError monster__e1036 "GIOError")
    (type monster__e1037 int "long")
    (macro G_IO_CHANNEL_ERROR_FBIG::int "G_IO_CHANNEL_ERROR_FBIG")
    (macro G_IO_CHANNEL_ERROR_INVAL::int "G_IO_CHANNEL_ERROR_INVAL")
    (macro G_IO_CHANNEL_ERROR_IO::int "G_IO_CHANNEL_ERROR_IO")
    (macro G_IO_CHANNEL_ERROR_ISDIR::int "G_IO_CHANNEL_ERROR_ISDIR")
    (macro G_IO_CHANNEL_ERROR_NOSPC::int "G_IO_CHANNEL_ERROR_NOSPC")
    (macro G_IO_CHANNEL_ERROR_NXIO::int "G_IO_CHANNEL_ERROR_NXIO")
    (macro G_IO_CHANNEL_ERROR_OVERFLOW::int "G_IO_CHANNEL_ERROR_OVERFLOW")
    (macro G_IO_CHANNEL_ERROR_PIPE::int "G_IO_CHANNEL_ERROR_PIPE")
    (macro G_IO_CHANNEL_ERROR_FAILED::int "G_IO_CHANNEL_ERROR_FAILED")
    (type GIOChannelError monster__e1037 "GIOChannelError")
    (type monster__e1038 int "long")
    (macro G_IO_STATUS_ERROR::int "G_IO_STATUS_ERROR")
    (macro G_IO_STATUS_NORMAL::int "G_IO_STATUS_NORMAL")
    (macro G_IO_STATUS_EOF::int "G_IO_STATUS_EOF")
    (macro G_IO_STATUS_AGAIN::int "G_IO_STATUS_AGAIN")
    (type GIOStatus monster__e1038 "GIOStatus")
    (type monster__e1039 int "long")
    (macro G_SEEK_CUR::int "G_SEEK_CUR")
    (macro G_SEEK_SET::int "G_SEEK_SET")
    (macro G_SEEK_END::int "G_SEEK_END")
    (type GSeekType monster__e1039 "GSeekType")
    (type monster__e1040 int "long")
    (macro G_IO_IN::int "G_IO_IN")
    (macro G_IO_OUT::int "G_IO_OUT")
    (macro G_IO_PRI::int "G_IO_PRI")
    (macro G_IO_ERR::int "G_IO_ERR")
    (macro G_IO_HUP::int "G_IO_HUP")
    (macro G_IO_NVAL::int "G_IO_NVAL")
    (type GIOCondition monster__e1040 "GIOCondition")
    (type monster__e1041 int "long")
    (macro G_IO_FLAG_APPEND::int "G_IO_FLAG_APPEND")
    (macro G_IO_FLAG_NONBLOCK::int "G_IO_FLAG_NONBLOCK")
    (macro G_IO_FLAG_IS_READABLE::int "G_IO_FLAG_IS_READABLE")
    (macro G_IO_FLAG_IS_WRITEABLE::int "G_IO_FLAG_IS_WRITEABLE")
    (macro G_IO_FLAG_IS_SEEKABLE::int "G_IO_FLAG_IS_SEEKABLE")
    (macro G_IO_FLAG_MASK::int "G_IO_FLAG_MASK")
    (macro G_IO_FLAG_GET_MASK::int "G_IO_FLAG_GET_MASK")
    (macro G_IO_FLAG_SET_MASK::int "G_IO_FLAG_SET_MASK")
    (type GIOFlags monster__e1041 "GIOFlags")
    (type gchar-array-6 (array gchar) "gchar $[ 6 ]")
    (type GIOChannel*,GIOCondition,gpointer->gboolean "gboolean ($(GIOChannel *,GIOCondition,gpointer))")
    (type *GIOChannel*,GIOCondition,gpointer->gboolean (function gboolean (GIOChannel* GIOCondition gpointer)) "gboolean ((*$)(GIOChannel *,GIOCondition,gpointer))")
    (type GIOFunc *GIOChannel*,GIOCondition,gpointer->gboolean "GIOFunc")
    (type gsize* (pointer gsize) "gsize *")
    (type GIOChannel*,gchar*,gsize,gsize*,GError**->GIOStatus "GIOStatus ($(GIOChannel *,gchar *,gsize,gsize *,GError **))")
    (type *GIOChannel*,gchar*,gsize,gsize*,GError**->GIOStatus (function GIOStatus (GIOChannel* gchar* gsize gsize* GError**)) "GIOStatus ((*$)(GIOChannel *,gchar *,gsize,gsize *,GError **))")
    (type GIOChannel*,gint64,GSeekType,GError**->GIOStatus "GIOStatus ($(GIOChannel *,gint64,GSeekType,GError **))")
    (type *GIOChannel*,gint64,GSeekType,GError**->GIOStatus (function GIOStatus (GIOChannel* gint64 GSeekType GError**)) "GIOStatus ((*$)(GIOChannel *,gint64,GSeekType,GError **))")
    (type GIOChannel*,GError**->GIOStatus "GIOStatus ($(GIOChannel *,GError **))")
    (type *GIOChannel*,GError**->GIOStatus (function GIOStatus (GIOChannel* GError**)) "GIOStatus ((*$)(GIOChannel *,GError **))")
    (type GIOChannel*,GIOCondition->GSource* "GSource *($(GIOChannel *,GIOCondition))")
    (type *GIOChannel*,GIOCondition->GSource* (function GSource* (GIOChannel* GIOCondition)) "GSource *((*$)(GIOChannel *,GIOCondition))")
    (type GIOChannel*->void "void ($(GIOChannel *))")
    (type *GIOChannel*->void (function void (GIOChannel*)) "void ((*$)(GIOChannel *))")
    (type GIOChannel*,GIOFlags,GError**->GIOStatus "GIOStatus ($(GIOChannel *,GIOFlags,GError **))")
    (type *GIOChannel*,GIOFlags,GError**->GIOStatus (function GIOStatus (GIOChannel* GIOFlags GError**)) "GIOStatus ((*$)(GIOChannel *,GIOFlags,GError **))")
    (type GIOChannel*->GIOFlags "GIOFlags ($(GIOChannel *))")
    (type *GIOChannel*->GIOFlags (function GIOFlags (GIOChannel*)) "GIOFlags ((*$)(GIOChannel *))")
    (type monster__e1042 int "long")
    (macro G_KEY_FILE_ERROR_UNKNOWN_ENCODING::int "G_KEY_FILE_ERROR_UNKNOWN_ENCODING")
    (macro G_KEY_FILE_ERROR_PARSE::int "G_KEY_FILE_ERROR_PARSE")
    (macro G_KEY_FILE_ERROR_NOT_FOUND::int "G_KEY_FILE_ERROR_NOT_FOUND")
    (macro G_KEY_FILE_ERROR_KEY_NOT_FOUND::int "G_KEY_FILE_ERROR_KEY_NOT_FOUND")
    (macro G_KEY_FILE_ERROR_GROUP_NOT_FOUND::int "G_KEY_FILE_ERROR_GROUP_NOT_FOUND")
    (macro G_KEY_FILE_ERROR_INVALID_VALUE::int "G_KEY_FILE_ERROR_INVALID_VALUE")
    (type GKeyFileError monster__e1042 "GKeyFileError")
    (type s-_GKeyFile (struct) "struct _GKeyFile")
    (type GKeyFile s-_GKeyFile "GKeyFile")
    (type monster__e1043 int "long")
    (macro G_KEY_FILE_NONE::int "G_KEY_FILE_NONE")
    (macro G_KEY_FILE_KEEP_COMMENTS::int "G_KEY_FILE_KEEP_COMMENTS")
    (macro G_KEY_FILE_KEEP_TRANSLATIONS::int "G_KEY_FILE_KEEP_TRANSLATIONS")
    (type GKeyFileFlags monster__e1043 "GKeyFileFlags")
    (type monster__e1044 int "long")
    (macro G_MARKUP_ERROR_BAD_UTF8::int "G_MARKUP_ERROR_BAD_UTF8")
    (macro G_MARKUP_ERROR_EMPTY::int "G_MARKUP_ERROR_EMPTY")
    (macro G_MARKUP_ERROR_PARSE::int "G_MARKUP_ERROR_PARSE")
    (macro G_MARKUP_ERROR_UNKNOWN_ELEMENT::int "G_MARKUP_ERROR_UNKNOWN_ELEMENT")
    (macro G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE::int "G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE")
    (macro G_MARKUP_ERROR_INVALID_CONTENT::int "G_MARKUP_ERROR_INVALID_CONTENT")
    (type GMarkupError monster__e1044 "GMarkupError")
    (type monster__e1045 int "long")
    (macro G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG::int "G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG")
    (type GMarkupParseFlags monster__e1045 "GMarkupParseFlags")
    (type s-_GMarkupParseContext (struct) "struct _GMarkupParseContext")
    (type GMarkupParseContext s-_GMarkupParseContext "GMarkupParseContext")
    (type s-_GMarkupParser (struct (start_element::*GMarkupParseContext*,gchar*,gchar**,gchar**,gpointer,GError**->void "start_element") (end_element::*GMarkupParseContext*,gchar*,gpointer,GError**->void "end_element") (text::*GMarkupParseContext*,gchar*,gsize,gpointer,GError**->void "text") (passthrough::*GMarkupParseContext*,gchar*,gsize,gpointer,GError**->void "passthrough") (error::*GMarkupParseContext*,GError*,gpointer->void "error")) "struct _GMarkupParser")
    (type GMarkupParser s-_GMarkupParser "GMarkupParser")
    ;(type gchar** (pointer gchar*) "gchar **")
    (type gchar** string* "gchar **")
    (type GMarkupParseContext*,gchar*,gchar**,gchar**,gpointer,GError**->void "void ($(GMarkupParseContext *,gchar *,gchar **,gchar **,gpointer,GError **))")
    (type *GMarkupParseContext*,gchar*,gchar**,gchar**,gpointer,GError**->void (function void (GMarkupParseContext* gchar* gchar** gchar** gpointer GError**)) "void ((*$)(GMarkupParseContext *,gchar *,gchar **,gchar **,gpointer,GError **))")
    (type GMarkupParseContext*,gchar*,gpointer,GError**->void "void ($(GMarkupParseContext *,gchar *,gpointer,GError **))")
    (type *GMarkupParseContext*,gchar*,gpointer,GError**->void (function void (GMarkupParseContext* gchar* gpointer GError**)) "void ((*$)(GMarkupParseContext *,gchar *,gpointer,GError **))")
    (type GMarkupParseContext*,gchar*,gsize,gpointer,GError**->void "void ($(GMarkupParseContext *,gchar *,gsize,gpointer,GError **))")
    (type *GMarkupParseContext*,gchar*,gsize,gpointer,GError**->void (function void (GMarkupParseContext* gchar* gsize gpointer GError**)) "void ((*$)(GMarkupParseContext *,gchar *,gsize,gpointer,GError **))")
    (type GMarkupParseContext*,GError*,gpointer->void "void ($(GMarkupParseContext *,GError *,gpointer))")
    (type *GMarkupParseContext*,GError*,gpointer->void (function void (GMarkupParseContext* GError* gpointer)) "void ((*$)(GMarkupParseContext *,GError *,gpointer))")
    (type monster__e1046 int "long")
    (macro G_LOG_FLAG_RECURSION::int "G_LOG_FLAG_RECURSION")
    (macro G_LOG_FLAG_FATAL::int "G_LOG_FLAG_FATAL")
    (macro G_LOG_LEVEL_ERROR::int "G_LOG_LEVEL_ERROR")
    (macro G_LOG_LEVEL_CRITICAL::int "G_LOG_LEVEL_CRITICAL")
    (macro G_LOG_LEVEL_WARNING::int "G_LOG_LEVEL_WARNING")
    (macro G_LOG_LEVEL_MESSAGE::int "G_LOG_LEVEL_MESSAGE")
    (macro G_LOG_LEVEL_INFO::int "G_LOG_LEVEL_INFO")
    (macro G_LOG_LEVEL_DEBUG::int "G_LOG_LEVEL_DEBUG")
    (macro G_LOG_LEVEL_MASK::int "G_LOG_LEVEL_MASK")
    (type GLogLevelFlags monster__e1046 "GLogLevelFlags")
    (type gchar*,GLogLevelFlags,gchar*,gpointer->void "void ($(gchar *,GLogLevelFlags,gchar *,gpointer))")
    (type *gchar*,GLogLevelFlags,gchar*,gpointer->void (function void (gchar* GLogLevelFlags gchar* gpointer)) "void ((*$)(gchar *,GLogLevelFlags,gchar *,gpointer))")
    (type GLogFunc *gchar*,GLogLevelFlags,gchar*,gpointer->void "GLogFunc")
    (type gchar*->void "void ($(gchar *))")
    (type *gchar*->void (function void (gchar*)) "void ((*$)(gchar *))")
    (type GPrintFunc *gchar*->void "GPrintFunc")
    (type s-_GNode (struct (data::gpointer "data") (next::GNode* "next") (prev::GNode* "prev") (parent::GNode* "parent") (children::GNode* "children")) "struct _GNode")
    (type GNode s-_GNode "GNode")
    (type monster__e1047 int "long")
    (macro G_TRAVERSE_LEAVES::int "G_TRAVERSE_LEAVES")
    (macro G_TRAVERSE_NON_LEAVES::int "G_TRAVERSE_NON_LEAVES")
    (macro G_TRAVERSE_ALL::int "G_TRAVERSE_ALL")
    (macro G_TRAVERSE_MASK::int "G_TRAVERSE_MASK")
    (macro G_TRAVERSE_LEAFS::int "G_TRAVERSE_LEAFS")
    (macro G_TRAVERSE_NON_LEAFS::int "G_TRAVERSE_NON_LEAFS")
    (type GTraverseFlags monster__e1047 "GTraverseFlags")
    (type monster__e1048 int "long")
    (macro G_IN_ORDER::int "G_IN_ORDER")
    (macro G_PRE_ORDER::int "G_PRE_ORDER")
    (macro G_POST_ORDER::int "G_POST_ORDER")
    (macro G_LEVEL_ORDER::int "G_LEVEL_ORDER")
    (type GTraverseType monster__e1048 "GTraverseType")
    (type GNode*,gpointer->gboolean "gboolean ($(GNode *,gpointer))")
    (type *GNode*,gpointer->gboolean (function gboolean (GNode* gpointer)) "gboolean ((*$)(GNode *,gpointer))")
    (type GNodeTraverseFunc *GNode*,gpointer->gboolean "GNodeTraverseFunc")
    (type GNode*,gpointer->void "void ($(GNode *,gpointer))")
    (type *GNode*,gpointer->void (function void (GNode* gpointer)) "void ((*$)(GNode *,gpointer))")
    (type GNodeForeachFunc *GNode*,gpointer->void "GNodeForeachFunc")
    (type gconstpointer,gpointer->gpointer "gpointer ($(gconstpointer,gpointer))")
    (type *gconstpointer,gpointer->gpointer (function gpointer (gconstpointer gpointer)) "gpointer ((*$)(gconstpointer,gpointer))")
    (type GCopyFunc *gconstpointer,gpointer->gpointer "GCopyFunc")
    (type s-_GOptionContext (struct) "struct _GOptionContext")
    (type GOptionContext s-_GOptionContext "GOptionContext")
    (type s-_GOptionGroup (struct) "struct _GOptionGroup")
    (type GOptionGroup s-_GOptionGroup "GOptionGroup")
    (type s-_GOptionEntry (struct (long_name::gchar* "long_name") (short_name::gchar "short_name") (flags::gint "flags") (arg::GOptionArg "arg") (arg_data::gpointer "arg_data") (description::gchar* "description") (arg_description::gchar* "arg_description")) "struct _GOptionEntry")
    (type GOptionEntry s-_GOptionEntry "GOptionEntry")
    (type monster__e1049 int "long")
    (macro G_OPTION_FLAG_HIDDEN::int "G_OPTION_FLAG_HIDDEN")
    (macro G_OPTION_FLAG_IN_MAIN::int "G_OPTION_FLAG_IN_MAIN")
    (macro G_OPTION_FLAG_REVERSE::int "G_OPTION_FLAG_REVERSE")
    (type GOptionFlags monster__e1049 "GOptionFlags")
    (type monster__e1050 int "long")
    (macro G_OPTION_ARG_NONE::int "G_OPTION_ARG_NONE")
    (macro G_OPTION_ARG_STRING::int "G_OPTION_ARG_STRING")
    (macro G_OPTION_ARG_INT::int "G_OPTION_ARG_INT")
    (macro G_OPTION_ARG_CALLBACK::int "G_OPTION_ARG_CALLBACK")
    (macro G_OPTION_ARG_FILENAME::int "G_OPTION_ARG_FILENAME")
    (macro G_OPTION_ARG_STRING_ARRAY::int "G_OPTION_ARG_STRING_ARRAY")
    (macro G_OPTION_ARG_FILENAME_ARRAY::int "G_OPTION_ARG_FILENAME_ARRAY")
    (type GOptionArg monster__e1050 "GOptionArg")
    (type gchar*,gchar*,gpointer,GError**->gboolean "gboolean ($(gchar *,gchar *,gpointer,GError **))")
    (type *gchar*,gchar*,gpointer,GError**->gboolean (function gboolean (gchar* gchar* gpointer GError**)) "gboolean ((*$)(gchar *,gchar *,gpointer,GError **))")
    (type GOptionArgFunc *gchar*,gchar*,gpointer,GError**->gboolean "GOptionArgFunc")
    (type GOptionContext*,GOptionGroup*,gpointer,GError**->gboolean "gboolean ($(GOptionContext *,GOptionGroup *,gpointer,GError **))")
    (type *GOptionContext*,GOptionGroup*,gpointer,GError**->gboolean (function gboolean (GOptionContext* GOptionGroup* gpointer GError**)) "gboolean ((*$)(GOptionContext *,GOptionGroup *,gpointer,GError **))")
    (type GOptionParseFunc *GOptionContext*,GOptionGroup*,gpointer,GError**->gboolean "GOptionParseFunc")
    (type GOptionContext*,GOptionGroup*,gpointer,GError**->void "void ($(GOptionContext *,GOptionGroup *,gpointer,GError **))")
    (type *GOptionContext*,GOptionGroup*,gpointer,GError**->void (function void (GOptionContext* GOptionGroup* gpointer GError**)) "void ((*$)(GOptionContext *,GOptionGroup *,gpointer,GError **))")
    (type GOptionErrorFunc *GOptionContext*,GOptionGroup*,gpointer,GError**->void "GOptionErrorFunc")
    (type monster__e1051 int "long")
    (macro G_OPTION_ERROR_UNKNOWN_OPTION::int "G_OPTION_ERROR_UNKNOWN_OPTION")
    (macro G_OPTION_ERROR_BAD_VALUE::int "G_OPTION_ERROR_BAD_VALUE")
    (macro G_OPTION_ERROR_FAILED::int "G_OPTION_ERROR_FAILED")
    (type GOptionError monster__e1051 "GOptionError")
    (type s-_GPatternSpec (struct) "struct _GPatternSpec")
    (type GPatternSpec s-_GPatternSpec "GPatternSpec")
    (type s-_GQueue (struct (head::GList* "head") (tail::GList* "tail") (length::guint "length")) "struct _GQueue")
    (type GQueue s-_GQueue "GQueue")
    (type s-_GRand (struct) "struct _GRand")
    (type GRand s-_GRand "GRand")
    (type s-_GRelation (struct) "struct _GRelation")
    (type GRelation s-_GRelation "GRelation")
    (type s-_GTuples (struct (len::guint "len")) "struct _GTuples")
    (type GTuples s-_GTuples "GTuples")
    (type s-_GScanner (struct (user_data::gpointer "user_data") (max_parse_errors::guint "max_parse_errors") (parse_errors::guint "parse_errors") (input_name::gchar* "input_name") (qdata::GData* "qdata") (config::GScannerConfig* "config") (token::GTokenType "token") (value::GTokenValue "value") (line::guint "line") (position::guint "position") (next_token::GTokenType "next_token") (next_value::GTokenValue "next_value") (next_line::guint "next_line") (next_position::guint "next_position") (symbol_table::GHashTable* "symbol_table") (input_fd::gint "input_fd") (text::gchar* "text") (text_end::gchar* "text_end") (buffer::gchar* "buffer") (scope_id::guint "scope_id") (msg_handler::GScannerMsgFunc "msg_handler")) "struct _GScanner")
    (type GScanner s-_GScanner "GScanner")
    (type s-_GScannerConfig (struct (cset_skip_characters::gchar* "cset_skip_characters") (cset_identifier_first::gchar* "cset_identifier_first") (cset_identifier_nth::gchar* "cset_identifier_nth") (cpair_comment_single::gchar* "cpair_comment_single") (case_sensitive::guint "case_sensitive") (skip_comment_multi::guint "skip_comment_multi") (skip_comment_single::guint "skip_comment_single") (scan_comment_multi::guint "scan_comment_multi") (scan_identifier::guint "scan_identifier") (scan_identifier_1char::guint "scan_identifier_1char") (scan_identifier_NULL::guint "scan_identifier_NULL") (scan_symbols::guint "scan_symbols") (scan_binary::guint "scan_binary") (scan_octal::guint "scan_octal") (scan_float::guint "scan_float") (scan_hex::guint "scan_hex") (scan_hex_dollar::guint "scan_hex_dollar") (scan_string_sq::guint "scan_string_sq") (scan_string_dq::guint "scan_string_dq") (numbers_2_int::guint "numbers_2_int") (int_2_float::guint "int_2_float") (identifier_2_string::guint "identifier_2_string") (char_2_token::guint "char_2_token") (symbol_2_token::guint "symbol_2_token") (scope_0_fallback::guint "scope_0_fallback") (store_int64::guint "store_int64") (padding_dummy::guint "padding_dummy")) "struct _GScannerConfig")
    (type GScannerConfig s-_GScannerConfig "GScannerConfig")
    (type s-_GTokenValue (union (v_symbol::gpointer "v_symbol") (v_identifier::gchar* "v_identifier") (v_binary::gulong "v_binary") (v_octal::gulong "v_octal") (v_int::gulong "v_int") (v_int64::guint64 "v_int64") (v_float::gdouble "v_float") (v_hex::gulong "v_hex") (v_string::gchar* "v_string") (v_comment::gchar* "v_comment") (v_char::guchar "v_char") (v_error::guint "v_error")) "union _GTokenValue")
    (type GTokenValue s-_GTokenValue "GTokenValue")
    (type GScanner*,gchar*,gboolean->void "void ($(GScanner *,gchar *,gboolean))")
    (type *GScanner*,gchar*,gboolean->void (function void (GScanner* gchar* gboolean)) "void ((*$)(GScanner *,gchar *,gboolean))")
    (type GScannerMsgFunc *GScanner*,gchar*,gboolean->void "GScannerMsgFunc")
    (type monster__e1052 int "long")
    (macro G_ERR_UNKNOWN::int "G_ERR_UNKNOWN")
    (macro G_ERR_UNEXP_EOF::int "G_ERR_UNEXP_EOF")
    (macro G_ERR_UNEXP_EOF_IN_STRING::int "G_ERR_UNEXP_EOF_IN_STRING")
    (macro G_ERR_UNEXP_EOF_IN_COMMENT::int "G_ERR_UNEXP_EOF_IN_COMMENT")
    (macro G_ERR_NON_DIGIT_IN_CONST::int "G_ERR_NON_DIGIT_IN_CONST")
    (macro G_ERR_DIGIT_RADIX::int "G_ERR_DIGIT_RADIX")
    (macro G_ERR_FLOAT_RADIX::int "G_ERR_FLOAT_RADIX")
    (macro G_ERR_FLOAT_MALFORMED::int "G_ERR_FLOAT_MALFORMED")
    (type GErrorType monster__e1052 "GErrorType")
    (type monster__e1053 int "long")
    (macro G_TOKEN_EOF::int "G_TOKEN_EOF")
    (macro G_TOKEN_LEFT_PAREN::int "G_TOKEN_LEFT_PAREN")
    (macro G_TOKEN_RIGHT_PAREN::int "G_TOKEN_RIGHT_PAREN")
    (macro G_TOKEN_LEFT_CURLY::int "G_TOKEN_LEFT_CURLY")
    (macro G_TOKEN_RIGHT_CURLY::int "G_TOKEN_RIGHT_CURLY")
    (macro G_TOKEN_LEFT_BRACE::int "G_TOKEN_LEFT_BRACE")
    (macro G_TOKEN_RIGHT_BRACE::int "G_TOKEN_RIGHT_BRACE")
    (macro G_TOKEN_EQUAL_SIGN::int "G_TOKEN_EQUAL_SIGN")
    (macro G_TOKEN_COMMA::int "G_TOKEN_COMMA")
    (macro G_TOKEN_NONE::int "G_TOKEN_NONE")
    (macro G_TOKEN_ERROR::int "G_TOKEN_ERROR")
    (macro G_TOKEN_CHAR::int "G_TOKEN_CHAR")
    (macro G_TOKEN_BINARY::int "G_TOKEN_BINARY")
    (macro G_TOKEN_OCTAL::int "G_TOKEN_OCTAL")
    (macro G_TOKEN_INT::int "G_TOKEN_INT")
    (macro G_TOKEN_HEX::int "G_TOKEN_HEX")
    (macro G_TOKEN_FLOAT::int "G_TOKEN_FLOAT")
    (macro G_TOKEN_STRING::int "G_TOKEN_STRING")
    (macro G_TOKEN_SYMBOL::int "G_TOKEN_SYMBOL")
    (macro G_TOKEN_IDENTIFIER::int "G_TOKEN_IDENTIFIER")
    (macro G_TOKEN_IDENTIFIER_NULL::int "G_TOKEN_IDENTIFIER_NULL")
    (macro G_TOKEN_COMMENT_SINGLE::int "G_TOKEN_COMMENT_SINGLE")
    (macro G_TOKEN_COMMENT_MULTI::int "G_TOKEN_COMMENT_MULTI")
    (macro G_TOKEN_LAST::int "G_TOKEN_LAST")
    (type GTokenType monster__e1053 "GTokenType")
    (type monster__e1054 int "long")
    (macro G_SHELL_ERROR_BAD_QUOTING::int "G_SHELL_ERROR_BAD_QUOTING")
    (macro G_SHELL_ERROR_EMPTY_STRING::int "G_SHELL_ERROR_EMPTY_STRING")
    (macro G_SHELL_ERROR_FAILED::int "G_SHELL_ERROR_FAILED")
    (type GShellError monster__e1054 "GShellError")
    (type monster__e1055 int "long")
    (macro G_SPAWN_ERROR_FORK::int "G_SPAWN_ERROR_FORK")
    (macro G_SPAWN_ERROR_READ::int "G_SPAWN_ERROR_READ")
    (macro G_SPAWN_ERROR_CHDIR::int "G_SPAWN_ERROR_CHDIR")
    (macro G_SPAWN_ERROR_ACCES::int "G_SPAWN_ERROR_ACCES")
    (macro G_SPAWN_ERROR_PERM::int "G_SPAWN_ERROR_PERM")
    (macro G_SPAWN_ERROR_2BIG::int "G_SPAWN_ERROR_2BIG")
    (macro G_SPAWN_ERROR_NOEXEC::int "G_SPAWN_ERROR_NOEXEC")
    (macro G_SPAWN_ERROR_NAMETOOLONG::int "G_SPAWN_ERROR_NAMETOOLONG")
    (macro G_SPAWN_ERROR_NOENT::int "G_SPAWN_ERROR_NOENT")
    (macro G_SPAWN_ERROR_NOMEM::int "G_SPAWN_ERROR_NOMEM")
    (macro G_SPAWN_ERROR_NOTDIR::int "G_SPAWN_ERROR_NOTDIR")
    (macro G_SPAWN_ERROR_LOOP::int "G_SPAWN_ERROR_LOOP")
    (macro G_SPAWN_ERROR_TXTBUSY::int "G_SPAWN_ERROR_TXTBUSY")
    (macro G_SPAWN_ERROR_IO::int "G_SPAWN_ERROR_IO")
    (macro G_SPAWN_ERROR_NFILE::int "G_SPAWN_ERROR_NFILE")
    (macro G_SPAWN_ERROR_MFILE::int "G_SPAWN_ERROR_MFILE")
    (macro G_SPAWN_ERROR_INVAL::int "G_SPAWN_ERROR_INVAL")
    (macro G_SPAWN_ERROR_ISDIR::int "G_SPAWN_ERROR_ISDIR")
    (macro G_SPAWN_ERROR_LIBBAD::int "G_SPAWN_ERROR_LIBBAD")
    (macro G_SPAWN_ERROR_FAILED::int "G_SPAWN_ERROR_FAILED")
    (type GSpawnError monster__e1055 "GSpawnError")
    (type GSpawnChildSetupFunc *gpointer->void "GSpawnChildSetupFunc")
    (type monster__e1056 int "long")
    (macro G_SPAWN_LEAVE_DESCRIPTORS_OPEN::int "G_SPAWN_LEAVE_DESCRIPTORS_OPEN")
    (macro G_SPAWN_DO_NOT_REAP_CHILD::int "G_SPAWN_DO_NOT_REAP_CHILD")
    (macro G_SPAWN_SEARCH_PATH::int "G_SPAWN_SEARCH_PATH")
    (macro G_SPAWN_STDOUT_TO_DEV_NULL::int "G_SPAWN_STDOUT_TO_DEV_NULL")
    (macro G_SPAWN_STDERR_TO_DEV_NULL::int "G_SPAWN_STDERR_TO_DEV_NULL")
    (macro G_SPAWN_CHILD_INHERITS_STDIN::int "G_SPAWN_CHILD_INHERITS_STDIN")
    (macro G_SPAWN_FILE_AND_ARGV_ZERO::int "G_SPAWN_FILE_AND_ARGV_ZERO")
    (type GSpawnFlags monster__e1056 "GSpawnFlags")
    (type monster__e1057 int "long")
    (macro G_ASCII_ALNUM::int "G_ASCII_ALNUM")
    (macro G_ASCII_ALPHA::int "G_ASCII_ALPHA")
    (macro G_ASCII_CNTRL::int "G_ASCII_CNTRL")
    (macro G_ASCII_DIGIT::int "G_ASCII_DIGIT")
    (macro G_ASCII_GRAPH::int "G_ASCII_GRAPH")
    (macro G_ASCII_LOWER::int "G_ASCII_LOWER")
    (macro G_ASCII_PRINT::int "G_ASCII_PRINT")
    (macro G_ASCII_PUNCT::int "G_ASCII_PUNCT")
    (macro G_ASCII_SPACE::int "G_ASCII_SPACE")
    (macro G_ASCII_UPPER::int "G_ASCII_UPPER")
    (macro G_ASCII_XDIGIT::int "G_ASCII_XDIGIT")
    (type GAsciiType monster__e1057 "GAsciiType")
    (type guint16* (pointer guint16) "guint16 *")
    (type s-_GThreadPool (struct (func::GFunc "func") (user_data::gpointer "user_data") (exclusive::gboolean "exclusive")) "struct _GThreadPool")
    (type GThreadPool s-_GThreadPool "GThreadPool")
    (type s-_GTimer (struct) "struct _GTimer")
    (type GTimer s-_GTimer "GTimer")
    (type s-_GTree (struct) "struct _GTree")
    (type GTree s-_GTree "GTree")
    (type GTraverseFunc *gpointer,gpointer,gpointer->gboolean "GTraverseFunc")
    (type s-_PangoCoverage (struct) "struct _PangoCoverage")
    (type PangoCoverage s-_PangoCoverage "PangoCoverage")
    (type monster__e1058 int "long")
    (macro PANGO_COVERAGE_NONE::int "PANGO_COVERAGE_NONE")
    (macro PANGO_COVERAGE_FALLBACK::int "PANGO_COVERAGE_FALLBACK")
    (macro PANGO_COVERAGE_APPROXIMATE::int "PANGO_COVERAGE_APPROXIMATE")
    (macro PANGO_COVERAGE_EXACT::int "PANGO_COVERAGE_EXACT")
    (type PangoCoverageLevel monster__e1058 "PangoCoverageLevel")
    (type GType gulong "GType")
    (type s-_GValue (struct (g_type::GType "g_type") (data::s-monster__s1004-array-2 "data")) "struct _GValue")
    (type GValue s-_GValue "GValue")
    (type s-_GTypeCValue (union) "union _GTypeCValue")
    (type GTypeCValue s-_GTypeCValue "GTypeCValue")
    (type s-_GTypePlugin (struct) "struct _GTypePlugin")
    (type GTypePlugin s-_GTypePlugin "GTypePlugin")
    (type s-_GTypeClass (struct (g_type::GType "g_type")) "struct _GTypeClass")
    (type GTypeClass s-_GTypeClass "GTypeClass")
    (type s-_GTypeInterface (struct (g_type::GType "g_type") (g_instance_type::GType "g_instance_type")) "struct _GTypeInterface")
    (type GTypeInterface s-_GTypeInterface "GTypeInterface")
    (type s-_GTypeInstance (struct (g_class::GTypeClass* "g_class")) "struct _GTypeInstance")
    (type GTypeInstance s-_GTypeInstance "GTypeInstance")
    (type s-_GTypeInfo (struct (class_size::guint16 "class_size") (base_init::GBaseInitFunc "base_init") (base_finalize::GBaseFinalizeFunc "base_finalize") (class_init::GClassInitFunc "class_init") (class_finalize::GClassFinalizeFunc "class_finalize") (class_data::gconstpointer "class_data") (instance_size::guint16 "instance_size") (n_preallocs::guint16 "n_preallocs") (instance_init::GInstanceInitFunc "instance_init") (value_table::GTypeValueTable* "value_table")) "struct _GTypeInfo")
    (type GTypeInfo s-_GTypeInfo "GTypeInfo")
    (type s-_GTypeFundamentalInfo (struct (type_flags::GTypeFundamentalFlags "type_flags")) "struct _GTypeFundamentalInfo")
    (type GTypeFundamentalInfo s-_GTypeFundamentalInfo "GTypeFundamentalInfo")
    (type s-_GInterfaceInfo (struct (interface_init::GInterfaceInitFunc "interface_init") (interface_finalize::GInterfaceFinalizeFunc "interface_finalize") (interface_data::gpointer "interface_data")) "struct _GInterfaceInfo")
    (type GInterfaceInfo s-_GInterfaceInfo "GInterfaceInfo")
    (type s-_GTypeValueTable (struct (value_init::*GValue*->void "value_init") (value_free::*GValue*->void "value_free") (value_copy::*GValue*,GValue*->void "value_copy") (value_peek_pointer::*GValue*->gpointer "value_peek_pointer") (collect_format::gchar* "collect_format") (collect_value::*GValue*,guint,GTypeCValue*,guint->gchar* "collect_value") (lcopy_format::gchar* "lcopy_format") (lcopy_value::*GValue*,guint,GTypeCValue*,guint->gchar* "lcopy_value")) "struct _GTypeValueTable")
    (type GTypeValueTable s-_GTypeValueTable "GTypeValueTable")
    (type s-_GTypeQuery (struct (type::GType "type") (type_name::gchar* "type_name") (class_size::guint "class_size") (instance_size::guint "instance_size")) "struct _GTypeQuery")
    (type GTypeQuery s-_GTypeQuery "GTypeQuery")
    (type monster__e1059 int "long")
    (macro G_TYPE_DEBUG_NONE::int "G_TYPE_DEBUG_NONE")
    (macro G_TYPE_DEBUG_OBJECTS::int "G_TYPE_DEBUG_OBJECTS")
    (macro G_TYPE_DEBUG_SIGNALS::int "G_TYPE_DEBUG_SIGNALS")
    (macro G_TYPE_DEBUG_MASK::int "G_TYPE_DEBUG_MASK")
    (type GTypeDebugFlags monster__e1059 "GTypeDebugFlags")
    (type GBaseInitFunc *gpointer->void "GBaseInitFunc")
    (type GBaseFinalizeFunc *gpointer->void "GBaseFinalizeFunc")
    (type GClassInitFunc *gpointer,gpointer->void "GClassInitFunc")
    (type GClassFinalizeFunc *gpointer,gpointer->void "GClassFinalizeFunc")
    (type GTypeInstance*,gpointer->void "void ($(GTypeInstance *,gpointer))")
    (type *GTypeInstance*,gpointer->void (function void (GTypeInstance* gpointer)) "void ((*$)(GTypeInstance *,gpointer))")
    (type GInstanceInitFunc *GTypeInstance*,gpointer->void "GInstanceInitFunc")
    (type GInterfaceInitFunc *gpointer,gpointer->void "GInterfaceInitFunc")
    (type GInterfaceFinalizeFunc *gpointer,gpointer->void "GInterfaceFinalizeFunc")
    (type gpointer,GTypeClass*->gboolean "gboolean ($(gpointer,GTypeClass *))")
    (type *gpointer,GTypeClass*->gboolean (function gboolean (gpointer GTypeClass*)) "gboolean ((*$)(gpointer,GTypeClass *))")
    (type GTypeClassCacheFunc *gpointer,GTypeClass*->gboolean "GTypeClassCacheFunc")
    (type GTypeInterfaceCheckFunc *gpointer,gpointer->void "GTypeInterfaceCheckFunc")
    (type monster__e1060 int "long")
    (macro G_TYPE_FLAG_CLASSED::int "G_TYPE_FLAG_CLASSED")
    (macro G_TYPE_FLAG_INSTANTIATABLE::int "G_TYPE_FLAG_INSTANTIATABLE")
    (macro G_TYPE_FLAG_DERIVABLE::int "G_TYPE_FLAG_DERIVABLE")
    (macro G_TYPE_FLAG_DEEP_DERIVABLE::int "G_TYPE_FLAG_DEEP_DERIVABLE")
    (type GTypeFundamentalFlags monster__e1060 "GTypeFundamentalFlags")
    (type monster__e1061 int "long")
    (macro G_TYPE_FLAG_ABSTRACT::int "G_TYPE_FLAG_ABSTRACT")
    (macro G_TYPE_FLAG_VALUE_ABSTRACT::int "G_TYPE_FLAG_VALUE_ABSTRACT")
    (type GTypeFlags monster__e1061 "GTypeFlags")
    (type GValue*->void "void ($(GValue *))")
    (type *GValue*->void (function void (GValue*)) "void ((*$)(GValue *))")
    (type GValue*,GValue*->void "void ($(GValue *,GValue *))")
    (type *GValue*,GValue*->void (function void (GValue* GValue*)) "void ((*$)(GValue *,GValue *))")
    (type GValue*->gpointer "gpointer ($(GValue *))")
    (type *GValue*->gpointer (function gpointer (GValue*)) "gpointer ((*$)(GValue *))")
    (type GValue*,guint,GTypeCValue*,guint->gchar* "gchar *($(GValue *,guint,GTypeCValue *,guint))")
    (type *GValue*,guint,GTypeCValue*,guint->gchar* (function gchar* (GValue* guint GTypeCValue* guint)) "gchar *((*$)(GValue *,guint,GTypeCValue *,guint))")
    (type GBoxedCopyFunc *gpointer->gpointer "GBoxedCopyFunc")
    (type GBoxedFreeFunc *gpointer->void "GBoxedFreeFunc")
    (type GStrv gchar** "GStrv")
    (type s-_GEnumClass (struct (g_type_class::GTypeClass "g_type_class") (minimum::gint "minimum") (maximum::gint "maximum") (n_values::guint "n_values") (values::GEnumValue* "values")) "struct _GEnumClass")
    (type GEnumClass s-_GEnumClass "GEnumClass")
    (type s-_GFlagsClass (struct (g_type_class::GTypeClass "g_type_class") (mask::guint "mask") (n_values::guint "n_values") (values::GFlagsValue* "values")) "struct _GFlagsClass")
    (type GFlagsClass s-_GFlagsClass "GFlagsClass")
    (type s-_GEnumValue (struct (value::gint "value") (value_name::gchar* "value_name") (value_nick::gchar* "value_nick")) "struct _GEnumValue")
    (type GEnumValue s-_GEnumValue "GEnumValue")
    (type s-_GFlagsValue (struct (value::guint "value") (value_name::gchar* "value_name") (value_nick::gchar* "value_nick")) "struct _GFlagsValue")
    (type GFlagsValue s-_GFlagsValue "GFlagsValue")
    (type GValueTransform *GValue*,GValue*->void "GValueTransform")
    (type s-monster__s1004 (union (v_int::gint "v_int") (v_uint::guint "v_uint") (v_long::glong "v_long") (v_ulong::gulong "v_ulong") (v_int64::gint64 "v_int64") (v_uint64::guint64 "v_uint64") (v_float::gfloat "v_float") (v_double::gdouble "v_double") (v_pointer::gpointer "v_pointer")) "void")
    (type s-monster__s1004-array-2 (array s-monster__s1004) "void $[ 2 ]")
    (type monster__e1062 int "long")
    (macro G_PARAM_READABLE::int "G_PARAM_READABLE")
    (macro G_PARAM_WRITABLE::int "G_PARAM_WRITABLE")
    (macro G_PARAM_CONSTRUCT::int "G_PARAM_CONSTRUCT")
    (macro G_PARAM_CONSTRUCT_ONLY::int "G_PARAM_CONSTRUCT_ONLY")
    (macro G_PARAM_LAX_VALIDATION::int "G_PARAM_LAX_VALIDATION")
    (macro G_PARAM_PRIVATE::int "G_PARAM_PRIVATE")
    (type GParamFlags monster__e1062 "GParamFlags")
    (type s-_GParamSpec (struct (g_type_instance::GTypeInstance "g_type_instance") (name::gchar* "name") (flags::GParamFlags "flags") (value_type::GType "value_type") (owner_type::GType "owner_type") (_nick::gchar* "_nick") (_blurb::gchar* "_blurb") (qdata::GData* "qdata") (ref_count::guint "ref_count") (param_id::guint "param_id")) "struct _GParamSpec")
    (type GParamSpec s-_GParamSpec "GParamSpec")
    (type s-_GParamSpecClass (struct (g_type_class::GTypeClass "g_type_class") (value_type::GType "value_type") (finalize::*GParamSpec*->void "finalize") (value_set_default::*GParamSpec*,GValue*->void "value_set_default") (value_validate::*GParamSpec*,GValue*->gboolean "value_validate") (values_cmp::*GParamSpec*,GValue*,GValue*->gint "values_cmp") (dummy::gpointer-array-4 "dummy")) "struct _GParamSpecClass")
    (type GParamSpecClass s-_GParamSpecClass "GParamSpecClass")
    (type s-_GParameter (struct (name::gchar* "name") (value::GValue "value")) "struct _GParameter")
    (type GParameter s-_GParameter "GParameter")
    (type s-_GParamSpecPool (struct) "struct _GParamSpecPool")
    (type GParamSpecPool s-_GParamSpecPool "GParamSpecPool")
    (type GParamSpec*->void "void ($(GParamSpec *))")
    (type *GParamSpec*->void (function void (GParamSpec*)) "void ((*$)(GParamSpec *))")
    (type GParamSpec*,GValue*->void "void ($(GParamSpec *,GValue *))")
    (type *GParamSpec*,GValue*->void (function void (GParamSpec* GValue*)) "void ((*$)(GParamSpec *,GValue *))")
    (type GParamSpec*,GValue*->gboolean "gboolean ($(GParamSpec *,GValue *))")
    (type *GParamSpec*,GValue*->gboolean (function gboolean (GParamSpec* GValue*)) "gboolean ((*$)(GParamSpec *,GValue *))")
    (type GParamSpec*,GValue*,GValue*->gint "gint ($(GParamSpec *,GValue *,GValue *))")
    (type *GParamSpec*,GValue*,GValue*->gint (function gint (GParamSpec* GValue* GValue*)) "gint ((*$)(GParamSpec *,GValue *,GValue *))")
    (type gpointer-array-4 (array gpointer) "gpointer $[ 4 ]")
    (type s-_GParamSpecTypeInfo (struct (instance_size::guint16 "instance_size") (n_preallocs::guint16 "n_preallocs") (instance_init::*GParamSpec*->void "instance_init") (value_type::GType "value_type") (finalize::*GParamSpec*->void "finalize") (value_set_default::*GParamSpec*,GValue*->void "value_set_default") (value_validate::*GParamSpec*,GValue*->gboolean "value_validate") (values_cmp::*GParamSpec*,GValue*,GValue*->gint "values_cmp")) "struct _GParamSpecTypeInfo")
    (type GParamSpecTypeInfo s-_GParamSpecTypeInfo "GParamSpecTypeInfo")
    (type s-_GClosure (struct (ref_count::guint "ref_count") (meta_marshal::guint "meta_marshal") (n_guards::guint "n_guards") (n_fnotifiers::guint "n_fnotifiers") (n_inotifiers::guint "n_inotifiers") (in_inotify::guint "in_inotify") (floating::guint "floating") (derivative_flag::guint "derivative_flag") (in_marshal::guint "in_marshal") (is_invalid::guint "is_invalid") (marshal::*GClosure*,GValue*,guint,GValue*,gpointer,gpointer->void "marshal") (data::gpointer "data") (notifiers::GClosureNotifyData* "notifiers")) "struct _GClosure")
    (type GClosure s-_GClosure "GClosure")
    (type s-_GClosureNotifyData (struct (data::gpointer "data") (notify::GClosureNotify "notify")) "struct _GClosureNotifyData")
    (type GClosureNotifyData s-_GClosureNotifyData "GClosureNotifyData")
    (type GCallback *void->void "GCallback")
    (type gpointer,GClosure*->void "void ($(gpointer,GClosure *))")
    (type *gpointer,GClosure*->void (function void (gpointer GClosure*)) "void ((*$)(gpointer,GClosure *))")
    (type GClosureNotify *gpointer,GClosure*->void "GClosureNotify")
    (type GClosure*,GValue*,guint,GValue*,gpointer,gpointer->void "void ($(GClosure *,GValue *,guint,GValue *,gpointer,gpointer))")
    (type *GClosure*,GValue*,guint,GValue*,gpointer,gpointer->void (function void (GClosure* GValue* guint GValue* gpointer gpointer)) "void ((*$)(GClosure *,GValue *,guint,GValue *,gpointer,gpointer))")
    (type GClosureMarshal *GClosure*,GValue*,guint,GValue*,gpointer,gpointer->void "GClosureMarshal")
    (type s-_GCClosure (struct (closure::GClosure "closure") (callback::gpointer "callback")) "struct _GCClosure")
    (type GCClosure s-_GCClosure "GCClosure")
    (type s-_GSignalQuery (struct (signal_id::guint "signal_id") (signal_name::gchar* "signal_name") (itype::GType "itype") (signal_flags::GSignalFlags "signal_flags") (return_type::GType "return_type") (n_params::guint "n_params") (param_types::GType* "param_types")) "struct _GSignalQuery")
    (type GSignalQuery s-_GSignalQuery "GSignalQuery")
    (type s-_GSignalInvocationHint (struct (signal_id::guint "signal_id") (detail::GQuark "detail") (run_type::GSignalFlags "run_type")) "struct _GSignalInvocationHint")
    (type GSignalInvocationHint s-_GSignalInvocationHint "GSignalInvocationHint")
    (type GSignalCMarshaller GClosureMarshal "GSignalCMarshaller")
    (type GSignalInvocationHint*,guint,GValue*,gpointer->gboolean "gboolean ($(GSignalInvocationHint *,guint,GValue *,gpointer))")
    (type *GSignalInvocationHint*,guint,GValue*,gpointer->gboolean (function gboolean (GSignalInvocationHint* guint GValue* gpointer)) "gboolean ((*$)(GSignalInvocationHint *,guint,GValue *,gpointer))")
    (type GSignalEmissionHook *GSignalInvocationHint*,guint,GValue*,gpointer->gboolean "GSignalEmissionHook")
    (type GSignalInvocationHint*,GValue*,GValue*,gpointer->gboolean "gboolean ($(GSignalInvocationHint *,GValue *,GValue *,gpointer))")
    (type *GSignalInvocationHint*,GValue*,GValue*,gpointer->gboolean (function gboolean (GSignalInvocationHint* GValue* GValue* gpointer)) "gboolean ((*$)(GSignalInvocationHint *,GValue *,GValue *,gpointer))")
    (type GSignalAccumulator *GSignalInvocationHint*,GValue*,GValue*,gpointer->gboolean "GSignalAccumulator")
    (type monster__e1063 int "long")
    (macro G_SIGNAL_RUN_FIRST::int "G_SIGNAL_RUN_FIRST")
    (macro G_SIGNAL_RUN_LAST::int "G_SIGNAL_RUN_LAST")
    (macro G_SIGNAL_RUN_CLEANUP::int "G_SIGNAL_RUN_CLEANUP")
    (macro G_SIGNAL_NO_RECURSE::int "G_SIGNAL_NO_RECURSE")
    (macro G_SIGNAL_DETAILED::int "G_SIGNAL_DETAILED")
    (macro G_SIGNAL_ACTION::int "G_SIGNAL_ACTION")
    (macro G_SIGNAL_NO_HOOKS::int "G_SIGNAL_NO_HOOKS")
    (type GSignalFlags monster__e1063 "GSignalFlags")
    (type monster__e1064 int "long")
    (macro G_CONNECT_AFTER::int "G_CONNECT_AFTER")
    (macro G_CONNECT_SWAPPED::int "G_CONNECT_SWAPPED")
    (type GConnectFlags monster__e1064 "GConnectFlags")
    (type monster__e1065 int "long")
    (macro G_SIGNAL_MATCH_ID::int "G_SIGNAL_MATCH_ID")
    (macro G_SIGNAL_MATCH_DETAIL::int "G_SIGNAL_MATCH_DETAIL")
    (macro G_SIGNAL_MATCH_CLOSURE::int "G_SIGNAL_MATCH_CLOSURE")
    (macro G_SIGNAL_MATCH_FUNC::int "G_SIGNAL_MATCH_FUNC")
    (macro G_SIGNAL_MATCH_DATA::int "G_SIGNAL_MATCH_DATA")
    (macro G_SIGNAL_MATCH_UNBLOCKED::int "G_SIGNAL_MATCH_UNBLOCKED")
    (type GSignalMatchType monster__e1065 "GSignalMatchType")
    (type GType* (pointer GType) "GType *")
    (type s-_GObject (struct (g_type_instance::GTypeInstance "g_type_instance") (ref_count::guint "ref_count") (qdata::GData* "qdata")) "struct _GObject")
    (type GObject s-_GObject "GObject")
    (type s-_GObjectClass (struct (g_type_class::GTypeClass "g_type_class") (construct_properties::GSList* "construct_properties") (constructor::*GType,guint,GObjectConstructParam*->GObject* "constructor") (set_property::*GObject*,guint,GValue*,GParamSpec*->void "set_property") (get_property::*GObject*,guint,GValue*,GParamSpec*->void "get_property") (dispose::*GObject*->void "dispose") (finalize::*GObject*->void "finalize") (dispatch_properties_changed::*GObject*,guint,GParamSpec**->void "dispatch_properties_changed") (notify::*GObject*,GParamSpec*->void "notify") (pdummy::gpointer-array-8 "pdummy")) "struct _GObjectClass")
    (type GObjectClass s-_GObjectClass "GObjectClass")
    (type s-_GObjectConstructParam (struct (pspec::GParamSpec* "pspec") (value::GValue* "value")) "struct _GObjectConstructParam")
    (type GObjectConstructParam s-_GObjectConstructParam "GObjectConstructParam")
    (type GObject*,guint,GValue*,GParamSpec*->void "void ($(GObject *,guint,GValue *,GParamSpec *))")
    (type *GObject*,guint,GValue*,GParamSpec*->void (function void (GObject* guint GValue* GParamSpec*)) "void ((*$)(GObject *,guint,GValue *,GParamSpec *))")
    (type GObjectGetPropertyFunc *GObject*,guint,GValue*,GParamSpec*->void "GObjectGetPropertyFunc")
    (type GObjectSetPropertyFunc *GObject*,guint,GValue*,GParamSpec*->void "GObjectSetPropertyFunc")
    (type GObject*->void "void ($(GObject *))")
    (type *GObject*->void (function void (GObject*)) "void ((*$)(GObject *))")
    (type GObjectFinalizeFunc *GObject*->void "GObjectFinalizeFunc")
    (type gpointer,GObject*->void "void ($(gpointer,GObject *))")
    (type *gpointer,GObject*->void (function void (gpointer GObject*)) "void ((*$)(gpointer,GObject *))")
    (type GWeakNotify *gpointer,GObject*->void "GWeakNotify")
    (type GType,guint,GObjectConstructParam*->GObject* "GObject *($(GType,guint,GObjectConstructParam *))")
    (type *GType,guint,GObjectConstructParam*->GObject* (function GObject* (GType guint GObjectConstructParam*)) "GObject *((*$)(GType,guint,GObjectConstructParam *))")
    (type GParamSpec** (pointer GParamSpec*) "GParamSpec **")
    (type GObject*,guint,GParamSpec**->void "void ($(GObject *,guint,GParamSpec **))")
    (type *GObject*,guint,GParamSpec**->void (function void (GObject* guint GParamSpec**)) "void ((*$)(GObject *,guint,GParamSpec **))")
    (type GObject*,GParamSpec*->void "void ($(GObject *,GParamSpec *))")
    (type *GObject*,GParamSpec*->void (function void (GObject* GParamSpec*)) "void ((*$)(GObject *,GParamSpec *))")
    (type gpointer-array-8 (array gpointer) "gpointer $[ 8 ]")
    (type s-_GParamSpecChar (struct (parent_instance::GParamSpec "parent_instance") (minimum::gint8 "minimum") (maximum::gint8 "maximum") (default_value::gint8 "default_value")) "struct _GParamSpecChar")
    (type GParamSpecChar s-_GParamSpecChar "GParamSpecChar")
    (type s-_GParamSpecUChar (struct (parent_instance::GParamSpec "parent_instance") (minimum::guint8 "minimum") (maximum::guint8 "maximum") (default_value::guint8 "default_value")) "struct _GParamSpecUChar")
    (type GParamSpecUChar s-_GParamSpecUChar "GParamSpecUChar")
    (type s-_GParamSpecBoolean (struct (parent_instance::GParamSpec "parent_instance") (default_value::gboolean "default_value")) "struct _GParamSpecBoolean")
    (type GParamSpecBoolean s-_GParamSpecBoolean "GParamSpecBoolean")
    (type s-_GParamSpecInt (struct (parent_instance::GParamSpec "parent_instance") (minimum::gint "minimum") (maximum::gint "maximum") (default_value::gint "default_value")) "struct _GParamSpecInt")
    (type GParamSpecInt s-_GParamSpecInt "GParamSpecInt")
    (type s-_GParamSpecUInt (struct (parent_instance::GParamSpec "parent_instance") (minimum::guint "minimum") (maximum::guint "maximum") (default_value::guint "default_value")) "struct _GParamSpecUInt")
    (type GParamSpecUInt s-_GParamSpecUInt "GParamSpecUInt")
    (type s-_GParamSpecLong (struct (parent_instance::GParamSpec "parent_instance") (minimum::glong "minimum") (maximum::glong "maximum") (default_value::glong "default_value")) "struct _GParamSpecLong")
    (type GParamSpecLong s-_GParamSpecLong "GParamSpecLong")
    (type s-_GParamSpecULong (struct (parent_instance::GParamSpec "parent_instance") (minimum::gulong "minimum") (maximum::gulong "maximum") (default_value::gulong "default_value")) "struct _GParamSpecULong")
    (type GParamSpecULong s-_GParamSpecULong "GParamSpecULong")
    (type s-_GParamSpecInt64 (struct (parent_instance::GParamSpec "parent_instance") (minimum::gint64 "minimum") (maximum::gint64 "maximum") (default_value::gint64 "default_value")) "struct _GParamSpecInt64")
    (type GParamSpecInt64 s-_GParamSpecInt64 "GParamSpecInt64")
    (type s-_GParamSpecUInt64 (struct (parent_instance::GParamSpec "parent_instance") (minimum::guint64 "minimum") (maximum::guint64 "maximum") (default_value::guint64 "default_value")) "struct _GParamSpecUInt64")
    (type GParamSpecUInt64 s-_GParamSpecUInt64 "GParamSpecUInt64")
    (type s-_GParamSpecUnichar (struct (parent_instance::GParamSpec "parent_instance") (default_value::gunichar "default_value")) "struct _GParamSpecUnichar")
    (type GParamSpecUnichar s-_GParamSpecUnichar "GParamSpecUnichar")
    (type s-_GParamSpecEnum (struct (parent_instance::GParamSpec "parent_instance") (enum_class::GEnumClass* "enum_class") (default_value::gint "default_value")) "struct _GParamSpecEnum")
    (type GParamSpecEnum s-_GParamSpecEnum "GParamSpecEnum")
    (type s-_GParamSpecFlags (struct (parent_instance::GParamSpec "parent_instance") (flags_class::GFlagsClass* "flags_class") (default_value::guint "default_value")) "struct _GParamSpecFlags")
    (type GParamSpecFlags s-_GParamSpecFlags "GParamSpecFlags")
    (type s-_GParamSpecFloat (struct (parent_instance::GParamSpec "parent_instance") (minimum::gfloat "minimum") (maximum::gfloat "maximum") (default_value::gfloat "default_value") (epsilon::gfloat "epsilon")) "struct _GParamSpecFloat")
    (type GParamSpecFloat s-_GParamSpecFloat "GParamSpecFloat")
    (type s-_GParamSpecDouble (struct (parent_instance::GParamSpec "parent_instance") (minimum::gdouble "minimum") (maximum::gdouble "maximum") (default_value::gdouble "default_value") (epsilon::gdouble "epsilon")) "struct _GParamSpecDouble")
    (type GParamSpecDouble s-_GParamSpecDouble "GParamSpecDouble")
    (type s-_GParamSpecString (struct (parent_instance::GParamSpec "parent_instance") (default_value::gchar* "default_value") (cset_first::gchar* "cset_first") (cset_nth::gchar* "cset_nth") (substitutor::gchar "substitutor") (null_fold_if_empty::guint "null_fold_if_empty") (ensure_non_null::guint "ensure_non_null")) "struct _GParamSpecString")
    (type GParamSpecString s-_GParamSpecString "GParamSpecString")
    (type s-_GParamSpecParam (struct (parent_instance::GParamSpec "parent_instance")) "struct _GParamSpecParam")
    (type GParamSpecParam s-_GParamSpecParam "GParamSpecParam")
    (type s-_GParamSpecBoxed (struct (parent_instance::GParamSpec "parent_instance")) "struct _GParamSpecBoxed")
    (type GParamSpecBoxed s-_GParamSpecBoxed "GParamSpecBoxed")
    (type s-_GParamSpecPointer (struct (parent_instance::GParamSpec "parent_instance")) "struct _GParamSpecPointer")
    (type GParamSpecPointer s-_GParamSpecPointer "GParamSpecPointer")
    (type s-_GParamSpecValueArray (struct (parent_instance::GParamSpec "parent_instance") (element_spec::GParamSpec* "element_spec") (fixed_n_elements::guint "fixed_n_elements")) "struct _GParamSpecValueArray")
    (type GParamSpecValueArray s-_GParamSpecValueArray "GParamSpecValueArray")
    (type s-_GParamSpecObject (struct (parent_instance::GParamSpec "parent_instance")) "struct _GParamSpecObject")
    (type GParamSpecObject s-_GParamSpecObject "GParamSpecObject")
    (type s-_GParamSpecOverride (struct (parent_instance::GParamSpec "parent_instance") (overridden::GParamSpec* "overridden")) "struct _GParamSpecOverride")
    (type GParamSpecOverride s-_GParamSpecOverride "GParamSpecOverride")
    (type s-_GTypeModule (struct (parent_instance::GObject "parent_instance") (use_count::guint "use_count") (type_infos::GSList* "type_infos") (interface_infos::GSList* "interface_infos") (name::gchar* "name")) "struct _GTypeModule")
    (type GTypeModule s-_GTypeModule "GTypeModule")
    (type s-_GTypeModuleClass (struct (parent_class::GObjectClass "parent_class") (load::*GTypeModule*->gboolean "load") (unload::*GTypeModule*->void "unload") (reserved1::*void->void "reserved1") (reserved2::*void->void "reserved2") (reserved3::*void->void "reserved3") (reserved4::*void->void "reserved4")) "struct _GTypeModuleClass")
    (type GTypeModuleClass s-_GTypeModuleClass "GTypeModuleClass")
    (type GTypeModule*->gboolean "gboolean ($(GTypeModule *))")
    (type *GTypeModule*->gboolean (function gboolean (GTypeModule*)) "gboolean ((*$)(GTypeModule *))")
    (type GTypeModule*->void "void ($(GTypeModule *))")
    (type *GTypeModule*->void (function void (GTypeModule*)) "void ((*$)(GTypeModule *))")
    (type s-_GTypePluginClass (struct (base_iface::GTypeInterface "base_iface") (use_plugin::GTypePluginUse "use_plugin") (unuse_plugin::GTypePluginUnuse "unuse_plugin") (complete_type_info::GTypePluginCompleteTypeInfo "complete_type_info") (complete_interface_info::GTypePluginCompleteInterfaceInfo "complete_interface_info")) "struct _GTypePluginClass")
    (type GTypePluginClass s-_GTypePluginClass "GTypePluginClass")
    (type GTypePlugin*->void "void ($(GTypePlugin *))")
    (type *GTypePlugin*->void (function void (GTypePlugin*)) "void ((*$)(GTypePlugin *))")
    (type GTypePluginUse *GTypePlugin*->void "GTypePluginUse")
    (type GTypePluginUnuse *GTypePlugin*->void "GTypePluginUnuse")
    (type GTypePlugin*,GType,GTypeInfo*,GTypeValueTable*->void "void ($(GTypePlugin *,GType,GTypeInfo *,GTypeValueTable *))")
    (type *GTypePlugin*,GType,GTypeInfo*,GTypeValueTable*->void (function void (GTypePlugin* GType GTypeInfo* GTypeValueTable*)) "void ((*$)(GTypePlugin *,GType,GTypeInfo *,GTypeValueTable *))")
    (type GTypePluginCompleteTypeInfo *GTypePlugin*,GType,GTypeInfo*,GTypeValueTable*->void "GTypePluginCompleteTypeInfo")
    (type GTypePlugin*,GType,GType,GInterfaceInfo*->void "void ($(GTypePlugin *,GType,GType,GInterfaceInfo *))")
    (type *GTypePlugin*,GType,GType,GInterfaceInfo*->void (function void (GTypePlugin* GType GType GInterfaceInfo*)) "void ((*$)(GTypePlugin *,GType,GType,GInterfaceInfo *))")
    (type GTypePluginCompleteInterfaceInfo *GTypePlugin*,GType,GType,GInterfaceInfo*->void "GTypePluginCompleteInterfaceInfo")
    (type s-_GValueArray (struct (n_values::guint "n_values") (values::GValue* "values") (n_prealloced::guint "n_prealloced")) "struct _GValueArray")
    (type GValueArray s-_GValueArray "GValueArray")
    (type gchararray gchar* "gchararray")
    (type s-_PangoLogAttr (struct (is_line_break::guint "is_line_break") (is_mandatory_break::guint "is_mandatory_break") (is_char_break::guint "is_char_break") (is_white::guint "is_white") (is_cursor_position::guint "is_cursor_position") (is_word_start::guint "is_word_start") (is_word_end::guint "is_word_end") (is_sentence_boundary::guint "is_sentence_boundary") (is_sentence_start::guint "is_sentence_start") (is_sentence_end::guint "is_sentence_end") (backspace_deletes_character::guint "backspace_deletes_character")) "struct _PangoLogAttr")
    (type PangoLogAttr s-_PangoLogAttr "PangoLogAttr")
    (type s-_PangoEngineLang (struct) "struct _PangoEngineLang")
    (type PangoEngineLang s-_PangoEngineLang "PangoEngineLang")
    (type s-_PangoEngineShape (struct) "struct _PangoEngineShape")
    (type PangoEngineShape s-_PangoEngineShape "PangoEngineShape")
    (type s-_PangoFont (struct) "struct _PangoFont")
    (type PangoFont s-_PangoFont "PangoFont")
    (type s-_PangoMatrix (struct (xx::double "xx") (xy::double "xy") (yx::double "yx") (yy::double "yy") (x0::double "x0") (y0::double "y0")) "struct _PangoMatrix")
    (type PangoMatrix s-_PangoMatrix "PangoMatrix")
    (type s-_PangoRectangle (struct (x::int "x") (y::int "y") (width::int "width") (height::int "height")) "struct _PangoRectangle")
    (type PangoRectangle s-_PangoRectangle "PangoRectangle")
    (type s-_PangoLanguage (struct) "struct _PangoLanguage")
    (type PangoLanguage s-_PangoLanguage "PangoLanguage")
    (type PangoGlyph guint32 "PangoGlyph")
    (type monster__e1066 int "long")
    (macro PANGO_DIRECTION_LTR::int "PANGO_DIRECTION_LTR")
    (macro PANGO_DIRECTION_RTL::int "PANGO_DIRECTION_RTL")
    (macro PANGO_DIRECTION_TTB_LTR::int "PANGO_DIRECTION_TTB_LTR")
    (macro PANGO_DIRECTION_TTB_RTL::int "PANGO_DIRECTION_TTB_RTL")
    (macro PANGO_DIRECTION_WEAK_LTR::int "PANGO_DIRECTION_WEAK_LTR")
    (macro PANGO_DIRECTION_WEAK_RTL::int "PANGO_DIRECTION_WEAK_RTL")
    (macro PANGO_DIRECTION_NEUTRAL::int "PANGO_DIRECTION_NEUTRAL")
    (type PangoDirection monster__e1066 "PangoDirection")
    (type s-_PangoFontDescription (struct) "struct _PangoFontDescription")
    (type PangoFontDescription s-_PangoFontDescription "PangoFontDescription")
    (type s-_PangoFontMetrics (struct) "struct _PangoFontMetrics")
    (type PangoFontMetrics s-_PangoFontMetrics "PangoFontMetrics")
    (type monster__e1067 int "long")
    (macro PANGO_STYLE_NORMAL::int "PANGO_STYLE_NORMAL")
    (macro PANGO_STYLE_OBLIQUE::int "PANGO_STYLE_OBLIQUE")
    (macro PANGO_STYLE_ITALIC::int "PANGO_STYLE_ITALIC")
    (type PangoStyle monster__e1067 "PangoStyle")
    (type monster__e1068 int "long")
    (macro PANGO_VARIANT_NORMAL::int "PANGO_VARIANT_NORMAL")
    (macro PANGO_VARIANT_SMALL_CAPS::int "PANGO_VARIANT_SMALL_CAPS")
    (type PangoVariant monster__e1068 "PangoVariant")
    (type monster__e1069 int "long")
    (macro PANGO_WEIGHT_ULTRALIGHT::int "PANGO_WEIGHT_ULTRALIGHT")
    (macro PANGO_WEIGHT_LIGHT::int "PANGO_WEIGHT_LIGHT")
    (macro PANGO_WEIGHT_NORMAL::int "PANGO_WEIGHT_NORMAL")
    (macro PANGO_WEIGHT_SEMIBOLD::int "PANGO_WEIGHT_SEMIBOLD")
    (macro PANGO_WEIGHT_BOLD::int "PANGO_WEIGHT_BOLD")
    (macro PANGO_WEIGHT_ULTRABOLD::int "PANGO_WEIGHT_ULTRABOLD")
    (macro PANGO_WEIGHT_HEAVY::int "PANGO_WEIGHT_HEAVY")
    (type PangoWeight monster__e1069 "PangoWeight")
    (type monster__e1070 int "long")
    (macro PANGO_STRETCH_ULTRA_CONDENSED::int "PANGO_STRETCH_ULTRA_CONDENSED")
    (macro PANGO_STRETCH_EXTRA_CONDENSED::int "PANGO_STRETCH_EXTRA_CONDENSED")
    (macro PANGO_STRETCH_CONDENSED::int "PANGO_STRETCH_CONDENSED")
    (macro PANGO_STRETCH_SEMI_CONDENSED::int "PANGO_STRETCH_SEMI_CONDENSED")
    (macro PANGO_STRETCH_NORMAL::int "PANGO_STRETCH_NORMAL")
    (macro PANGO_STRETCH_SEMI_EXPANDED::int "PANGO_STRETCH_SEMI_EXPANDED")
    (macro PANGO_STRETCH_EXPANDED::int "PANGO_STRETCH_EXPANDED")
    (macro PANGO_STRETCH_EXTRA_EXPANDED::int "PANGO_STRETCH_EXTRA_EXPANDED")
    (macro PANGO_STRETCH_ULTRA_EXPANDED::int "PANGO_STRETCH_ULTRA_EXPANDED")
    (type PangoStretch monster__e1070 "PangoStretch")
    (type monster__e1071 int "long")
    (macro PANGO_FONT_MASK_FAMILY::int "PANGO_FONT_MASK_FAMILY")
    (macro PANGO_FONT_MASK_STYLE::int "PANGO_FONT_MASK_STYLE")
    (macro PANGO_FONT_MASK_VARIANT::int "PANGO_FONT_MASK_VARIANT")
    (macro PANGO_FONT_MASK_WEIGHT::int "PANGO_FONT_MASK_WEIGHT")
    (macro PANGO_FONT_MASK_STRETCH::int "PANGO_FONT_MASK_STRETCH")
    (macro PANGO_FONT_MASK_SIZE::int "PANGO_FONT_MASK_SIZE")
    (type PangoFontMask monster__e1071 "PangoFontMask")
    (type s-_PangoFontFamily (struct) "struct _PangoFontFamily")
    (type PangoFontFamily s-_PangoFontFamily "PangoFontFamily")
    (type s-_PangoFontFace (struct) "struct _PangoFontFace")
    (type PangoFontFace s-_PangoFontFace "PangoFontFace")
    (type s-_PangoColor (struct (red::guint16 "red") (green::guint16 "green") (blue::guint16 "blue")) "struct _PangoColor")
    (type PangoColor s-_PangoColor "PangoColor")
    (type s-_PangoAttribute (struct (klass::PangoAttrClass* "klass") (start_index::guint "start_index") (end_index::guint "end_index")) "struct _PangoAttribute")
    (type PangoAttribute s-_PangoAttribute "PangoAttribute")
    (type s-_PangoAttrClass (struct (type::PangoAttrType "type") (copy::*PangoAttribute*->PangoAttribute* "copy") (destroy::*PangoAttribute*->void "destroy") (equal::*PangoAttribute*,PangoAttribute*->gboolean "equal")) "struct _PangoAttrClass")
    (type PangoAttrClass s-_PangoAttrClass "PangoAttrClass")
    (type s-_PangoAttrString (struct (attr::PangoAttribute "attr") (value::string "value")) "struct _PangoAttrString")
    (type PangoAttrString s-_PangoAttrString "PangoAttrString")
    (type s-_PangoAttrLanguage (struct (attr::PangoAttribute "attr") (value::PangoLanguage* "value")) "struct _PangoAttrLanguage")
    (type PangoAttrLanguage s-_PangoAttrLanguage "PangoAttrLanguage")
    (type s-_PangoAttrInt (struct (attr::PangoAttribute "attr") (value::int "value")) "struct _PangoAttrInt")
    (type PangoAttrInt s-_PangoAttrInt "PangoAttrInt")
    (type s-_PangoAttrSize (struct (attr::PangoAttribute "attr") (size::int "size") (absolute::guint "absolute")) "struct _PangoAttrSize")
    (type PangoAttrSize s-_PangoAttrSize "PangoAttrSize")
    (type s-_PangoAttrFloat (struct (attr::PangoAttribute "attr") (value::double "value")) "struct _PangoAttrFloat")
    (type PangoAttrFloat s-_PangoAttrFloat "PangoAttrFloat")
    (type s-_PangoAttrColor (struct (attr::PangoAttribute "attr") (color::PangoColor "color")) "struct _PangoAttrColor")
    (type PangoAttrColor s-_PangoAttrColor "PangoAttrColor")
    (type s-_PangoAttrFontDesc (struct (attr::PangoAttribute "attr") (desc::PangoFontDescription* "desc")) "struct _PangoAttrFontDesc")
    (type PangoAttrFontDesc s-_PangoAttrFontDesc "PangoAttrFontDesc")
    (type s-_PangoAttrShape (struct (attr::PangoAttribute "attr") (ink_rect::PangoRectangle "ink_rect") (logical_rect::PangoRectangle "logical_rect") (data::gpointer "data") (copy_func::PangoAttrDataCopyFunc "copy_func") (destroy_func::GDestroyNotify "destroy_func")) "struct _PangoAttrShape")
    (type PangoAttrShape s-_PangoAttrShape "PangoAttrShape")
    (type s-_PangoAttrList (struct) "struct _PangoAttrList")
    (type PangoAttrList s-_PangoAttrList "PangoAttrList")
    (type s-_PangoAttrIterator (struct) "struct _PangoAttrIterator")
    (type PangoAttrIterator s-_PangoAttrIterator "PangoAttrIterator")
    (type monster__e1072 int "long")
    (macro PANGO_ATTR_INVALID::int "PANGO_ATTR_INVALID")
    (macro PANGO_ATTR_LANGUAGE::int "PANGO_ATTR_LANGUAGE")
    (macro PANGO_ATTR_FAMILY::int "PANGO_ATTR_FAMILY")
    (macro PANGO_ATTR_STYLE::int "PANGO_ATTR_STYLE")
    (macro PANGO_ATTR_WEIGHT::int "PANGO_ATTR_WEIGHT")
    (macro PANGO_ATTR_VARIANT::int "PANGO_ATTR_VARIANT")
    (macro PANGO_ATTR_STRETCH::int "PANGO_ATTR_STRETCH")
    (macro PANGO_ATTR_SIZE::int "PANGO_ATTR_SIZE")
    (macro PANGO_ATTR_FONT_DESC::int "PANGO_ATTR_FONT_DESC")
    (macro PANGO_ATTR_FOREGROUND::int "PANGO_ATTR_FOREGROUND")
    (macro PANGO_ATTR_BACKGROUND::int "PANGO_ATTR_BACKGROUND")
    (macro PANGO_ATTR_UNDERLINE::int "PANGO_ATTR_UNDERLINE")
    (macro PANGO_ATTR_STRIKETHROUGH::int "PANGO_ATTR_STRIKETHROUGH")
    (macro PANGO_ATTR_RISE::int "PANGO_ATTR_RISE")
    (macro PANGO_ATTR_SHAPE::int "PANGO_ATTR_SHAPE")
    (macro PANGO_ATTR_SCALE::int "PANGO_ATTR_SCALE")
    (macro PANGO_ATTR_FALLBACK::int "PANGO_ATTR_FALLBACK")
    (macro PANGO_ATTR_LETTER_SPACING::int "PANGO_ATTR_LETTER_SPACING")
    (macro PANGO_ATTR_UNDERLINE_COLOR::int "PANGO_ATTR_UNDERLINE_COLOR")
    (macro PANGO_ATTR_STRIKETHROUGH_COLOR::int "PANGO_ATTR_STRIKETHROUGH_COLOR")
    (macro PANGO_ATTR_ABSOLUTE_SIZE::int "PANGO_ATTR_ABSOLUTE_SIZE")
    (type PangoAttrType monster__e1072 "PangoAttrType")
    (type monster__e1073 int "long")
    (macro PANGO_UNDERLINE_NONE::int "PANGO_UNDERLINE_NONE")
    (macro PANGO_UNDERLINE_SINGLE::int "PANGO_UNDERLINE_SINGLE")
    (macro PANGO_UNDERLINE_DOUBLE::int "PANGO_UNDERLINE_DOUBLE")
    (macro PANGO_UNDERLINE_LOW::int "PANGO_UNDERLINE_LOW")
    (macro PANGO_UNDERLINE_ERROR::int "PANGO_UNDERLINE_ERROR")
    (type PangoUnderline monster__e1073 "PangoUnderline")
    (type PangoAttribute*,gpointer->gboolean "gboolean ($(PangoAttribute *,gpointer))")
    (type *PangoAttribute*,gpointer->gboolean (function gboolean (PangoAttribute* gpointer)) "gboolean ((*$)(PangoAttribute *,gpointer))")
    (type PangoAttrFilterFunc *PangoAttribute*,gpointer->gboolean "PangoAttrFilterFunc")
    (type gconstpointer->gpointer "gpointer ($(gconstpointer))")
    (type *gconstpointer->gpointer (function gpointer (gconstpointer)) "gpointer ((*$)(gconstpointer))")
    (type PangoAttrDataCopyFunc *gconstpointer->gpointer "PangoAttrDataCopyFunc")
    (type PangoAttribute*->PangoAttribute* "PangoAttribute *($(PangoAttribute *))")
    (type *PangoAttribute*->PangoAttribute* (function PangoAttribute* (PangoAttribute*)) "PangoAttribute *((*$)(PangoAttribute *))")
    (type PangoAttribute*->void "void ($(PangoAttribute *))")
    (type *PangoAttribute*->void (function void (PangoAttribute*)) "void ((*$)(PangoAttribute *))")
    (type PangoAttribute*,PangoAttribute*->gboolean "gboolean ($(PangoAttribute *,PangoAttribute *))")
    (type *PangoAttribute*,PangoAttribute*->gboolean (function gboolean (PangoAttribute* PangoAttribute*)) "gboolean ((*$)(PangoAttribute *,PangoAttribute *))")
    (type s-_PangoAnalysis (struct (shape_engine::PangoEngineShape* "shape_engine") (lang_engine::PangoEngineLang* "lang_engine") (font::PangoFont* "font") (level::guint8 "level") (language::PangoLanguage* "language") (extra_attrs::GSList* "extra_attrs")) "struct _PangoAnalysis")
    (type PangoAnalysis s-_PangoAnalysis "PangoAnalysis")
    (type s-_PangoItem (struct (offset::gint "offset") (length::gint "length") (num_chars::gint "num_chars") (analysis::PangoAnalysis "analysis")) "struct _PangoItem")
    (type PangoItem s-_PangoItem "PangoItem")
    (type s-_PangoFontset (struct) "struct _PangoFontset")
    (type PangoFontset s-_PangoFontset "PangoFontset")
    (type PangoFontset*,PangoFont*,gpointer->gboolean "gboolean ($(PangoFontset *,PangoFont *,gpointer))")
    (type *PangoFontset*,PangoFont*,gpointer->gboolean (function gboolean (PangoFontset* PangoFont* gpointer)) "gboolean ((*$)(PangoFontset *,PangoFont *,gpointer))")
    (type PangoFontsetForeachFunc *PangoFontset*,PangoFont*,gpointer->gboolean "PangoFontsetForeachFunc")
    (type s-_PangoContext (struct) "struct _PangoContext")
    (type PangoContext s-_PangoContext "PangoContext")
    (type s-_PangoFontMap (struct) "struct _PangoFontMap")
    (type PangoFontMap s-_PangoFontMap "PangoFontMap")
    (type s-_PangoContextClass (struct) "struct _PangoContextClass")
    (type PangoContextClass s-_PangoContextClass "PangoContextClass")
    (type s-_PangoGlyphGeometry (struct (width::PangoGlyphUnit "width") (x_offset::PangoGlyphUnit "x_offset") (y_offset::PangoGlyphUnit "y_offset")) "struct _PangoGlyphGeometry")
    (type PangoGlyphGeometry s-_PangoGlyphGeometry "PangoGlyphGeometry")
    (type s-_PangoGlyphVisAttr (struct (is_cluster_start::guint "is_cluster_start")) "struct _PangoGlyphVisAttr")
    (type PangoGlyphVisAttr s-_PangoGlyphVisAttr "PangoGlyphVisAttr")
    (type s-_PangoGlyphInfo (struct (glyph::PangoGlyph "glyph") (geometry::PangoGlyphGeometry "geometry") (attr::PangoGlyphVisAttr "attr")) "struct _PangoGlyphInfo")
    (type PangoGlyphInfo s-_PangoGlyphInfo "PangoGlyphInfo")
    (type s-_PangoGlyphString (struct (num_glyphs::gint "num_glyphs") (glyphs::PangoGlyphInfo* "glyphs") (log_clusters::gint* "log_clusters") (space::gint "space")) "struct _PangoGlyphString")
    (type PangoGlyphString s-_PangoGlyphString "PangoGlyphString")
    (type PangoGlyphUnit gint32 "PangoGlyphUnit")
    (type s-_PangoScriptIter (struct) "struct _PangoScriptIter")
    (type PangoScriptIter s-_PangoScriptIter "PangoScriptIter")
    (type monster__e1074 int "long")
    (macro PANGO_SCRIPT_INVALID_CODE::int "PANGO_SCRIPT_INVALID_CODE")
    (macro PANGO_SCRIPT_COMMON::int "PANGO_SCRIPT_COMMON")
    (macro PANGO_SCRIPT_INHERITED::int "PANGO_SCRIPT_INHERITED")
    (macro PANGO_SCRIPT_ARABIC::int "PANGO_SCRIPT_ARABIC")
    (macro PANGO_SCRIPT_ARMENIAN::int "PANGO_SCRIPT_ARMENIAN")
    (macro PANGO_SCRIPT_BENGALI::int "PANGO_SCRIPT_BENGALI")
    (macro PANGO_SCRIPT_BOPOMOFO::int "PANGO_SCRIPT_BOPOMOFO")
    (macro PANGO_SCRIPT_CHEROKEE::int "PANGO_SCRIPT_CHEROKEE")
    (macro PANGO_SCRIPT_COPTIC::int "PANGO_SCRIPT_COPTIC")
    (macro PANGO_SCRIPT_CYRILLIC::int "PANGO_SCRIPT_CYRILLIC")
    (macro PANGO_SCRIPT_DESERET::int "PANGO_SCRIPT_DESERET")
    (macro PANGO_SCRIPT_DEVANAGARI::int "PANGO_SCRIPT_DEVANAGARI")
    (macro PANGO_SCRIPT_ETHIOPIC::int "PANGO_SCRIPT_ETHIOPIC")
    (macro PANGO_SCRIPT_GEORGIAN::int "PANGO_SCRIPT_GEORGIAN")
    (macro PANGO_SCRIPT_GOTHIC::int "PANGO_SCRIPT_GOTHIC")
    (macro PANGO_SCRIPT_GREEK::int "PANGO_SCRIPT_GREEK")
    (macro PANGO_SCRIPT_GUJARATI::int "PANGO_SCRIPT_GUJARATI")
    (macro PANGO_SCRIPT_GURMUKHI::int "PANGO_SCRIPT_GURMUKHI")
    (macro PANGO_SCRIPT_HAN::int "PANGO_SCRIPT_HAN")
    (macro PANGO_SCRIPT_HANGUL::int "PANGO_SCRIPT_HANGUL")
    (macro PANGO_SCRIPT_HEBREW::int "PANGO_SCRIPT_HEBREW")
    (macro PANGO_SCRIPT_HIRAGANA::int "PANGO_SCRIPT_HIRAGANA")
    (macro PANGO_SCRIPT_KANNADA::int "PANGO_SCRIPT_KANNADA")
    (macro PANGO_SCRIPT_KATAKANA::int "PANGO_SCRIPT_KATAKANA")
    (macro PANGO_SCRIPT_KHMER::int "PANGO_SCRIPT_KHMER")
    (macro PANGO_SCRIPT_LAO::int "PANGO_SCRIPT_LAO")
    (macro PANGO_SCRIPT_LATIN::int "PANGO_SCRIPT_LATIN")
    (macro PANGO_SCRIPT_MALAYALAM::int "PANGO_SCRIPT_MALAYALAM")
    (macro PANGO_SCRIPT_MONGOLIAN::int "PANGO_SCRIPT_MONGOLIAN")
    (macro PANGO_SCRIPT_MYANMAR::int "PANGO_SCRIPT_MYANMAR")
    (macro PANGO_SCRIPT_OGHAM::int "PANGO_SCRIPT_OGHAM")
    (macro PANGO_SCRIPT_OLD_ITALIC::int "PANGO_SCRIPT_OLD_ITALIC")
    (macro PANGO_SCRIPT_ORIYA::int "PANGO_SCRIPT_ORIYA")
    (macro PANGO_SCRIPT_RUNIC::int "PANGO_SCRIPT_RUNIC")
    (macro PANGO_SCRIPT_SINHALA::int "PANGO_SCRIPT_SINHALA")
    (macro PANGO_SCRIPT_SYRIAC::int "PANGO_SCRIPT_SYRIAC")
    (macro PANGO_SCRIPT_TAMIL::int "PANGO_SCRIPT_TAMIL")
    (macro PANGO_SCRIPT_TELUGU::int "PANGO_SCRIPT_TELUGU")
    (macro PANGO_SCRIPT_THAANA::int "PANGO_SCRIPT_THAANA")
    (macro PANGO_SCRIPT_THAI::int "PANGO_SCRIPT_THAI")
    (macro PANGO_SCRIPT_TIBETAN::int "PANGO_SCRIPT_TIBETAN")
    (macro PANGO_SCRIPT_CANADIAN_ABORIGINAL::int "PANGO_SCRIPT_CANADIAN_ABORIGINAL")
    (macro PANGO_SCRIPT_YI::int "PANGO_SCRIPT_YI")
    (macro PANGO_SCRIPT_TAGALOG::int "PANGO_SCRIPT_TAGALOG")
    (macro PANGO_SCRIPT_HANUNOO::int "PANGO_SCRIPT_HANUNOO")
    (macro PANGO_SCRIPT_BUHID::int "PANGO_SCRIPT_BUHID")
    (macro PANGO_SCRIPT_TAGBANWA::int "PANGO_SCRIPT_TAGBANWA")
    (macro PANGO_SCRIPT_BRAILLE::int "PANGO_SCRIPT_BRAILLE")
    (macro PANGO_SCRIPT_CYPRIOT::int "PANGO_SCRIPT_CYPRIOT")
    (macro PANGO_SCRIPT_LIMBU::int "PANGO_SCRIPT_LIMBU")
    (macro PANGO_SCRIPT_OSMANYA::int "PANGO_SCRIPT_OSMANYA")
    (macro PANGO_SCRIPT_SHAVIAN::int "PANGO_SCRIPT_SHAVIAN")
    (macro PANGO_SCRIPT_LINEAR_B::int "PANGO_SCRIPT_LINEAR_B")
    (macro PANGO_SCRIPT_TAI_LE::int "PANGO_SCRIPT_TAI_LE")
    (macro PANGO_SCRIPT_UGARITIC::int "PANGO_SCRIPT_UGARITIC")
    (type PangoScript monster__e1074 "PangoScript")
    (type s-_PangoGlyphItem (struct (item::PangoItem* "item") (glyphs::PangoGlyphString* "glyphs")) "struct _PangoGlyphItem")
    (type PangoGlyphItem s-_PangoGlyphItem "PangoGlyphItem")
    (type s-_PangoTabArray (struct) "struct _PangoTabArray")
    (type PangoTabArray s-_PangoTabArray "PangoTabArray")
    (type monster__e1075 int "long")
    (macro PANGO_TAB_LEFT::int "PANGO_TAB_LEFT")
    (type PangoTabAlign monster__e1075 "PangoTabAlign")
    (type s-_PangoLayout (struct) "struct _PangoLayout")
    (type PangoLayout s-_PangoLayout "PangoLayout")
    (type s-_PangoLayoutClass (struct) "struct _PangoLayoutClass")
    (type PangoLayoutClass s-_PangoLayoutClass "PangoLayoutClass")
    (type s-_PangoLayoutLine (struct (layout::PangoLayout* "layout") (start_index::gint "start_index") (length::gint "length") (runs::GSList* "runs") (is_paragraph_start::guint "is_paragraph_start") (resolved_dir::guint "resolved_dir")) "struct _PangoLayoutLine")
    (type PangoLayoutLine s-_PangoLayoutLine "PangoLayoutLine")
    (type PangoLayoutRun PangoGlyphItem "PangoLayoutRun")
    (type monster__e1076 int "long")
    (macro PANGO_ALIGN_LEFT::int "PANGO_ALIGN_LEFT")
    (macro PANGO_ALIGN_CENTER::int "PANGO_ALIGN_CENTER")
    (macro PANGO_ALIGN_RIGHT::int "PANGO_ALIGN_RIGHT")
    (type PangoAlignment monster__e1076 "PangoAlignment")
    (type monster__e1077 int "long")
    (macro PANGO_WRAP_WORD::int "PANGO_WRAP_WORD")
    (macro PANGO_WRAP_CHAR::int "PANGO_WRAP_CHAR")
    (macro PANGO_WRAP_WORD_CHAR::int "PANGO_WRAP_WORD_CHAR")
    (type PangoWrapMode monster__e1077 "PangoWrapMode")
    (type monster__e1078 int "long")
    (macro PANGO_ELLIPSIZE_NONE::int "PANGO_ELLIPSIZE_NONE")
    (macro PANGO_ELLIPSIZE_START::int "PANGO_ELLIPSIZE_START")
    (macro PANGO_ELLIPSIZE_MIDDLE::int "PANGO_ELLIPSIZE_MIDDLE")
    (macro PANGO_ELLIPSIZE_END::int "PANGO_ELLIPSIZE_END")
    (type PangoEllipsizeMode monster__e1078 "PangoEllipsizeMode")
    (type s-_PangoLayoutIter (struct) "struct _PangoLayoutIter")
    (type PangoLayoutIter s-_PangoLayoutIter "PangoLayoutIter")
    (type s-_PangoRenderer (struct (parent_instance::GObject "parent_instance") (underline::PangoUnderline "underline") (strikethrough::gboolean "strikethrough") (active_count::int "active_count") (matrix::PangoMatrix* "matrix") (priv::PangoRendererPrivate* "priv")) "struct _PangoRenderer")
    (type PangoRenderer s-_PangoRenderer "PangoRenderer")
    (type s-_PangoRendererClass (struct (parent_class::GObjectClass "parent_class") (draw_glyphs::*PangoRenderer*,PangoFont*,PangoGlyphString*,int,int->void "draw_glyphs") (draw_rectangle::*PangoRenderer*,PangoRenderPart,int,int,int,int->void "draw_rectangle") (draw_error_underline::*PangoRenderer*,int,int,int,int->void "draw_error_underline") (draw_shape::*PangoRenderer*,PangoAttrShape*,int,int->void "draw_shape") (draw_trapezoid::*PangoRenderer*,PangoRenderPart,double,double,double,double,double,double->void "draw_trapezoid") (draw_glyph::*PangoRenderer*,PangoFont*,PangoGlyph,double,double->void "draw_glyph") (part_changed::*PangoRenderer*,PangoRenderPart->void "part_changed") (begin::*PangoRenderer*->void "begin") (end::*PangoRenderer*->void "end") (prepare_run::*PangoRenderer*,PangoLayoutRun*->void "prepare_run") (_pango_reserved1::*void->void "_pango_reserved1") (_pango_reserved2::*void->void "_pango_reserved2") (_pango_reserved3::*void->void "_pango_reserved3") (_pango_reserved4::*void->void "_pango_reserved4")) "struct _PangoRendererClass")
    (type PangoRendererClass s-_PangoRendererClass "PangoRendererClass")
    (type s-_PangoRendererPrivate (struct) "struct _PangoRendererPrivate")
    (type PangoRendererPrivate s-_PangoRendererPrivate "PangoRendererPrivate")
    (type monster__e1079 int "long")
    (macro PANGO_RENDER_PART_FOREGROUND::int "PANGO_RENDER_PART_FOREGROUND")
    (macro PANGO_RENDER_PART_BACKGROUND::int "PANGO_RENDER_PART_BACKGROUND")
    (macro PANGO_RENDER_PART_UNDERLINE::int "PANGO_RENDER_PART_UNDERLINE")
    (macro PANGO_RENDER_PART_STRIKETHROUGH::int "PANGO_RENDER_PART_STRIKETHROUGH")
    (type PangoRenderPart monster__e1079 "PangoRenderPart")
    (type PangoRenderer*,PangoFont*,PangoGlyphString*,int,int->void "void ($(PangoRenderer *,PangoFont *,PangoGlyphString *,int,int))")
    (type *PangoRenderer*,PangoFont*,PangoGlyphString*,int,int->void (function void (PangoRenderer* PangoFont* PangoGlyphString* int int)) "void ((*$)(PangoRenderer *,PangoFont *,PangoGlyphString *,int,int))")
    (type PangoRenderer*,PangoRenderPart,int,int,int,int->void "void ($(PangoRenderer *,PangoRenderPart,int,int,int,int))")
    (type *PangoRenderer*,PangoRenderPart,int,int,int,int->void (function void (PangoRenderer* PangoRenderPart int int int int)) "void ((*$)(PangoRenderer *,PangoRenderPart,int,int,int,int))")
    (type PangoRenderer*,int,int,int,int->void "void ($(PangoRenderer *,int,int,int,int))")
    (type *PangoRenderer*,int,int,int,int->void (function void (PangoRenderer* int int int int)) "void ((*$)(PangoRenderer *,int,int,int,int))")
    (type PangoRenderer*,PangoAttrShape*,int,int->void "void ($(PangoRenderer *,PangoAttrShape *,int,int))")
    (type *PangoRenderer*,PangoAttrShape*,int,int->void (function void (PangoRenderer* PangoAttrShape* int int)) "void ((*$)(PangoRenderer *,PangoAttrShape *,int,int))")
    (type PangoRenderer*,PangoRenderPart,double,double,double,double,double,double->void "void ($(PangoRenderer *,PangoRenderPart,double,double,double,double,double,double))")
    (type *PangoRenderer*,PangoRenderPart,double,double,double,double,double,double->void (function void (PangoRenderer* PangoRenderPart double double double double double double)) "void ((*$)(PangoRenderer *,PangoRenderPart,double,double,double,double,double,double))")
    (type PangoRenderer*,PangoFont*,PangoGlyph,double,double->void "void ($(PangoRenderer *,PangoFont *,PangoGlyph,double,double))")
    (type *PangoRenderer*,PangoFont*,PangoGlyph,double,double->void (function void (PangoRenderer* PangoFont* PangoGlyph double double)) "void ((*$)(PangoRenderer *,PangoFont *,PangoGlyph,double,double))")
    (type PangoRenderer*,PangoRenderPart->void "void ($(PangoRenderer *,PangoRenderPart))")
    (type *PangoRenderer*,PangoRenderPart->void (function void (PangoRenderer* PangoRenderPart)) "void ((*$)(PangoRenderer *,PangoRenderPart))")
    (type PangoRenderer*->void "void ($(PangoRenderer *))")
    (type *PangoRenderer*->void (function void (PangoRenderer*)) "void ((*$)(PangoRenderer *))")
    (type PangoRenderer*,PangoLayoutRun*->void "void ($(PangoRenderer *,PangoLayoutRun *))")
    (type *PangoRenderer*,PangoLayoutRun*->void (function void (PangoRenderer* PangoLayoutRun*)) "void ((*$)(PangoRenderer *,PangoLayoutRun *))")
    (type s-_GdkPoint (struct (x::gint "x") (y::gint "y")) "struct _GdkPoint")
    (type GdkPoint s-_GdkPoint "GdkPoint")
    (type s-_GdkRectangle (struct (x::gint "x") (y::gint "y") (width::gint "width") (height::gint "height")) "struct _GdkRectangle")
    (type GdkRectangle s-_GdkRectangle "GdkRectangle")
    (type s-_GdkSegment (struct (x1::gint "x1") (y1::gint "y1") (x2::gint "x2") (y2::gint "y2")) "struct _GdkSegment")
    (type GdkSegment s-_GdkSegment "GdkSegment")
    (type s-_GdkSpan (struct (x::gint "x") (y::gint "y") (width::gint "width")) "struct _GdkSpan")
    (type GdkSpan s-_GdkSpan "GdkSpan")
    (type GdkWChar guint32 "GdkWChar")
    (type s-_GdkAtom (struct) "struct _GdkAtom")
    (type GdkAtom s-_GdkAtom* "GdkAtom")
    (type GdkNativeWindow guint32 "GdkNativeWindow")
    (type s-_GdkColor (struct (pixel::guint32 "pixel") (red::guint16 "red") (green::guint16 "green") (blue::guint16 "blue")) "struct _GdkColor")
    (type GdkColor s-_GdkColor "GdkColor")
    (type s-_GdkColormap (struct (parent_instance::GObject "parent_instance") (size::gint "size") (colors::GdkColor* "colors") (visual::GdkVisual* "visual") (windowing_data::gpointer "windowing_data")) "struct _GdkColormap")
    (type GdkColormap s-_GdkColormap "GdkColormap")
    (type s-_GdkCursor (struct (type::GdkCursorType "type") (ref_count::guint "ref_count")) "struct _GdkCursor")
    (type GdkCursor s-_GdkCursor "GdkCursor")
    (type s-_GdkFont (struct (type::GdkFontType "type") (ascent::gint "ascent") (descent::gint "descent")) "struct _GdkFont")
    (type GdkFont s-_GdkFont "GdkFont")
    (type s-_GdkGC (struct (parent_instance::GObject "parent_instance") (clip_x_origin::gint "clip_x_origin") (clip_y_origin::gint "clip_y_origin") (ts_x_origin::gint "ts_x_origin") (ts_y_origin::gint "ts_y_origin") (colormap::GdkColormap* "colormap")) "struct _GdkGC")
    (type GdkGC s-_GdkGC "GdkGC")
    (type s-_GdkImage (struct (parent_instance::GObject "parent_instance") (type::GdkImageType "type") (visual::GdkVisual* "visual") (byte_order::GdkByteOrder "byte_order") (width::gint "width") (height::gint "height") (depth::guint16 "depth") (bpp::guint16 "bpp") (bpl::guint16 "bpl") (bits_per_pixel::guint16 "bits_per_pixel") (mem::gpointer "mem") (colormap::GdkColormap* "colormap") (windowing_data::gpointer "windowing_data")) "struct _GdkImage")
    (type GdkImage s-_GdkImage "GdkImage")
    (type s-_GdkRegion (struct) "struct _GdkRegion")
    (type GdkRegion s-_GdkRegion "GdkRegion")
    (type s-_GdkVisual (struct (parent_instance::GObject "parent_instance") (type::GdkVisualType "type") (depth::gint "depth") (byte_order::GdkByteOrder "byte_order") (colormap_size::gint "colormap_size") (bits_per_rgb::gint "bits_per_rgb") (red_mask::guint32 "red_mask") (red_shift::gint "red_shift") (red_prec::gint "red_prec") (green_mask::guint32 "green_mask") (green_shift::gint "green_shift") (green_prec::gint "green_prec") (blue_mask::guint32 "blue_mask") (blue_shift::gint "blue_shift") (blue_prec::gint "blue_prec")) "struct _GdkVisual")
    (type GdkVisual s-_GdkVisual "GdkVisual")
    (type s-_GdkDrawable (struct (parent_instance::GObject "parent_instance")) "struct _GdkDrawable")
    (type GdkDrawable s-_GdkDrawable "GdkDrawable")
    (type GdkBitmap s-_GdkDrawable "GdkBitmap")
    (type GdkPixmap s-_GdkDrawable "GdkPixmap")
    (type GdkWindow s-_GdkDrawable "GdkWindow")
    (type s-_GdkDisplay (struct (parent_instance::GObject "parent_instance") (queued_events::GList* "queued_events") (queued_tail::GList* "queued_tail") (button_click_time::guint32-array-2 "button_click_time") (button_window::GdkWindow*-array-2 "button_window") (button_number::gint-array-2 "button_number") (double_click_time::guint "double_click_time") (core_pointer::GdkDevice* "core_pointer") (pointer_hooks::GdkDisplayPointerHooks* "pointer_hooks") (closed::guint "closed") (double_click_distance::guint "double_click_distance") (button_x::gint-array-2 "button_x") (button_y::gint-array-2 "button_y")) "struct _GdkDisplay")
    (type GdkDisplay s-_GdkDisplay "GdkDisplay")
    (type s-_GdkScreen (struct (parent_instance::GObject "parent_instance") (closed::guint "closed") (normal_gcs::GdkGC*-array-32 "normal_gcs") (exposure_gcs::GdkGC*-array-32 "exposure_gcs")) "struct _GdkScreen")
    (type GdkScreen s-_GdkScreen "GdkScreen")
    (type monster__e1080 int "long")
    (macro GDK_LSB_FIRST::int "GDK_LSB_FIRST")
    (macro GDK_MSB_FIRST::int "GDK_MSB_FIRST")
    (type GdkByteOrder monster__e1080 "GdkByteOrder")
    (type monster__e1081 int "long")
    (macro GDK_SHIFT_MASK::int "GDK_SHIFT_MASK")
    (macro GDK_LOCK_MASK::int "GDK_LOCK_MASK")
    (macro GDK_CONTROL_MASK::int "GDK_CONTROL_MASK")
    (macro GDK_MOD1_MASK::int "GDK_MOD1_MASK")
    (macro GDK_MOD2_MASK::int "GDK_MOD2_MASK")
    (macro GDK_MOD3_MASK::int "GDK_MOD3_MASK")
    (macro GDK_MOD4_MASK::int "GDK_MOD4_MASK")
    (macro GDK_MOD5_MASK::int "GDK_MOD5_MASK")
    (macro GDK_BUTTON1_MASK::int "GDK_BUTTON1_MASK")
    (macro GDK_BUTTON2_MASK::int "GDK_BUTTON2_MASK")
    (macro GDK_BUTTON3_MASK::int "GDK_BUTTON3_MASK")
    (macro GDK_BUTTON4_MASK::int "GDK_BUTTON4_MASK")
    (macro GDK_BUTTON5_MASK::int "GDK_BUTTON5_MASK")
    (macro GDK_RELEASE_MASK::int "GDK_RELEASE_MASK")
    (macro GDK_MODIFIER_MASK::int "GDK_MODIFIER_MASK")
    (type GdkModifierType monster__e1081 "GdkModifierType")
    (type monster__e1082 int "long")
    (macro GDK_INPUT_READ::int "GDK_INPUT_READ")
    (macro GDK_INPUT_WRITE::int "GDK_INPUT_WRITE")
    (macro GDK_INPUT_EXCEPTION::int "GDK_INPUT_EXCEPTION")
    (type GdkInputCondition monster__e1082 "GdkInputCondition")
    (type monster__e1083 int "long")
    (macro GDK_OK::int "GDK_OK")
    (macro GDK_ERROR::int "GDK_ERROR")
    (macro GDK_ERROR_PARAM::int "GDK_ERROR_PARAM")
    (macro GDK_ERROR_FILE::int "GDK_ERROR_FILE")
    (macro GDK_ERROR_MEM::int "GDK_ERROR_MEM")
    (type GdkStatus monster__e1083 "GdkStatus")
    (type monster__e1084 int "long")
    (macro GDK_GRAB_SUCCESS::int "GDK_GRAB_SUCCESS")
    (macro GDK_GRAB_ALREADY_GRABBED::int "GDK_GRAB_ALREADY_GRABBED")
    (macro GDK_GRAB_INVALID_TIME::int "GDK_GRAB_INVALID_TIME")
    (macro GDK_GRAB_NOT_VIEWABLE::int "GDK_GRAB_NOT_VIEWABLE")
    (macro GDK_GRAB_FROZEN::int "GDK_GRAB_FROZEN")
    (type GdkGrabStatus monster__e1084 "GdkGrabStatus")
    (type gpointer,gint,GdkInputCondition->void "void ($(gpointer,gint,GdkInputCondition))")
    (type *gpointer,gint,GdkInputCondition->void (function void (gpointer gint GdkInputCondition)) "void ((*$)(gpointer,gint,GdkInputCondition))")
    (type GdkInputFunction *gpointer,gint,GdkInputCondition->void "GdkInputFunction")
    (type GdkDestroyNotify *gpointer->void "GdkDestroyNotify")
    (type s-_GdkColormapClass (struct (parent_class::GObjectClass "parent_class")) "struct _GdkColormapClass")
    (type GdkColormapClass s-_GdkColormapClass "GdkColormapClass")
    (type monster__e1085 int "long")
    (macro GDK_PIXBUF_ALPHA_BILEVEL::int "GDK_PIXBUF_ALPHA_BILEVEL")
    (macro GDK_PIXBUF_ALPHA_FULL::int "GDK_PIXBUF_ALPHA_FULL")
    (type GdkPixbufAlphaMode monster__e1085 "GdkPixbufAlphaMode")
    (type monster__e1086 int "long")
    (macro GDK_COLORSPACE_RGB::int "GDK_COLORSPACE_RGB")
    (type GdkColorspace monster__e1086 "GdkColorspace")
    (type s-_GdkPixbuf (struct) "struct _GdkPixbuf")
    (type GdkPixbuf s-_GdkPixbuf "GdkPixbuf")
    (type guchar* (pointer guchar) "guchar *")
    (type guchar*,gpointer->void "void ($(guchar *,gpointer))")
    (type *guchar*,gpointer->void (function void (guchar* gpointer)) "void ((*$)(guchar *,gpointer))")
    (type GdkPixbufDestroyNotify *guchar*,gpointer->void "GdkPixbufDestroyNotify")
    (type monster__e1087 int "long")
    (macro GDK_PIXBUF_ERROR_CORRUPT_IMAGE::int "GDK_PIXBUF_ERROR_CORRUPT_IMAGE")
    (macro GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY::int "GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY")
    (macro GDK_PIXBUF_ERROR_BAD_OPTION::int "GDK_PIXBUF_ERROR_BAD_OPTION")
    (macro GDK_PIXBUF_ERROR_UNKNOWN_TYPE::int "GDK_PIXBUF_ERROR_UNKNOWN_TYPE")
    (macro GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION::int "GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION")
    (macro GDK_PIXBUF_ERROR_FAILED::int "GDK_PIXBUF_ERROR_FAILED")
    (type GdkPixbufError monster__e1087 "GdkPixbufError")
    (type gchar*,gsize,GError**,gpointer->gboolean "gboolean ($(gchar *,gsize,GError **,gpointer))")
    (type *gchar*,gsize,GError**,gpointer->gboolean (function gboolean (gchar* gsize GError** gpointer)) "gboolean ((*$)(gchar *,gsize,GError **,gpointer))")
    (type GdkPixbufSaveFunc *gchar*,gsize,GError**,gpointer->gboolean "GdkPixbufSaveFunc")
    (type monster__e1088 int "long")
    (macro GDK_INTERP_NEAREST::int "GDK_INTERP_NEAREST")
    (macro GDK_INTERP_TILES::int "GDK_INTERP_TILES")
    (macro GDK_INTERP_BILINEAR::int "GDK_INTERP_BILINEAR")
    (macro GDK_INTERP_HYPER::int "GDK_INTERP_HYPER")
    (type GdkInterpType monster__e1088 "GdkInterpType")
    (type monster__e1089 int "long")
    (macro GDK_PIXBUF_ROTATE_NONE::int "GDK_PIXBUF_ROTATE_NONE")
    (macro GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE::int "GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE")
    (macro GDK_PIXBUF_ROTATE_UPSIDEDOWN::int "GDK_PIXBUF_ROTATE_UPSIDEDOWN")
    (macro GDK_PIXBUF_ROTATE_CLOCKWISE::int "GDK_PIXBUF_ROTATE_CLOCKWISE")
    (type GdkPixbufRotation monster__e1089 "GdkPixbufRotation")
    (type s-_GdkPixbufAnimation (struct) "struct _GdkPixbufAnimation")
    (type GdkPixbufAnimation s-_GdkPixbufAnimation "GdkPixbufAnimation")
    (type s-_GdkPixbufAnimationIter (struct) "struct _GdkPixbufAnimationIter")
    (type GdkPixbufAnimationIter s-_GdkPixbufAnimationIter "GdkPixbufAnimationIter")
    (type __u_char uchar "__u_char")
    (type __u_short ushort "__u_short")
    (type __u_int uint "__u_int")
    (type __u_long ulong "__u_long")
    (type __int8_t schar "__int8_t")
    (type __uint8_t uchar "__uint8_t")
    (type __int16_t short "__int16_t")
    (type __uint16_t ushort "__uint16_t")
    (type __int32_t int "__int32_t")
    (type __uint32_t uint "__uint32_t")
    (type s-monster__s1005 (struct (__val::long-array-2 "__val")) "__quad_t")
    (type long-array-2 (array long) "long $[ 2 ]")
    (type __quad_t s-monster__s1005 "__quad_t")
    (type s-monster__s1006 (struct (__val::__u_long-array-2 "__val")) "__u_quad_t")
    (type __u_long-array-2 (array __u_long) "__u_long $[ 2 ]")
    (type __u_quad_t s-monster__s1006 "__u_quad_t")
    (type __dev_t uint "__dev_t")
    (type __uid_t uint "__uid_t")
    (type __gid_t uint "__gid_t")
    (type __ino_t ulong "__ino_t")
    (type __ino64_t uint "__ino64_t")
    (type __mode_t uint "__mode_t")
    (type __nlink_t uint "__nlink_t")
    (type __off_t long "__off_t")
    (type __off64_t int "__off64_t")
    (type __pid_t int "__pid_t")
    (type s-monster__s1007 (struct (__val::int-array-2 "__val")) "__fsid_t")
    (type int-array-2 (array int) "int $[ 2 ]")
    (type __fsid_t s-monster__s1007 "__fsid_t")
    (type __clock_t long "__clock_t")
    (type __rlim_t ulong "__rlim_t")
    (type __rlim64_t uint "__rlim64_t")
    (type __id_t uint "__id_t")
    (type __time_t long "__time_t")
    (type __useconds_t uint "__useconds_t")
    (type __suseconds_t long "__suseconds_t")
    (type __daddr_t int "__daddr_t")
    (type __swblk_t long "__swblk_t")
    (type __key_t int "__key_t")
    (type __clockid_t int "__clockid_t")
    (type __timer_t int "__timer_t")
    (type __blksize_t long "__blksize_t")
    (type __blkcnt_t long "__blkcnt_t")
    (type __blkcnt64_t int "__blkcnt64_t")
    (type __fsblkcnt_t ulong "__fsblkcnt_t")
    (type __fsblkcnt64_t uint "__fsblkcnt64_t")
    (type __fsfilcnt_t ulong "__fsfilcnt_t")
    (type __fsfilcnt64_t uint "__fsfilcnt64_t")
    (type __ssize_t int "__ssize_t")
    (type __loff_t __off64_t "__loff_t")
    (type __qaddr_t __quad_t* "__qaddr_t")
    (type __caddr_t string "__caddr_t")
    (type __intptr_t int "__intptr_t")
    (type __socklen_t uint "__socklen_t")
    (type s-_IO_FILE (struct (_flags::int "_flags") (_IO_read_ptr::string "_IO_read_ptr") (_IO_read_end::string "_IO_read_end") (_IO_read_base::string "_IO_read_base") (_IO_write_base::string "_IO_write_base") (_IO_write_ptr::string "_IO_write_ptr") (_IO_write_end::string "_IO_write_end") (_IO_buf_base::string "_IO_buf_base") (_IO_buf_end::string "_IO_buf_end") (_IO_save_base::string "_IO_save_base") (_IO_backup_base::string "_IO_backup_base") (_IO_save_end::string "_IO_save_end") (_markers::s-_IO_marker* "_markers") (_chain::s-_IO_FILE* "_chain") (_fileno::int "_fileno") (_flags2::int "_flags2") (_old_offset::__off_t "_old_offset") (_cur_column::ushort "_cur_column") (_vtable_offset::schar "_vtable_offset") (_shortbuf::char-array-1 "_shortbuf") (_lock::_IO_lock_t* "_lock") (_offset::__off64_t "_offset") (__pad1::void* "__pad1") (__pad2::void* "__pad2") (_mode::int "_mode") (_unused2::char-array-15*sizeof-int--2*sizeof-void-*- "_unused2")) "struct _IO_FILE")
    (type __FILE s-_IO_FILE "__FILE")
    (type wint_t uint "wint_t")
    (type s-monster__s1009 (struct (__count::int "__count") (__value::s-monster__s1008 "__value")) "__mbstate_t")
    (type s-monster__s1008 (union (__wch::wint_t "__wch") (__wchb::char-array-4 "__wchb")) "void")
    (type __mbstate_t s-monster__s1009 "__mbstate_t")
    (type s-monster__s1010 (struct (__pos::__off_t "__pos") (__state::__mbstate_t "__state")) "_G_fpos_t")
    (type _G_fpos_t s-monster__s1010 "_G_fpos_t")
    (type s-monster__s1011 (struct (__pos::__off64_t "__pos") (__state::__mbstate_t "__state")) "_G_fpos64_t")
    (type _G_fpos64_t s-monster__s1011 "_G_fpos64_t")
    (type monster__e1090 int "long")
    (macro __GCONV_OK::int "__GCONV_OK")
    (macro __GCONV_NOCONV::int "__GCONV_NOCONV")
    (macro __GCONV_NODB::int "__GCONV_NODB")
    (macro __GCONV_NOMEM::int "__GCONV_NOMEM")
    (macro __GCONV_EMPTY_INPUT::int "__GCONV_EMPTY_INPUT")
    (macro __GCONV_FULL_OUTPUT::int "__GCONV_FULL_OUTPUT")
    (macro __GCONV_ILLEGAL_INPUT::int "__GCONV_ILLEGAL_INPUT")
    (macro __GCONV_INCOMPLETE_INPUT::int "__GCONV_INCOMPLETE_INPUT")
    (macro __GCONV_ILLEGAL_DESCRIPTOR::int "__GCONV_ILLEGAL_DESCRIPTOR")
    (macro __GCONV_INTERNAL_ERROR::int "__GCONV_INTERNAL_ERROR")
    (type monster__e1091 int "long")
    (macro __GCONV_IS_LAST::int "__GCONV_IS_LAST")
    (macro __GCONV_IGNORE_ERRORS::int "__GCONV_IGNORE_ERRORS")
    (type s-__gconv_step (struct (__shlib_handle::s-__gconv_loaded_object* "__shlib_handle") (__modname::string "__modname") (__counter::int "__counter") (__from_name::string "__from_name") (__to_name::string "__to_name") (__fct::__gconv_fct "__fct") (__btowc_fct::__gconv_btowc_fct "__btowc_fct") (__init_fct::__gconv_init_fct "__init_fct") (__end_fct::__gconv_end_fct "__end_fct") (__min_needed_from::int "__min_needed_from") (__max_needed_from::int "__max_needed_from") (__min_needed_to::int "__min_needed_to") (__max_needed_to::int "__max_needed_to") (__stateful::int "__stateful") (__data::void* "__data")) "struct __gconv_step")
    (type s-__gconv_step_data (struct (__outbuf::uchar* "__outbuf") (__outbufend::uchar* "__outbufend") (__flags::int "__flags") (__invocation_counter::int "__invocation_counter") (__internal_use::int "__internal_use") (__statep::__mbstate_t* "__statep") (__state::__mbstate_t "__state") (__trans::s-__gconv_trans_data* "__trans")) "struct __gconv_step_data")
    (type s-__gconv_loaded_object (struct) "struct __gconv_loaded_object")
    (type s-__gconv_trans_data (struct (__trans_fct::__gconv_trans_fct "__trans_fct") (__trans_context_fct::__gconv_trans_context_fct "__trans_context_fct") (__trans_end_fct::__gconv_trans_end_fct "__trans_end_fct") (__data::void* "__data") (__next::s-__gconv_trans_data* "__next")) "struct __gconv_trans_data")
    (type uchar* (pointer uchar) "unsigned char *")
    (type uchar** (pointer uchar*) "unsigned char **")
    (type size_t* (pointer size_t) "size_t *")
    (type s-__gconv_step*,s-__gconv_step_data*,uchar**,uchar*,uchar**,size_t*,int,int->int "int ($(struct __gconv_step *,struct __gconv_step_data *,unsigned char **,unsigned char *,unsigned char **,size_t *,int,int))")
    (type *s-__gconv_step*,s-__gconv_step_data*,uchar**,uchar*,uchar**,size_t*,int,int->int (function int (s-__gconv_step* s-__gconv_step_data* uchar** uchar* uchar** size_t* int int)) "int ((*$)(struct __gconv_step *,struct __gconv_step_data *,unsigned char **,unsigned char *,unsigned char **,size_t *,int,int))")
    (type __gconv_fct *s-__gconv_step*,s-__gconv_step_data*,uchar**,uchar*,uchar**,size_t*,int,int->int "__gconv_fct")
    (type s-__gconv_step*,uchar->wint_t "wint_t ($(struct __gconv_step *,unsigned char))")
    (type *s-__gconv_step*,uchar->wint_t (function wint_t (s-__gconv_step* uchar)) "wint_t ((*$)(struct __gconv_step *,unsigned char))")
    (type __gconv_btowc_fct *s-__gconv_step*,uchar->wint_t "__gconv_btowc_fct")
    (type s-__gconv_step*->int "int ($(struct __gconv_step *))")
    (type *s-__gconv_step*->int (function int (s-__gconv_step*)) "int ((*$)(struct __gconv_step *))")
    (type __gconv_init_fct *s-__gconv_step*->int "__gconv_init_fct")
    (type s-__gconv_step*->void "void ($(struct __gconv_step *))")
    (type *s-__gconv_step*->void (function void (s-__gconv_step*)) "void ((*$)(struct __gconv_step *))")
    (type __gconv_end_fct *s-__gconv_step*->void "__gconv_end_fct")
    (type s-__gconv_step*,s-__gconv_step_data*,void*,uchar*,uchar**,uchar*,uchar**,size_t*->int "int ($(struct __gconv_step *,struct __gconv_step_data *,void *,unsigned char *,unsigned char **,unsigned char *,unsigned char **,size_t *))")
    (type *s-__gconv_step*,s-__gconv_step_data*,void*,uchar*,uchar**,uchar*,uchar**,size_t*->int (function int (s-__gconv_step* s-__gconv_step_data* void* uchar* uchar** uchar* uchar** size_t*)) "int ((*$)(struct __gconv_step *,struct __gconv_step_data *,void *,unsigned char *,unsigned char **,unsigned char *,unsigned char **,size_t *))")
    (type __gconv_trans_fct *s-__gconv_step*,s-__gconv_step_data*,void*,uchar*,uchar**,uchar*,uchar**,size_t*->int "__gconv_trans_fct")
    (type void*,uchar*,uchar*,uchar*,uchar*->int "int ($(void *,unsigned char *,unsigned char *,unsigned char *,unsigned char *))")
    (type *void*,uchar*,uchar*,uchar*,uchar*->int (function int (void* uchar* uchar* uchar* uchar*)) "int ((*$)(void *,unsigned char *,unsigned char *,unsigned char *,unsigned char *))")
    (type __gconv_trans_context_fct *void*,uchar*,uchar*,uchar*,uchar*->int "__gconv_trans_context_fct")
    (type string* (pointer string) "char **")
    (type string** (pointer string*) "char ***")
    (type string,string**,size_t*->int "int ($(char *,char ***,size_t *))")
    (type *string,string**,size_t*->int (function int (string string** size_t*)) "int ((*$)(char *,char ***,size_t *))")
    (type __gconv_trans_query_fct *string,string**,size_t*->int "__gconv_trans_query_fct")
    (type void** (pointer void*) "void **")
    (type void**,string->int "int ($(void **,char *))")
    (type *void**,string->int (function int (void** string)) "int ((*$)(void **,char *))")
    (type __gconv_trans_init_fct *void**,string->int "__gconv_trans_init_fct")
    (type void*->void "void ($(void *))")
    (type *void*->void (function void (void*)) "void ((*$)(void *))")
    (type __gconv_trans_end_fct *void*->void "__gconv_trans_end_fct")
    (type s-__gconv_info (struct (__nsteps::size_t "__nsteps") (__steps::s-__gconv_step* "__steps") (__data::s-__gconv_step_data-array-1 "__data")) "struct __gconv_info")
    (type s-__gconv_step_data-array-1 (array s-__gconv_step_data) "struct __gconv_step_data $[ 1 ]")
    (type __gconv_t s-__gconv_info* "__gconv_t")
    (type s-monster__s1013 (union (__cd::s-__gconv_info "__cd") (__combined::s-monster__s1012 "__combined")) "_G_iconv_t")
    (type s-monster__s1012 (struct (__cd::s-__gconv_info "__cd") (__data::s-__gconv_step_data "__data")) "void")
    (type _G_iconv_t s-monster__s1013 "_G_iconv_t")
    (type _G_int16_t int "_G_int16_t")
    (type _G_int32_t int "_G_int32_t")
    (type _G_uint16_t uint "_G_uint16_t")
    (type _G_uint32_t uint "_G_uint32_t")
    (type s-_IO_jump_t (struct) "struct _IO_jump_t")
    (type _IO_lock_t void "_IO_lock_t")
    (type s-_IO_marker (struct (_next::s-_IO_marker* "_next") (_sbuf::s-_IO_FILE* "_sbuf") (_pos::int "_pos")) "struct _IO_marker")
    (type __codecvt_result int "enum __codecvt_result")
    (macro __codecvt_ok::int "__codecvt_ok")
    (macro __codecvt_partial::int "__codecvt_partial")
    (macro __codecvt_error::int "__codecvt_error")
    (macro __codecvt_noconv::int "__codecvt_noconv")
    (type char-array-1 (array char) "char $[ 1 ]")
    (type _IO_lock_t* (pointer _IO_lock_t) "_IO_lock_t *")
    (type char-array-15*sizeof-int--2*sizeof-void-*- (array char) "char $[ 15*sizeof-int--2*sizeof-void-*- ]")
    (type _IO_FILE s-_IO_FILE "_IO_FILE")
    (type s-_IO_FILE_plus (struct) "struct _IO_FILE_plus")
    (type fpos_t _G_fpos_t "fpos_t")
    (type string-array (array string) "char *$[  ]")
    (type monster__e1092 int "long")
    (macro G_MODULE_BIND_LAZY::int "G_MODULE_BIND_LAZY")
    (macro G_MODULE_BIND_LOCAL::int "G_MODULE_BIND_LOCAL")
    (macro G_MODULE_BIND_MASK::int "G_MODULE_BIND_MASK")
    (type GModuleFlags monster__e1092 "GModuleFlags")
    (type s-_GModule (struct) "struct _GModule")
    (type GModule s-_GModule "GModule")
    (type GModule*->gchar* "gchar *($(GModule *))")
    (type *GModule*->gchar* (function gchar* (GModule*)) "gchar *((*$)(GModule *))")
    (type GModuleCheckInit *GModule*->gchar* "GModuleCheckInit")
    (type GModule*->void "void ($(GModule *))")
    (type *GModule*->void (function void (GModule*)) "void ((*$)(GModule *))")
    (type GModuleUnload *GModule*->void "GModuleUnload")
    (type s-_GdkPixbufFormat (struct) "struct _GdkPixbufFormat")
    (type GdkPixbufFormat s-_GdkPixbufFormat "GdkPixbufFormat")
    (type s-_GdkPixbufLoader (struct (parent_instance::GObject "parent_instance") (priv::gpointer "priv")) "struct _GdkPixbufLoader")
    (type GdkPixbufLoader s-_GdkPixbufLoader "GdkPixbufLoader")
    (type s-_GdkPixbufLoaderClass (struct (parent_class::GObjectClass "parent_class") (size_prepared::*GdkPixbufLoader*,int,int->void "size_prepared") (area_prepared::*GdkPixbufLoader*->void "area_prepared") (area_updated::*GdkPixbufLoader*,int,int,int,int->void "area_updated") (closed::*GdkPixbufLoader*->void "closed")) "struct _GdkPixbufLoaderClass")
    (type GdkPixbufLoaderClass s-_GdkPixbufLoaderClass "GdkPixbufLoaderClass")
    (type GdkPixbufLoader*,int,int->void "void ($(GdkPixbufLoader *,int,int))")
    (type *GdkPixbufLoader*,int,int->void (function void (GdkPixbufLoader* int int)) "void ((*$)(GdkPixbufLoader *,int,int))")
    (type GdkPixbufLoader*->void "void ($(GdkPixbufLoader *))")
    (type *GdkPixbufLoader*->void (function void (GdkPixbufLoader*)) "void ((*$)(GdkPixbufLoader *))")
    (type GdkPixbufLoader*,int,int,int,int->void "void ($(GdkPixbufLoader *,int,int,int,int))")
    (type *GdkPixbufLoader*,int,int,int,int->void (function void (GdkPixbufLoader* int int int int)) "void ((*$)(GdkPixbufLoader *,int,int,int,int))")
    (type monster__e1093 int "long")
    (macro GDK_X_CURSOR::int "GDK_X_CURSOR")
    (macro GDK_ARROW::int "GDK_ARROW")
    (macro GDK_BASED_ARROW_DOWN::int "GDK_BASED_ARROW_DOWN")
    (macro GDK_BASED_ARROW_UP::int "GDK_BASED_ARROW_UP")
    (macro GDK_BOAT::int "GDK_BOAT")
    (macro GDK_BOGOSITY::int "GDK_BOGOSITY")
    (macro GDK_BOTTOM_LEFT_CORNER::int "GDK_BOTTOM_LEFT_CORNER")
    (macro GDK_BOTTOM_RIGHT_CORNER::int "GDK_BOTTOM_RIGHT_CORNER")
    (macro GDK_BOTTOM_SIDE::int "GDK_BOTTOM_SIDE")
    (macro GDK_BOTTOM_TEE::int "GDK_BOTTOM_TEE")
    (macro GDK_BOX_SPIRAL::int "GDK_BOX_SPIRAL")
    (macro GDK_CENTER_PTR::int "GDK_CENTER_PTR")
    (macro GDK_CIRCLE::int "GDK_CIRCLE")
    (macro GDK_CLOCK::int "GDK_CLOCK")
    (macro GDK_COFFEE_MUG::int "GDK_COFFEE_MUG")
    (macro GDK_CROSS::int "GDK_CROSS")
    (macro GDK_CROSS_REVERSE::int "GDK_CROSS_REVERSE")
    (macro GDK_CROSSHAIR::int "GDK_CROSSHAIR")
    (macro GDK_DIAMOND_CROSS::int "GDK_DIAMOND_CROSS")
    (macro GDK_DOT::int "GDK_DOT")
    (macro GDK_DOTBOX::int "GDK_DOTBOX")
    (macro GDK_DOUBLE_ARROW::int "GDK_DOUBLE_ARROW")
    (macro GDK_DRAFT_LARGE::int "GDK_DRAFT_LARGE")
    (macro GDK_DRAFT_SMALL::int "GDK_DRAFT_SMALL")
    (macro GDK_DRAPED_BOX::int "GDK_DRAPED_BOX")
    (macro GDK_EXCHANGE::int "GDK_EXCHANGE")
    (macro GDK_FLEUR::int "GDK_FLEUR")
    (macro GDK_GOBBLER::int "GDK_GOBBLER")
    (macro GDK_GUMBY::int "GDK_GUMBY")
    (macro GDK_HAND1::int "GDK_HAND1")
    (macro GDK_HAND2::int "GDK_HAND2")
    (macro GDK_HEART::int "GDK_HEART")
    (macro GDK_ICON::int "GDK_ICON")
    (macro GDK_IRON_CROSS::int "GDK_IRON_CROSS")
    (macro GDK_LEFT_PTR::int "GDK_LEFT_PTR")
    (macro GDK_LEFT_SIDE::int "GDK_LEFT_SIDE")
    (macro GDK_LEFT_TEE::int "GDK_LEFT_TEE")
    (macro GDK_LEFTBUTTON::int "GDK_LEFTBUTTON")
    (macro GDK_LL_ANGLE::int "GDK_LL_ANGLE")
    (macro GDK_LR_ANGLE::int "GDK_LR_ANGLE")
    (macro GDK_MAN::int "GDK_MAN")
    (macro GDK_MIDDLEBUTTON::int "GDK_MIDDLEBUTTON")
    (macro GDK_MOUSE::int "GDK_MOUSE")
    (macro GDK_PENCIL::int "GDK_PENCIL")
    (macro GDK_PIRATE::int "GDK_PIRATE")
    (macro GDK_PLUS::int "GDK_PLUS")
    (macro GDK_QUESTION_ARROW::int "GDK_QUESTION_ARROW")
    (macro GDK_RIGHT_PTR::int "GDK_RIGHT_PTR")
    (macro GDK_RIGHT_SIDE::int "GDK_RIGHT_SIDE")
    (macro GDK_RIGHT_TEE::int "GDK_RIGHT_TEE")
    (macro GDK_RIGHTBUTTON::int "GDK_RIGHTBUTTON")
    (macro GDK_RTL_LOGO::int "GDK_RTL_LOGO")
    (macro GDK_SAILBOAT::int "GDK_SAILBOAT")
    (macro GDK_SB_DOWN_ARROW::int "GDK_SB_DOWN_ARROW")
    (macro GDK_SB_H_DOUBLE_ARROW::int "GDK_SB_H_DOUBLE_ARROW")
    (macro GDK_SB_LEFT_ARROW::int "GDK_SB_LEFT_ARROW")
    (macro GDK_SB_RIGHT_ARROW::int "GDK_SB_RIGHT_ARROW")
    (macro GDK_SB_UP_ARROW::int "GDK_SB_UP_ARROW")
    (macro GDK_SB_V_DOUBLE_ARROW::int "GDK_SB_V_DOUBLE_ARROW")
    (macro GDK_SHUTTLE::int "GDK_SHUTTLE")
    (macro GDK_SIZING::int "GDK_SIZING")
    (macro GDK_SPIDER::int "GDK_SPIDER")
    (macro GDK_SPRAYCAN::int "GDK_SPRAYCAN")
    (macro GDK_STAR::int "GDK_STAR")
    (macro GDK_TARGET::int "GDK_TARGET")
    (macro GDK_TCROSS::int "GDK_TCROSS")
    (macro GDK_TOP_LEFT_ARROW::int "GDK_TOP_LEFT_ARROW")
    (macro GDK_TOP_LEFT_CORNER::int "GDK_TOP_LEFT_CORNER")
    (macro GDK_TOP_RIGHT_CORNER::int "GDK_TOP_RIGHT_CORNER")
    (macro GDK_TOP_SIDE::int "GDK_TOP_SIDE")
    (macro GDK_TOP_TEE::int "GDK_TOP_TEE")
    (macro GDK_TREK::int "GDK_TREK")
    (macro GDK_UL_ANGLE::int "GDK_UL_ANGLE")
    (macro GDK_UMBRELLA::int "GDK_UMBRELLA")
    (macro GDK_UR_ANGLE::int "GDK_UR_ANGLE")
    (macro GDK_WATCH::int "GDK_WATCH")
    (macro GDK_XTERM::int "GDK_XTERM")
    (macro GDK_LAST_CURSOR::int "GDK_LAST_CURSOR")
    (macro GDK_CURSOR_IS_PIXMAP::int "GDK_CURSOR_IS_PIXMAP")
    (type GdkCursorType monster__e1093 "GdkCursorType")
    (type s-_GdkDragContext (struct (parent_instance::GObject "parent_instance") (protocol::GdkDragProtocol "protocol") (is_source::gboolean "is_source") (source_window::GdkWindow* "source_window") (dest_window::GdkWindow* "dest_window") (targets::GList* "targets") (actions::GdkDragAction "actions") (suggested_action::GdkDragAction "suggested_action") (action::GdkDragAction "action") (start_time::guint32 "start_time") (windowing_data::gpointer "windowing_data")) "struct _GdkDragContext")
    (type GdkDragContext s-_GdkDragContext "GdkDragContext")
    (type monster__e1094 int "long")
    (macro GDK_ACTION_DEFAULT::int "GDK_ACTION_DEFAULT")
    (macro GDK_ACTION_COPY::int "GDK_ACTION_COPY")
    (macro GDK_ACTION_MOVE::int "GDK_ACTION_MOVE")
    (macro GDK_ACTION_LINK::int "GDK_ACTION_LINK")
    (macro GDK_ACTION_PRIVATE::int "GDK_ACTION_PRIVATE")
    (macro GDK_ACTION_ASK::int "GDK_ACTION_ASK")
    (type GdkDragAction monster__e1094 "GdkDragAction")
    (type monster__e1095 int "long")
    (macro GDK_DRAG_PROTO_MOTIF::int "GDK_DRAG_PROTO_MOTIF")
    (macro GDK_DRAG_PROTO_XDND::int "GDK_DRAG_PROTO_XDND")
    (macro GDK_DRAG_PROTO_ROOTWIN::int "GDK_DRAG_PROTO_ROOTWIN")
    (macro GDK_DRAG_PROTO_NONE::int "GDK_DRAG_PROTO_NONE")
    (macro GDK_DRAG_PROTO_WIN32_DROPFILES::int "GDK_DRAG_PROTO_WIN32_DROPFILES")
    (macro GDK_DRAG_PROTO_OLE2::int "GDK_DRAG_PROTO_OLE2")
    (macro GDK_DRAG_PROTO_LOCAL::int "GDK_DRAG_PROTO_LOCAL")
    (type GdkDragProtocol monster__e1095 "GdkDragProtocol")
    (type s-_GdkDragContextClass (struct (parent_class::GObjectClass "parent_class")) "struct _GdkDragContextClass")
    (type GdkDragContextClass s-_GdkDragContextClass "GdkDragContextClass")
    (type s-_GdkDeviceKey (struct (keyval::guint "keyval") (modifiers::GdkModifierType "modifiers")) "struct _GdkDeviceKey")
    (type GdkDeviceKey s-_GdkDeviceKey "GdkDeviceKey")
    (type s-_GdkDeviceAxis (struct (use::GdkAxisUse "use") (min::gdouble "min") (max::gdouble "max")) "struct _GdkDeviceAxis")
    (type GdkDeviceAxis s-_GdkDeviceAxis "GdkDeviceAxis")
    (type s-_GdkDevice (struct (parent_instance::GObject "parent_instance") (name::gchar* "name") (source::GdkInputSource "source") (mode::GdkInputMode "mode") (has_cursor::gboolean "has_cursor") (num_axes::gint "num_axes") (axes::GdkDeviceAxis* "axes") (num_keys::gint "num_keys") (keys::GdkDeviceKey* "keys")) "struct _GdkDevice")
    (type GdkDevice s-_GdkDevice "GdkDevice")
    (type s-_GdkDeviceClass (struct) "struct _GdkDeviceClass")
    (type GdkDeviceClass s-_GdkDeviceClass "GdkDeviceClass")
    (type s-_GdkTimeCoord (struct (time::guint32 "time") (axes::gdouble-array-128 "axes")) "struct _GdkTimeCoord")
    (type GdkTimeCoord s-_GdkTimeCoord "GdkTimeCoord")
    (type monster__e1096 int "long")
    (macro GDK_EXTENSION_EVENTS_NONE::int "GDK_EXTENSION_EVENTS_NONE")
    (macro GDK_EXTENSION_EVENTS_ALL::int "GDK_EXTENSION_EVENTS_ALL")
    (macro GDK_EXTENSION_EVENTS_CURSOR::int "GDK_EXTENSION_EVENTS_CURSOR")
    (type GdkExtensionMode monster__e1096 "GdkExtensionMode")
    (type monster__e1097 int "long")
    (macro GDK_SOURCE_MOUSE::int "GDK_SOURCE_MOUSE")
    (macro GDK_SOURCE_PEN::int "GDK_SOURCE_PEN")
    (macro GDK_SOURCE_ERASER::int "GDK_SOURCE_ERASER")
    (macro GDK_SOURCE_CURSOR::int "GDK_SOURCE_CURSOR")
    (type GdkInputSource monster__e1097 "GdkInputSource")
    (type monster__e1098 int "long")
    (macro GDK_MODE_DISABLED::int "GDK_MODE_DISABLED")
    (macro GDK_MODE_SCREEN::int "GDK_MODE_SCREEN")
    (macro GDK_MODE_WINDOW::int "GDK_MODE_WINDOW")
    (type GdkInputMode monster__e1098 "GdkInputMode")
    (type monster__e1099 int "long")
    (macro GDK_AXIS_IGNORE::int "GDK_AXIS_IGNORE")
    (macro GDK_AXIS_X::int "GDK_AXIS_X")
    (macro GDK_AXIS_Y::int "GDK_AXIS_Y")
    (macro GDK_AXIS_PRESSURE::int "GDK_AXIS_PRESSURE")
    (macro GDK_AXIS_XTILT::int "GDK_AXIS_XTILT")
    (macro GDK_AXIS_YTILT::int "GDK_AXIS_YTILT")
    (macro GDK_AXIS_WHEEL::int "GDK_AXIS_WHEEL")
    (macro GDK_AXIS_LAST::int "GDK_AXIS_LAST")
    (type GdkAxisUse monster__e1099 "GdkAxisUse")
    (type gdouble-array-128 (array gdouble) "gdouble $[ 128 ]")
    (type s-_GdkEventAny (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event")) "struct _GdkEventAny")
    (type GdkEventAny s-_GdkEventAny "GdkEventAny")
    (type s-_GdkEventExpose (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (area::GdkRectangle "area") (region::GdkRegion* "region") (count::gint "count")) "struct _GdkEventExpose")
    (type GdkEventExpose s-_GdkEventExpose "GdkEventExpose")
    (type s-_GdkEventNoExpose (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event")) "struct _GdkEventNoExpose")
    (type GdkEventNoExpose s-_GdkEventNoExpose "GdkEventNoExpose")
    (type s-_GdkEventVisibility (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (state::GdkVisibilityState "state")) "struct _GdkEventVisibility")
    (type GdkEventVisibility s-_GdkEventVisibility "GdkEventVisibility")
    (type s-_GdkEventMotion (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (time::guint32 "time") (x::gdouble "x") (y::gdouble "y") (axes::gdouble* "axes") (state::guint "state") (is_hint::gint16 "is_hint") (device::GdkDevice* "device") (x_root::gdouble "x_root") (y_root::gdouble "y_root")) "struct _GdkEventMotion")
    (type GdkEventMotion s-_GdkEventMotion "GdkEventMotion")
    (type s-_GdkEventButton (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (time::guint32 "time") (x::gdouble "x") (y::gdouble "y") (axes::gdouble* "axes") (state::guint "state") (button::guint "button") (device::GdkDevice* "device") (x_root::gdouble "x_root") (y_root::gdouble "y_root")) "struct _GdkEventButton")
    (type GdkEventButton s-_GdkEventButton "GdkEventButton")
    (type s-_GdkEventScroll (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (time::guint32 "time") (x::gdouble "x") (y::gdouble "y") (state::guint "state") (direction::GdkScrollDirection "direction") (device::GdkDevice* "device") (x_root::gdouble "x_root") (y_root::gdouble "y_root")) "struct _GdkEventScroll")
    (type GdkEventScroll s-_GdkEventScroll "GdkEventScroll")
    (type s-_GdkEventKey (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (time::guint32 "time") (state::guint "state") (keyval::guint "keyval") (length::gint "length") (string::gchar* "string") (hardware_keycode::guint16 "hardware_keycode") (group::guint8 "group")) "struct _GdkEventKey")
    (type GdkEventKey s-_GdkEventKey "GdkEventKey")
    (type s-_GdkEventFocus (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (in::gint16 "in")) "struct _GdkEventFocus")
    (type GdkEventFocus s-_GdkEventFocus "GdkEventFocus")
    (type s-_GdkEventCrossing (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (subwindow::GdkWindow* "subwindow") (time::guint32 "time") (x::gdouble "x") (y::gdouble "y") (x_root::gdouble "x_root") (y_root::gdouble "y_root") (mode::GdkCrossingMode "mode") (detail::GdkNotifyType "detail") (focus::gboolean "focus") (state::guint "state")) "struct _GdkEventCrossing")
    (type GdkEventCrossing s-_GdkEventCrossing "GdkEventCrossing")
    (type s-_GdkEventConfigure (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (x::gint "x") (y::gint "y") (width::gint "width") (height::gint "height")) "struct _GdkEventConfigure")
    (type GdkEventConfigure s-_GdkEventConfigure "GdkEventConfigure")
    (type s-_GdkEventProperty (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (atom::GdkAtom "atom") (time::guint32 "time") (state::guint "state")) "struct _GdkEventProperty")
    (type GdkEventProperty s-_GdkEventProperty "GdkEventProperty")
    (type s-_GdkEventSelection (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (selection::GdkAtom "selection") (target::GdkAtom "target") (property::GdkAtom "property") (time::guint32 "time") (requestor::GdkNativeWindow "requestor")) "struct _GdkEventSelection")
    (type GdkEventSelection s-_GdkEventSelection "GdkEventSelection")
    (type s-_GdkEventOwnerChange (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (owner::GdkNativeWindow "owner") (reason::GdkOwnerChange "reason") (selection::GdkAtom "selection") (time::guint32 "time") (selection_time::guint32 "selection_time")) "struct _GdkEventOwnerChange")
    (type GdkEventOwnerChange s-_GdkEventOwnerChange "GdkEventOwnerChange")
    (type s-_GdkEventProximity (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (time::guint32 "time") (device::GdkDevice* "device")) "struct _GdkEventProximity")
    (type GdkEventProximity s-_GdkEventProximity "GdkEventProximity")
    (type s-_GdkEventClient (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (message_type::GdkAtom "message_type") (data_format::gushort "data_format") (data::s-monster__s1014 "data")) "struct _GdkEventClient")
    (type GdkEventClient s-_GdkEventClient "GdkEventClient")
    (type s-_GdkEventDND (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (context::GdkDragContext* "context") (time::guint32 "time") (x_root::gshort "x_root") (y_root::gshort "y_root")) "struct _GdkEventDND")
    (type GdkEventDND s-_GdkEventDND "GdkEventDND")
    (type s-_GdkEventWindowState (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (changed_mask::GdkWindowState "changed_mask") (new_window_state::GdkWindowState "new_window_state")) "struct _GdkEventWindowState")
    (type GdkEventWindowState s-_GdkEventWindowState "GdkEventWindowState")
    (type s-_GdkEventSetting (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (action::GdkSettingAction "action") (name::string "name")) "struct _GdkEventSetting")
    (type GdkEventSetting s-_GdkEventSetting "GdkEventSetting")
    (type s-_GdkEvent (union (type::GdkEventType "type") (any::GdkEventAny "any") (expose::GdkEventExpose "expose") (no_expose::GdkEventNoExpose "no_expose") (visibility::GdkEventVisibility "visibility") (motion::GdkEventMotion "motion") (button::GdkEventButton "button") (scroll::GdkEventScroll "scroll") (key::GdkEventKey "key") (crossing::GdkEventCrossing "crossing") (focus_change::GdkEventFocus "focus_change") (configure::GdkEventConfigure "configure") (property::GdkEventProperty "property") (selection::GdkEventSelection "selection") (owner_change::GdkEventOwnerChange "owner_change") (proximity::GdkEventProximity "proximity") (client::GdkEventClient "client") (dnd::GdkEventDND "dnd") (window_state::GdkEventWindowState "window_state") (setting::GdkEventSetting "setting")) "union _GdkEvent")
    (type GdkEvent s-_GdkEvent "GdkEvent")
    (type GdkEvent*,gpointer->void "void ($(GdkEvent *,gpointer))")
    (type *GdkEvent*,gpointer->void (function void (GdkEvent* gpointer)) "void ((*$)(GdkEvent *,gpointer))")
    (type GdkEventFunc *GdkEvent*,gpointer->void "GdkEventFunc")
    (type GdkXEvent void "GdkXEvent")
    (type monster__e1100 int "long")
    (macro GDK_FILTER_CONTINUE::int "GDK_FILTER_CONTINUE")
    (macro GDK_FILTER_TRANSLATE::int "GDK_FILTER_TRANSLATE")
    (macro GDK_FILTER_REMOVE::int "GDK_FILTER_REMOVE")
    (type GdkFilterReturn monster__e1100 "GdkFilterReturn")
    (type GdkXEvent* (pointer GdkXEvent) "GdkXEvent *")
    (type GdkXEvent*,GdkEvent*,gpointer->GdkFilterReturn "GdkFilterReturn ($(GdkXEvent *,GdkEvent *,gpointer))")
    (type *GdkXEvent*,GdkEvent*,gpointer->GdkFilterReturn (function GdkFilterReturn (GdkXEvent* GdkEvent* gpointer)) "GdkFilterReturn ((*$)(GdkXEvent *,GdkEvent *,gpointer))")
    (type GdkFilterFunc *GdkXEvent*,GdkEvent*,gpointer->GdkFilterReturn "GdkFilterFunc")
    (type monster__e1101 int "long")
    (macro GDK_NOTHING::int "GDK_NOTHING")
    (macro GDK_DELETE::int "GDK_DELETE")
    (macro GDK_DESTROY::int "GDK_DESTROY")
    (macro GDK_EXPOSE::int "GDK_EXPOSE")
    (macro GDK_MOTION_NOTIFY::int "GDK_MOTION_NOTIFY")
    (macro GDK_BUTTON_PRESS::int "GDK_BUTTON_PRESS")
    (macro GDK_2BUTTON_PRESS::int "GDK_2BUTTON_PRESS")
    (macro GDK_3BUTTON_PRESS::int "GDK_3BUTTON_PRESS")
    (macro GDK_BUTTON_RELEASE::int "GDK_BUTTON_RELEASE")
    (macro GDK_KEY_PRESS::int "GDK_KEY_PRESS")
    (macro GDK_KEY_RELEASE::int "GDK_KEY_RELEASE")
    (macro GDK_ENTER_NOTIFY::int "GDK_ENTER_NOTIFY")
    (macro GDK_LEAVE_NOTIFY::int "GDK_LEAVE_NOTIFY")
    (macro GDK_FOCUS_CHANGE::int "GDK_FOCUS_CHANGE")
    (macro GDK_CONFIGURE::int "GDK_CONFIGURE")
    (macro GDK_MAP::int "GDK_MAP")
    (macro GDK_UNMAP::int "GDK_UNMAP")
    (macro GDK_PROPERTY_NOTIFY::int "GDK_PROPERTY_NOTIFY")
    (macro GDK_SELECTION_CLEAR::int "GDK_SELECTION_CLEAR")
    (macro GDK_SELECTION_REQUEST::int "GDK_SELECTION_REQUEST")
    (macro GDK_SELECTION_NOTIFY::int "GDK_SELECTION_NOTIFY")
    (macro GDK_PROXIMITY_IN::int "GDK_PROXIMITY_IN")
    (macro GDK_PROXIMITY_OUT::int "GDK_PROXIMITY_OUT")
    (macro GDK_DRAG_ENTER::int "GDK_DRAG_ENTER")
    (macro GDK_DRAG_LEAVE::int "GDK_DRAG_LEAVE")
    (macro GDK_DRAG_MOTION::int "GDK_DRAG_MOTION")
    (macro GDK_DRAG_STATUS::int "GDK_DRAG_STATUS")
    (macro GDK_DROP_START::int "GDK_DROP_START")
    (macro GDK_DROP_FINISHED::int "GDK_DROP_FINISHED")
    (macro GDK_CLIENT_EVENT::int "GDK_CLIENT_EVENT")
    (macro GDK_VISIBILITY_NOTIFY::int "GDK_VISIBILITY_NOTIFY")
    (macro GDK_NO_EXPOSE::int "GDK_NO_EXPOSE")
    (macro GDK_SCROLL::int "GDK_SCROLL")
    (macro GDK_WINDOW_STATE::int "GDK_WINDOW_STATE")
    (macro GDK_SETTING::int "GDK_SETTING")
    (macro GDK_OWNER_CHANGE::int "GDK_OWNER_CHANGE")
    (type GdkEventType monster__e1101 "GdkEventType")
    (type monster__e1102 int "long")
    (macro GDK_EXPOSURE_MASK::int "GDK_EXPOSURE_MASK")
    (macro GDK_POINTER_MOTION_MASK::int "GDK_POINTER_MOTION_MASK")
    (macro GDK_POINTER_MOTION_HINT_MASK::int "GDK_POINTER_MOTION_HINT_MASK")
    (macro GDK_BUTTON_MOTION_MASK::int "GDK_BUTTON_MOTION_MASK")
    (macro GDK_BUTTON1_MOTION_MASK::int "GDK_BUTTON1_MOTION_MASK")
    (macro GDK_BUTTON2_MOTION_MASK::int "GDK_BUTTON2_MOTION_MASK")
    (macro GDK_BUTTON3_MOTION_MASK::int "GDK_BUTTON3_MOTION_MASK")
    (macro GDK_BUTTON_PRESS_MASK::int "GDK_BUTTON_PRESS_MASK")
    (macro GDK_BUTTON_RELEASE_MASK::int "GDK_BUTTON_RELEASE_MASK")
    (macro GDK_KEY_PRESS_MASK::int "GDK_KEY_PRESS_MASK")
    (macro GDK_KEY_RELEASE_MASK::int "GDK_KEY_RELEASE_MASK")
    (macro GDK_ENTER_NOTIFY_MASK::int "GDK_ENTER_NOTIFY_MASK")
    (macro GDK_LEAVE_NOTIFY_MASK::int "GDK_LEAVE_NOTIFY_MASK")
    (macro GDK_FOCUS_CHANGE_MASK::int "GDK_FOCUS_CHANGE_MASK")
    (macro GDK_STRUCTURE_MASK::int "GDK_STRUCTURE_MASK")
    (macro GDK_PROPERTY_CHANGE_MASK::int "GDK_PROPERTY_CHANGE_MASK")
    (macro GDK_VISIBILITY_NOTIFY_MASK::int "GDK_VISIBILITY_NOTIFY_MASK")
    (macro GDK_PROXIMITY_IN_MASK::int "GDK_PROXIMITY_IN_MASK")
    (macro GDK_PROXIMITY_OUT_MASK::int "GDK_PROXIMITY_OUT_MASK")
    (macro GDK_SUBSTRUCTURE_MASK::int "GDK_SUBSTRUCTURE_MASK")
    (macro GDK_SCROLL_MASK::int "GDK_SCROLL_MASK")
    (macro GDK_ALL_EVENTS_MASK::int "GDK_ALL_EVENTS_MASK")
    (type GdkEventMask monster__e1102 "GdkEventMask")
    (type monster__e1103 int "long")
    (macro GDK_VISIBILITY_UNOBSCURED::int "GDK_VISIBILITY_UNOBSCURED")
    (macro GDK_VISIBILITY_PARTIAL::int "GDK_VISIBILITY_PARTIAL")
    (macro GDK_VISIBILITY_FULLY_OBSCURED::int "GDK_VISIBILITY_FULLY_OBSCURED")
    (type GdkVisibilityState monster__e1103 "GdkVisibilityState")
    (type monster__e1104 int "long")
    (macro GDK_SCROLL_UP::int "GDK_SCROLL_UP")
    (macro GDK_SCROLL_DOWN::int "GDK_SCROLL_DOWN")
    (macro GDK_SCROLL_LEFT::int "GDK_SCROLL_LEFT")
    (macro GDK_SCROLL_RIGHT::int "GDK_SCROLL_RIGHT")
    (type GdkScrollDirection monster__e1104 "GdkScrollDirection")
    (type monster__e1105 int "long")
    (macro GDK_NOTIFY_ANCESTOR::int "GDK_NOTIFY_ANCESTOR")
    (macro GDK_NOTIFY_VIRTUAL::int "GDK_NOTIFY_VIRTUAL")
    (macro GDK_NOTIFY_INFERIOR::int "GDK_NOTIFY_INFERIOR")
    (macro GDK_NOTIFY_NONLINEAR::int "GDK_NOTIFY_NONLINEAR")
    (macro GDK_NOTIFY_NONLINEAR_VIRTUAL::int "GDK_NOTIFY_NONLINEAR_VIRTUAL")
    (macro GDK_NOTIFY_UNKNOWN::int "GDK_NOTIFY_UNKNOWN")
    (type GdkNotifyType monster__e1105 "GdkNotifyType")
    (type monster__e1106 int "long")
    (macro GDK_CROSSING_NORMAL::int "GDK_CROSSING_NORMAL")
    (macro GDK_CROSSING_GRAB::int "GDK_CROSSING_GRAB")
    (macro GDK_CROSSING_UNGRAB::int "GDK_CROSSING_UNGRAB")
    (type GdkCrossingMode monster__e1106 "GdkCrossingMode")
    (type monster__e1107 int "long")
    (macro GDK_PROPERTY_NEW_VALUE::int "GDK_PROPERTY_NEW_VALUE")
    (macro GDK_PROPERTY_DELETE::int "GDK_PROPERTY_DELETE")
    (type GdkPropertyState monster__e1107 "GdkPropertyState")
    (type monster__e1108 int "long")
    (macro GDK_WINDOW_STATE_WITHDRAWN::int "GDK_WINDOW_STATE_WITHDRAWN")
    (macro GDK_WINDOW_STATE_ICONIFIED::int "GDK_WINDOW_STATE_ICONIFIED")
    (macro GDK_WINDOW_STATE_MAXIMIZED::int "GDK_WINDOW_STATE_MAXIMIZED")
    (macro GDK_WINDOW_STATE_STICKY::int "GDK_WINDOW_STATE_STICKY")
    (macro GDK_WINDOW_STATE_FULLSCREEN::int "GDK_WINDOW_STATE_FULLSCREEN")
    (macro GDK_WINDOW_STATE_ABOVE::int "GDK_WINDOW_STATE_ABOVE")
    (macro GDK_WINDOW_STATE_BELOW::int "GDK_WINDOW_STATE_BELOW")
    (type GdkWindowState monster__e1108 "GdkWindowState")
    (type monster__e1109 int "long")
    (macro GDK_SETTING_ACTION_NEW::int "GDK_SETTING_ACTION_NEW")
    (macro GDK_SETTING_ACTION_CHANGED::int "GDK_SETTING_ACTION_CHANGED")
    (macro GDK_SETTING_ACTION_DELETED::int "GDK_SETTING_ACTION_DELETED")
    (type GdkSettingAction monster__e1109 "GdkSettingAction")
    (type monster__e1110 int "long")
    (macro GDK_OWNER_CHANGE_NEW_OWNER::int "GDK_OWNER_CHANGE_NEW_OWNER")
    (macro GDK_OWNER_CHANGE_DESTROY::int "GDK_OWNER_CHANGE_DESTROY")
    (macro GDK_OWNER_CHANGE_CLOSE::int "GDK_OWNER_CHANGE_CLOSE")
    (type GdkOwnerChange monster__e1110 "GdkOwnerChange")
    (type gdouble* (pointer gdouble) "gdouble *")
    (type s-monster__s1014 (union (b::char-array-20 "b") (s::short-array-10 "s") (l::long-array-5 "l")) "void")
    (type char-array-20 (array char) "char $[ 20 ]")
    (type short-array-10 (array short) "signed short $[ 10 ]")
    (type long-array-5 (array long) "long $[ 5 ]")
    (type s-_GdkDisplayClass (struct (parent_class::GObjectClass "parent_class") (get_display_name::*GdkDisplay*->gchar* "get_display_name") (get_n_screens::*GdkDisplay*->gint "get_n_screens") (get_screen::*GdkDisplay*,gint->GdkScreen* "get_screen") (get_default_screen::*GdkDisplay*->GdkScreen* "get_default_screen") (closed::*GdkDisplay*,gboolean->void "closed")) "struct _GdkDisplayClass")
    (type GdkDisplayClass s-_GdkDisplayClass "GdkDisplayClass")
    (type s-_GdkDisplayPointerHooks (struct (get_pointer::*GdkDisplay*,GdkScreen**,gint*,gint*,GdkModifierType*->void "get_pointer") (window_get_pointer::*GdkDisplay*,GdkWindow*,gint*,gint*,GdkModifierType*->GdkWindow* "window_get_pointer") (window_at_pointer::*GdkDisplay*,gint*,gint*->GdkWindow* "window_at_pointer")) "struct _GdkDisplayPointerHooks")
    (type GdkDisplayPointerHooks s-_GdkDisplayPointerHooks "GdkDisplayPointerHooks")
    (type guint32-array-2 (array guint32) "guint32 $[ 2 ]")
    (type GdkWindow*-array-2 (array GdkWindow*) "GdkWindow *$[ 2 ]")
    (type gint-array-2 (array gint) "gint $[ 2 ]")
    (type GdkDisplay*->gchar* "gchar *($(GdkDisplay *))")
    (type *GdkDisplay*->gchar* (function gchar* (GdkDisplay*)) "gchar *((*$)(GdkDisplay *))")
    (type GdkDisplay*->gint "gint ($(GdkDisplay *))")
    (type *GdkDisplay*->gint (function gint (GdkDisplay*)) "gint ((*$)(GdkDisplay *))")
    (type GdkDisplay*,gint->GdkScreen* "GdkScreen *($(GdkDisplay *,gint))")
    (type *GdkDisplay*,gint->GdkScreen* (function GdkScreen* (GdkDisplay* gint)) "GdkScreen *((*$)(GdkDisplay *,gint))")
    (type GdkDisplay*->GdkScreen* "GdkScreen *($(GdkDisplay *))")
    (type *GdkDisplay*->GdkScreen* (function GdkScreen* (GdkDisplay*)) "GdkScreen *((*$)(GdkDisplay *))")
    (type GdkDisplay*,gboolean->void "void ($(GdkDisplay *,gboolean))")
    (type *GdkDisplay*,gboolean->void (function void (GdkDisplay* gboolean)) "void ((*$)(GdkDisplay *,gboolean))")
    (type GdkScreen** (pointer GdkScreen*) "GdkScreen **")
    (type GdkModifierType* (pointer GdkModifierType) "GdkModifierType *")
    (type GdkDisplay*,GdkScreen**,gint*,gint*,GdkModifierType*->void "void ($(GdkDisplay *,GdkScreen **,gint *,gint *,GdkModifierType *))")
    (type *GdkDisplay*,GdkScreen**,gint*,gint*,GdkModifierType*->void (function void (GdkDisplay* GdkScreen** gint* gint* GdkModifierType*)) "void ((*$)(GdkDisplay *,GdkScreen **,gint *,gint *,GdkModifierType *))")
    (type GdkDisplay*,GdkWindow*,gint*,gint*,GdkModifierType*->GdkWindow* "GdkWindow *($(GdkDisplay *,GdkWindow *,gint *,gint *,GdkModifierType *))")
    (type *GdkDisplay*,GdkWindow*,gint*,gint*,GdkModifierType*->GdkWindow* (function GdkWindow* (GdkDisplay* GdkWindow* gint* gint* GdkModifierType*)) "GdkWindow *((*$)(GdkDisplay *,GdkWindow *,gint *,gint *,GdkModifierType *))")
    (type GdkDisplay*,gint*,gint*->GdkWindow* "GdkWindow *($(GdkDisplay *,gint *,gint *))")
    (type *GdkDisplay*,gint*,gint*->GdkWindow* (function GdkWindow* (GdkDisplay* gint* gint*)) "GdkWindow *((*$)(GdkDisplay *,gint *,gint *))")
    (type s-_GdkGCValues (struct (foreground::GdkColor "foreground") (background::GdkColor "background") (font::GdkFont* "font") (function::GdkFunction "function") (fill::GdkFill "fill") (tile::GdkPixmap* "tile") (stipple::GdkPixmap* "stipple") (clip_mask::GdkPixmap* "clip_mask") (subwindow_mode::GdkSubwindowMode "subwindow_mode") (ts_x_origin::gint "ts_x_origin") (ts_y_origin::gint "ts_y_origin") (clip_x_origin::gint "clip_x_origin") (clip_y_origin::gint "clip_y_origin") (graphics_exposures::gint "graphics_exposures") (line_width::gint "line_width") (line_style::GdkLineStyle "line_style") (cap_style::GdkCapStyle "cap_style") (join_style::GdkJoinStyle "join_style")) "struct _GdkGCValues")
    (type GdkGCValues s-_GdkGCValues "GdkGCValues")
    (type s-_GdkGCClass (struct (parent_class::GObjectClass "parent_class") (get_values::*GdkGC*,GdkGCValues*->void "get_values") (set_values::*GdkGC*,GdkGCValues*,GdkGCValuesMask->void "set_values") (set_dashes::*GdkGC*,gint,gint8*,gint->void "set_dashes") (_gdk_reserved1::*void->void "_gdk_reserved1") (_gdk_reserved2::*void->void "_gdk_reserved2") (_gdk_reserved3::*void->void "_gdk_reserved3") (_gdk_reserved4::*void->void "_gdk_reserved4")) "struct _GdkGCClass")
    (type GdkGCClass s-_GdkGCClass "GdkGCClass")
    (type monster__e1111 int "long")
    (macro GDK_CAP_NOT_LAST::int "GDK_CAP_NOT_LAST")
    (macro GDK_CAP_BUTT::int "GDK_CAP_BUTT")
    (macro GDK_CAP_ROUND::int "GDK_CAP_ROUND")
    (macro GDK_CAP_PROJECTING::int "GDK_CAP_PROJECTING")
    (type GdkCapStyle monster__e1111 "GdkCapStyle")
    (type monster__e1112 int "long")
    (macro GDK_SOLID::int "GDK_SOLID")
    (macro GDK_TILED::int "GDK_TILED")
    (macro GDK_STIPPLED::int "GDK_STIPPLED")
    (macro GDK_OPAQUE_STIPPLED::int "GDK_OPAQUE_STIPPLED")
    (type GdkFill monster__e1112 "GdkFill")
    (type monster__e1113 int "long")
    (macro GDK_COPY::int "GDK_COPY")
    (macro GDK_INVERT::int "GDK_INVERT")
    (macro GDK_XOR::int "GDK_XOR")
    (macro GDK_CLEAR::int "GDK_CLEAR")
    (macro GDK_AND::int "GDK_AND")
    (macro GDK_AND_REVERSE::int "GDK_AND_REVERSE")
    (macro GDK_AND_INVERT::int "GDK_AND_INVERT")
    (macro GDK_NOOP::int "GDK_NOOP")
    (macro GDK_OR::int "GDK_OR")
    (macro GDK_EQUIV::int "GDK_EQUIV")
    (macro GDK_OR_REVERSE::int "GDK_OR_REVERSE")
    (macro GDK_COPY_INVERT::int "GDK_COPY_INVERT")
    (macro GDK_OR_INVERT::int "GDK_OR_INVERT")
    (macro GDK_NAND::int "GDK_NAND")
    (macro GDK_NOR::int "GDK_NOR")
    (macro GDK_SET::int "GDK_SET")
    (type GdkFunction monster__e1113 "GdkFunction")
    (type monster__e1114 int "long")
    (macro GDK_JOIN_MITER::int "GDK_JOIN_MITER")
    (macro GDK_JOIN_ROUND::int "GDK_JOIN_ROUND")
    (macro GDK_JOIN_BEVEL::int "GDK_JOIN_BEVEL")
    (type GdkJoinStyle monster__e1114 "GdkJoinStyle")
    (type monster__e1115 int "long")
    (macro GDK_LINE_SOLID::int "GDK_LINE_SOLID")
    (macro GDK_LINE_ON_OFF_DASH::int "GDK_LINE_ON_OFF_DASH")
    (macro GDK_LINE_DOUBLE_DASH::int "GDK_LINE_DOUBLE_DASH")
    (type GdkLineStyle monster__e1115 "GdkLineStyle")
    (type monster__e1116 int "long")
    (macro GDK_CLIP_BY_CHILDREN::int "GDK_CLIP_BY_CHILDREN")
    (macro GDK_INCLUDE_INFERIORS::int "GDK_INCLUDE_INFERIORS")
    (type GdkSubwindowMode monster__e1116 "GdkSubwindowMode")
    (type monster__e1117 int "long")
    (macro GDK_GC_FOREGROUND::int "GDK_GC_FOREGROUND")
    (macro GDK_GC_BACKGROUND::int "GDK_GC_BACKGROUND")
    (macro GDK_GC_FONT::int "GDK_GC_FONT")
    (macro GDK_GC_FUNCTION::int "GDK_GC_FUNCTION")
    (macro GDK_GC_FILL::int "GDK_GC_FILL")
    (macro GDK_GC_TILE::int "GDK_GC_TILE")
    (macro GDK_GC_STIPPLE::int "GDK_GC_STIPPLE")
    (macro GDK_GC_CLIP_MASK::int "GDK_GC_CLIP_MASK")
    (macro GDK_GC_SUBWINDOW::int "GDK_GC_SUBWINDOW")
    (macro GDK_GC_TS_X_ORIGIN::int "GDK_GC_TS_X_ORIGIN")
    (macro GDK_GC_TS_Y_ORIGIN::int "GDK_GC_TS_Y_ORIGIN")
    (macro GDK_GC_CLIP_X_ORIGIN::int "GDK_GC_CLIP_X_ORIGIN")
    (macro GDK_GC_CLIP_Y_ORIGIN::int "GDK_GC_CLIP_Y_ORIGIN")
    (macro GDK_GC_EXPOSURES::int "GDK_GC_EXPOSURES")
    (macro GDK_GC_LINE_WIDTH::int "GDK_GC_LINE_WIDTH")
    (macro GDK_GC_LINE_STYLE::int "GDK_GC_LINE_STYLE")
    (macro GDK_GC_CAP_STYLE::int "GDK_GC_CAP_STYLE")
    (macro GDK_GC_JOIN_STYLE::int "GDK_GC_JOIN_STYLE")
    (type GdkGCValuesMask monster__e1117 "GdkGCValuesMask")
    (type GdkGC*,GdkGCValues*->void "void ($(GdkGC *,GdkGCValues *))")
    (type *GdkGC*,GdkGCValues*->void (function void (GdkGC* GdkGCValues*)) "void ((*$)(GdkGC *,GdkGCValues *))")
    (type GdkGC*,GdkGCValues*,GdkGCValuesMask->void "void ($(GdkGC *,GdkGCValues *,GdkGCValuesMask))")
    (type *GdkGC*,GdkGCValues*,GdkGCValuesMask->void (function void (GdkGC* GdkGCValues* GdkGCValuesMask)) "void ((*$)(GdkGC *,GdkGCValues *,GdkGCValuesMask))")
    (type gint8-array (array gint8) "gint8 $[  ]")
    (type gint8* (pointer gint8) "gint8 *")
    (type GdkGC*,gint,gint8*,gint->void "void ($(GdkGC *,gint,gint8 *,gint))")
    (type *GdkGC*,gint,gint8*,gint->void (function void (GdkGC* gint gint8* gint)) "void ((*$)(GdkGC *,gint,gint8 *,gint))")
    (type s-_GdkRgbCmap (struct (colors::guint32-array-256 "colors") (n_colors::gint "n_colors") (info_list::GSList* "info_list")) "struct _GdkRgbCmap")
    (type GdkRgbCmap s-_GdkRgbCmap "GdkRgbCmap")
    (type guint32-array-256 (array guint32) "guint32 $[ 256 ]")
    (type monster__e1118 int "long")
    (macro GDK_RGB_DITHER_NONE::int "GDK_RGB_DITHER_NONE")
    (macro GDK_RGB_DITHER_NORMAL::int "GDK_RGB_DITHER_NORMAL")
    (macro GDK_RGB_DITHER_MAX::int "GDK_RGB_DITHER_MAX")
    (type GdkRgbDither monster__e1118 "GdkRgbDither")
    (type s-_GdkDrawableClass (struct (parent_class::GObjectClass "parent_class") (create_gc::*GdkDrawable*,GdkGCValues*,GdkGCValuesMask->GdkGC* "create_gc") (draw_rectangle::*GdkDrawable*,GdkGC*,gboolean,gint,gint,gint,gint->void "draw_rectangle") (draw_arc::*GdkDrawable*,GdkGC*,gboolean,gint,gint,gint,gint,gint,gint->void "draw_arc") (draw_polygon::*GdkDrawable*,GdkGC*,gboolean,GdkPoint*,gint->void "draw_polygon") (draw_text::*GdkDrawable*,GdkFont*,GdkGC*,gint,gint,gchar*,gint->void "draw_text") (draw_text_wc::*GdkDrawable*,GdkFont*,GdkGC*,gint,gint,GdkWChar*,gint->void "draw_text_wc") (draw_drawable::*GdkDrawable*,GdkGC*,GdkDrawable*,gint,gint,gint,gint,gint,gint->void "draw_drawable") (draw_points::*GdkDrawable*,GdkGC*,GdkPoint*,gint->void "draw_points") (draw_segments::*GdkDrawable*,GdkGC*,GdkSegment*,gint->void "draw_segments") (draw_lines::*GdkDrawable*,GdkGC*,GdkPoint*,gint->void "draw_lines") (draw_glyphs::*GdkDrawable*,GdkGC*,PangoFont*,gint,gint,PangoGlyphString*->void "draw_glyphs") (draw_image::*GdkDrawable*,GdkGC*,GdkImage*,gint,gint,gint,gint,gint,gint->void "draw_image") (get_depth::*GdkDrawable*->gint "get_depth") (get_size::*GdkDrawable*,gint*,gint*->void "get_size") (set_colormap::*GdkDrawable*,GdkColormap*->void "set_colormap") (get_colormap::*GdkDrawable*->GdkColormap* "get_colormap") (get_visual::*GdkDrawable*->GdkVisual* "get_visual") (get_screen::*GdkDrawable*->GdkScreen* "get_screen") (get_image::*GdkDrawable*,gint,gint,gint,gint->GdkImage* "get_image") (get_clip_region::*GdkDrawable*->GdkRegion* "get_clip_region") (get_visible_region::*GdkDrawable*->GdkRegion* "get_visible_region") (get_composite_drawable::*GdkDrawable*,gint,gint,gint,gint,gint*,gint*->GdkDrawable* "get_composite_drawable") (draw_pixbuf::*GdkDrawable*,GdkGC*,GdkPixbuf*,gint,gint,gint,gint,gint,gint,GdkRgbDither,gint,gint->void "draw_pixbuf") (_copy_to_image::*GdkDrawable*,GdkImage*,gint,gint,gint,gint,gint,gint->GdkImage* "_copy_to_image") (draw_glyphs_transformed::*GdkDrawable*,GdkGC*,PangoMatrix*,PangoFont*,gint,gint,PangoGlyphString*->void "draw_glyphs_transformed") (draw_trapezoids::*GdkDrawable*,GdkGC*,GdkTrapezoid*,gint->void "draw_trapezoids") (_gdk_reserved3::*void->void "_gdk_reserved3") (_gdk_reserved4::*void->void "_gdk_reserved4") (_gdk_reserved5::*void->void "_gdk_reserved5") (_gdk_reserved6::*void->void "_gdk_reserved6") (_gdk_reserved7::*void->void "_gdk_reserved7") (_gdk_reserved9::*void->void "_gdk_reserved9") (_gdk_reserved10::*void->void "_gdk_reserved10") (_gdk_reserved11::*void->void "_gdk_reserved11") (_gdk_reserved12::*void->void "_gdk_reserved12") (_gdk_reserved13::*void->void "_gdk_reserved13") (_gdk_reserved14::*void->void "_gdk_reserved14") (_gdk_reserved15::*void->void "_gdk_reserved15") (_gdk_reserved16::*void->void "_gdk_reserved16")) "struct _GdkDrawableClass")
    (type GdkDrawableClass s-_GdkDrawableClass "GdkDrawableClass")
    (type s-_GdkTrapezoid (struct (y1::double "y1") (x11::double "x11") (x21::double "x21") (y2::double "y2") (x12::double "x12") (x22::double "x22")) "struct _GdkTrapezoid")
    (type GdkTrapezoid s-_GdkTrapezoid "GdkTrapezoid")
    (type GdkDrawable*,GdkGCValues*,GdkGCValuesMask->GdkGC* "GdkGC *($(GdkDrawable *,GdkGCValues *,GdkGCValuesMask))")
    (type *GdkDrawable*,GdkGCValues*,GdkGCValuesMask->GdkGC* (function GdkGC* (GdkDrawable* GdkGCValues* GdkGCValuesMask)) "GdkGC *((*$)(GdkDrawable *,GdkGCValues *,GdkGCValuesMask))")
    (type GdkDrawable*,GdkGC*,gboolean,gint,gint,gint,gint->void "void ($(GdkDrawable *,GdkGC *,gboolean,gint,gint,gint,gint))")
    (type *GdkDrawable*,GdkGC*,gboolean,gint,gint,gint,gint->void (function void (GdkDrawable* GdkGC* gboolean gint gint gint gint)) "void ((*$)(GdkDrawable *,GdkGC *,gboolean,gint,gint,gint,gint))")
    (type GdkDrawable*,GdkGC*,gboolean,gint,gint,gint,gint,gint,gint->void "void ($(GdkDrawable *,GdkGC *,gboolean,gint,gint,gint,gint,gint,gint))")
    (type *GdkDrawable*,GdkGC*,gboolean,gint,gint,gint,gint,gint,gint->void (function void (GdkDrawable* GdkGC* gboolean gint gint gint gint gint gint)) "void ((*$)(GdkDrawable *,GdkGC *,gboolean,gint,gint,gint,gint,gint,gint))")
    (type GdkDrawable*,GdkGC*,gboolean,GdkPoint*,gint->void "void ($(GdkDrawable *,GdkGC *,gboolean,GdkPoint *,gint))")
    (type *GdkDrawable*,GdkGC*,gboolean,GdkPoint*,gint->void (function void (GdkDrawable* GdkGC* gboolean GdkPoint* gint)) "void ((*$)(GdkDrawable *,GdkGC *,gboolean,GdkPoint *,gint))")
    (type GdkDrawable*,GdkFont*,GdkGC*,gint,gint,gchar*,gint->void "void ($(GdkDrawable *,GdkFont *,GdkGC *,gint,gint,gchar *,gint))")
    (type *GdkDrawable*,GdkFont*,GdkGC*,gint,gint,gchar*,gint->void (function void (GdkDrawable* GdkFont* GdkGC* gint gint gchar* gint)) "void ((*$)(GdkDrawable *,GdkFont *,GdkGC *,gint,gint,gchar *,gint))")
    (type GdkWChar* (pointer GdkWChar) "GdkWChar *")
    (type GdkDrawable*,GdkFont*,GdkGC*,gint,gint,GdkWChar*,gint->void "void ($(GdkDrawable *,GdkFont *,GdkGC *,gint,gint,GdkWChar *,gint))")
    (type *GdkDrawable*,GdkFont*,GdkGC*,gint,gint,GdkWChar*,gint->void (function void (GdkDrawable* GdkFont* GdkGC* gint gint GdkWChar* gint)) "void ((*$)(GdkDrawable *,GdkFont *,GdkGC *,gint,gint,GdkWChar *,gint))")
    (type GdkDrawable*,GdkGC*,GdkDrawable*,gint,gint,gint,gint,gint,gint->void "void ($(GdkDrawable *,GdkGC *,GdkDrawable *,gint,gint,gint,gint,gint,gint))")
    (type *GdkDrawable*,GdkGC*,GdkDrawable*,gint,gint,gint,gint,gint,gint->void (function void (GdkDrawable* GdkGC* GdkDrawable* gint gint gint gint gint gint)) "void ((*$)(GdkDrawable *,GdkGC *,GdkDrawable *,gint,gint,gint,gint,gint,gint))")
    (type GdkDrawable*,GdkGC*,GdkPoint*,gint->void "void ($(GdkDrawable *,GdkGC *,GdkPoint *,gint))")
    (type *GdkDrawable*,GdkGC*,GdkPoint*,gint->void (function void (GdkDrawable* GdkGC* GdkPoint* gint)) "void ((*$)(GdkDrawable *,GdkGC *,GdkPoint *,gint))")
    (type GdkDrawable*,GdkGC*,GdkSegment*,gint->void "void ($(GdkDrawable *,GdkGC *,GdkSegment *,gint))")
    (type *GdkDrawable*,GdkGC*,GdkSegment*,gint->void (function void (GdkDrawable* GdkGC* GdkSegment* gint)) "void ((*$)(GdkDrawable *,GdkGC *,GdkSegment *,gint))")
    (type GdkDrawable*,GdkGC*,PangoFont*,gint,gint,PangoGlyphString*->void "void ($(GdkDrawable *,GdkGC *,PangoFont *,gint,gint,PangoGlyphString *))")
    (type *GdkDrawable*,GdkGC*,PangoFont*,gint,gint,PangoGlyphString*->void (function void (GdkDrawable* GdkGC* PangoFont* gint gint PangoGlyphString*)) "void ((*$)(GdkDrawable *,GdkGC *,PangoFont *,gint,gint,PangoGlyphString *))")
    (type GdkDrawable*,GdkGC*,GdkImage*,gint,gint,gint,gint,gint,gint->void "void ($(GdkDrawable *,GdkGC *,GdkImage *,gint,gint,gint,gint,gint,gint))")
    (type *GdkDrawable*,GdkGC*,GdkImage*,gint,gint,gint,gint,gint,gint->void (function void (GdkDrawable* GdkGC* GdkImage* gint gint gint gint gint gint)) "void ((*$)(GdkDrawable *,GdkGC *,GdkImage *,gint,gint,gint,gint,gint,gint))")
    (type GdkDrawable*->gint "gint ($(GdkDrawable *))")
    (type *GdkDrawable*->gint (function gint (GdkDrawable*)) "gint ((*$)(GdkDrawable *))")
    (type GdkDrawable*,gint*,gint*->void "void ($(GdkDrawable *,gint *,gint *))")
    (type *GdkDrawable*,gint*,gint*->void (function void (GdkDrawable* gint* gint*)) "void ((*$)(GdkDrawable *,gint *,gint *))")
    (type GdkDrawable*,GdkColormap*->void "void ($(GdkDrawable *,GdkColormap *))")
    (type *GdkDrawable*,GdkColormap*->void (function void (GdkDrawable* GdkColormap*)) "void ((*$)(GdkDrawable *,GdkColormap *))")
    (type GdkDrawable*->GdkColormap* "GdkColormap *($(GdkDrawable *))")
    (type *GdkDrawable*->GdkColormap* (function GdkColormap* (GdkDrawable*)) "GdkColormap *((*$)(GdkDrawable *))")
    (type GdkDrawable*->GdkVisual* "GdkVisual *($(GdkDrawable *))")
    (type *GdkDrawable*->GdkVisual* (function GdkVisual* (GdkDrawable*)) "GdkVisual *((*$)(GdkDrawable *))")
    (type GdkDrawable*->GdkScreen* "GdkScreen *($(GdkDrawable *))")
    (type *GdkDrawable*->GdkScreen* (function GdkScreen* (GdkDrawable*)) "GdkScreen *((*$)(GdkDrawable *))")
    (type GdkDrawable*,gint,gint,gint,gint->GdkImage* "GdkImage *($(GdkDrawable *,gint,gint,gint,gint))")
    (type *GdkDrawable*,gint,gint,gint,gint->GdkImage* (function GdkImage* (GdkDrawable* gint gint gint gint)) "GdkImage *((*$)(GdkDrawable *,gint,gint,gint,gint))")
    (type GdkDrawable*->GdkRegion* "GdkRegion *($(GdkDrawable *))")
    (type *GdkDrawable*->GdkRegion* (function GdkRegion* (GdkDrawable*)) "GdkRegion *((*$)(GdkDrawable *))")
    (type GdkDrawable*,gint,gint,gint,gint,gint*,gint*->GdkDrawable* "GdkDrawable *($(GdkDrawable *,gint,gint,gint,gint,gint *,gint *))")
    (type *GdkDrawable*,gint,gint,gint,gint,gint*,gint*->GdkDrawable* (function GdkDrawable* (GdkDrawable* gint gint gint gint gint* gint*)) "GdkDrawable *((*$)(GdkDrawable *,gint,gint,gint,gint,gint *,gint *))")
    (type GdkDrawable*,GdkGC*,GdkPixbuf*,gint,gint,gint,gint,gint,gint,GdkRgbDither,gint,gint->void "void ($(GdkDrawable *,GdkGC *,GdkPixbuf *,gint,gint,gint,gint,gint,gint,GdkRgbDither,gint,gint))")
    (type *GdkDrawable*,GdkGC*,GdkPixbuf*,gint,gint,gint,gint,gint,gint,GdkRgbDither,gint,gint->void (function void (GdkDrawable* GdkGC* GdkPixbuf* gint gint gint gint gint gint GdkRgbDither gint gint)) "void ((*$)(GdkDrawable *,GdkGC *,GdkPixbuf *,gint,gint,gint,gint,gint,gint,GdkRgbDither,gint,gint))")
    (type GdkDrawable*,GdkImage*,gint,gint,gint,gint,gint,gint->GdkImage* "GdkImage *($(GdkDrawable *,GdkImage *,gint,gint,gint,gint,gint,gint))")
    (type *GdkDrawable*,GdkImage*,gint,gint,gint,gint,gint,gint->GdkImage* (function GdkImage* (GdkDrawable* GdkImage* gint gint gint gint gint gint)) "GdkImage *((*$)(GdkDrawable *,GdkImage *,gint,gint,gint,gint,gint,gint))")
    (type GdkDrawable*,GdkGC*,PangoMatrix*,PangoFont*,gint,gint,PangoGlyphString*->void "void ($(GdkDrawable *,GdkGC *,PangoMatrix *,PangoFont *,gint,gint,PangoGlyphString *))")
    (type *GdkDrawable*,GdkGC*,PangoMatrix*,PangoFont*,gint,gint,PangoGlyphString*->void (function void (GdkDrawable* GdkGC* PangoMatrix* PangoFont* gint gint PangoGlyphString*)) "void ((*$)(GdkDrawable *,GdkGC *,PangoMatrix *,PangoFont *,gint,gint,PangoGlyphString *))")
    (type GdkDrawable*,GdkGC*,GdkTrapezoid*,gint->void "void ($(GdkDrawable *,GdkGC *,GdkTrapezoid *,gint))")
    (type *GdkDrawable*,GdkGC*,GdkTrapezoid*,gint->void (function void (GdkDrawable* GdkGC* GdkTrapezoid* gint)) "void ((*$)(GdkDrawable *,GdkGC *,GdkTrapezoid *,gint))")
    (type monster__e1119 int "long")
    (macro GDK_FONT_FONT::int "GDK_FONT_FONT")
    (macro GDK_FONT_FONTSET::int "GDK_FONT_FONTSET")
    (type GdkFontType monster__e1119 "GdkFontType")
    (type monster__e1120 int "long")
    (macro GDK_IMAGE_NORMAL::int "GDK_IMAGE_NORMAL")
    (macro GDK_IMAGE_SHARED::int "GDK_IMAGE_SHARED")
    (macro GDK_IMAGE_FASTEST::int "GDK_IMAGE_FASTEST")
    (type GdkImageType monster__e1120 "GdkImageType")
    (type s-_GdkImageClass (struct (parent_class::GObjectClass "parent_class")) "struct _GdkImageClass")
    (type GdkImageClass s-_GdkImageClass "GdkImageClass")
    (type s-_GdkKeymapKey (struct (keycode::guint "keycode") (group::gint "group") (level::gint "level")) "struct _GdkKeymapKey")
    (type GdkKeymapKey s-_GdkKeymapKey "GdkKeymapKey")
    (type s-_GdkKeymap (struct (parent_instance::GObject "parent_instance") (display::GdkDisplay* "display")) "struct _GdkKeymap")
    (type GdkKeymap s-_GdkKeymap "GdkKeymap")
    (type s-_GdkKeymapClass (struct (parent_class::GObjectClass "parent_class") (direction_changed::*GdkKeymap*->void "direction_changed") (keys_changed::*GdkKeymap*->void "keys_changed")) "struct _GdkKeymapClass")
    (type GdkKeymapClass s-_GdkKeymapClass "GdkKeymapClass")
    (type GdkKeymap*->void "void ($(GdkKeymap *))")
    (type *GdkKeymap*->void (function void (GdkKeymap*)) "void ((*$)(GdkKeymap *))")
    (type s-_GdkDisplayManager (struct) "struct _GdkDisplayManager")
    (type GdkDisplayManager s-_GdkDisplayManager "GdkDisplayManager")
    (type s-_GdkDisplayManagerClass (struct (parent_class::GObjectClass "parent_class") (display_opened::*GdkDisplayManager*,GdkDisplay*->void "display_opened")) "struct _GdkDisplayManagerClass")
    (type GdkDisplayManagerClass s-_GdkDisplayManagerClass "GdkDisplayManagerClass")
    (type GdkDisplayManager*,GdkDisplay*->void "void ($(GdkDisplayManager *,GdkDisplay *))")
    (type *GdkDisplayManager*,GdkDisplay*->void (function void (GdkDisplayManager* GdkDisplay*)) "void ((*$)(GdkDisplayManager *,GdkDisplay *))")
    (type s-_GdkPangoRenderer (struct (parent_instance::PangoRenderer "parent_instance") (priv::GdkPangoRendererPrivate* "priv")) "struct _GdkPangoRenderer")
    (type GdkPangoRenderer s-_GdkPangoRenderer "GdkPangoRenderer")
    (type s-_GdkPangoRendererClass (struct (parent_class::PangoRendererClass "parent_class")) "struct _GdkPangoRendererClass")
    (type GdkPangoRendererClass s-_GdkPangoRendererClass "GdkPangoRendererClass")
    (type s-_GdkPangoRendererPrivate (struct) "struct _GdkPangoRendererPrivate")
    (type GdkPangoRendererPrivate s-_GdkPangoRendererPrivate "GdkPangoRendererPrivate")
    (type s-_GdkPangoAttrStipple (struct (attr::PangoAttribute "attr") (stipple::GdkBitmap* "stipple")) "struct _GdkPangoAttrStipple")
    (type GdkPangoAttrStipple s-_GdkPangoAttrStipple "GdkPangoAttrStipple")
    (type s-_GdkPangoAttrEmbossed (struct (attr::PangoAttribute "attr") (embossed::gboolean "embossed")) "struct _GdkPangoAttrEmbossed")
    (type GdkPangoAttrEmbossed s-_GdkPangoAttrEmbossed "GdkPangoAttrEmbossed")
    (type s-_GdkPixmapObject (struct (parent_instance::GdkDrawable "parent_instance") (impl::GdkDrawable* "impl") (depth::gint "depth")) "struct _GdkPixmapObject")
    (type GdkPixmapObject s-_GdkPixmapObject "GdkPixmapObject")
    (type s-_GdkPixmapObjectClass (struct (parent_class::GdkDrawableClass "parent_class")) "struct _GdkPixmapObjectClass")
    (type GdkPixmapObjectClass s-_GdkPixmapObjectClass "GdkPixmapObjectClass")
    (type monster__e1121 int "long")
    (macro GDK_PROP_MODE_REPLACE::int "GDK_PROP_MODE_REPLACE")
    (macro GDK_PROP_MODE_PREPEND::int "GDK_PROP_MODE_PREPEND")
    (macro GDK_PROP_MODE_APPEND::int "GDK_PROP_MODE_APPEND")
    (type GdkPropMode monster__e1121 "GdkPropMode")
    (type monster__e1122 int "long")
    (macro GDK_EVEN_ODD_RULE::int "GDK_EVEN_ODD_RULE")
    (macro GDK_WINDING_RULE::int "GDK_WINDING_RULE")
    (type GdkFillRule monster__e1122 "GdkFillRule")
    (type monster__e1123 int "long")
    (macro GDK_OVERLAP_RECTANGLE_IN::int "GDK_OVERLAP_RECTANGLE_IN")
    (macro GDK_OVERLAP_RECTANGLE_OUT::int "GDK_OVERLAP_RECTANGLE_OUT")
    (macro GDK_OVERLAP_RECTANGLE_PART::int "GDK_OVERLAP_RECTANGLE_PART")
    (type GdkOverlapType monster__e1123 "GdkOverlapType")
    (type GdkSpan*,gpointer->void "void ($(GdkSpan *,gpointer))")
    (type *GdkSpan*,gpointer->void (function void (GdkSpan* gpointer)) "void ((*$)(GdkSpan *,gpointer))")
    (type GdkSpanFunc *GdkSpan*,gpointer->void "GdkSpanFunc")
    (type s-_GdkScreenClass (struct (parent_class::GObjectClass "parent_class") (size_changed::*GdkScreen*->void "size_changed")) "struct _GdkScreenClass")
    (type GdkScreenClass s-_GdkScreenClass "GdkScreenClass")
    (type GdkGC*-array-32 (array GdkGC*) "GdkGC *$[ 32 ]")
    (type GdkScreen*->void "void ($(GdkScreen *))")
    (type *GdkScreen*->void (function void (GdkScreen*)) "void ((*$)(GdkScreen *))")
    (type GdkSelection GdkAtom "GdkSelection")
    (type GdkTarget GdkAtom "GdkTarget")
    (type GdkSelectionType GdkAtom "GdkSelectionType")
    (type s-_GdkVisualClass (struct) "struct _GdkVisualClass")
    (type GdkVisualClass s-_GdkVisualClass "GdkVisualClass")
    (type monster__e1124 int "long")
    (macro GDK_VISUAL_STATIC_GRAY::int "GDK_VISUAL_STATIC_GRAY")
    (macro GDK_VISUAL_GRAYSCALE::int "GDK_VISUAL_GRAYSCALE")
    (macro GDK_VISUAL_STATIC_COLOR::int "GDK_VISUAL_STATIC_COLOR")
    (macro GDK_VISUAL_PSEUDO_COLOR::int "GDK_VISUAL_PSEUDO_COLOR")
    (macro GDK_VISUAL_TRUE_COLOR::int "GDK_VISUAL_TRUE_COLOR")
    (macro GDK_VISUAL_DIRECT_COLOR::int "GDK_VISUAL_DIRECT_COLOR")
    (type GdkVisualType monster__e1124 "GdkVisualType")
    (type s-_GdkGeometry (struct (min_width::gint "min_width") (min_height::gint "min_height") (max_width::gint "max_width") (max_height::gint "max_height") (base_width::gint "base_width") (base_height::gint "base_height") (width_inc::gint "width_inc") (height_inc::gint "height_inc") (min_aspect::gdouble "min_aspect") (max_aspect::gdouble "max_aspect") (win_gravity::GdkGravity "win_gravity")) "struct _GdkGeometry")
    (type GdkGeometry s-_GdkGeometry "GdkGeometry")
    (type s-_GdkWindowAttr (struct (title::gchar* "title") (event_mask::gint "event_mask") (x::gint "x") (y::gint "y") (width::gint "width") (height::gint "height") (wclass::GdkWindowClass "wclass") (visual::GdkVisual* "visual") (colormap::GdkColormap* "colormap") (window_type::GdkWindowType "window_type") (cursor::GdkCursor* "cursor") (wmclass_name::gchar* "wmclass_name") (wmclass_class::gchar* "wmclass_class") (override_redirect::gboolean "override_redirect")) "struct _GdkWindowAttr")
    (type GdkWindowAttr s-_GdkWindowAttr "GdkWindowAttr")
    (type s-_GdkPointerHooks (struct (get_pointer::*GdkWindow*,gint*,gint*,GdkModifierType*->GdkWindow* "get_pointer") (window_at_pointer::*GdkScreen*,gint*,gint*->GdkWindow* "window_at_pointer")) "struct _GdkPointerHooks")
    (type GdkPointerHooks s-_GdkPointerHooks "GdkPointerHooks")
    (type monster__e1125 int "long")
    (macro GDK_INPUT_OUTPUT::int "GDK_INPUT_OUTPUT")
    (macro GDK_INPUT_ONLY::int "GDK_INPUT_ONLY")
    (type GdkWindowClass monster__e1125 "GdkWindowClass")
    (type monster__e1126 int "long")
    (macro GDK_WINDOW_ROOT::int "GDK_WINDOW_ROOT")
    (macro GDK_WINDOW_TOPLEVEL::int "GDK_WINDOW_TOPLEVEL")
    (macro GDK_WINDOW_CHILD::int "GDK_WINDOW_CHILD")
    (macro GDK_WINDOW_DIALOG::int "GDK_WINDOW_DIALOG")
    (macro GDK_WINDOW_TEMP::int "GDK_WINDOW_TEMP")
    (macro GDK_WINDOW_FOREIGN::int "GDK_WINDOW_FOREIGN")
    (type GdkWindowType monster__e1126 "GdkWindowType")
    (type monster__e1127 int "long")
    (macro GDK_WA_TITLE::int "GDK_WA_TITLE")
    (macro GDK_WA_X::int "GDK_WA_X")
    (macro GDK_WA_Y::int "GDK_WA_Y")
    (macro GDK_WA_CURSOR::int "GDK_WA_CURSOR")
    (macro GDK_WA_COLORMAP::int "GDK_WA_COLORMAP")
    (macro GDK_WA_VISUAL::int "GDK_WA_VISUAL")
    (macro GDK_WA_WMCLASS::int "GDK_WA_WMCLASS")
    (macro GDK_WA_NOREDIR::int "GDK_WA_NOREDIR")
    (type GdkWindowAttributesType monster__e1127 "GdkWindowAttributesType")
    (type monster__e1128 int "long")
    (macro GDK_HINT_POS::int "GDK_HINT_POS")
    (macro GDK_HINT_MIN_SIZE::int "GDK_HINT_MIN_SIZE")
    (macro GDK_HINT_MAX_SIZE::int "GDK_HINT_MAX_SIZE")
    (macro GDK_HINT_BASE_SIZE::int "GDK_HINT_BASE_SIZE")
    (macro GDK_HINT_ASPECT::int "GDK_HINT_ASPECT")
    (macro GDK_HINT_RESIZE_INC::int "GDK_HINT_RESIZE_INC")
    (macro GDK_HINT_WIN_GRAVITY::int "GDK_HINT_WIN_GRAVITY")
    (macro GDK_HINT_USER_POS::int "GDK_HINT_USER_POS")
    (macro GDK_HINT_USER_SIZE::int "GDK_HINT_USER_SIZE")
    (type GdkWindowHints monster__e1128 "GdkWindowHints")
    (type monster__e1129 int "long")
    (macro GDK_WINDOW_TYPE_HINT_NORMAL::int "GDK_WINDOW_TYPE_HINT_NORMAL")
    (macro GDK_WINDOW_TYPE_HINT_DIALOG::int "GDK_WINDOW_TYPE_HINT_DIALOG")
    (macro GDK_WINDOW_TYPE_HINT_MENU::int "GDK_WINDOW_TYPE_HINT_MENU")
    (macro GDK_WINDOW_TYPE_HINT_TOOLBAR::int "GDK_WINDOW_TYPE_HINT_TOOLBAR")
    (macro GDK_WINDOW_TYPE_HINT_SPLASHSCREEN::int "GDK_WINDOW_TYPE_HINT_SPLASHSCREEN")
    (macro GDK_WINDOW_TYPE_HINT_UTILITY::int "GDK_WINDOW_TYPE_HINT_UTILITY")
    (macro GDK_WINDOW_TYPE_HINT_DOCK::int "GDK_WINDOW_TYPE_HINT_DOCK")
    (macro GDK_WINDOW_TYPE_HINT_DESKTOP::int "GDK_WINDOW_TYPE_HINT_DESKTOP")
    (type GdkWindowTypeHint monster__e1129 "GdkWindowTypeHint")
    (type monster__e1130 int "long")
    (macro GDK_DECOR_ALL::int "GDK_DECOR_ALL")
    (macro GDK_DECOR_BORDER::int "GDK_DECOR_BORDER")
    (macro GDK_DECOR_RESIZEH::int "GDK_DECOR_RESIZEH")
    (macro GDK_DECOR_TITLE::int "GDK_DECOR_TITLE")
    (macro GDK_DECOR_MENU::int "GDK_DECOR_MENU")
    (macro GDK_DECOR_MINIMIZE::int "GDK_DECOR_MINIMIZE")
    (macro GDK_DECOR_MAXIMIZE::int "GDK_DECOR_MAXIMIZE")
    (type GdkWMDecoration monster__e1130 "GdkWMDecoration")
    (type monster__e1131 int "long")
    (macro GDK_FUNC_ALL::int "GDK_FUNC_ALL")
    (macro GDK_FUNC_RESIZE::int "GDK_FUNC_RESIZE")
    (macro GDK_FUNC_MOVE::int "GDK_FUNC_MOVE")
    (macro GDK_FUNC_MINIMIZE::int "GDK_FUNC_MINIMIZE")
    (macro GDK_FUNC_MAXIMIZE::int "GDK_FUNC_MAXIMIZE")
    (macro GDK_FUNC_CLOSE::int "GDK_FUNC_CLOSE")
    (type GdkWMFunction monster__e1131 "GdkWMFunction")
    (type monster__e1132 int "long")
    (macro GDK_GRAVITY_NORTH_WEST::int "GDK_GRAVITY_NORTH_WEST")
    (macro GDK_GRAVITY_NORTH::int "GDK_GRAVITY_NORTH")
    (macro GDK_GRAVITY_NORTH_EAST::int "GDK_GRAVITY_NORTH_EAST")
    (macro GDK_GRAVITY_WEST::int "GDK_GRAVITY_WEST")
    (macro GDK_GRAVITY_CENTER::int "GDK_GRAVITY_CENTER")
    (macro GDK_GRAVITY_EAST::int "GDK_GRAVITY_EAST")
    (macro GDK_GRAVITY_SOUTH_WEST::int "GDK_GRAVITY_SOUTH_WEST")
    (macro GDK_GRAVITY_SOUTH::int "GDK_GRAVITY_SOUTH")
    (macro GDK_GRAVITY_SOUTH_EAST::int "GDK_GRAVITY_SOUTH_EAST")
    (macro GDK_GRAVITY_STATIC::int "GDK_GRAVITY_STATIC")
    (type GdkGravity monster__e1132 "GdkGravity")
    (type monster__e1133 int "long")
    (macro GDK_WINDOW_EDGE_NORTH_WEST::int "GDK_WINDOW_EDGE_NORTH_WEST")
    (macro GDK_WINDOW_EDGE_NORTH::int "GDK_WINDOW_EDGE_NORTH")
    (macro GDK_WINDOW_EDGE_NORTH_EAST::int "GDK_WINDOW_EDGE_NORTH_EAST")
    (macro GDK_WINDOW_EDGE_WEST::int "GDK_WINDOW_EDGE_WEST")
    (macro GDK_WINDOW_EDGE_EAST::int "GDK_WINDOW_EDGE_EAST")
    (macro GDK_WINDOW_EDGE_SOUTH_WEST::int "GDK_WINDOW_EDGE_SOUTH_WEST")
    (macro GDK_WINDOW_EDGE_SOUTH::int "GDK_WINDOW_EDGE_SOUTH")
    (macro GDK_WINDOW_EDGE_SOUTH_EAST::int "GDK_WINDOW_EDGE_SOUTH_EAST")
    (type GdkWindowEdge monster__e1133 "GdkWindowEdge")
    (type GdkWindow*,gint*,gint*,GdkModifierType*->GdkWindow* "GdkWindow *($(GdkWindow *,gint *,gint *,GdkModifierType *))")
    (type *GdkWindow*,gint*,gint*,GdkModifierType*->GdkWindow* (function GdkWindow* (GdkWindow* gint* gint* GdkModifierType*)) "GdkWindow *((*$)(GdkWindow *,gint *,gint *,GdkModifierType *))")
    (type GdkScreen*,gint*,gint*->GdkWindow* "GdkWindow *($(GdkScreen *,gint *,gint *))")
    (type *GdkScreen*,gint*,gint*->GdkWindow* (function GdkWindow* (GdkScreen* gint* gint*)) "GdkWindow *((*$)(GdkScreen *,gint *,gint *))")
    (type s-_GdkWindowObject (struct (parent_instance::GdkDrawable "parent_instance") (impl::GdkDrawable* "impl") (parent::GdkWindowObject* "parent") (user_data::gpointer "user_data") (x::gint "x") (y::gint "y") (extension_events::gint "extension_events") (filters::GList* "filters") (children::GList* "children") (bg_color::GdkColor "bg_color") (bg_pixmap::GdkPixmap* "bg_pixmap") (paint_stack::GSList* "paint_stack") (update_area::GdkRegion* "update_area") (update_freeze_count::guint "update_freeze_count") (window_type::guint8 "window_type") (depth::guint8 "depth") (resize_count::guint8 "resize_count") (state::GdkWindowState "state") (guffaw_gravity::guint "guffaw_gravity") (input_only::guint "input_only") (modal_hint::guint "modal_hint") (destroyed::guint "destroyed") (accept_focus::guint "accept_focus") (focus_on_map::guint "focus_on_map") (event_mask::GdkEventMask "event_mask")) "struct _GdkWindowObject")
    (type GdkWindowObject s-_GdkWindowObject "GdkWindowObject")
    (type s-_GdkWindowObjectClass (struct (parent_class::GdkDrawableClass "parent_class")) "struct _GdkWindowObjectClass")
    (type GdkWindowObjectClass s-_GdkWindowObjectClass "GdkWindowObjectClass")
    (type monster__e1134 int "long")
    (macro GTK_ANCHOR_CENTER::int "GTK_ANCHOR_CENTER")
    (macro GTK_ANCHOR_NORTH::int "GTK_ANCHOR_NORTH")
    (macro GTK_ANCHOR_NORTH_WEST::int "GTK_ANCHOR_NORTH_WEST")
    (macro GTK_ANCHOR_NORTH_EAST::int "GTK_ANCHOR_NORTH_EAST")
    (macro GTK_ANCHOR_SOUTH::int "GTK_ANCHOR_SOUTH")
    (macro GTK_ANCHOR_SOUTH_WEST::int "GTK_ANCHOR_SOUTH_WEST")
    (macro GTK_ANCHOR_SOUTH_EAST::int "GTK_ANCHOR_SOUTH_EAST")
    (macro GTK_ANCHOR_WEST::int "GTK_ANCHOR_WEST")
    (macro GTK_ANCHOR_EAST::int "GTK_ANCHOR_EAST")
    (macro GTK_ANCHOR_N::int "GTK_ANCHOR_N")
    (macro GTK_ANCHOR_NW::int "GTK_ANCHOR_NW")
    (macro GTK_ANCHOR_NE::int "GTK_ANCHOR_NE")
    (macro GTK_ANCHOR_S::int "GTK_ANCHOR_S")
    (macro GTK_ANCHOR_SW::int "GTK_ANCHOR_SW")
    (macro GTK_ANCHOR_SE::int "GTK_ANCHOR_SE")
    (macro GTK_ANCHOR_W::int "GTK_ANCHOR_W")
    (macro GTK_ANCHOR_E::int "GTK_ANCHOR_E")
    (type GtkAnchorType monster__e1134 "GtkAnchorType")
    (type monster__e1135 int "long")
    (macro GTK_ARROW_UP::int "GTK_ARROW_UP")
    (macro GTK_ARROW_DOWN::int "GTK_ARROW_DOWN")
    (macro GTK_ARROW_LEFT::int "GTK_ARROW_LEFT")
    (macro GTK_ARROW_RIGHT::int "GTK_ARROW_RIGHT")
    (type GtkArrowType monster__e1135 "GtkArrowType")
    (type monster__e1136 int "long")
    (macro GTK_EXPAND::int "GTK_EXPAND")
    (macro GTK_SHRINK::int "GTK_SHRINK")
    (macro GTK_FILL::int "GTK_FILL")
    (type GtkAttachOptions monster__e1136 "GtkAttachOptions")
    (type monster__e1137 int "long")
    (macro GTK_BUTTONBOX_DEFAULT_STYLE::int "GTK_BUTTONBOX_DEFAULT_STYLE")
    (macro GTK_BUTTONBOX_SPREAD::int "GTK_BUTTONBOX_SPREAD")
    (macro GTK_BUTTONBOX_EDGE::int "GTK_BUTTONBOX_EDGE")
    (macro GTK_BUTTONBOX_START::int "GTK_BUTTONBOX_START")
    (macro GTK_BUTTONBOX_END::int "GTK_BUTTONBOX_END")
    (type GtkButtonBoxStyle monster__e1137 "GtkButtonBoxStyle")
    (type monster__e1138 int "long")
    (macro GTK_CURVE_TYPE_LINEAR::int "GTK_CURVE_TYPE_LINEAR")
    (macro GTK_CURVE_TYPE_SPLINE::int "GTK_CURVE_TYPE_SPLINE")
    (macro GTK_CURVE_TYPE_FREE::int "GTK_CURVE_TYPE_FREE")
    (type GtkCurveType monster__e1138 "GtkCurveType")
    (type monster__e1139 int "long")
    (macro GTK_DELETE_CHARS::int "GTK_DELETE_CHARS")
    (macro GTK_DELETE_WORD_ENDS::int "GTK_DELETE_WORD_ENDS")
    (macro GTK_DELETE_WORDS::int "GTK_DELETE_WORDS")
    (macro GTK_DELETE_DISPLAY_LINES::int "GTK_DELETE_DISPLAY_LINES")
    (macro GTK_DELETE_DISPLAY_LINE_ENDS::int "GTK_DELETE_DISPLAY_LINE_ENDS")
    (macro GTK_DELETE_PARAGRAPH_ENDS::int "GTK_DELETE_PARAGRAPH_ENDS")
    (macro GTK_DELETE_PARAGRAPHS::int "GTK_DELETE_PARAGRAPHS")
    (macro GTK_DELETE_WHITESPACE::int "GTK_DELETE_WHITESPACE")
    (type GtkDeleteType monster__e1139 "GtkDeleteType")
    (type monster__e1140 int "long")
    (macro GTK_DIR_TAB_FORWARD::int "GTK_DIR_TAB_FORWARD")
    (macro GTK_DIR_TAB_BACKWARD::int "GTK_DIR_TAB_BACKWARD")
    (macro GTK_DIR_UP::int "GTK_DIR_UP")
    (macro GTK_DIR_DOWN::int "GTK_DIR_DOWN")
    (macro GTK_DIR_LEFT::int "GTK_DIR_LEFT")
    (macro GTK_DIR_RIGHT::int "GTK_DIR_RIGHT")
    (type GtkDirectionType monster__e1140 "GtkDirectionType")
    (type monster__e1141 int "long")
    (macro GTK_EXPANDER_COLLAPSED::int "GTK_EXPANDER_COLLAPSED")
    (macro GTK_EXPANDER_SEMI_COLLAPSED::int "GTK_EXPANDER_SEMI_COLLAPSED")
    (macro GTK_EXPANDER_SEMI_EXPANDED::int "GTK_EXPANDER_SEMI_EXPANDED")
    (macro GTK_EXPANDER_EXPANDED::int "GTK_EXPANDER_EXPANDED")
    (type GtkExpanderStyle monster__e1141 "GtkExpanderStyle")
    (type monster__e1142 int "long")
    (macro GTK_ICON_SIZE_INVALID::int "GTK_ICON_SIZE_INVALID")
    (macro GTK_ICON_SIZE_MENU::int "GTK_ICON_SIZE_MENU")
    (macro GTK_ICON_SIZE_SMALL_TOOLBAR::int "GTK_ICON_SIZE_SMALL_TOOLBAR")
    (macro GTK_ICON_SIZE_LARGE_TOOLBAR::int "GTK_ICON_SIZE_LARGE_TOOLBAR")
    (macro GTK_ICON_SIZE_BUTTON::int "GTK_ICON_SIZE_BUTTON")
    (macro GTK_ICON_SIZE_DND::int "GTK_ICON_SIZE_DND")
    (macro GTK_ICON_SIZE_DIALOG::int "GTK_ICON_SIZE_DIALOG")
    (type GtkIconSize monster__e1142 "GtkIconSize")
    (type monster__e1143 int "long")
    (macro GTK_SIDE_TOP::int "GTK_SIDE_TOP")
    (macro GTK_SIDE_BOTTOM::int "GTK_SIDE_BOTTOM")
    (macro GTK_SIDE_LEFT::int "GTK_SIDE_LEFT")
    (macro GTK_SIDE_RIGHT::int "GTK_SIDE_RIGHT")
    (type GtkSideType monster__e1143 "GtkSideType")
    (type monster__e1144 int "long")
    (macro GTK_TEXT_DIR_NONE::int "GTK_TEXT_DIR_NONE")
    (macro GTK_TEXT_DIR_LTR::int "GTK_TEXT_DIR_LTR")
    (macro GTK_TEXT_DIR_RTL::int "GTK_TEXT_DIR_RTL")
    (type GtkTextDirection monster__e1144 "GtkTextDirection")
    (type monster__e1145 int "long")
    (macro GTK_JUSTIFY_LEFT::int "GTK_JUSTIFY_LEFT")
    (macro GTK_JUSTIFY_RIGHT::int "GTK_JUSTIFY_RIGHT")
    (macro GTK_JUSTIFY_CENTER::int "GTK_JUSTIFY_CENTER")
    (macro GTK_JUSTIFY_FILL::int "GTK_JUSTIFY_FILL")
    (type GtkJustification monster__e1145 "GtkJustification")
    (type monster__e1146 int "long")
    (macro GTK_MATCH_ALL::int "GTK_MATCH_ALL")
    (macro GTK_MATCH_ALL_TAIL::int "GTK_MATCH_ALL_TAIL")
    (macro GTK_MATCH_HEAD::int "GTK_MATCH_HEAD")
    (macro GTK_MATCH_TAIL::int "GTK_MATCH_TAIL")
    (macro GTK_MATCH_EXACT::int "GTK_MATCH_EXACT")
    (macro GTK_MATCH_LAST::int "GTK_MATCH_LAST")
    (type GtkMatchType monster__e1146 "GtkMatchType")
    (type monster__e1147 int "long")
    (macro GTK_MENU_DIR_PARENT::int "GTK_MENU_DIR_PARENT")
    (macro GTK_MENU_DIR_CHILD::int "GTK_MENU_DIR_CHILD")
    (macro GTK_MENU_DIR_NEXT::int "GTK_MENU_DIR_NEXT")
    (macro GTK_MENU_DIR_PREV::int "GTK_MENU_DIR_PREV")
    (type GtkMenuDirectionType monster__e1147 "GtkMenuDirectionType")
    (type monster__e1148 int "long")
    (macro GTK_PIXELS::int "GTK_PIXELS")
    (macro GTK_INCHES::int "GTK_INCHES")
    (macro GTK_CENTIMETERS::int "GTK_CENTIMETERS")
    (type GtkMetricType monster__e1148 "GtkMetricType")
    (type monster__e1149 int "long")
    (macro GTK_MOVEMENT_LOGICAL_POSITIONS::int "GTK_MOVEMENT_LOGICAL_POSITIONS")
    (macro GTK_MOVEMENT_VISUAL_POSITIONS::int "GTK_MOVEMENT_VISUAL_POSITIONS")
    (macro GTK_MOVEMENT_WORDS::int "GTK_MOVEMENT_WORDS")
    (macro GTK_MOVEMENT_DISPLAY_LINES::int "GTK_MOVEMENT_DISPLAY_LINES")
    (macro GTK_MOVEMENT_DISPLAY_LINE_ENDS::int "GTK_MOVEMENT_DISPLAY_LINE_ENDS")
    (macro GTK_MOVEMENT_PARAGRAPHS::int "GTK_MOVEMENT_PARAGRAPHS")
    (macro GTK_MOVEMENT_PARAGRAPH_ENDS::int "GTK_MOVEMENT_PARAGRAPH_ENDS")
    (macro GTK_MOVEMENT_PAGES::int "GTK_MOVEMENT_PAGES")
    (macro GTK_MOVEMENT_BUFFER_ENDS::int "GTK_MOVEMENT_BUFFER_ENDS")
    (macro GTK_MOVEMENT_HORIZONTAL_PAGES::int "GTK_MOVEMENT_HORIZONTAL_PAGES")
    (type GtkMovementStep monster__e1149 "GtkMovementStep")
    (type monster__e1150 int "long")
    (macro GTK_SCROLL_STEPS::int "GTK_SCROLL_STEPS")
    (macro GTK_SCROLL_PAGES::int "GTK_SCROLL_PAGES")
    (macro GTK_SCROLL_ENDS::int "GTK_SCROLL_ENDS")
    (macro GTK_SCROLL_HORIZONTAL_STEPS::int "GTK_SCROLL_HORIZONTAL_STEPS")
    (macro GTK_SCROLL_HORIZONTAL_PAGES::int "GTK_SCROLL_HORIZONTAL_PAGES")
    (macro GTK_SCROLL_HORIZONTAL_ENDS::int "GTK_SCROLL_HORIZONTAL_ENDS")
    (type GtkScrollStep monster__e1150 "GtkScrollStep")
    (type monster__e1151 int "long")
    (macro GTK_ORIENTATION_HORIZONTAL::int "GTK_ORIENTATION_HORIZONTAL")
    (macro GTK_ORIENTATION_VERTICAL::int "GTK_ORIENTATION_VERTICAL")
    (type GtkOrientation monster__e1151 "GtkOrientation")
    (type monster__e1152 int "long")
    (macro GTK_CORNER_TOP_LEFT::int "GTK_CORNER_TOP_LEFT")
    (macro GTK_CORNER_BOTTOM_LEFT::int "GTK_CORNER_BOTTOM_LEFT")
    (macro GTK_CORNER_TOP_RIGHT::int "GTK_CORNER_TOP_RIGHT")
    (macro GTK_CORNER_BOTTOM_RIGHT::int "GTK_CORNER_BOTTOM_RIGHT")
    (type GtkCornerType monster__e1152 "GtkCornerType")
    (type monster__e1153 int "long")
    (macro GTK_PACK_START::int "GTK_PACK_START")
    (macro GTK_PACK_END::int "GTK_PACK_END")
    (type GtkPackType monster__e1153 "GtkPackType")
    (type monster__e1154 int "long")
    (macro GTK_PATH_PRIO_LOWEST::int "GTK_PATH_PRIO_LOWEST")
    (macro GTK_PATH_PRIO_GTK::int "GTK_PATH_PRIO_GTK")
    (macro GTK_PATH_PRIO_APPLICATION::int "GTK_PATH_PRIO_APPLICATION")
    (macro GTK_PATH_PRIO_THEME::int "GTK_PATH_PRIO_THEME")
    (macro GTK_PATH_PRIO_RC::int "GTK_PATH_PRIO_RC")
    (macro GTK_PATH_PRIO_HIGHEST::int "GTK_PATH_PRIO_HIGHEST")
    (type GtkPathPriorityType monster__e1154 "GtkPathPriorityType")
    (type monster__e1155 int "long")
    (macro GTK_PATH_WIDGET::int "GTK_PATH_WIDGET")
    (macro GTK_PATH_WIDGET_CLASS::int "GTK_PATH_WIDGET_CLASS")
    (macro GTK_PATH_CLASS::int "GTK_PATH_CLASS")
    (type GtkPathType monster__e1155 "GtkPathType")
    (type monster__e1156 int "long")
    (macro GTK_POLICY_ALWAYS::int "GTK_POLICY_ALWAYS")
    (macro GTK_POLICY_AUTOMATIC::int "GTK_POLICY_AUTOMATIC")
    (macro GTK_POLICY_NEVER::int "GTK_POLICY_NEVER")
    (type GtkPolicyType monster__e1156 "GtkPolicyType")
    (type monster__e1157 int "long")
    (macro GTK_POS_LEFT::int "GTK_POS_LEFT")
    (macro GTK_POS_RIGHT::int "GTK_POS_RIGHT")
    (macro GTK_POS_TOP::int "GTK_POS_TOP")
    (macro GTK_POS_BOTTOM::int "GTK_POS_BOTTOM")
    (type GtkPositionType monster__e1157 "GtkPositionType")
    (type monster__e1158 int "long")
    (macro GTK_PREVIEW_COLOR::int "GTK_PREVIEW_COLOR")
    (macro GTK_PREVIEW_GRAYSCALE::int "GTK_PREVIEW_GRAYSCALE")
    (type GtkPreviewType monster__e1158 "GtkPreviewType")
    (type monster__e1159 int "long")
    (macro GTK_RELIEF_NORMAL::int "GTK_RELIEF_NORMAL")
    (macro GTK_RELIEF_HALF::int "GTK_RELIEF_HALF")
    (macro GTK_RELIEF_NONE::int "GTK_RELIEF_NONE")
    (type GtkReliefStyle monster__e1159 "GtkReliefStyle")
    (type monster__e1160 int "long")
    (macro GTK_RESIZE_PARENT::int "GTK_RESIZE_PARENT")
    (macro GTK_RESIZE_QUEUE::int "GTK_RESIZE_QUEUE")
    (macro GTK_RESIZE_IMMEDIATE::int "GTK_RESIZE_IMMEDIATE")
    (type GtkResizeMode monster__e1160 "GtkResizeMode")
    (type monster__e1161 int "long")
    (macro GTK_RUN_FIRST::int "GTK_RUN_FIRST")
    (macro GTK_RUN_LAST::int "GTK_RUN_LAST")
    (macro GTK_RUN_BOTH::int "GTK_RUN_BOTH")
    (macro GTK_RUN_NO_RECURSE::int "GTK_RUN_NO_RECURSE")
    (macro GTK_RUN_ACTION::int "GTK_RUN_ACTION")
    (macro GTK_RUN_NO_HOOKS::int "GTK_RUN_NO_HOOKS")
    (type GtkSignalRunType monster__e1161 "GtkSignalRunType")
    (type monster__e1162 int "long")
    (macro GTK_SCROLL_NONE::int "GTK_SCROLL_NONE")
    (macro GTK_SCROLL_JUMP::int "GTK_SCROLL_JUMP")
    (macro GTK_SCROLL_STEP_BACKWARD::int "GTK_SCROLL_STEP_BACKWARD")
    (macro GTK_SCROLL_STEP_FORWARD::int "GTK_SCROLL_STEP_FORWARD")
    (macro GTK_SCROLL_PAGE_BACKWARD::int "GTK_SCROLL_PAGE_BACKWARD")
    (macro GTK_SCROLL_PAGE_FORWARD::int "GTK_SCROLL_PAGE_FORWARD")
    (macro GTK_SCROLL_STEP_UP::int "GTK_SCROLL_STEP_UP")
    (macro GTK_SCROLL_STEP_DOWN::int "GTK_SCROLL_STEP_DOWN")
    (macro GTK_SCROLL_PAGE_UP::int "GTK_SCROLL_PAGE_UP")
    (macro GTK_SCROLL_PAGE_DOWN::int "GTK_SCROLL_PAGE_DOWN")
    (macro GTK_SCROLL_STEP_LEFT::int "GTK_SCROLL_STEP_LEFT")
    (macro GTK_SCROLL_STEP_RIGHT::int "GTK_SCROLL_STEP_RIGHT")
    (macro GTK_SCROLL_PAGE_LEFT::int "GTK_SCROLL_PAGE_LEFT")
    (macro GTK_SCROLL_PAGE_RIGHT::int "GTK_SCROLL_PAGE_RIGHT")
    (macro GTK_SCROLL_START::int "GTK_SCROLL_START")
    (macro GTK_SCROLL_END::int "GTK_SCROLL_END")
    (type GtkScrollType monster__e1162 "GtkScrollType")
    (type monster__e1163 int "long")
    (macro GTK_SELECTION_NONE::int "GTK_SELECTION_NONE")
    (macro GTK_SELECTION_SINGLE::int "GTK_SELECTION_SINGLE")
    (macro GTK_SELECTION_BROWSE::int "GTK_SELECTION_BROWSE")
    (macro GTK_SELECTION_MULTIPLE::int "GTK_SELECTION_MULTIPLE")
    (macro GTK_SELECTION_EXTENDED::int "GTK_SELECTION_EXTENDED")
    (type GtkSelectionMode monster__e1163 "GtkSelectionMode")
    (type monster__e1164 int "long")
    (macro GTK_SHADOW_NONE::int "GTK_SHADOW_NONE")
    (macro GTK_SHADOW_IN::int "GTK_SHADOW_IN")
    (macro GTK_SHADOW_OUT::int "GTK_SHADOW_OUT")
    (macro GTK_SHADOW_ETCHED_IN::int "GTK_SHADOW_ETCHED_IN")
    (macro GTK_SHADOW_ETCHED_OUT::int "GTK_SHADOW_ETCHED_OUT")
    (type GtkShadowType monster__e1164 "GtkShadowType")
    (type monster__e1165 int "long")
    (macro GTK_STATE_NORMAL::int "GTK_STATE_NORMAL")
    (macro GTK_STATE_ACTIVE::int "GTK_STATE_ACTIVE")
    (macro GTK_STATE_PRELIGHT::int "GTK_STATE_PRELIGHT")
    (macro GTK_STATE_SELECTED::int "GTK_STATE_SELECTED")
    (macro GTK_STATE_INSENSITIVE::int "GTK_STATE_INSENSITIVE")
    (type GtkStateType monster__e1165 "GtkStateType")
    (type monster__e1166 int "long")
    (macro GTK_DIRECTION_LEFT::int "GTK_DIRECTION_LEFT")
    (macro GTK_DIRECTION_RIGHT::int "GTK_DIRECTION_RIGHT")
    (type GtkSubmenuDirection monster__e1166 "GtkSubmenuDirection")
    (type monster__e1167 int "long")
    (macro GTK_TOP_BOTTOM::int "GTK_TOP_BOTTOM")
    (macro GTK_LEFT_RIGHT::int "GTK_LEFT_RIGHT")
    (type GtkSubmenuPlacement monster__e1167 "GtkSubmenuPlacement")
    (type monster__e1168 int "long")
    (macro GTK_TOOLBAR_ICONS::int "GTK_TOOLBAR_ICONS")
    (macro GTK_TOOLBAR_TEXT::int "GTK_TOOLBAR_TEXT")
    (macro GTK_TOOLBAR_BOTH::int "GTK_TOOLBAR_BOTH")
    (macro GTK_TOOLBAR_BOTH_HORIZ::int "GTK_TOOLBAR_BOTH_HORIZ")
    (type GtkToolbarStyle monster__e1168 "GtkToolbarStyle")
    (type monster__e1169 int "long")
    (macro GTK_UPDATE_CONTINUOUS::int "GTK_UPDATE_CONTINUOUS")
    (macro GTK_UPDATE_DISCONTINUOUS::int "GTK_UPDATE_DISCONTINUOUS")
    (macro GTK_UPDATE_DELAYED::int "GTK_UPDATE_DELAYED")
    (type GtkUpdateType monster__e1169 "GtkUpdateType")
    (type monster__e1170 int "long")
    (macro GTK_VISIBILITY_NONE::int "GTK_VISIBILITY_NONE")
    (macro GTK_VISIBILITY_PARTIAL::int "GTK_VISIBILITY_PARTIAL")
    (macro GTK_VISIBILITY_FULL::int "GTK_VISIBILITY_FULL")
    (type GtkVisibility monster__e1170 "GtkVisibility")
    (type monster__e1171 int "long")
    (macro GTK_WIN_POS_NONE::int "GTK_WIN_POS_NONE")
    (macro GTK_WIN_POS_CENTER::int "GTK_WIN_POS_CENTER")
    (macro GTK_WIN_POS_MOUSE::int "GTK_WIN_POS_MOUSE")
    (macro GTK_WIN_POS_CENTER_ALWAYS::int "GTK_WIN_POS_CENTER_ALWAYS")
    (macro GTK_WIN_POS_CENTER_ON_PARENT::int "GTK_WIN_POS_CENTER_ON_PARENT")
    (type GtkWindowPosition monster__e1171 "GtkWindowPosition")
    (type monster__e1172 int "long")
    (macro GTK_WINDOW_TOPLEVEL::int "GTK_WINDOW_TOPLEVEL")
    (macro GTK_WINDOW_POPUP::int "GTK_WINDOW_POPUP")
    (type GtkWindowType monster__e1172 "GtkWindowType")
    (type monster__e1173 int "long")
    (macro GTK_WRAP_NONE::int "GTK_WRAP_NONE")
    (macro GTK_WRAP_CHAR::int "GTK_WRAP_CHAR")
    (macro GTK_WRAP_WORD::int "GTK_WRAP_WORD")
    (macro GTK_WRAP_WORD_CHAR::int "GTK_WRAP_WORD_CHAR")
    (type GtkWrapMode monster__e1173 "GtkWrapMode")
    (type monster__e1174 int "long")
    (macro GTK_SORT_ASCENDING::int "GTK_SORT_ASCENDING")
    (macro GTK_SORT_DESCENDING::int "GTK_SORT_DESCENDING")
    (type GtkSortType monster__e1174 "GtkSortType")
    (type monster__e1175 int "long")
    (macro GTK_IM_PREEDIT_NOTHING::int "GTK_IM_PREEDIT_NOTHING")
    (macro GTK_IM_PREEDIT_CALLBACK::int "GTK_IM_PREEDIT_CALLBACK")
    (macro GTK_IM_PREEDIT_NONE::int "GTK_IM_PREEDIT_NONE")
    (type GtkIMPreeditStyle monster__e1175 "GtkIMPreeditStyle")
    (type monster__e1176 int "long")
    (macro GTK_IM_STATUS_NOTHING::int "GTK_IM_STATUS_NOTHING")
    (macro GTK_IM_STATUS_CALLBACK::int "GTK_IM_STATUS_CALLBACK")
    (macro GTK_IM_STATUS_NONE::int "GTK_IM_STATUS_NONE")
    (type GtkIMStatusStyle monster__e1176 "GtkIMStatusStyle")
    (type monster__e1177 int "long")
    (macro GTK_ACCEL_VISIBLE::int "GTK_ACCEL_VISIBLE")
    (macro GTK_ACCEL_LOCKED::int "GTK_ACCEL_LOCKED")
    (macro GTK_ACCEL_MASK::int "GTK_ACCEL_MASK")
    (type GtkAccelFlags monster__e1177 "GtkAccelFlags")
    (type s-_GtkAccelGroup (struct (parent::GObject "parent") (lock_count::guint "lock_count") (modifier_mask::GdkModifierType "modifier_mask") (acceleratables::GSList* "acceleratables") (n_accels::guint "n_accels") (priv_accels::GtkAccelGroupEntry* "priv_accels")) "struct _GtkAccelGroup")
    (type GtkAccelGroup s-_GtkAccelGroup "GtkAccelGroup")
    (type s-_GtkAccelGroupClass (struct (parent_class::GObjectClass "parent_class") (accel_changed::*GtkAccelGroup*,guint,GdkModifierType,GClosure*->void "accel_changed") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkAccelGroupClass")
    (type GtkAccelGroupClass s-_GtkAccelGroupClass "GtkAccelGroupClass")
    (type s-_GtkAccelKey (struct (accel_key::guint "accel_key") (accel_mods::GdkModifierType "accel_mods") (accel_flags::guint "accel_flags")) "struct _GtkAccelKey")
    (type GtkAccelKey s-_GtkAccelKey "GtkAccelKey")
    (type s-_GtkAccelGroupEntry (struct (key::GtkAccelKey "key") (closure::GClosure* "closure") (accel_path_quark::GQuark "accel_path_quark")) "struct _GtkAccelGroupEntry")
    (type GtkAccelGroupEntry s-_GtkAccelGroupEntry "GtkAccelGroupEntry")
    (type GtkAccelGroup*,GObject*,guint,GdkModifierType->gboolean "gboolean ($(GtkAccelGroup *,GObject *,guint,GdkModifierType))")
    (type *GtkAccelGroup*,GObject*,guint,GdkModifierType->gboolean (function gboolean (GtkAccelGroup* GObject* guint GdkModifierType)) "gboolean ((*$)(GtkAccelGroup *,GObject *,guint,GdkModifierType))")
    (type GtkAccelGroupActivate *GtkAccelGroup*,GObject*,guint,GdkModifierType->gboolean "GtkAccelGroupActivate")
    (type GtkAccelKey*,GClosure*,gpointer->gboolean "gboolean ($(GtkAccelKey *,GClosure *,gpointer))")
    (type *GtkAccelKey*,GClosure*,gpointer->gboolean (function gboolean (GtkAccelKey* GClosure* gpointer)) "gboolean ((*$)(GtkAccelKey *,GClosure *,gpointer))")
    (type GtkAccelGroupFindFunc *GtkAccelKey*,GClosure*,gpointer->gboolean "GtkAccelGroupFindFunc")
    (type GtkAccelGroup*,guint,GdkModifierType,GClosure*->void "void ($(GtkAccelGroup *,guint,GdkModifierType,GClosure *))")
    (type *GtkAccelGroup*,guint,GdkModifierType,GClosure*->void (function void (GtkAccelGroup* guint GdkModifierType GClosure*)) "void ((*$)(GtkAccelGroup *,guint,GdkModifierType,GClosure *))")
    (type GtkFundamentalType GType "GtkFundamentalType")
    (type GtkType GType "GtkType")
    (type GtkTypeObject GTypeInstance "GtkTypeObject")
    (type GtkTypeClass GTypeClass "GtkTypeClass")
    (type GtkClassInitFunc GBaseInitFunc "GtkClassInitFunc")
    (type GtkObjectInitFunc GInstanceInitFunc "GtkObjectInitFunc")
    (type s-_GtkArg (struct (type::GtkType "type") (name::gchar* "name") (d::s-monster__s1016 "d")) "struct _GtkArg")
    (type GtkArg s-_GtkArg "GtkArg")
    (type s-_GtkObject (struct (parent_instance::GObject "parent_instance") (flags::guint32 "flags")) "struct _GtkObject")
    (type GtkObject s-_GtkObject "GtkObject")
    (type GtkFunction *gpointer->gboolean "GtkFunction")
    (type GtkDestroyNotify *gpointer->void "GtkDestroyNotify")
    (type GtkObject*,gpointer,guint,GtkArg*->void "void ($(GtkObject *,gpointer,guint,GtkArg *))")
    (type *GtkObject*,gpointer,guint,GtkArg*->void (function void (GtkObject* gpointer guint GtkArg*)) "void ((*$)(GtkObject *,gpointer,guint,GtkArg *))")
    (type GtkCallbackMarshal *GtkObject*,gpointer,guint,GtkArg*->void "GtkCallbackMarshal")

    (type GtkSignalFunc *void->void "GtkSignalFunc")
    (type s-_GtkTypeInfo (struct (type_name::gchar* "type_name") (object_size::guint "object_size") (class_size::guint "class_size") (class_init_func::GtkClassInitFunc "class_init_func") (object_init_func::GtkObjectInitFunc "object_init_func") (reserved_1::gpointer "reserved_1") (reserved_2::gpointer "reserved_2") (base_class_init_func::GtkClassInitFunc "base_class_init_func")) "struct _GtkTypeInfo")
    (type GtkTypeInfo s-_GtkTypeInfo "GtkTypeInfo")
    (type GtkSignalMarshaller GSignalCMarshaller "GtkSignalMarshaller")
    (type s-monster__s1016 (union (char_data::gchar "char_data") (uchar_data::guchar "uchar_data") (bool_data::gboolean "bool_data") (int_data::gint "int_data") (uint_data::guint "uint_data") (long_data::glong "long_data") (ulong_data::gulong "ulong_data") (float_data::gfloat "float_data") (double_data::gdouble "double_data") (string_data::gchar* "string_data") (object_data::GtkObject* "object_data") (pointer_data::gpointer "pointer_data") (signal_data::s-monster__s1015 "signal_data")) "void")
    (type s-monster__s1015 (struct (f::GtkSignalFunc "f") (d::gpointer "d")) "void")
    (type GtkEnumValue GEnumValue "GtkEnumValue")
    (type GtkFlagValue GFlagsValue "GtkFlagValue")
    (type monster__e1178 int "long")
    (macro GTK_DEBUG_MISC::int "GTK_DEBUG_MISC")
    (macro GTK_DEBUG_PLUGSOCKET::int "GTK_DEBUG_PLUGSOCKET")
    (macro GTK_DEBUG_TEXT::int "GTK_DEBUG_TEXT")
    (macro GTK_DEBUG_TREE::int "GTK_DEBUG_TREE")
    (macro GTK_DEBUG_UPDATES::int "GTK_DEBUG_UPDATES")
    (macro GTK_DEBUG_KEYBINDINGS::int "GTK_DEBUG_KEYBINDINGS")
    (macro GTK_DEBUG_MULTIHEAD::int "GTK_DEBUG_MULTIHEAD")
    (macro GTK_DEBUG_MODULES::int "GTK_DEBUG_MODULES")
    (macro GTK_DEBUG_GEOMETRY::int "GTK_DEBUG_GEOMETRY")
    (macro GTK_DEBUG_ICONTHEME::int "GTK_DEBUG_ICONTHEME")
    (type GtkDebugFlag monster__e1178 "GtkDebugFlag")
    (type monster__e1179 int "long")
    (macro GTK_IN_DESTRUCTION::int "GTK_IN_DESTRUCTION")
    (macro GTK_FLOATING::int "GTK_FLOATING")
    (macro GTK_RESERVED_1::int "GTK_RESERVED_1")
    (macro GTK_RESERVED_2::int "GTK_RESERVED_2")
    (type GtkObjectFlags monster__e1179 "GtkObjectFlags")
    (type s-_GtkObjectClass (struct (parent_class::GObjectClass "parent_class") (set_arg::*GtkObject*,GtkArg*,guint->void "set_arg") (get_arg::*GtkObject*,GtkArg*,guint->void "get_arg") (destroy::*GtkObject*->void "destroy")) "struct _GtkObjectClass")
    (type GtkObjectClass s-_GtkObjectClass "GtkObjectClass")
    (type GtkObject*,GtkArg*,guint->void "void ($(GtkObject *,GtkArg *,guint))")
    (type *GtkObject*,GtkArg*,guint->void (function void (GtkObject* GtkArg* guint)) "void ((*$)(GtkObject *,GtkArg *,guint))")
    (type GtkObject*->void "void ($(GtkObject *))")
    (type *GtkObject*->void (function void (GtkObject*)) "void ((*$)(GtkObject *))")
    (type monster__e1180 int "long")
    (macro GTK_ARG_READABLE::int "GTK_ARG_READABLE")
    (macro GTK_ARG_WRITABLE::int "GTK_ARG_WRITABLE")
    (macro GTK_ARG_CONSTRUCT::int "GTK_ARG_CONSTRUCT")
    (macro GTK_ARG_CONSTRUCT_ONLY::int "GTK_ARG_CONSTRUCT_ONLY")
    (macro GTK_ARG_CHILD_ARG::int "GTK_ARG_CHILD_ARG")
    (type GtkArgFlags monster__e1180 "GtkArgFlags")
    (type s-_GtkAdjustment (struct (parent_instance::GtkObject "parent_instance") (lower::gdouble "lower") (upper::gdouble "upper") (value::gdouble "value") (step_increment::gdouble "step_increment") (page_increment::gdouble "page_increment") (page_size::gdouble "page_size")) "struct _GtkAdjustment")
    (type GtkAdjustment s-_GtkAdjustment "GtkAdjustment")
    (type s-_GtkAdjustmentClass (struct (parent_class::GtkObjectClass "parent_class") (changed::*GtkAdjustment*->void "changed") (value_changed::*GtkAdjustment*->void "value_changed") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkAdjustmentClass")
    (type GtkAdjustmentClass s-_GtkAdjustmentClass "GtkAdjustmentClass")
    (type GtkAdjustment*->void "void ($(GtkAdjustment *))")
    (type *GtkAdjustment*->void (function void (GtkAdjustment*)) "void ((*$)(GtkAdjustment *))")
    (type s-_GtkBorder (struct (left::gint "left") (right::gint "right") (top::gint "top") (bottom::gint "bottom")) "struct _GtkBorder")
    (type GtkBorder s-_GtkBorder "GtkBorder")
    (type s-_GtkStyle (struct (parent_instance::GObject "parent_instance") (fg::GdkColor-array-5 "fg") (bg::GdkColor-array-5 "bg") (light::GdkColor-array-5 "light") (dark::GdkColor-array-5 "dark") (mid::GdkColor-array-5 "mid") (text::GdkColor-array-5 "text") (base::GdkColor-array-5 "base") (text_aa::GdkColor-array-5 "text_aa") (black::GdkColor "black") (white::GdkColor "white") (font_desc::PangoFontDescription* "font_desc") (xthickness::gint "xthickness") (ythickness::gint "ythickness") (fg_gc::GdkGC*-array-5 "fg_gc") (bg_gc::GdkGC*-array-5 "bg_gc") (light_gc::GdkGC*-array-5 "light_gc") (dark_gc::GdkGC*-array-5 "dark_gc") (mid_gc::GdkGC*-array-5 "mid_gc") (text_gc::GdkGC*-array-5 "text_gc") (base_gc::GdkGC*-array-5 "base_gc") (text_aa_gc::GdkGC*-array-5 "text_aa_gc") (black_gc::GdkGC* "black_gc") (white_gc::GdkGC* "white_gc") (bg_pixmap::GdkPixmap*-array-5 "bg_pixmap") (attach_count::gint "attach_count") (depth::gint "depth") (colormap::GdkColormap* "colormap") (private_font::GdkFont* "private_font") (private_font_desc::PangoFontDescription* "private_font_desc") (rc_style::GtkRcStyle* "rc_style") (styles::GSList* "styles") (property_cache::GArray* "property_cache") (icon_factories::GSList* "icon_factories")) "struct _GtkStyle")
    (type GtkStyle s-_GtkStyle "GtkStyle")
    (type s-_GtkStyleClass (struct (parent_class::GObjectClass "parent_class") (realize::*GtkStyle*->void "realize") (unrealize::*GtkStyle*->void "unrealize") (copy::*GtkStyle*,GtkStyle*->void "copy") (clone::*GtkStyle*->GtkStyle* "clone") (init_from_rc::*GtkStyle*,GtkRcStyle*->void "init_from_rc") (set_background::*GtkStyle*,GdkWindow*,GtkStateType->void "set_background") (render_icon::*GtkStyle*,GtkIconSource*,GtkTextDirection,GtkStateType,GtkIconSize,GtkWidget*,gchar*->GdkPixbuf* "render_icon") (draw_hline::*GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint->void "draw_hline") (draw_vline::*GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint->void "draw_vline") (draw_shadow::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "draw_shadow") (draw_polygon::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,GdkPoint*,gint,gboolean->void "draw_polygon") (draw_arrow::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,GtkArrowType,gboolean,gint,gint,gint,gint->void "draw_arrow") (draw_diamond::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "draw_diamond") (draw_string::*GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gchar*->void "draw_string") (draw_box::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "draw_box") (draw_flat_box::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "draw_flat_box") (draw_check::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "draw_check") (draw_option::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "draw_option") (draw_tab::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "draw_tab") (draw_shadow_gap::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkPositionType,gint,gint->void "draw_shadow_gap") (draw_box_gap::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkPositionType,gint,gint->void "draw_box_gap") (draw_extension::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkPositionType->void "draw_extension") (draw_focus::*GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "draw_focus") (draw_slider::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkOrientation->void "draw_slider") (draw_handle::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkOrientation->void "draw_handle") (draw_expander::*GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,GtkExpanderStyle->void "draw_expander") (draw_layout::*GtkStyle*,GdkWindow*,GtkStateType,gboolean,GdkRectangle*,GtkWidget*,gchar*,gint,gint,PangoLayout*->void "draw_layout") (draw_resize_grip::*GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,GdkWindowEdge,gint,gint,gint,gint->void "draw_resize_grip") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4") (_gtk_reserved5::*void->void "_gtk_reserved5") (_gtk_reserved6::*void->void "_gtk_reserved6") (_gtk_reserved7::*void->void "_gtk_reserved7") (_gtk_reserved8::*void->void "_gtk_reserved8") (_gtk_reserved9::*void->void "_gtk_reserved9") (_gtk_reserved10::*void->void "_gtk_reserved10") (_gtk_reserved11::*void->void "_gtk_reserved11") (_gtk_reserved12::*void->void "_gtk_reserved12")) "struct _GtkStyleClass")
    (type GtkStyleClass s-_GtkStyleClass "GtkStyleClass")
    (type s-_GtkThemeEngine (struct) "struct _GtkThemeEngine")
    (type GtkThemeEngine s-_GtkThemeEngine "GtkThemeEngine")
    (type s-_GtkRcStyle (struct (parent_instance::GObject "parent_instance") (name::gchar* "name") (bg_pixmap_name::gchar*-array-5 "bg_pixmap_name") (font_desc::PangoFontDescription* "font_desc") (color_flags::GtkRcFlags-array-5 "color_flags") (fg::GdkColor-array-5 "fg") (bg::GdkColor-array-5 "bg") (text::GdkColor-array-5 "text") (base::GdkColor-array-5 "base") (xthickness::gint "xthickness") (ythickness::gint "ythickness") (rc_properties::GArray* "rc_properties") (rc_style_lists::GSList* "rc_style_lists") (icon_factories::GSList* "icon_factories") (engine_specified::guint "engine_specified")) "struct _GtkRcStyle")
    (type GtkRcStyle s-_GtkRcStyle "GtkRcStyle")
    (type s-_GtkIconSet (struct) "struct _GtkIconSet")
    (type GtkIconSet s-_GtkIconSet "GtkIconSet")
    (type s-_GtkIconSource (struct) "struct _GtkIconSource")
    (type GtkIconSource s-_GtkIconSource "GtkIconSource")
    (type s-_GtkRcProperty (struct (type_name::GQuark "type_name") (property_name::GQuark "property_name") (origin::gchar* "origin") (value::GValue "value")) "struct _GtkRcProperty")
    (type GtkRcProperty s-_GtkRcProperty "GtkRcProperty")
    (type s-_GtkSettings (struct (parent_instance::GObject "parent_instance") (queued_settings::GData* "queued_settings") (property_values::GtkSettingsPropertyValue* "property_values") (rc_context::GtkRcContext* "rc_context") (screen::GdkScreen* "screen")) "struct _GtkSettings")
    (type GtkSettings s-_GtkSettings "GtkSettings")
    (type GParamSpec*,GString*,GValue*->gboolean "gboolean ($(GParamSpec *,GString *,GValue *))")
    (type *GParamSpec*,GString*,GValue*->gboolean (function gboolean (GParamSpec* GString* GValue*)) "gboolean ((*$)(GParamSpec *,GString *,GValue *))")
    (type GtkRcPropertyParser *GParamSpec*,GString*,GValue*->gboolean "GtkRcPropertyParser")
    (type s-_GtkWidget (struct (object::GtkObject "object") (private_flags::guint16 "private_flags") (state::guint8 "state") (saved_state::guint8 "saved_state") (name::gchar* "name") (style::GtkStyle* "style") (requisition::GtkRequisition "requisition") (allocation::GtkAllocation "allocation") (window::GdkWindow* "window") (parent::GtkWidget* "parent")) "struct _GtkWidget")
    (type GtkWidget s-_GtkWidget "GtkWidget")
    (type GdkColor-array-5 (array GdkColor) "GdkColor $[ 5 ]")
    (type GdkGC*-array-5 (array GdkGC*) "GdkGC *$[ 5 ]")
    (type GdkPixmap*-array-5 (array GdkPixmap*) "GdkPixmap *$[ 5 ]")
    (type GtkStyle*->void "void ($(GtkStyle *))")
    (type *GtkStyle*->void (function void (GtkStyle*)) "void ((*$)(GtkStyle *))")
    (type GtkStyle*,GtkStyle*->void "void ($(GtkStyle *,GtkStyle *))")
    (type *GtkStyle*,GtkStyle*->void (function void (GtkStyle* GtkStyle*)) "void ((*$)(GtkStyle *,GtkStyle *))")
    (type GtkStyle*->GtkStyle* "GtkStyle *($(GtkStyle *))")
    (type *GtkStyle*->GtkStyle* (function GtkStyle* (GtkStyle*)) "GtkStyle *((*$)(GtkStyle *))")
    (type GtkStyle*,GtkRcStyle*->void "void ($(GtkStyle *,GtkRcStyle *))")
    (type *GtkStyle*,GtkRcStyle*->void (function void (GtkStyle* GtkRcStyle*)) "void ((*$)(GtkStyle *,GtkRcStyle *))")
    (type GtkStyle*,GdkWindow*,GtkStateType->void "void ($(GtkStyle *,GdkWindow *,GtkStateType))")
    (type *GtkStyle*,GdkWindow*,GtkStateType->void (function void (GtkStyle* GdkWindow* GtkStateType)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType))")
    (type GtkStyle*,GtkIconSource*,GtkTextDirection,GtkStateType,GtkIconSize,GtkWidget*,gchar*->GdkPixbuf* "GdkPixbuf *($(GtkStyle *,GtkIconSource *,GtkTextDirection,GtkStateType,GtkIconSize,GtkWidget *,gchar *))")
    (type *GtkStyle*,GtkIconSource*,GtkTextDirection,GtkStateType,GtkIconSize,GtkWidget*,gchar*->GdkPixbuf* (function GdkPixbuf* (GtkStyle* GtkIconSource* GtkTextDirection GtkStateType GtkIconSize GtkWidget* gchar*)) "GdkPixbuf *((*$)(GtkStyle *,GtkIconSource *,GtkTextDirection,GtkStateType,GtkIconSize,GtkWidget *,gchar *))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint->void (function void (GtkStyle* GdkWindow* GtkStateType GdkRectangle* GtkWidget* gchar* gint gint gint)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void (function void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,GdkPoint*,gint,gboolean->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,GdkPoint *,gint,gboolean))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,GdkPoint*,gint,gboolean->void (function void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* GdkPoint* gint gboolean)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,GdkPoint *,gint,gboolean))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,GtkArrowType,gboolean,gint,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,GtkArrowType,gboolean,gint,gint,gint,gint))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,GtkArrowType,gboolean,gint,gint,gint,gint->void (function void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* GtkArrowType gboolean gint gint gint gint)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,GtkArrowType,gboolean,gint,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gchar*->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gchar *))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gchar*->void (function void (GtkStyle* GdkWindow* GtkStateType GdkRectangle* GtkWidget* gchar* gint gint gchar*)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gchar *))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkPositionType,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint,GtkPositionType,gint,gint))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkPositionType,gint,gint->void (function void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint GtkPositionType gint gint)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint,GtkPositionType,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkPositionType->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint,GtkPositionType))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkPositionType->void (function void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint GtkPositionType)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint,GtkPositionType))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void (function void (GtkStyle* GdkWindow* GtkStateType GdkRectangle* GtkWidget* gchar* gint gint gint gint)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkOrientation->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint,GtkOrientation))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkOrientation->void (function void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint GtkOrientation)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint,GtkOrientation))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,GtkExpanderStyle->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,GtkExpanderStyle))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,GtkExpanderStyle->void (function void (GtkStyle* GdkWindow* GtkStateType GdkRectangle* GtkWidget* gchar* gint gint GtkExpanderStyle)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,GtkExpanderStyle))")
    (type GtkStyle*,GdkWindow*,GtkStateType,gboolean,GdkRectangle*,GtkWidget*,gchar*,gint,gint,PangoLayout*->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,gboolean,GdkRectangle *,GtkWidget *,gchar *,gint,gint,PangoLayout *))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,gboolean,GdkRectangle*,GtkWidget*,gchar*,gint,gint,PangoLayout*->void (function void (GtkStyle* GdkWindow* GtkStateType gboolean GdkRectangle* GtkWidget* gchar* gint gint PangoLayout*)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,gboolean,GdkRectangle *,GtkWidget *,gchar *,gint,gint,PangoLayout *))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,GdkWindowEdge,gint,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GdkRectangle *,GtkWidget *,gchar *,GdkWindowEdge,gint,gint,gint,gint))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,GdkWindowEdge,gint,gint,gint,gint->void (function void (GtkStyle* GdkWindow* GtkStateType GdkRectangle* GtkWidget* gchar* GdkWindowEdge gint gint gint gint)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GdkRectangle *,GtkWidget *,gchar *,GdkWindowEdge,gint,gint,gint,gint))")
    (type s-_GtkIconFactory (struct (parent_instance::GObject "parent_instance") (icons::GHashTable* "icons")) "struct _GtkIconFactory")
    (type GtkIconFactory s-_GtkIconFactory "GtkIconFactory")
    (type s-_GtkRcContext (struct) "struct _GtkRcContext")
    (type GtkRcContext s-_GtkRcContext "GtkRcContext")
    (type s-_GtkRcStyleClass (struct (parent_class::GObjectClass "parent_class") (create_rc_style::*GtkRcStyle*->GtkRcStyle* "create_rc_style") (parse::*GtkRcStyle*,GtkSettings*,GScanner*->guint "parse") (merge::*GtkRcStyle*,GtkRcStyle*->void "merge") (create_style::*GtkRcStyle*->GtkStyle* "create_style") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkRcStyleClass")
    (type GtkRcStyleClass s-_GtkRcStyleClass "GtkRcStyleClass")
    (type monster__e1181 int "long")
    (macro GTK_RC_FG::int "GTK_RC_FG")
    (macro GTK_RC_BG::int "GTK_RC_BG")
    (macro GTK_RC_TEXT::int "GTK_RC_TEXT")
    (macro GTK_RC_BASE::int "GTK_RC_BASE")
    (type GtkRcFlags monster__e1181 "GtkRcFlags")
    (type gchar*-array-5 (array gchar*) "gchar *$[ 5 ]")
    (type GtkRcFlags-array-5 (array GtkRcFlags) "GtkRcFlags $[ 5 ]")
    (type GtkRcStyle*->GtkRcStyle* "GtkRcStyle *($(GtkRcStyle *))")
    (type *GtkRcStyle*->GtkRcStyle* (function GtkRcStyle* (GtkRcStyle*)) "GtkRcStyle *((*$)(GtkRcStyle *))")
    (type GtkRcStyle*,GtkSettings*,GScanner*->guint "guint ($(GtkRcStyle *,GtkSettings *,GScanner *))")
    (type *GtkRcStyle*,GtkSettings*,GScanner*->guint (function guint (GtkRcStyle* GtkSettings* GScanner*)) "guint ((*$)(GtkRcStyle *,GtkSettings *,GScanner *))")
    (type GtkRcStyle*,GtkRcStyle*->void "void ($(GtkRcStyle *,GtkRcStyle *))")
    (type *GtkRcStyle*,GtkRcStyle*->void (function void (GtkRcStyle* GtkRcStyle*)) "void ((*$)(GtkRcStyle *,GtkRcStyle *))")
    (type GtkRcStyle*->GtkStyle* "GtkStyle *($(GtkRcStyle *))")
    (type *GtkRcStyle*->GtkStyle* (function GtkStyle* (GtkRcStyle*)) "GtkStyle *((*$)(GtkRcStyle *))")
    (type monster__e1182 int "long")
    (macro GTK_RC_TOKEN_INVALID::int "GTK_RC_TOKEN_INVALID")
    (macro GTK_RC_TOKEN_INCLUDE::int "GTK_RC_TOKEN_INCLUDE")
    (macro GTK_RC_TOKEN_NORMAL::int "GTK_RC_TOKEN_NORMAL")
    (macro GTK_RC_TOKEN_ACTIVE::int "GTK_RC_TOKEN_ACTIVE")
    (macro GTK_RC_TOKEN_PRELIGHT::int "GTK_RC_TOKEN_PRELIGHT")
    (macro GTK_RC_TOKEN_SELECTED::int "GTK_RC_TOKEN_SELECTED")
    (macro GTK_RC_TOKEN_INSENSITIVE::int "GTK_RC_TOKEN_INSENSITIVE")
    (macro GTK_RC_TOKEN_FG::int "GTK_RC_TOKEN_FG")
    (macro GTK_RC_TOKEN_BG::int "GTK_RC_TOKEN_BG")
    (macro GTK_RC_TOKEN_TEXT::int "GTK_RC_TOKEN_TEXT")
    (macro GTK_RC_TOKEN_BASE::int "GTK_RC_TOKEN_BASE")
    (macro GTK_RC_TOKEN_XTHICKNESS::int "GTK_RC_TOKEN_XTHICKNESS")
    (macro GTK_RC_TOKEN_YTHICKNESS::int "GTK_RC_TOKEN_YTHICKNESS")
    (macro GTK_RC_TOKEN_FONT::int "GTK_RC_TOKEN_FONT")
    (macro GTK_RC_TOKEN_FONTSET::int "GTK_RC_TOKEN_FONTSET")
    (macro GTK_RC_TOKEN_FONT_NAME::int "GTK_RC_TOKEN_FONT_NAME")
    (macro GTK_RC_TOKEN_BG_PIXMAP::int "GTK_RC_TOKEN_BG_PIXMAP")
    (macro GTK_RC_TOKEN_PIXMAP_PATH::int "GTK_RC_TOKEN_PIXMAP_PATH")
    (macro GTK_RC_TOKEN_STYLE::int "GTK_RC_TOKEN_STYLE")
    (macro GTK_RC_TOKEN_BINDING::int "GTK_RC_TOKEN_BINDING")
    (macro GTK_RC_TOKEN_BIND::int "GTK_RC_TOKEN_BIND")
    (macro GTK_RC_TOKEN_WIDGET::int "GTK_RC_TOKEN_WIDGET")
    (macro GTK_RC_TOKEN_WIDGET_CLASS::int "GTK_RC_TOKEN_WIDGET_CLASS")
    (macro GTK_RC_TOKEN_CLASS::int "GTK_RC_TOKEN_CLASS")
    (macro GTK_RC_TOKEN_LOWEST::int "GTK_RC_TOKEN_LOWEST")
    (macro GTK_RC_TOKEN_GTK::int "GTK_RC_TOKEN_GTK")
    (macro GTK_RC_TOKEN_APPLICATION::int "GTK_RC_TOKEN_APPLICATION")
    (macro GTK_RC_TOKEN_THEME::int "GTK_RC_TOKEN_THEME")
    (macro GTK_RC_TOKEN_RC::int "GTK_RC_TOKEN_RC")
    (macro GTK_RC_TOKEN_HIGHEST::int "GTK_RC_TOKEN_HIGHEST")
    (macro GTK_RC_TOKEN_ENGINE::int "GTK_RC_TOKEN_ENGINE")
    (macro GTK_RC_TOKEN_MODULE_PATH::int "GTK_RC_TOKEN_MODULE_PATH")
    (macro GTK_RC_TOKEN_IM_MODULE_PATH::int "GTK_RC_TOKEN_IM_MODULE_PATH")
    (macro GTK_RC_TOKEN_IM_MODULE_FILE::int "GTK_RC_TOKEN_IM_MODULE_FILE")
    (macro GTK_RC_TOKEN_STOCK::int "GTK_RC_TOKEN_STOCK")
    (macro GTK_RC_TOKEN_LTR::int "GTK_RC_TOKEN_LTR")
    (macro GTK_RC_TOKEN_RTL::int "GTK_RC_TOKEN_RTL")
    (macro GTK_RC_TOKEN_LAST::int "GTK_RC_TOKEN_LAST")
    (type GtkRcTokenType monster__e1182 "GtkRcTokenType")
    (type s-_GtkSettingsClass (struct (parent_class::GObjectClass "parent_class")) "struct _GtkSettingsClass")
    (type GtkSettingsClass s-_GtkSettingsClass "GtkSettingsClass")
    (type s-_GtkSettingsValue (struct (origin::gchar* "origin") (value::GValue "value")) "struct _GtkSettingsValue")
    (type GtkSettingsValue s-_GtkSettingsValue "GtkSettingsValue")
    (type s-_GtkSettingsPropertyValue (struct) "struct _GtkSettingsPropertyValue")
    (type GtkSettingsPropertyValue s-_GtkSettingsPropertyValue "GtkSettingsPropertyValue")
    (type monster__e1183 int "long")
    (macro ATK_STATE_INVALID::int "ATK_STATE_INVALID")
    (macro ATK_STATE_ACTIVE::int "ATK_STATE_ACTIVE")
    (macro ATK_STATE_ARMED::int "ATK_STATE_ARMED")
    (macro ATK_STATE_BUSY::int "ATK_STATE_BUSY")
    (macro ATK_STATE_CHECKED::int "ATK_STATE_CHECKED")
    (macro ATK_STATE_DEFUNCT::int "ATK_STATE_DEFUNCT")
    (macro ATK_STATE_EDITABLE::int "ATK_STATE_EDITABLE")
    (macro ATK_STATE_ENABLED::int "ATK_STATE_ENABLED")
    (macro ATK_STATE_EXPANDABLE::int "ATK_STATE_EXPANDABLE")
    (macro ATK_STATE_EXPANDED::int "ATK_STATE_EXPANDED")
    (macro ATK_STATE_FOCUSABLE::int "ATK_STATE_FOCUSABLE")
    (macro ATK_STATE_FOCUSED::int "ATK_STATE_FOCUSED")
    (macro ATK_STATE_HORIZONTAL::int "ATK_STATE_HORIZONTAL")
    (macro ATK_STATE_ICONIFIED::int "ATK_STATE_ICONIFIED")
    (macro ATK_STATE_MODAL::int "ATK_STATE_MODAL")
    (macro ATK_STATE_MULTI_LINE::int "ATK_STATE_MULTI_LINE")
    (macro ATK_STATE_MULTISELECTABLE::int "ATK_STATE_MULTISELECTABLE")
    (macro ATK_STATE_OPAQUE::int "ATK_STATE_OPAQUE")
    (macro ATK_STATE_PRESSED::int "ATK_STATE_PRESSED")
    (macro ATK_STATE_RESIZABLE::int "ATK_STATE_RESIZABLE")
    (macro ATK_STATE_SELECTABLE::int "ATK_STATE_SELECTABLE")
    (macro ATK_STATE_SELECTED::int "ATK_STATE_SELECTED")
    (macro ATK_STATE_SENSITIVE::int "ATK_STATE_SENSITIVE")
    (macro ATK_STATE_SHOWING::int "ATK_STATE_SHOWING")
    (macro ATK_STATE_SINGLE_LINE::int "ATK_STATE_SINGLE_LINE")
    (macro ATK_STATE_STALE::int "ATK_STATE_STALE")
    (macro ATK_STATE_TRANSIENT::int "ATK_STATE_TRANSIENT")
    (macro ATK_STATE_VERTICAL::int "ATK_STATE_VERTICAL")
    (macro ATK_STATE_VISIBLE::int "ATK_STATE_VISIBLE")
    (macro ATK_STATE_MANAGES_DESCENDANTS::int "ATK_STATE_MANAGES_DESCENDANTS")
    (macro ATK_STATE_INDETERMINATE::int "ATK_STATE_INDETERMINATE")
    (macro ATK_STATE_TRUNCATED::int "ATK_STATE_TRUNCATED")
    (macro ATK_STATE_LAST_DEFINED::int "ATK_STATE_LAST_DEFINED")
    (type AtkStateType monster__e1183 "AtkStateType")
    (type AtkState guint64 "AtkState")
    (type monster__e1184 int "long")
    (macro ATK_RELATION_NULL::int "ATK_RELATION_NULL")
    (macro ATK_RELATION_CONTROLLED_BY::int "ATK_RELATION_CONTROLLED_BY")
    (macro ATK_RELATION_CONTROLLER_FOR::int "ATK_RELATION_CONTROLLER_FOR")
    (macro ATK_RELATION_LABEL_FOR::int "ATK_RELATION_LABEL_FOR")
    (macro ATK_RELATION_LABELLED_BY::int "ATK_RELATION_LABELLED_BY")
    (macro ATK_RELATION_MEMBER_OF::int "ATK_RELATION_MEMBER_OF")
    (macro ATK_RELATION_NODE_CHILD_OF::int "ATK_RELATION_NODE_CHILD_OF")
    (macro ATK_RELATION_FLOWS_TO::int "ATK_RELATION_FLOWS_TO")
    (macro ATK_RELATION_FLOWS_FROM::int "ATK_RELATION_FLOWS_FROM")
    (macro ATK_RELATION_SUBWINDOW_OF::int "ATK_RELATION_SUBWINDOW_OF")
    (macro ATK_RELATION_EMBEDS::int "ATK_RELATION_EMBEDS")
    (macro ATK_RELATION_EMBEDDED_BY::int "ATK_RELATION_EMBEDDED_BY")
    (macro ATK_RELATION_POPUP_FOR::int "ATK_RELATION_POPUP_FOR")
    (macro ATK_RELATION_PARENT_WINDOW_OF::int "ATK_RELATION_PARENT_WINDOW_OF")
    (macro ATK_RELATION_LAST_DEFINED::int "ATK_RELATION_LAST_DEFINED")
    (type AtkRelationType monster__e1184 "AtkRelationType")
    (type monster__e1185 int "long")
    (macro ATK_ROLE_INVALID::int "ATK_ROLE_INVALID")
    (macro ATK_ROLE_ACCEL_LABEL::int "ATK_ROLE_ACCEL_LABEL")
    (macro ATK_ROLE_ALERT::int "ATK_ROLE_ALERT")
    (macro ATK_ROLE_ANIMATION::int "ATK_ROLE_ANIMATION")
    (macro ATK_ROLE_ARROW::int "ATK_ROLE_ARROW")
    (macro ATK_ROLE_CALENDAR::int "ATK_ROLE_CALENDAR")
    (macro ATK_ROLE_CANVAS::int "ATK_ROLE_CANVAS")
    (macro ATK_ROLE_CHECK_BOX::int "ATK_ROLE_CHECK_BOX")
    (macro ATK_ROLE_CHECK_MENU_ITEM::int "ATK_ROLE_CHECK_MENU_ITEM")
    (macro ATK_ROLE_COLOR_CHOOSER::int "ATK_ROLE_COLOR_CHOOSER")
    (macro ATK_ROLE_COLUMN_HEADER::int "ATK_ROLE_COLUMN_HEADER")
    (macro ATK_ROLE_COMBO_BOX::int "ATK_ROLE_COMBO_BOX")
    (macro ATK_ROLE_DATE_EDITOR::int "ATK_ROLE_DATE_EDITOR")
    (macro ATK_ROLE_DESKTOP_ICON::int "ATK_ROLE_DESKTOP_ICON")
    (macro ATK_ROLE_DESKTOP_FRAME::int "ATK_ROLE_DESKTOP_FRAME")
    (macro ATK_ROLE_DIAL::int "ATK_ROLE_DIAL")
    (macro ATK_ROLE_DIALOG::int "ATK_ROLE_DIALOG")
    (macro ATK_ROLE_DIRECTORY_PANE::int "ATK_ROLE_DIRECTORY_PANE")
    (macro ATK_ROLE_DRAWING_AREA::int "ATK_ROLE_DRAWING_AREA")
    (macro ATK_ROLE_FILE_CHOOSER::int "ATK_ROLE_FILE_CHOOSER")
    (macro ATK_ROLE_FILLER::int "ATK_ROLE_FILLER")
    (macro ATK_ROLE_FONT_CHOOSER::int "ATK_ROLE_FONT_CHOOSER")
    (macro ATK_ROLE_FRAME::int "ATK_ROLE_FRAME")
    (macro ATK_ROLE_GLASS_PANE::int "ATK_ROLE_GLASS_PANE")
    (macro ATK_ROLE_HTML_CONTAINER::int "ATK_ROLE_HTML_CONTAINER")
    (macro ATK_ROLE_ICON::int "ATK_ROLE_ICON")
    (macro ATK_ROLE_IMAGE::int "ATK_ROLE_IMAGE")
    (macro ATK_ROLE_INTERNAL_FRAME::int "ATK_ROLE_INTERNAL_FRAME")
    (macro ATK_ROLE_LABEL::int "ATK_ROLE_LABEL")
    (macro ATK_ROLE_LAYERED_PANE::int "ATK_ROLE_LAYERED_PANE")
    (macro ATK_ROLE_LIST::int "ATK_ROLE_LIST")
    (macro ATK_ROLE_LIST_ITEM::int "ATK_ROLE_LIST_ITEM")
    (macro ATK_ROLE_MENU::int "ATK_ROLE_MENU")
    (macro ATK_ROLE_MENU_BAR::int "ATK_ROLE_MENU_BAR")
    (macro ATK_ROLE_MENU_ITEM::int "ATK_ROLE_MENU_ITEM")
    (macro ATK_ROLE_OPTION_PANE::int "ATK_ROLE_OPTION_PANE")
    (macro ATK_ROLE_PAGE_TAB::int "ATK_ROLE_PAGE_TAB")
    (macro ATK_ROLE_PAGE_TAB_LIST::int "ATK_ROLE_PAGE_TAB_LIST")
    (macro ATK_ROLE_PANEL::int "ATK_ROLE_PANEL")
    (macro ATK_ROLE_PASSWORD_TEXT::int "ATK_ROLE_PASSWORD_TEXT")
    (macro ATK_ROLE_POPUP_MENU::int "ATK_ROLE_POPUP_MENU")
    (macro ATK_ROLE_PROGRESS_BAR::int "ATK_ROLE_PROGRESS_BAR")
    (macro ATK_ROLE_PUSH_BUTTON::int "ATK_ROLE_PUSH_BUTTON")
    (macro ATK_ROLE_RADIO_BUTTON::int "ATK_ROLE_RADIO_BUTTON")
    (macro ATK_ROLE_RADIO_MENU_ITEM::int "ATK_ROLE_RADIO_MENU_ITEM")
    (macro ATK_ROLE_ROOT_PANE::int "ATK_ROLE_ROOT_PANE")
    (macro ATK_ROLE_ROW_HEADER::int "ATK_ROLE_ROW_HEADER")
    (macro ATK_ROLE_SCROLL_BAR::int "ATK_ROLE_SCROLL_BAR")
    (macro ATK_ROLE_SCROLL_PANE::int "ATK_ROLE_SCROLL_PANE")
    (macro ATK_ROLE_SEPARATOR::int "ATK_ROLE_SEPARATOR")
    (macro ATK_ROLE_SLIDER::int "ATK_ROLE_SLIDER")
    (macro ATK_ROLE_SPLIT_PANE::int "ATK_ROLE_SPLIT_PANE")
    (macro ATK_ROLE_SPIN_BUTTON::int "ATK_ROLE_SPIN_BUTTON")
    (macro ATK_ROLE_STATUSBAR::int "ATK_ROLE_STATUSBAR")
    (macro ATK_ROLE_TABLE::int "ATK_ROLE_TABLE")
    (macro ATK_ROLE_TABLE_CELL::int "ATK_ROLE_TABLE_CELL")
    (macro ATK_ROLE_TABLE_COLUMN_HEADER::int "ATK_ROLE_TABLE_COLUMN_HEADER")
    (macro ATK_ROLE_TABLE_ROW_HEADER::int "ATK_ROLE_TABLE_ROW_HEADER")
    (macro ATK_ROLE_TEAR_OFF_MENU_ITEM::int "ATK_ROLE_TEAR_OFF_MENU_ITEM")
    (macro ATK_ROLE_TERMINAL::int "ATK_ROLE_TERMINAL")
    (macro ATK_ROLE_TEXT::int "ATK_ROLE_TEXT")
    (macro ATK_ROLE_TOGGLE_BUTTON::int "ATK_ROLE_TOGGLE_BUTTON")
    (macro ATK_ROLE_TOOL_BAR::int "ATK_ROLE_TOOL_BAR")
    (macro ATK_ROLE_TOOL_TIP::int "ATK_ROLE_TOOL_TIP")
    (macro ATK_ROLE_TREE::int "ATK_ROLE_TREE")
    (macro ATK_ROLE_TREE_TABLE::int "ATK_ROLE_TREE_TABLE")
    (macro ATK_ROLE_UNKNOWN::int "ATK_ROLE_UNKNOWN")
    (macro ATK_ROLE_VIEWPORT::int "ATK_ROLE_VIEWPORT")
    (macro ATK_ROLE_WINDOW::int "ATK_ROLE_WINDOW")
    (macro ATK_ROLE_HEADER::int "ATK_ROLE_HEADER")
    (macro ATK_ROLE_FOOTER::int "ATK_ROLE_FOOTER")
    (macro ATK_ROLE_PARAGRAPH::int "ATK_ROLE_PARAGRAPH")
    (macro ATK_ROLE_RULER::int "ATK_ROLE_RULER")
    (macro ATK_ROLE_APPLICATION::int "ATK_ROLE_APPLICATION")
    (macro ATK_ROLE_AUTOCOMPLETE::int "ATK_ROLE_AUTOCOMPLETE")
    (macro ATK_ROLE_EDITBAR::int "ATK_ROLE_EDITBAR")
    (macro ATK_ROLE_EMBEDDED::int "ATK_ROLE_EMBEDDED")
    (macro ATK_ROLE_LAST_DEFINED::int "ATK_ROLE_LAST_DEFINED")
    (type AtkRole monster__e1185 "AtkRole")
    (type monster__e1186 int "long")
    (macro ATK_LAYER_INVALID::int "ATK_LAYER_INVALID")
    (macro ATK_LAYER_BACKGROUND::int "ATK_LAYER_BACKGROUND")
    (macro ATK_LAYER_CANVAS::int "ATK_LAYER_CANVAS")
    (macro ATK_LAYER_WIDGET::int "ATK_LAYER_WIDGET")
    (macro ATK_LAYER_MDI::int "ATK_LAYER_MDI")
    (macro ATK_LAYER_POPUP::int "ATK_LAYER_POPUP")
    (macro ATK_LAYER_OVERLAY::int "ATK_LAYER_OVERLAY")
    (macro ATK_LAYER_WINDOW::int "ATK_LAYER_WINDOW")
    (type AtkLayer monster__e1186 "AtkLayer")
    (type s-_AtkImplementor (struct) "struct _AtkImplementor")
    (type AtkImplementor s-_AtkImplementor "AtkImplementor")
    (type s-_AtkImplementorIface (struct (parent::GTypeInterface "parent") (ref_accessible::*AtkImplementor*->AtkObject* "ref_accessible")) "struct _AtkImplementorIface")
    (type AtkImplementorIface s-_AtkImplementorIface "AtkImplementorIface")
    (type s-_AtkObject (struct (parent::GObject "parent") (description::gchar* "description") (name::gchar* "name") (accessible_parent::AtkObject* "accessible_parent") (role::AtkRole "role") (relation_set::AtkRelationSet* "relation_set") (layer::AtkLayer "layer")) "struct _AtkObject")
    (type AtkObject s-_AtkObject "AtkObject")
    (type s-_AtkObjectClass (struct (parent::GObjectClass "parent") (get_name::*AtkObject*->gchar* "get_name") (get_description::*AtkObject*->gchar* "get_description") (get_parent::*AtkObject*->AtkObject* "get_parent") (get_n_children::*AtkObject*->gint "get_n_children") (ref_child::*AtkObject*,gint->AtkObject* "ref_child") (get_index_in_parent::*AtkObject*->gint "get_index_in_parent") (ref_relation_set::*AtkObject*->AtkRelationSet* "ref_relation_set") (get_role::*AtkObject*->AtkRole "get_role") (get_layer::*AtkObject*->AtkLayer "get_layer") (get_mdi_zorder::*AtkObject*->gint "get_mdi_zorder") (ref_state_set::*AtkObject*->AtkStateSet* "ref_state_set") (set_name::*AtkObject*,gchar*->void "set_name") (set_description::*AtkObject*,gchar*->void "set_description") (set_parent::*AtkObject*,AtkObject*->void "set_parent") (set_role::*AtkObject*,AtkRole->void "set_role") (connect_property_change_handler::*AtkObject*,AtkPropertyChangeHandler*->guint "connect_property_change_handler") (remove_property_change_handler::*AtkObject*,guint->void "remove_property_change_handler") (initialize::*AtkObject*,gpointer->void "initialize") (children_changed::*AtkObject*,guint,gpointer->void "children_changed") (focus_event::*AtkObject*,gboolean->void "focus_event") (property_change::*AtkObject*,AtkPropertyValues*->void "property_change") (state_change::*AtkObject*,gchar*,gboolean->void "state_change") (visible_data_changed::*AtkObject*->void "visible_data_changed") (active_descendant_changed::*AtkObject*,gpointer*->void "active_descendant_changed") (pad1::AtkFunction "pad1") (pad2::AtkFunction "pad2") (pad3::AtkFunction "pad3")) "struct _AtkObjectClass")
    (type AtkObjectClass s-_AtkObjectClass "AtkObjectClass")
    (type s-_AtkRelationSet (struct (parent::GObject "parent") (relations::GPtrArray* "relations")) "struct _AtkRelationSet")
    (type AtkRelationSet s-_AtkRelationSet "AtkRelationSet")
    (type s-_AtkStateSet (struct (parent::GObject "parent")) "struct _AtkStateSet")
    (type AtkStateSet s-_AtkStateSet "AtkStateSet")
    (type s-_AtkPropertyValues (struct (property_name::gchar* "property_name") (old_value::GValue "old_value") (new_value::GValue "new_value")) "struct _AtkPropertyValues")
    (type AtkPropertyValues s-_AtkPropertyValues "AtkPropertyValues")
    (type AtkFunction *gpointer->gboolean "AtkFunction")
    (type AtkObject*,AtkPropertyValues*->void "void ($(AtkObject *,AtkPropertyValues *))")
    (type *AtkObject*,AtkPropertyValues*->void (function void (AtkObject* AtkPropertyValues*)) "void ((*$)(AtkObject *,AtkPropertyValues *))")
    (type AtkPropertyChangeHandler *AtkObject*,AtkPropertyValues*->void "AtkPropertyChangeHandler")
    (type AtkObject*->gchar* "gchar *($(AtkObject *))")
    (type *AtkObject*->gchar* (function gchar* (AtkObject*)) "gchar *((*$)(AtkObject *))")
    (type AtkObject*->AtkObject* "AtkObject *($(AtkObject *))")
    (type *AtkObject*->AtkObject* (function AtkObject* (AtkObject*)) "AtkObject *((*$)(AtkObject *))")
    (type AtkObject*->gint "gint ($(AtkObject *))")
    (type *AtkObject*->gint (function gint (AtkObject*)) "gint ((*$)(AtkObject *))")
    (type AtkObject*,gint->AtkObject* "AtkObject *($(AtkObject *,gint))")
    (type *AtkObject*,gint->AtkObject* (function AtkObject* (AtkObject* gint)) "AtkObject *((*$)(AtkObject *,gint))")
    (type AtkObject*->AtkRelationSet* "AtkRelationSet *($(AtkObject *))")
    (type *AtkObject*->AtkRelationSet* (function AtkRelationSet* (AtkObject*)) "AtkRelationSet *((*$)(AtkObject *))")
    (type AtkObject*->AtkRole "AtkRole ($(AtkObject *))")
    (type *AtkObject*->AtkRole (function AtkRole (AtkObject*)) "AtkRole ((*$)(AtkObject *))")
    (type AtkObject*->AtkLayer "AtkLayer ($(AtkObject *))")
    (type *AtkObject*->AtkLayer (function AtkLayer (AtkObject*)) "AtkLayer ((*$)(AtkObject *))")
    (type AtkObject*->AtkStateSet* "AtkStateSet *($(AtkObject *))")
    (type *AtkObject*->AtkStateSet* (function AtkStateSet* (AtkObject*)) "AtkStateSet *((*$)(AtkObject *))")
    (type AtkObject*,gchar*->void "void ($(AtkObject *,gchar *))")
    (type *AtkObject*,gchar*->void (function void (AtkObject* gchar*)) "void ((*$)(AtkObject *,gchar *))")
    (type AtkObject*,AtkObject*->void "void ($(AtkObject *,AtkObject *))")
    (type *AtkObject*,AtkObject*->void (function void (AtkObject* AtkObject*)) "void ((*$)(AtkObject *,AtkObject *))")
    (type AtkObject*,AtkRole->void "void ($(AtkObject *,AtkRole))")
    (type *AtkObject*,AtkRole->void (function void (AtkObject* AtkRole)) "void ((*$)(AtkObject *,AtkRole))")
    (type AtkPropertyChangeHandler* (pointer AtkPropertyChangeHandler) "AtkPropertyChangeHandler *")
    (type AtkObject*,AtkPropertyChangeHandler*->guint "guint ($(AtkObject *,AtkPropertyChangeHandler *))")
    (type *AtkObject*,AtkPropertyChangeHandler*->guint (function guint (AtkObject* AtkPropertyChangeHandler*)) "guint ((*$)(AtkObject *,AtkPropertyChangeHandler *))")
    (type AtkObject*,guint->void "void ($(AtkObject *,guint))")
    (type *AtkObject*,guint->void (function void (AtkObject* guint)) "void ((*$)(AtkObject *,guint))")
    (type AtkObject*,gpointer->void "void ($(AtkObject *,gpointer))")
    (type *AtkObject*,gpointer->void (function void (AtkObject* gpointer)) "void ((*$)(AtkObject *,gpointer))")
    (type AtkObject*,guint,gpointer->void "void ($(AtkObject *,guint,gpointer))")
    (type *AtkObject*,guint,gpointer->void (function void (AtkObject* guint gpointer)) "void ((*$)(AtkObject *,guint,gpointer))")
    (type AtkObject*,gboolean->void "void ($(AtkObject *,gboolean))")
    (type *AtkObject*,gboolean->void (function void (AtkObject* gboolean)) "void ((*$)(AtkObject *,gboolean))")
    (type AtkObject*,gchar*,gboolean->void "void ($(AtkObject *,gchar *,gboolean))")
    (type *AtkObject*,gchar*,gboolean->void (function void (AtkObject* gchar* gboolean)) "void ((*$)(AtkObject *,gchar *,gboolean))")
    (type AtkObject*->void "void ($(AtkObject *))")
    (type *AtkObject*->void (function void (AtkObject*)) "void ((*$)(AtkObject *))")
    (type AtkObject*,gpointer*->void "void ($(AtkObject *,gpointer *))")
    (type *AtkObject*,gpointer*->void (function void (AtkObject* gpointer*)) "void ((*$)(AtkObject *,gpointer *))")
    (type AtkImplementor*->AtkObject* "AtkObject *($(AtkImplementor *))")
    (type *AtkImplementor*->AtkObject* (function AtkObject* (AtkImplementor*)) "AtkObject *((*$)(AtkImplementor *))")
    (type monster__e1187 int "long")
    (macro GTK_TOPLEVEL::int "GTK_TOPLEVEL")
    (macro GTK_NO_WINDOW::int "GTK_NO_WINDOW")
    (macro GTK_REALIZED::int "GTK_REALIZED")
    (macro GTK_MAPPED::int "GTK_MAPPED")
    (macro GTK_VISIBLE::int "GTK_VISIBLE")
    (macro GTK_SENSITIVE::int "GTK_SENSITIVE")
    (macro GTK_PARENT_SENSITIVE::int "GTK_PARENT_SENSITIVE")
    (macro GTK_CAN_FOCUS::int "GTK_CAN_FOCUS")
    (macro GTK_HAS_FOCUS::int "GTK_HAS_FOCUS")
    (macro GTK_CAN_DEFAULT::int "GTK_CAN_DEFAULT")
    (macro GTK_HAS_DEFAULT::int "GTK_HAS_DEFAULT")
    (macro GTK_HAS_GRAB::int "GTK_HAS_GRAB")
    (macro GTK_RC_STYLE::int "GTK_RC_STYLE")
    (macro GTK_COMPOSITE_CHILD::int "GTK_COMPOSITE_CHILD")
    (macro GTK_NO_REPARENT::int "GTK_NO_REPARENT")
    (macro GTK_APP_PAINTABLE::int "GTK_APP_PAINTABLE")
    (macro GTK_RECEIVES_DEFAULT::int "GTK_RECEIVES_DEFAULT")
    (macro GTK_DOUBLE_BUFFERED::int "GTK_DOUBLE_BUFFERED")
    (macro GTK_NO_SHOW_ALL::int "GTK_NO_SHOW_ALL")
    (type GtkWidgetFlags monster__e1187 "GtkWidgetFlags")
    (type monster__e1188 int "long")
    (macro GTK_WIDGET_HELP_TOOLTIP::int "GTK_WIDGET_HELP_TOOLTIP")
    (macro GTK_WIDGET_HELP_WHATS_THIS::int "GTK_WIDGET_HELP_WHATS_THIS")
    (type GtkWidgetHelpType monster__e1188 "GtkWidgetHelpType")
    (type s-_GtkRequisition (struct (width::gint "width") (height::gint "height")) "struct _GtkRequisition")
    (type GtkRequisition s-_GtkRequisition "GtkRequisition")
    (type GtkAllocation GdkRectangle "GtkAllocation")
    (type s-_GtkSelectionData (struct (selection::GdkAtom "selection") (target::GdkAtom "target") (type::GdkAtom "type") (format::gint "format") (data::guchar* "data") (length::gint "length") (display::GdkDisplay* "display")) "struct _GtkSelectionData")
    (type GtkSelectionData s-_GtkSelectionData "GtkSelectionData")
    (type s-_GtkWidgetClass (struct (parent_class::GtkObjectClass "parent_class") (activate_signal::guint "activate_signal") (set_scroll_adjustments_signal::guint "set_scroll_adjustments_signal") (dispatch_child_properties_changed::*GtkWidget*,guint,GParamSpec**->void "dispatch_child_properties_changed") (show::*GtkWidget*->void "show") (show_all::*GtkWidget*->void "show_all") (hide::*GtkWidget*->void "hide") (hide_all::*GtkWidget*->void "hide_all") (map::*GtkWidget*->void "map") (unmap::*GtkWidget*->void "unmap") (realize::*GtkWidget*->void "realize") (unrealize::*GtkWidget*->void "unrealize") (size_request::*GtkWidget*,GtkRequisition*->void "size_request") (size_allocate::*GtkWidget*,GtkAllocation*->void "size_allocate") (state_changed::*GtkWidget*,GtkStateType->void "state_changed") (parent_set::*GtkWidget*,GtkWidget*->void "parent_set") (hierarchy_changed::*GtkWidget*,GtkWidget*->void "hierarchy_changed") (style_set::*GtkWidget*,GtkStyle*->void "style_set") (direction_changed::*GtkWidget*,GtkTextDirection->void "direction_changed") (grab_notify::*GtkWidget*,gboolean->void "grab_notify") (child_notify::*GtkWidget*,GParamSpec*->void "child_notify") (mnemonic_activate::*GtkWidget*,gboolean->gboolean "mnemonic_activate") (grab_focus::*GtkWidget*->void "grab_focus") (focus::*GtkWidget*,GtkDirectionType->gboolean "focus") (event::*GtkWidget*,GdkEvent*->gboolean "event") (button_press_event::*GtkWidget*,GdkEventButton*->gboolean "button_press_event") (button_release_event::*GtkWidget*,GdkEventButton*->gboolean "button_release_event") (scroll_event::*GtkWidget*,GdkEventScroll*->gboolean "scroll_event") (motion_notify_event::*GtkWidget*,GdkEventMotion*->gboolean "motion_notify_event") (delete_event::*GtkWidget*,GdkEventAny*->gboolean "delete_event") (destroy_event::*GtkWidget*,GdkEventAny*->gboolean "destroy_event") (expose_event::*GtkWidget*,GdkEventExpose*->gboolean "expose_event") (key_press_event::*GtkWidget*,GdkEventKey*->gboolean "key_press_event") (key_release_event::*GtkWidget*,GdkEventKey*->gboolean "key_release_event") (enter_notify_event::*GtkWidget*,GdkEventCrossing*->gboolean "enter_notify_event") (leave_notify_event::*GtkWidget*,GdkEventCrossing*->gboolean "leave_notify_event") (configure_event::*GtkWidget*,GdkEventConfigure*->gboolean "configure_event") (focus_in_event::*GtkWidget*,GdkEventFocus*->gboolean "focus_in_event") (focus_out_event::*GtkWidget*,GdkEventFocus*->gboolean "focus_out_event") (map_event::*GtkWidget*,GdkEventAny*->gboolean "map_event") (unmap_event::*GtkWidget*,GdkEventAny*->gboolean "unmap_event") (property_notify_event::*GtkWidget*,GdkEventProperty*->gboolean "property_notify_event") (selection_clear_event::*GtkWidget*,GdkEventSelection*->gboolean "selection_clear_event") (selection_request_event::*GtkWidget*,GdkEventSelection*->gboolean "selection_request_event") (selection_notify_event::*GtkWidget*,GdkEventSelection*->gboolean "selection_notify_event") (proximity_in_event::*GtkWidget*,GdkEventProximity*->gboolean "proximity_in_event") (proximity_out_event::*GtkWidget*,GdkEventProximity*->gboolean "proximity_out_event") (visibility_notify_event::*GtkWidget*,GdkEventVisibility*->gboolean "visibility_notify_event") (client_event::*GtkWidget*,GdkEventClient*->gboolean "client_event") (no_expose_event::*GtkWidget*,GdkEventAny*->gboolean "no_expose_event") (window_state_event::*GtkWidget*,GdkEventWindowState*->gboolean "window_state_event") (selection_get::*GtkWidget*,GtkSelectionData*,guint,guint->void "selection_get") (selection_received::*GtkWidget*,GtkSelectionData*,guint->void "selection_received") (drag_begin::*GtkWidget*,GdkDragContext*->void "drag_begin") (drag_end::*GtkWidget*,GdkDragContext*->void "drag_end") (drag_data_get::*GtkWidget*,GdkDragContext*,GtkSelectionData*,guint,guint->void "drag_data_get") (drag_data_delete::*GtkWidget*,GdkDragContext*->void "drag_data_delete") (drag_leave::*GtkWidget*,GdkDragContext*,guint->void "drag_leave") (drag_motion::*GtkWidget*,GdkDragContext*,gint,gint,guint->gboolean "drag_motion") (drag_drop::*GtkWidget*,GdkDragContext*,gint,gint,guint->gboolean "drag_drop") (drag_data_received::*GtkWidget*,GdkDragContext*,gint,gint,GtkSelectionData*,guint,guint->void "drag_data_received") (popup_menu::*GtkWidget*->gboolean "popup_menu") (show_help::*GtkWidget*,GtkWidgetHelpType->gboolean "show_help") (get_accessible::*GtkWidget*->AtkObject* "get_accessible") (screen_changed::*GtkWidget*,GdkScreen*->void "screen_changed") (can_activate_accel::*GtkWidget*,guint->gboolean "can_activate_accel") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4") (_gtk_reserved5::*void->void "_gtk_reserved5") (_gtk_reserved6::*void->void "_gtk_reserved6") (_gtk_reserved7::*void->void "_gtk_reserved7")) "struct _GtkWidgetClass")
    (type GtkWidgetClass s-_GtkWidgetClass "GtkWidgetClass")
    (type s-_GtkWidgetAuxInfo (struct (x::gint "x") (y::gint "y") (width::gint "width") (height::gint "height") (x_set::guint "x_set") (y_set::guint "y_set")) "struct _GtkWidgetAuxInfo")
    (type GtkWidgetAuxInfo s-_GtkWidgetAuxInfo "GtkWidgetAuxInfo")
    (type s-_GtkWidgetShapeInfo (struct (offset_x::gint16 "offset_x") (offset_y::gint16 "offset_y") (shape_mask::GdkBitmap* "shape_mask")) "struct _GtkWidgetShapeInfo")
    (type GtkWidgetShapeInfo s-_GtkWidgetShapeInfo "GtkWidgetShapeInfo")
    (type s-_GtkClipboard (struct) "struct _GtkClipboard")
    (type GtkClipboard s-_GtkClipboard "GtkClipboard")
    (type GtkWidget*,gpointer->void "void ($(GtkWidget *,gpointer))")
    (type *GtkWidget*,gpointer->void (function void (GtkWidget* gpointer)) "void ((*$)(GtkWidget *,gpointer))")
    (type GtkCallback *GtkWidget*,gpointer->void "GtkCallback")
    (type GtkWidget*,guint,GParamSpec**->void "void ($(GtkWidget *,guint,GParamSpec **))")
    (type *GtkWidget*,guint,GParamSpec**->void (function void (GtkWidget* guint GParamSpec**)) "void ((*$)(GtkWidget *,guint,GParamSpec **))")
    (type GtkWidget*->void "void ($(GtkWidget *))")
    (type *GtkWidget*->void (function void (GtkWidget*)) "void ((*$)(GtkWidget *))")
    (type GtkWidget*,GtkRequisition*->void "void ($(GtkWidget *,GtkRequisition *))")
    (type *GtkWidget*,GtkRequisition*->void (function void (GtkWidget* GtkRequisition*)) "void ((*$)(GtkWidget *,GtkRequisition *))")
    (type GtkWidget*,GtkAllocation*->void "void ($(GtkWidget *,GtkAllocation *))")
    (type *GtkWidget*,GtkAllocation*->void (function void (GtkWidget* GtkAllocation*)) "void ((*$)(GtkWidget *,GtkAllocation *))")
    (type GtkWidget*,GtkStateType->void "void ($(GtkWidget *,GtkStateType))")
    (type *GtkWidget*,GtkStateType->void (function void (GtkWidget* GtkStateType)) "void ((*$)(GtkWidget *,GtkStateType))")
    (type GtkWidget*,GtkWidget*->void "void ($(GtkWidget *,GtkWidget *))")
    (type *GtkWidget*,GtkWidget*->void (function void (GtkWidget* GtkWidget*)) "void ((*$)(GtkWidget *,GtkWidget *))")
    (type GtkWidget*,GtkStyle*->void "void ($(GtkWidget *,GtkStyle *))")
    (type *GtkWidget*,GtkStyle*->void (function void (GtkWidget* GtkStyle*)) "void ((*$)(GtkWidget *,GtkStyle *))")
    (type GtkWidget*,GtkTextDirection->void "void ($(GtkWidget *,GtkTextDirection))")
    (type *GtkWidget*,GtkTextDirection->void (function void (GtkWidget* GtkTextDirection)) "void ((*$)(GtkWidget *,GtkTextDirection))")
    (type GtkWidget*,gboolean->void "void ($(GtkWidget *,gboolean))")
    (type *GtkWidget*,gboolean->void (function void (GtkWidget* gboolean)) "void ((*$)(GtkWidget *,gboolean))")
    (type GtkWidget*,GParamSpec*->void "void ($(GtkWidget *,GParamSpec *))")
    (type *GtkWidget*,GParamSpec*->void (function void (GtkWidget* GParamSpec*)) "void ((*$)(GtkWidget *,GParamSpec *))")
    (type GtkWidget*,gboolean->gboolean "gboolean ($(GtkWidget *,gboolean))")
    (type *GtkWidget*,gboolean->gboolean (function gboolean (GtkWidget* gboolean)) "gboolean ((*$)(GtkWidget *,gboolean))")
    (type GtkWidget*,GtkDirectionType->gboolean "gboolean ($(GtkWidget *,GtkDirectionType))")
    (type *GtkWidget*,GtkDirectionType->gboolean (function gboolean (GtkWidget* GtkDirectionType)) "gboolean ((*$)(GtkWidget *,GtkDirectionType))")
    (type GtkWidget*,GdkEvent*->gboolean "gboolean ($(GtkWidget *,GdkEvent *))")
    (type *GtkWidget*,GdkEvent*->gboolean (function gboolean (GtkWidget* GdkEvent*)) "gboolean ((*$)(GtkWidget *,GdkEvent *))")
    (type GtkWidget*,GdkEventButton*->gboolean "gboolean ($(GtkWidget *,GdkEventButton *))")
    (type *GtkWidget*,GdkEventButton*->gboolean (function gboolean (GtkWidget* GdkEventButton*)) "gboolean ((*$)(GtkWidget *,GdkEventButton *))")
    (type GtkWidget*,GdkEventScroll*->gboolean "gboolean ($(GtkWidget *,GdkEventScroll *))")
    (type *GtkWidget*,GdkEventScroll*->gboolean (function gboolean (GtkWidget* GdkEventScroll*)) "gboolean ((*$)(GtkWidget *,GdkEventScroll *))")
    (type GtkWidget*,GdkEventMotion*->gboolean "gboolean ($(GtkWidget *,GdkEventMotion *))")
    (type *GtkWidget*,GdkEventMotion*->gboolean (function gboolean (GtkWidget* GdkEventMotion*)) "gboolean ((*$)(GtkWidget *,GdkEventMotion *))")
    (type GtkWidget*,GdkEventAny*->gboolean "gboolean ($(GtkWidget *,GdkEventAny *))")
    (type *GtkWidget*,GdkEventAny*->gboolean (function gboolean (GtkWidget* GdkEventAny*)) "gboolean ((*$)(GtkWidget *,GdkEventAny *))")
    (type GtkWidget*,GdkEventExpose*->gboolean "gboolean ($(GtkWidget *,GdkEventExpose *))")
    (type *GtkWidget*,GdkEventExpose*->gboolean (function gboolean (GtkWidget* GdkEventExpose*)) "gboolean ((*$)(GtkWidget *,GdkEventExpose *))")
    (type GtkWidget*,GdkEventKey*->gboolean "gboolean ($(GtkWidget *,GdkEventKey *))")
    (type *GtkWidget*,GdkEventKey*->gboolean (function gboolean (GtkWidget* GdkEventKey*)) "gboolean ((*$)(GtkWidget *,GdkEventKey *))")
    (type GtkWidget*,GdkEventCrossing*->gboolean "gboolean ($(GtkWidget *,GdkEventCrossing *))")
    (type *GtkWidget*,GdkEventCrossing*->gboolean (function gboolean (GtkWidget* GdkEventCrossing*)) "gboolean ((*$)(GtkWidget *,GdkEventCrossing *))")
    (type GtkWidget*,GdkEventConfigure*->gboolean "gboolean ($(GtkWidget *,GdkEventConfigure *))")
    (type *GtkWidget*,GdkEventConfigure*->gboolean (function gboolean (GtkWidget* GdkEventConfigure*)) "gboolean ((*$)(GtkWidget *,GdkEventConfigure *))")
    (type GtkWidget*,GdkEventFocus*->gboolean "gboolean ($(GtkWidget *,GdkEventFocus *))")
    (type *GtkWidget*,GdkEventFocus*->gboolean (function gboolean (GtkWidget* GdkEventFocus*)) "gboolean ((*$)(GtkWidget *,GdkEventFocus *))")
    (type GtkWidget*,GdkEventProperty*->gboolean "gboolean ($(GtkWidget *,GdkEventProperty *))")
    (type *GtkWidget*,GdkEventProperty*->gboolean (function gboolean (GtkWidget* GdkEventProperty*)) "gboolean ((*$)(GtkWidget *,GdkEventProperty *))")
    (type GtkWidget*,GdkEventSelection*->gboolean "gboolean ($(GtkWidget *,GdkEventSelection *))")
    (type *GtkWidget*,GdkEventSelection*->gboolean (function gboolean (GtkWidget* GdkEventSelection*)) "gboolean ((*$)(GtkWidget *,GdkEventSelection *))")
    (type GtkWidget*,GdkEventProximity*->gboolean "gboolean ($(GtkWidget *,GdkEventProximity *))")
    (type *GtkWidget*,GdkEventProximity*->gboolean (function gboolean (GtkWidget* GdkEventProximity*)) "gboolean ((*$)(GtkWidget *,GdkEventProximity *))")
    (type GtkWidget*,GdkEventVisibility*->gboolean "gboolean ($(GtkWidget *,GdkEventVisibility *))")
    (type *GtkWidget*,GdkEventVisibility*->gboolean (function gboolean (GtkWidget* GdkEventVisibility*)) "gboolean ((*$)(GtkWidget *,GdkEventVisibility *))")
    (type GtkWidget*,GdkEventClient*->gboolean "gboolean ($(GtkWidget *,GdkEventClient *))")
    (type *GtkWidget*,GdkEventClient*->gboolean (function gboolean (GtkWidget* GdkEventClient*)) "gboolean ((*$)(GtkWidget *,GdkEventClient *))")
    (type GtkWidget*,GdkEventWindowState*->gboolean "gboolean ($(GtkWidget *,GdkEventWindowState *))")
    (type *GtkWidget*,GdkEventWindowState*->gboolean (function gboolean (GtkWidget* GdkEventWindowState*)) "gboolean ((*$)(GtkWidget *,GdkEventWindowState *))")
    (type GtkWidget*,GtkSelectionData*,guint,guint->void "void ($(GtkWidget *,GtkSelectionData *,guint,guint))")
    (type *GtkWidget*,GtkSelectionData*,guint,guint->void (function void (GtkWidget* GtkSelectionData* guint guint)) "void ((*$)(GtkWidget *,GtkSelectionData *,guint,guint))")
    (type GtkWidget*,GtkSelectionData*,guint->void "void ($(GtkWidget *,GtkSelectionData *,guint))")
    (type *GtkWidget*,GtkSelectionData*,guint->void (function void (GtkWidget* GtkSelectionData* guint)) "void ((*$)(GtkWidget *,GtkSelectionData *,guint))")
    (type GtkWidget*,GdkDragContext*->void "void ($(GtkWidget *,GdkDragContext *))")
    (type *GtkWidget*,GdkDragContext*->void (function void (GtkWidget* GdkDragContext*)) "void ((*$)(GtkWidget *,GdkDragContext *))")
    (type GtkWidget*,GdkDragContext*,GtkSelectionData*,guint,guint->void "void ($(GtkWidget *,GdkDragContext *,GtkSelectionData *,guint,guint))")
    (type *GtkWidget*,GdkDragContext*,GtkSelectionData*,guint,guint->void (function void (GtkWidget* GdkDragContext* GtkSelectionData* guint guint)) "void ((*$)(GtkWidget *,GdkDragContext *,GtkSelectionData *,guint,guint))")
    (type GtkWidget*,GdkDragContext*,guint->void "void ($(GtkWidget *,GdkDragContext *,guint))")
    (type *GtkWidget*,GdkDragContext*,guint->void (function void (GtkWidget* GdkDragContext* guint)) "void ((*$)(GtkWidget *,GdkDragContext *,guint))")
    (type GtkWidget*,GdkDragContext*,gint,gint,guint->gboolean "gboolean ($(GtkWidget *,GdkDragContext *,gint,gint,guint))")
    (type *GtkWidget*,GdkDragContext*,gint,gint,guint->gboolean (function gboolean (GtkWidget* GdkDragContext* gint gint guint)) "gboolean ((*$)(GtkWidget *,GdkDragContext *,gint,gint,guint))")
    (type GtkWidget*,GdkDragContext*,gint,gint,GtkSelectionData*,guint,guint->void "void ($(GtkWidget *,GdkDragContext *,gint,gint,GtkSelectionData *,guint,guint))")
    (type *GtkWidget*,GdkDragContext*,gint,gint,GtkSelectionData*,guint,guint->void (function void (GtkWidget* GdkDragContext* gint gint GtkSelectionData* guint guint)) "void ((*$)(GtkWidget *,GdkDragContext *,gint,gint,GtkSelectionData *,guint,guint))")
    (type GtkWidget*->gboolean "gboolean ($(GtkWidget *))")
    (type *GtkWidget*->gboolean (function gboolean (GtkWidget*)) "gboolean ((*$)(GtkWidget *))")
    (type GtkWidget*,GtkWidgetHelpType->gboolean "gboolean ($(GtkWidget *,GtkWidgetHelpType))")
    (type *GtkWidget*,GtkWidgetHelpType->gboolean (function gboolean (GtkWidget* GtkWidgetHelpType)) "gboolean ((*$)(GtkWidget *,GtkWidgetHelpType))")
    (type GtkWidget*->AtkObject* "AtkObject *($(GtkWidget *))")
    (type *GtkWidget*->AtkObject* (function AtkObject* (GtkWidget*)) "AtkObject *((*$)(GtkWidget *))")
    (type GtkWidget*,GdkScreen*->void "void ($(GtkWidget *,GdkScreen *))")
    (type *GtkWidget*,GdkScreen*->void (function void (GtkWidget* GdkScreen*)) "void ((*$)(GtkWidget *,GdkScreen *))")
    (type GtkWidget*,guint->gboolean "gboolean ($(GtkWidget *,guint))")
    (type *GtkWidget*,guint->gboolean (function gboolean (GtkWidget* guint)) "gboolean ((*$)(GtkWidget *,guint))")
    (type s-_GtkContainer (struct (widget::GtkWidget "widget") (focus_child::GtkWidget* "focus_child") (border_width::guint "border_width") (need_resize::guint "need_resize") (resize_mode::guint "resize_mode") (reallocate_redraws::guint "reallocate_redraws") (has_focus_chain::guint "has_focus_chain")) "struct _GtkContainer")
    (type GtkContainer s-_GtkContainer "GtkContainer")
    (type s-_GtkContainerClass (struct (parent_class::GtkWidgetClass "parent_class") (add::*GtkContainer*,GtkWidget*->void "add") (remove::*GtkContainer*,GtkWidget*->void "remove") (check_resize::*GtkContainer*->void "check_resize") (forall::*GtkContainer*,gboolean,GtkCallback,gpointer->void "forall") (set_focus_child::*GtkContainer*,GtkWidget*->void "set_focus_child") (child_type::*GtkContainer*->GType "child_type") (composite_name::*GtkContainer*,GtkWidget*->gchar* "composite_name") (set_child_property::*GtkContainer*,GtkWidget*,guint,GValue*,GParamSpec*->void "set_child_property") (get_child_property::*GtkContainer*,GtkWidget*,guint,GValue*,GParamSpec*->void "get_child_property") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkContainerClass")
    (type GtkContainerClass s-_GtkContainerClass "GtkContainerClass")
    (type GtkContainer*,GtkWidget*->void "void ($(GtkContainer *,GtkWidget *))")
    (type *GtkContainer*,GtkWidget*->void (function void (GtkContainer* GtkWidget*)) "void ((*$)(GtkContainer *,GtkWidget *))")
    (type GtkContainer*->void "void ($(GtkContainer *))")
    (type *GtkContainer*->void (function void (GtkContainer*)) "void ((*$)(GtkContainer *))")
    (type GtkContainer*,gboolean,GtkCallback,gpointer->void "void ($(GtkContainer *,gboolean,GtkCallback,gpointer))")
    (type *GtkContainer*,gboolean,GtkCallback,gpointer->void (function void (GtkContainer* gboolean GtkCallback gpointer)) "void ((*$)(GtkContainer *,gboolean,GtkCallback,gpointer))")
    (type GtkContainer*->GType "GType ($(GtkContainer *))")
    (type *GtkContainer*->GType (function GType (GtkContainer*)) "GType ((*$)(GtkContainer *))")
    (type GtkContainer*,GtkWidget*->gchar* "gchar *($(GtkContainer *,GtkWidget *))")
    (type *GtkContainer*,GtkWidget*->gchar* (function gchar* (GtkContainer* GtkWidget*)) "gchar *((*$)(GtkContainer *,GtkWidget *))")
    (type GtkContainer*,GtkWidget*,guint,GValue*,GParamSpec*->void "void ($(GtkContainer *,GtkWidget *,guint,GValue *,GParamSpec *))")
    (type *GtkContainer*,GtkWidget*,guint,GValue*,GParamSpec*->void (function void (GtkContainer* GtkWidget* guint GValue* GParamSpec*)) "void ((*$)(GtkContainer *,GtkWidget *,guint,GValue *,GParamSpec *))")
    (type s-_GtkBin (struct (container::GtkContainer "container") (child::GtkWidget* "child")) "struct _GtkBin")
    (type GtkBin s-_GtkBin "GtkBin")
    (type s-_GtkBinClass (struct (parent_class::GtkContainerClass "parent_class")) "struct _GtkBinClass")
    (type GtkBinClass s-_GtkBinClass "GtkBinClass")
    (type s-_GtkWindow (struct (bin::GtkBin "bin") (title::gchar* "title") (wmclass_name::gchar* "wmclass_name") (wmclass_class::gchar* "wmclass_class") (wm_role::gchar* "wm_role") (focus_widget::GtkWidget* "focus_widget") (default_widget::GtkWidget* "default_widget") (transient_parent::GtkWindow* "transient_parent") (geometry_info::GtkWindowGeometryInfo* "geometry_info") (frame::GdkWindow* "frame") (group::GtkWindowGroup* "group") (configure_request_count::guint16 "configure_request_count") (allow_shrink::guint "allow_shrink") (allow_grow::guint "allow_grow") (configure_notify_received::guint "configure_notify_received") (need_default_position::guint "need_default_position") (need_default_size::guint "need_default_size") (position::guint "position") (type::guint "type") (has_user_ref_count::guint "has_user_ref_count") (has_focus::guint "has_focus") (modal::guint "modal") (destroy_with_parent::guint "destroy_with_parent") (has_frame::guint "has_frame") (iconify_initially::guint "iconify_initially") (stick_initially::guint "stick_initially") (maximize_initially::guint "maximize_initially") (decorated::guint "decorated") (type_hint::guint "type_hint") (gravity::guint "gravity") (is_active::guint "is_active") (has_toplevel_focus::guint "has_toplevel_focus") (frame_left::guint "frame_left") (frame_top::guint "frame_top") (frame_right::guint "frame_right") (frame_bottom::guint "frame_bottom") (keys_changed_handler::guint "keys_changed_handler") (mnemonic_modifier::GdkModifierType "mnemonic_modifier") (screen::GdkScreen* "screen")) "struct _GtkWindow")
    (type GtkWindow s-_GtkWindow "GtkWindow")
    (type s-_GtkWindowClass (struct (parent_class::GtkBinClass "parent_class") (set_focus::*GtkWindow*,GtkWidget*->void "set_focus") (frame_event::*GtkWindow*,GdkEvent*->gboolean "frame_event") (activate_focus::*GtkWindow*->void "activate_focus") (activate_default::*GtkWindow*->void "activate_default") (move_focus::*GtkWindow*,GtkDirectionType->void "move_focus") (keys_changed::*GtkWindow*->void "keys_changed") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkWindowClass")
    (type GtkWindowClass s-_GtkWindowClass "GtkWindowClass")
    (type s-_GtkWindowGeometryInfo (struct) "struct _GtkWindowGeometryInfo")
    (type GtkWindowGeometryInfo s-_GtkWindowGeometryInfo "GtkWindowGeometryInfo")
    (type s-_GtkWindowGroup (struct (parent_instance::GObject "parent_instance") (grabs::GSList* "grabs")) "struct _GtkWindowGroup")
    (type GtkWindowGroup s-_GtkWindowGroup "GtkWindowGroup")
    (type s-_GtkWindowGroupClass (struct (parent_class::GObjectClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkWindowGroupClass")
    (type GtkWindowGroupClass s-_GtkWindowGroupClass "GtkWindowGroupClass")
    (type GtkWindow*,GtkWidget*->void "void ($(GtkWindow *,GtkWidget *))")
    (type *GtkWindow*,GtkWidget*->void (function void (GtkWindow* GtkWidget*)) "void ((*$)(GtkWindow *,GtkWidget *))")
    (type GtkWindow*,GdkEvent*->gboolean "gboolean ($(GtkWindow *,GdkEvent *))")
    (type *GtkWindow*,GdkEvent*->gboolean (function gboolean (GtkWindow* GdkEvent*)) "gboolean ((*$)(GtkWindow *,GdkEvent *))")
    (type GtkWindow*->void "void ($(GtkWindow *))")
    (type *GtkWindow*->void (function void (GtkWindow*)) "void ((*$)(GtkWindow *))")
    (type GtkWindow*,GtkDirectionType->void "void ($(GtkWindow *,GtkDirectionType))")
    (type *GtkWindow*,GtkDirectionType->void (function void (GtkWindow* GtkDirectionType)) "void ((*$)(GtkWindow *,GtkDirectionType))")
    (type GtkWindow*,guint,GdkModifierType,gboolean,gpointer->void "void ($(GtkWindow *,guint,GdkModifierType,gboolean,gpointer))")
    (type *GtkWindow*,guint,GdkModifierType,gboolean,gpointer->void (function void (GtkWindow* guint GdkModifierType gboolean gpointer)) "void ((*$)(GtkWindow *,guint,GdkModifierType,gboolean,gpointer))")
    (type GtkWindowKeysForeachFunc *GtkWindow*,guint,GdkModifierType,gboolean,gpointer->void "GtkWindowKeysForeachFunc")
    (type monster__e1189 int "long")
    (macro GTK_DIALOG_MODAL::int "GTK_DIALOG_MODAL")
    (macro GTK_DIALOG_DESTROY_WITH_PARENT::int "GTK_DIALOG_DESTROY_WITH_PARENT")
    (macro GTK_DIALOG_NO_SEPARATOR::int "GTK_DIALOG_NO_SEPARATOR")
    (type GtkDialogFlags monster__e1189 "GtkDialogFlags")
    (type monster__e1190 int "long")
    (macro GTK_RESPONSE_NONE::int "GTK_RESPONSE_NONE")
    (macro GTK_RESPONSE_REJECT::int "GTK_RESPONSE_REJECT")
    (macro GTK_RESPONSE_ACCEPT::int "GTK_RESPONSE_ACCEPT")
    (macro GTK_RESPONSE_DELETE_EVENT::int "GTK_RESPONSE_DELETE_EVENT")
    (macro GTK_RESPONSE_OK::int "GTK_RESPONSE_OK")
    (macro GTK_RESPONSE_CANCEL::int "GTK_RESPONSE_CANCEL")
    (macro GTK_RESPONSE_CLOSE::int "GTK_RESPONSE_CLOSE")
    (macro GTK_RESPONSE_YES::int "GTK_RESPONSE_YES")
    (macro GTK_RESPONSE_NO::int "GTK_RESPONSE_NO")
    (macro GTK_RESPONSE_APPLY::int "GTK_RESPONSE_APPLY")
    (macro GTK_RESPONSE_HELP::int "GTK_RESPONSE_HELP")
    (type GtkResponseType monster__e1190 "GtkResponseType")
    (type s-_GtkDialog (struct (window::GtkWindow "window") (vbox::GtkWidget* "vbox") (action_area::GtkWidget* "action_area") (separator::GtkWidget* "separator")) "struct _GtkDialog")
    (type GtkDialog s-_GtkDialog "GtkDialog")
    (type s-_GtkDialogClass (struct (parent_class::GtkWindowClass "parent_class") (response::*GtkDialog*,gint->void "response") (close::*GtkDialog*->void "close") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkDialogClass")
    (type GtkDialogClass s-_GtkDialogClass "GtkDialogClass")
    (type GtkDialog*,gint->void "void ($(GtkDialog *,gint))")
    (type *GtkDialog*,gint->void (function void (GtkDialog* gint)) "void ((*$)(GtkDialog *,gint))")
    (type GtkDialog*->void "void ($(GtkDialog *))")
    (type *GtkDialog*->void (function void (GtkDialog*)) "void ((*$)(GtkDialog *))")
    (type s-_GtkAboutDialog (struct (parent_instance::GtkDialog "parent_instance") (private_data::gpointer "private_data")) "struct _GtkAboutDialog")
    (type GtkAboutDialog s-_GtkAboutDialog "GtkAboutDialog")
    (type s-_GtkAboutDialogClass (struct (parent_class::GtkDialogClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkAboutDialogClass")
    (type GtkAboutDialogClass s-_GtkAboutDialogClass "GtkAboutDialogClass")
    (type GtkAboutDialog*,gchar*,gpointer->void "void ($(GtkAboutDialog *,gchar *,gpointer))")
    (type *GtkAboutDialog*,gchar*,gpointer->void (function void (GtkAboutDialog* gchar* gpointer)) "void ((*$)(GtkAboutDialog *,gchar *,gpointer))")
    (type GtkAboutDialogActivateLinkFunc *GtkAboutDialog*,gchar*,gpointer->void "GtkAboutDialogActivateLinkFunc")
    (type s-_GtkMisc (struct (widget::GtkWidget "widget") (xalign::gfloat "xalign") (yalign::gfloat "yalign") (xpad::guint16 "xpad") (ypad::guint16 "ypad")) "struct _GtkMisc")
    (type GtkMisc s-_GtkMisc "GtkMisc")
    (type s-_GtkMiscClass (struct (parent_class::GtkWidgetClass "parent_class")) "struct _GtkMiscClass")
    (type GtkMiscClass s-_GtkMiscClass "GtkMiscClass")
    (type s-_GtkMenuShell (struct (container::GtkContainer "container") (children::GList* "children") (active_menu_item::GtkWidget* "active_menu_item") (parent_menu_shell::GtkWidget* "parent_menu_shell") (button::guint "button") (activate_time::guint32 "activate_time") (active::guint "active") (have_grab::guint "have_grab") (have_xgrab::guint "have_xgrab") (ignore_leave::guint "ignore_leave") (menu_flag::guint "menu_flag") (ignore_enter::guint "ignore_enter")) "struct _GtkMenuShell")
    (type GtkMenuShell s-_GtkMenuShell "GtkMenuShell")
    (type s-_GtkMenuShellClass (struct (parent_class::GtkContainerClass "parent_class") (submenu_placement::guint "submenu_placement") (deactivate::*GtkMenuShell*->void "deactivate") (selection_done::*GtkMenuShell*->void "selection_done") (move_current::*GtkMenuShell*,GtkMenuDirectionType->void "move_current") (activate_current::*GtkMenuShell*,gboolean->void "activate_current") (cancel::*GtkMenuShell*->void "cancel") (select_item::*GtkMenuShell*,GtkWidget*->void "select_item") (insert::*GtkMenuShell*,GtkWidget*,gint->void "insert") (get_popup_delay::*GtkMenuShell*->gint "get_popup_delay") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3")) "struct _GtkMenuShellClass")
    (type GtkMenuShellClass s-_GtkMenuShellClass "GtkMenuShellClass")
    (type GtkMenuShell*->void "void ($(GtkMenuShell *))")
    (type *GtkMenuShell*->void (function void (GtkMenuShell*)) "void ((*$)(GtkMenuShell *))")
    (type GtkMenuShell*,GtkMenuDirectionType->void "void ($(GtkMenuShell *,GtkMenuDirectionType))")
    (type *GtkMenuShell*,GtkMenuDirectionType->void (function void (GtkMenuShell* GtkMenuDirectionType)) "void ((*$)(GtkMenuShell *,GtkMenuDirectionType))")
    (type GtkMenuShell*,gboolean->void "void ($(GtkMenuShell *,gboolean))")
    (type *GtkMenuShell*,gboolean->void (function void (GtkMenuShell* gboolean)) "void ((*$)(GtkMenuShell *,gboolean))")
    (type GtkMenuShell*,GtkWidget*->void "void ($(GtkMenuShell *,GtkWidget *))")
    (type *GtkMenuShell*,GtkWidget*->void (function void (GtkMenuShell* GtkWidget*)) "void ((*$)(GtkMenuShell *,GtkWidget *))")
    (type GtkMenuShell*,GtkWidget*,gint->void "void ($(GtkMenuShell *,GtkWidget *,gint))")
    (type *GtkMenuShell*,GtkWidget*,gint->void (function void (GtkMenuShell* GtkWidget* gint)) "void ((*$)(GtkMenuShell *,GtkWidget *,gint))")
    (type GtkMenuShell*->gint "gint ($(GtkMenuShell *))")
    (type *GtkMenuShell*->gint (function gint (GtkMenuShell*)) "gint ((*$)(GtkMenuShell *))")
    (type s-_GtkMenu (struct (menu_shell::GtkMenuShell "menu_shell") (parent_menu_item::GtkWidget* "parent_menu_item") (old_active_menu_item::GtkWidget* "old_active_menu_item") (accel_group::GtkAccelGroup* "accel_group") (accel_path::gchar* "accel_path") (position_func::GtkMenuPositionFunc "position_func") (position_func_data::gpointer "position_func_data") (toggle_size::guint "toggle_size") (toplevel::GtkWidget* "toplevel") (tearoff_window::GtkWidget* "tearoff_window") (tearoff_hbox::GtkWidget* "tearoff_hbox") (tearoff_scrollbar::GtkWidget* "tearoff_scrollbar") (tearoff_adjustment::GtkAdjustment* "tearoff_adjustment") (view_window::GdkWindow* "view_window") (bin_window::GdkWindow* "bin_window") (scroll_offset::gint "scroll_offset") (saved_scroll_offset::gint "saved_scroll_offset") (scroll_step::gint "scroll_step") (timeout_id::guint "timeout_id") (navigation_region::GdkRegion* "navigation_region") (navigation_timeout::guint "navigation_timeout") (needs_destruction_ref_count::guint "needs_destruction_ref_count") (torn_off::guint "torn_off") (tearoff_active::guint "tearoff_active") (scroll_fast::guint "scroll_fast") (upper_arrow_visible::guint "upper_arrow_visible") (lower_arrow_visible::guint "lower_arrow_visible") (upper_arrow_prelight::guint "upper_arrow_prelight") (lower_arrow_prelight::guint "lower_arrow_prelight")) "struct _GtkMenu")
    (type GtkMenu s-_GtkMenu "GtkMenu")
    (type s-_GtkMenuClass (struct (parent_class::GtkMenuShellClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkMenuClass")
    (type GtkMenuClass s-_GtkMenuClass "GtkMenuClass")
    (type gboolean* (pointer gboolean) "gboolean *")
    (type GtkMenu*,gint*,gint*,gboolean*,gpointer->void "void ($(GtkMenu *,gint *,gint *,gboolean *,gpointer))")
    (type *GtkMenu*,gint*,gint*,gboolean*,gpointer->void (function void (GtkMenu* gint* gint* gboolean* gpointer)) "void ((*$)(GtkMenu *,gint *,gint *,gboolean *,gpointer))")
    (type GtkMenuPositionFunc *GtkMenu*,gint*,gint*,gboolean*,gpointer->void "GtkMenuPositionFunc")
    (type GtkWidget*,GtkMenu*->void "void ($(GtkWidget *,GtkMenu *))")
    (type *GtkWidget*,GtkMenu*->void (function void (GtkWidget* GtkMenu*)) "void ((*$)(GtkWidget *,GtkMenu *))")
    (type GtkMenuDetachFunc *GtkWidget*,GtkMenu*->void "GtkMenuDetachFunc")
    (type s-_GtkLabel (struct (misc::GtkMisc "misc") (label::gchar* "label") (jtype::guint "jtype") (wrap::guint "wrap") (use_underline::guint "use_underline") (use_markup::guint "use_markup") (ellipsize::guint "ellipsize") (mnemonic_keyval::guint "mnemonic_keyval") (text::gchar* "text") (attrs::PangoAttrList* "attrs") (effective_attrs::PangoAttrList* "effective_attrs") (layout::PangoLayout* "layout") (mnemonic_widget::GtkWidget* "mnemonic_widget") (mnemonic_window::GtkWindow* "mnemonic_window") (select_info::GtkLabelSelectionInfo* "select_info")) "struct _GtkLabel")
    (type GtkLabel s-_GtkLabel "GtkLabel")
    (type s-_GtkLabelClass (struct (parent_class::GtkMiscClass "parent_class") (move_cursor::*GtkLabel*,GtkMovementStep,gint,gboolean->void "move_cursor") (copy_clipboard::*GtkLabel*->void "copy_clipboard") (populate_popup::*GtkLabel*,GtkMenu*->void "populate_popup") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkLabelClass")
    (type GtkLabelClass s-_GtkLabelClass "GtkLabelClass")
    (type s-_GtkLabelSelectionInfo (struct) "struct _GtkLabelSelectionInfo")
    (type GtkLabelSelectionInfo s-_GtkLabelSelectionInfo "GtkLabelSelectionInfo")
    (type GtkLabel*,GtkMovementStep,gint,gboolean->void "void ($(GtkLabel *,GtkMovementStep,gint,gboolean))")
    (type *GtkLabel*,GtkMovementStep,gint,gboolean->void (function void (GtkLabel* GtkMovementStep gint gboolean)) "void ((*$)(GtkLabel *,GtkMovementStep,gint,gboolean))")
    (type GtkLabel*->void "void ($(GtkLabel *))")
    (type *GtkLabel*->void (function void (GtkLabel*)) "void ((*$)(GtkLabel *))")
    (type GtkLabel*,GtkMenu*->void "void ($(GtkLabel *,GtkMenu *))")
    (type *GtkLabel*,GtkMenu*->void (function void (GtkLabel* GtkMenu*)) "void ((*$)(GtkLabel *,GtkMenu *))")
    (type s-_GtkAccelLabel (struct (label::GtkLabel "label") (gtk_reserved::guint "gtk_reserved") (accel_padding::guint "accel_padding") (accel_widget::GtkWidget* "accel_widget") (accel_closure::GClosure* "accel_closure") (accel_group::GtkAccelGroup* "accel_group") (accel_string::gchar* "accel_string") (accel_string_width::guint16 "accel_string_width")) "struct _GtkAccelLabel")
    (type GtkAccelLabel s-_GtkAccelLabel "GtkAccelLabel")
    (type s-_GtkAccelLabelClass (struct (parent_class::GtkLabelClass "parent_class") (signal_quote1::gchar* "signal_quote1") (signal_quote2::gchar* "signal_quote2") (mod_name_shift::gchar* "mod_name_shift") (mod_name_control::gchar* "mod_name_control") (mod_name_alt::gchar* "mod_name_alt") (mod_separator::gchar* "mod_separator") (accel_seperator::gchar* "accel_seperator") (latin1_to_char::guint "latin1_to_char") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkAccelLabelClass")
    (type GtkAccelLabelClass s-_GtkAccelLabelClass "GtkAccelLabelClass")
    (type s-_GtkAccelMap (struct) "struct _GtkAccelMap")
    (type GtkAccelMap s-_GtkAccelMap "GtkAccelMap")
    (type s-_GtkAccelMapClass (struct) "struct _GtkAccelMapClass")
    (type GtkAccelMapClass s-_GtkAccelMapClass "GtkAccelMapClass")
    (type gpointer,gchar*,guint,GdkModifierType,gboolean->void "void ($(gpointer,gchar *,guint,GdkModifierType,gboolean))")
    (type *gpointer,gchar*,guint,GdkModifierType,gboolean->void (function void (gpointer gchar* guint GdkModifierType gboolean)) "void ((*$)(gpointer,gchar *,guint,GdkModifierType,gboolean))")
    (type GtkAccelMapForeach *gpointer,gchar*,guint,GdkModifierType,gboolean->void "GtkAccelMapForeach")
    (type s-_AtkAction (struct) "struct _AtkAction")
    (type AtkAction s-_AtkAction "AtkAction")
    (type s-_AtkActionIface (struct (parent::GTypeInterface "parent") (do_action::*AtkAction*,gint->gboolean "do_action") (get_n_actions::*AtkAction*->gint "get_n_actions") (get_description::*AtkAction*,gint->gchar* "get_description") (get_name::*AtkAction*,gint->gchar* "get_name") (get_keybinding::*AtkAction*,gint->gchar* "get_keybinding") (set_description::*AtkAction*,gint,gchar*->gboolean "set_description") (get_localized_name::*AtkAction*,gint->gchar* "get_localized_name") (pad2::AtkFunction "pad2")) "struct _AtkActionIface")
    (type AtkActionIface s-_AtkActionIface "AtkActionIface")
    (type AtkAction*,gint->gboolean "gboolean ($(AtkAction *,gint))")
    (type *AtkAction*,gint->gboolean (function gboolean (AtkAction* gint)) "gboolean ((*$)(AtkAction *,gint))")
    (type AtkAction*->gint "gint ($(AtkAction *))")
    (type *AtkAction*->gint (function gint (AtkAction*)) "gint ((*$)(AtkAction *))")
    (type AtkAction*,gint->gchar* "gchar *($(AtkAction *,gint))")
    (type *AtkAction*,gint->gchar* (function gchar* (AtkAction* gint)) "gchar *((*$)(AtkAction *,gint))")
    (type AtkAction*,gint,gchar*->gboolean "gboolean ($(AtkAction *,gint,gchar *))")
    (type *AtkAction*,gint,gchar*->gboolean (function gboolean (AtkAction* gint gchar*)) "gboolean ((*$)(AtkAction *,gint,gchar *))")
    (type s-_AtkUtil (struct (parent::GObject "parent")) "struct _AtkUtil")
    (type AtkUtil s-_AtkUtil "AtkUtil")
    (type s-_AtkUtilClass (struct (parent::GObjectClass "parent") (add_global_event_listener::*GSignalEmissionHook,gchar*->guint "add_global_event_listener") (remove_global_event_listener::*guint->void "remove_global_event_listener") (add_key_event_listener::*AtkKeySnoopFunc,gpointer->guint "add_key_event_listener") (remove_key_event_listener::*guint->void "remove_key_event_listener") (get_root::*void->AtkObject* "get_root") (get_toolkit_name::*void->gchar* "get_toolkit_name") (get_toolkit_version::*void->gchar* "get_toolkit_version")) "struct _AtkUtilClass")
    (type AtkUtilClass s-_AtkUtilClass "AtkUtilClass")
    (type s-_AtkKeyEventStruct (struct (type::gint "type") (state::guint "state") (keyval::guint "keyval") (length::gint "length") (string::gchar* "string") (keycode::guint16 "keycode") (timestamp::guint32 "timestamp")) "struct _AtkKeyEventStruct")
    (type AtkKeyEventStruct s-_AtkKeyEventStruct "AtkKeyEventStruct")
    (type AtkEventListener *AtkObject*->void "AtkEventListener")
    (type AtkEventListenerInit *void->void "AtkEventListenerInit")
    (type AtkKeyEventStruct*,gpointer->gint "gint ($(AtkKeyEventStruct *,gpointer))")
    (type *AtkKeyEventStruct*,gpointer->gint (function gint (AtkKeyEventStruct* gpointer)) "gint ((*$)(AtkKeyEventStruct *,gpointer))")
    (type AtkKeySnoopFunc *AtkKeyEventStruct*,gpointer->gint "AtkKeySnoopFunc")
    (type monster__e1191 int "long")
    (macro ATK_KEY_EVENT_PRESS::int "ATK_KEY_EVENT_PRESS")
    (macro ATK_KEY_EVENT_RELEASE::int "ATK_KEY_EVENT_RELEASE")
    (macro ATK_KEY_EVENT_LAST_DEFINED::int "ATK_KEY_EVENT_LAST_DEFINED")
    (type AtkKeyEventType monster__e1191 "AtkKeyEventType")
    (type GSignalEmissionHook,gchar*->guint "guint ($(GSignalEmissionHook,gchar *))")
    (type *GSignalEmissionHook,gchar*->guint (function guint (GSignalEmissionHook gchar*)) "guint ((*$)(GSignalEmissionHook,gchar *))")
    (type guint->void "void ($(guint))")
    (type *guint->void (function void (guint)) "void ((*$)(guint))")
    (type AtkKeySnoopFunc,gpointer->guint "guint ($(AtkKeySnoopFunc,gpointer))")
    (type *AtkKeySnoopFunc,gpointer->guint (function guint (AtkKeySnoopFunc gpointer)) "guint ((*$)(AtkKeySnoopFunc,gpointer))")
    (type void->AtkObject* "AtkObject *($(void))")
    (type *void->AtkObject* (function AtkObject* (void)) "AtkObject *((*$)(void))")
    (type void->gchar* "gchar *($(void))")
    (type *void->gchar* (function gchar* (void)) "gchar *((*$)(void))")
    (type monster__e1192 int "long")
    (macro ATK_XY_SCREEN::int "ATK_XY_SCREEN")
    (macro ATK_XY_WINDOW::int "ATK_XY_WINDOW")
    (type AtkCoordType monster__e1192 "AtkCoordType")
    (type s-_AtkComponent (struct) "struct _AtkComponent")
    (type AtkComponent s-_AtkComponent "AtkComponent")
    (type s-_AtkComponentIface (struct (parent::GTypeInterface "parent") (add_focus_handler::*AtkComponent*,AtkFocusHandler->guint "add_focus_handler") (contains::*AtkComponent*,gint,gint,AtkCoordType->gboolean "contains") (ref_accessible_at_point::*AtkComponent*,gint,gint,AtkCoordType->AtkObject* "ref_accessible_at_point") (get_extents::*AtkComponent*,gint*,gint*,gint*,gint*,AtkCoordType->void "get_extents") (get_position::*AtkComponent*,gint*,gint*,AtkCoordType->void "get_position") (get_size::*AtkComponent*,gint*,gint*->void "get_size") (grab_focus::*AtkComponent*->gboolean "grab_focus") (remove_focus_handler::*AtkComponent*,guint->void "remove_focus_handler") (set_extents::*AtkComponent*,gint,gint,gint,gint,AtkCoordType->gboolean "set_extents") (set_position::*AtkComponent*,gint,gint,AtkCoordType->gboolean "set_position") (set_size::*AtkComponent*,gint,gint->gboolean "set_size") (get_layer::*AtkComponent*->AtkLayer "get_layer") (get_mdi_zorder::*AtkComponent*->gint "get_mdi_zorder") (bounds_changed::*AtkComponent*,AtkRectangle*->void "bounds_changed") (pad2::AtkFunction "pad2")) "struct _AtkComponentIface")
    (type AtkComponentIface s-_AtkComponentIface "AtkComponentIface")
    (type AtkFocusHandler *AtkObject*,gboolean->void "AtkFocusHandler")
    (type s-_AtkRectangle (struct (x::gint "x") (y::gint "y") (width::gint "width") (height::gint "height")) "struct _AtkRectangle")
    (type AtkRectangle s-_AtkRectangle "AtkRectangle")
    (type AtkComponent*,AtkFocusHandler->guint "guint ($(AtkComponent *,AtkFocusHandler))")
    (type *AtkComponent*,AtkFocusHandler->guint (function guint (AtkComponent* AtkFocusHandler)) "guint ((*$)(AtkComponent *,AtkFocusHandler))")
    (type AtkComponent*,gint,gint,AtkCoordType->gboolean "gboolean ($(AtkComponent *,gint,gint,AtkCoordType))")
    (type *AtkComponent*,gint,gint,AtkCoordType->gboolean (function gboolean (AtkComponent* gint gint AtkCoordType)) "gboolean ((*$)(AtkComponent *,gint,gint,AtkCoordType))")
    (type AtkComponent*,gint,gint,AtkCoordType->AtkObject* "AtkObject *($(AtkComponent *,gint,gint,AtkCoordType))")
    (type *AtkComponent*,gint,gint,AtkCoordType->AtkObject* (function AtkObject* (AtkComponent* gint gint AtkCoordType)) "AtkObject *((*$)(AtkComponent *,gint,gint,AtkCoordType))")
    (type AtkComponent*,gint*,gint*,gint*,gint*,AtkCoordType->void "void ($(AtkComponent *,gint *,gint *,gint *,gint *,AtkCoordType))")
    (type *AtkComponent*,gint*,gint*,gint*,gint*,AtkCoordType->void (function void (AtkComponent* gint* gint* gint* gint* AtkCoordType)) "void ((*$)(AtkComponent *,gint *,gint *,gint *,gint *,AtkCoordType))")
    (type AtkComponent*,gint*,gint*,AtkCoordType->void "void ($(AtkComponent *,gint *,gint *,AtkCoordType))")
    (type *AtkComponent*,gint*,gint*,AtkCoordType->void (function void (AtkComponent* gint* gint* AtkCoordType)) "void ((*$)(AtkComponent *,gint *,gint *,AtkCoordType))")
    (type AtkComponent*,gint*,gint*->void "void ($(AtkComponent *,gint *,gint *))")
    (type *AtkComponent*,gint*,gint*->void (function void (AtkComponent* gint* gint*)) "void ((*$)(AtkComponent *,gint *,gint *))")
    (type AtkComponent*->gboolean "gboolean ($(AtkComponent *))")
    (type *AtkComponent*->gboolean (function gboolean (AtkComponent*)) "gboolean ((*$)(AtkComponent *))")
    (type AtkComponent*,guint->void "void ($(AtkComponent *,guint))")
    (type *AtkComponent*,guint->void (function void (AtkComponent* guint)) "void ((*$)(AtkComponent *,guint))")
    (type AtkComponent*,gint,gint,gint,gint,AtkCoordType->gboolean "gboolean ($(AtkComponent *,gint,gint,gint,gint,AtkCoordType))")
    (type *AtkComponent*,gint,gint,gint,gint,AtkCoordType->gboolean (function gboolean (AtkComponent* gint gint gint gint AtkCoordType)) "gboolean ((*$)(AtkComponent *,gint,gint,gint,gint,AtkCoordType))")
    (type AtkComponent*,gint,gint->gboolean "gboolean ($(AtkComponent *,gint,gint))")
    (type *AtkComponent*,gint,gint->gboolean (function gboolean (AtkComponent* gint gint)) "gboolean ((*$)(AtkComponent *,gint,gint))")
    (type AtkComponent*->AtkLayer "AtkLayer ($(AtkComponent *))")
    (type *AtkComponent*->AtkLayer (function AtkLayer (AtkComponent*)) "AtkLayer ((*$)(AtkComponent *))")
    (type AtkComponent*->gint "gint ($(AtkComponent *))")
    (type *AtkComponent*->gint (function gint (AtkComponent*)) "gint ((*$)(AtkComponent *))")
    (type AtkComponent*,AtkRectangle*->void "void ($(AtkComponent *,AtkRectangle *))")
    (type *AtkComponent*,AtkRectangle*->void (function void (AtkComponent* AtkRectangle*)) "void ((*$)(AtkComponent *,AtkRectangle *))")
    (type s-_AtkDocument (struct) "struct _AtkDocument")
    (type AtkDocument s-_AtkDocument "AtkDocument")
    (type s-_AtkDocumentIface (struct (parent::GTypeInterface "parent") (get_document_type::*AtkDocument*->gchar* "get_document_type") (get_document::*AtkDocument*->gpointer "get_document") (pad1::AtkFunction "pad1") (pad2::AtkFunction "pad2") (pad3::AtkFunction "pad3") (pad4::AtkFunction "pad4") (pad5::AtkFunction "pad5") (pad6::AtkFunction "pad6") (pad7::AtkFunction "pad7") (pad8::AtkFunction "pad8")) "struct _AtkDocumentIface")
    (type AtkDocumentIface s-_AtkDocumentIface "AtkDocumentIface")
    (type AtkDocument*->gchar* "gchar *($(AtkDocument *))")
    (type *AtkDocument*->gchar* (function gchar* (AtkDocument*)) "gchar *((*$)(AtkDocument *))")
    (type AtkDocument*->gpointer "gpointer ($(AtkDocument *))")
    (type *AtkDocument*->gpointer (function gpointer (AtkDocument*)) "gpointer ((*$)(AtkDocument *))")
    (type AtkAttributeSet GSList "AtkAttributeSet")
    (type s-_AtkAttribute (struct (name::gchar* "name") (value::gchar* "value")) "struct _AtkAttribute")
    (type AtkAttribute s-_AtkAttribute "AtkAttribute")
    (type monster__e1193 int "long")
    (macro ATK_TEXT_ATTR_INVALID::int "ATK_TEXT_ATTR_INVALID")
    (macro ATK_TEXT_ATTR_LEFT_MARGIN::int "ATK_TEXT_ATTR_LEFT_MARGIN")
    (macro ATK_TEXT_ATTR_RIGHT_MARGIN::int "ATK_TEXT_ATTR_RIGHT_MARGIN")
    (macro ATK_TEXT_ATTR_INDENT::int "ATK_TEXT_ATTR_INDENT")
    (macro ATK_TEXT_ATTR_INVISIBLE::int "ATK_TEXT_ATTR_INVISIBLE")
    (macro ATK_TEXT_ATTR_EDITABLE::int "ATK_TEXT_ATTR_EDITABLE")
    (macro ATK_TEXT_ATTR_PIXELS_ABOVE_LINES::int "ATK_TEXT_ATTR_PIXELS_ABOVE_LINES")
    (macro ATK_TEXT_ATTR_PIXELS_BELOW_LINES::int "ATK_TEXT_ATTR_PIXELS_BELOW_LINES")
    (macro ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP::int "ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP")
    (macro ATK_TEXT_ATTR_BG_FULL_HEIGHT::int "ATK_TEXT_ATTR_BG_FULL_HEIGHT")
    (macro ATK_TEXT_ATTR_RISE::int "ATK_TEXT_ATTR_RISE")
    (macro ATK_TEXT_ATTR_UNDERLINE::int "ATK_TEXT_ATTR_UNDERLINE")
    (macro ATK_TEXT_ATTR_STRIKETHROUGH::int "ATK_TEXT_ATTR_STRIKETHROUGH")
    (macro ATK_TEXT_ATTR_SIZE::int "ATK_TEXT_ATTR_SIZE")
    (macro ATK_TEXT_ATTR_SCALE::int "ATK_TEXT_ATTR_SCALE")
    (macro ATK_TEXT_ATTR_WEIGHT::int "ATK_TEXT_ATTR_WEIGHT")
    (macro ATK_TEXT_ATTR_LANGUAGE::int "ATK_TEXT_ATTR_LANGUAGE")
    (macro ATK_TEXT_ATTR_FAMILY_NAME::int "ATK_TEXT_ATTR_FAMILY_NAME")
    (macro ATK_TEXT_ATTR_BG_COLOR::int "ATK_TEXT_ATTR_BG_COLOR")
    (macro ATK_TEXT_ATTR_FG_COLOR::int "ATK_TEXT_ATTR_FG_COLOR")
    (macro ATK_TEXT_ATTR_BG_STIPPLE::int "ATK_TEXT_ATTR_BG_STIPPLE")
    (macro ATK_TEXT_ATTR_FG_STIPPLE::int "ATK_TEXT_ATTR_FG_STIPPLE")
    (macro ATK_TEXT_ATTR_WRAP_MODE::int "ATK_TEXT_ATTR_WRAP_MODE")
    (macro ATK_TEXT_ATTR_DIRECTION::int "ATK_TEXT_ATTR_DIRECTION")
    (macro ATK_TEXT_ATTR_JUSTIFICATION::int "ATK_TEXT_ATTR_JUSTIFICATION")
    (macro ATK_TEXT_ATTR_STRETCH::int "ATK_TEXT_ATTR_STRETCH")
    (macro ATK_TEXT_ATTR_VARIANT::int "ATK_TEXT_ATTR_VARIANT")
    (macro ATK_TEXT_ATTR_STYLE::int "ATK_TEXT_ATTR_STYLE")
    (macro ATK_TEXT_ATTR_LAST_DEFINED::int "ATK_TEXT_ATTR_LAST_DEFINED")
    (type AtkTextAttribute monster__e1193 "AtkTextAttribute")
    (type s-_AtkText (struct) "struct _AtkText")
    (type AtkText s-_AtkText "AtkText")
    (type s-_AtkTextIface (struct (parent::GTypeInterface "parent") (get_text::*AtkText*,gint,gint->gchar* "get_text") (get_text_after_offset::*AtkText*,gint,AtkTextBoundary,gint*,gint*->gchar* "get_text_after_offset") (get_text_at_offset::*AtkText*,gint,AtkTextBoundary,gint*,gint*->gchar* "get_text_at_offset") (get_character_at_offset::*AtkText*,gint->gunichar "get_character_at_offset") (get_text_before_offset::*AtkText*,gint,AtkTextBoundary,gint*,gint*->gchar* "get_text_before_offset") (get_caret_offset::*AtkText*->gint "get_caret_offset") (get_run_attributes::*AtkText*,gint,gint*,gint*->AtkAttributeSet* "get_run_attributes") (get_default_attributes::*AtkText*->AtkAttributeSet* "get_default_attributes") (get_character_extents::*AtkText*,gint,gint*,gint*,gint*,gint*,AtkCoordType->void "get_character_extents") (get_character_count::*AtkText*->gint "get_character_count") (get_offset_at_point::*AtkText*,gint,gint,AtkCoordType->gint "get_offset_at_point") (get_n_selections::*AtkText*->gint "get_n_selections") (get_selection::*AtkText*,gint,gint*,gint*->gchar* "get_selection") (add_selection::*AtkText*,gint,gint->gboolean "add_selection") (remove_selection::*AtkText*,gint->gboolean "remove_selection") (set_selection::*AtkText*,gint,gint,gint->gboolean "set_selection") (set_caret_offset::*AtkText*,gint->gboolean "set_caret_offset") (text_changed::*AtkText*,gint,gint->void "text_changed") (text_caret_moved::*AtkText*,gint->void "text_caret_moved") (text_selection_changed::*AtkText*->void "text_selection_changed") (text_attributes_changed::*AtkText*->void "text_attributes_changed") (get_range_extents::*AtkText*,gint,gint,AtkCoordType,AtkTextRectangle*->void "get_range_extents") (get_bounded_ranges::*AtkText*,AtkTextRectangle*,AtkCoordType,AtkTextClipType,AtkTextClipType->AtkTextRange** "get_bounded_ranges") (pad4::AtkFunction "pad4")) "struct _AtkTextIface")
    (type AtkTextIface s-_AtkTextIface "AtkTextIface")
    (type monster__e1194 int "long")
    (macro ATK_TEXT_BOUNDARY_CHAR::int "ATK_TEXT_BOUNDARY_CHAR")
    (macro ATK_TEXT_BOUNDARY_WORD_START::int "ATK_TEXT_BOUNDARY_WORD_START")
    (macro ATK_TEXT_BOUNDARY_WORD_END::int "ATK_TEXT_BOUNDARY_WORD_END")
    (macro ATK_TEXT_BOUNDARY_SENTENCE_START::int "ATK_TEXT_BOUNDARY_SENTENCE_START")
    (macro ATK_TEXT_BOUNDARY_SENTENCE_END::int "ATK_TEXT_BOUNDARY_SENTENCE_END")
    (macro ATK_TEXT_BOUNDARY_LINE_START::int "ATK_TEXT_BOUNDARY_LINE_START")
    (macro ATK_TEXT_BOUNDARY_LINE_END::int "ATK_TEXT_BOUNDARY_LINE_END")
    (type AtkTextBoundary monster__e1194 "AtkTextBoundary")
    (type s-_AtkTextRectangle (struct (x::gint "x") (y::gint "y") (width::gint "width") (height::gint "height")) "struct _AtkTextRectangle")
    (type AtkTextRectangle s-_AtkTextRectangle "AtkTextRectangle")
    (type s-_AtkTextRange (struct (bounds::AtkTextRectangle "bounds") (start_offset::gint "start_offset") (end_offset::gint "end_offset") (content::gchar* "content")) "struct _AtkTextRange")
    (type AtkTextRange s-_AtkTextRange "AtkTextRange")
    (type monster__e1195 int "long")
    (macro ATK_TEXT_CLIP_NONE::int "ATK_TEXT_CLIP_NONE")
    (macro ATK_TEXT_CLIP_MIN::int "ATK_TEXT_CLIP_MIN")
    (macro ATK_TEXT_CLIP_MAX::int "ATK_TEXT_CLIP_MAX")
    (macro ATK_TEXT_CLIP_BOTH::int "ATK_TEXT_CLIP_BOTH")
    (type AtkTextClipType monster__e1195 "AtkTextClipType")
    (type AtkText*,gint,gint->gchar* "gchar *($(AtkText *,gint,gint))")
    (type *AtkText*,gint,gint->gchar* (function gchar* (AtkText* gint gint)) "gchar *((*$)(AtkText *,gint,gint))")
    (type AtkText*,gint,AtkTextBoundary,gint*,gint*->gchar* "gchar *($(AtkText *,gint,AtkTextBoundary,gint *,gint *))")
    (type *AtkText*,gint,AtkTextBoundary,gint*,gint*->gchar* (function gchar* (AtkText* gint AtkTextBoundary gint* gint*)) "gchar *((*$)(AtkText *,gint,AtkTextBoundary,gint *,gint *))")
    (type AtkText*,gint->gunichar "gunichar ($(AtkText *,gint))")
    (type *AtkText*,gint->gunichar (function gunichar (AtkText* gint)) "gunichar ((*$)(AtkText *,gint))")
    (type AtkText*->gint "gint ($(AtkText *))")
    (type *AtkText*->gint (function gint (AtkText*)) "gint ((*$)(AtkText *))")
    (type AtkText*,gint,gint*,gint*->AtkAttributeSet* "AtkAttributeSet *($(AtkText *,gint,gint *,gint *))")
    (type *AtkText*,gint,gint*,gint*->AtkAttributeSet* (function AtkAttributeSet* (AtkText* gint gint* gint*)) "AtkAttributeSet *((*$)(AtkText *,gint,gint *,gint *))")
    (type AtkText*->AtkAttributeSet* "AtkAttributeSet *($(AtkText *))")
    (type *AtkText*->AtkAttributeSet* (function AtkAttributeSet* (AtkText*)) "AtkAttributeSet *((*$)(AtkText *))")
    (type AtkText*,gint,gint*,gint*,gint*,gint*,AtkCoordType->void "void ($(AtkText *,gint,gint *,gint *,gint *,gint *,AtkCoordType))")
    (type *AtkText*,gint,gint*,gint*,gint*,gint*,AtkCoordType->void (function void (AtkText* gint gint* gint* gint* gint* AtkCoordType)) "void ((*$)(AtkText *,gint,gint *,gint *,gint *,gint *,AtkCoordType))")
    (type AtkText*,gint,gint,AtkCoordType->gint "gint ($(AtkText *,gint,gint,AtkCoordType))")
    (type *AtkText*,gint,gint,AtkCoordType->gint (function gint (AtkText* gint gint AtkCoordType)) "gint ((*$)(AtkText *,gint,gint,AtkCoordType))")
    (type AtkText*,gint,gint*,gint*->gchar* "gchar *($(AtkText *,gint,gint *,gint *))")
    (type *AtkText*,gint,gint*,gint*->gchar* (function gchar* (AtkText* gint gint* gint*)) "gchar *((*$)(AtkText *,gint,gint *,gint *))")
    (type AtkText*,gint,gint->gboolean "gboolean ($(AtkText *,gint,gint))")
    (type *AtkText*,gint,gint->gboolean (function gboolean (AtkText* gint gint)) "gboolean ((*$)(AtkText *,gint,gint))")
    (type AtkText*,gint->gboolean "gboolean ($(AtkText *,gint))")
    (type *AtkText*,gint->gboolean (function gboolean (AtkText* gint)) "gboolean ((*$)(AtkText *,gint))")
    (type AtkText*,gint,gint,gint->gboolean "gboolean ($(AtkText *,gint,gint,gint))")
    (type *AtkText*,gint,gint,gint->gboolean (function gboolean (AtkText* gint gint gint)) "gboolean ((*$)(AtkText *,gint,gint,gint))")
    (type AtkText*,gint,gint->void "void ($(AtkText *,gint,gint))")
    (type *AtkText*,gint,gint->void (function void (AtkText* gint gint)) "void ((*$)(AtkText *,gint,gint))")
    (type AtkText*,gint->void "void ($(AtkText *,gint))")
    (type *AtkText*,gint->void (function void (AtkText* gint)) "void ((*$)(AtkText *,gint))")
    (type AtkText*->void "void ($(AtkText *))")
    (type *AtkText*->void (function void (AtkText*)) "void ((*$)(AtkText *))")
    (type AtkText*,gint,gint,AtkCoordType,AtkTextRectangle*->void "void ($(AtkText *,gint,gint,AtkCoordType,AtkTextRectangle *))")
    (type *AtkText*,gint,gint,AtkCoordType,AtkTextRectangle*->void (function void (AtkText* gint gint AtkCoordType AtkTextRectangle*)) "void ((*$)(AtkText *,gint,gint,AtkCoordType,AtkTextRectangle *))")
    (type AtkTextRange** (pointer AtkTextRange*) "AtkTextRange **")
    (type AtkText*,AtkTextRectangle*,AtkCoordType,AtkTextClipType,AtkTextClipType->AtkTextRange** "AtkTextRange **($(AtkText *,AtkTextRectangle *,AtkCoordType,AtkTextClipType,AtkTextClipType))")
    (type *AtkText*,AtkTextRectangle*,AtkCoordType,AtkTextClipType,AtkTextClipType->AtkTextRange** (function AtkTextRange** (AtkText* AtkTextRectangle* AtkCoordType AtkTextClipType AtkTextClipType)) "AtkTextRange **((*$)(AtkText *,AtkTextRectangle *,AtkCoordType,AtkTextClipType,AtkTextClipType))")
    (type s-_AtkEditableText (struct) "struct _AtkEditableText")
    (type AtkEditableText s-_AtkEditableText "AtkEditableText")
    (type s-_AtkEditableTextIface (struct (parent_interface::GTypeInterface "parent_interface") (set_run_attributes::*AtkEditableText*,AtkAttributeSet*,gint,gint->gboolean "set_run_attributes") (set_text_contents::*AtkEditableText*,gchar*->void "set_text_contents") (insert_text::*AtkEditableText*,gchar*,gint,gint*->void "insert_text") (copy_text::*AtkEditableText*,gint,gint->void "copy_text") (cut_text::*AtkEditableText*,gint,gint->void "cut_text") (delete_text::*AtkEditableText*,gint,gint->void "delete_text") (paste_text::*AtkEditableText*,gint->void "paste_text") (pad1::AtkFunction "pad1") (pad2::AtkFunction "pad2")) "struct _AtkEditableTextIface")
    (type AtkEditableTextIface s-_AtkEditableTextIface "AtkEditableTextIface")
    (type AtkEditableText*,AtkAttributeSet*,gint,gint->gboolean "gboolean ($(AtkEditableText *,AtkAttributeSet *,gint,gint))")
    (type *AtkEditableText*,AtkAttributeSet*,gint,gint->gboolean (function gboolean (AtkEditableText* AtkAttributeSet* gint gint)) "gboolean ((*$)(AtkEditableText *,AtkAttributeSet *,gint,gint))")
    (type AtkEditableText*,gchar*->void "void ($(AtkEditableText *,gchar *))")
    (type *AtkEditableText*,gchar*->void (function void (AtkEditableText* gchar*)) "void ((*$)(AtkEditableText *,gchar *))")
    (type AtkEditableText*,gchar*,gint,gint*->void "void ($(AtkEditableText *,gchar *,gint,gint *))")
    (type *AtkEditableText*,gchar*,gint,gint*->void (function void (AtkEditableText* gchar* gint gint*)) "void ((*$)(AtkEditableText *,gchar *,gint,gint *))")
    (type AtkEditableText*,gint,gint->void "void ($(AtkEditableText *,gint,gint))")
    (type *AtkEditableText*,gint,gint->void (function void (AtkEditableText* gint gint)) "void ((*$)(AtkEditableText *,gint,gint))")
    (type AtkEditableText*,gint->void "void ($(AtkEditableText *,gint))")
    (type *AtkEditableText*,gint->void (function void (AtkEditableText* gint)) "void ((*$)(AtkEditableText *,gint))")
    (type s-_AtkGObjectAccessible (struct (parent::AtkObject "parent")) "struct _AtkGObjectAccessible")
    (type AtkGObjectAccessible s-_AtkGObjectAccessible "AtkGObjectAccessible")
    (type s-_AtkGObjectAccessibleClass (struct (parent_class::AtkObjectClass "parent_class") (pad1::AtkFunction "pad1") (pad2::AtkFunction "pad2")) "struct _AtkGObjectAccessibleClass")
    (type AtkGObjectAccessibleClass s-_AtkGObjectAccessibleClass "AtkGObjectAccessibleClass")
    (type monster__e1196 int "long")
    (macro ATK_HYPERLINK_IS_INLINE::int "ATK_HYPERLINK_IS_INLINE")
    (type AtkHyperlinkStateFlags monster__e1196 "AtkHyperlinkStateFlags")
    (type s-_AtkHyperlink (struct (parent::GObject "parent")) "struct _AtkHyperlink")
    (type AtkHyperlink s-_AtkHyperlink "AtkHyperlink")
    (type s-_AtkHyperlinkClass (struct (parent::GObjectClass "parent") (get_uri::*AtkHyperlink*,gint->gchar* "get_uri") (get_object::*AtkHyperlink*,gint->AtkObject* "get_object") (get_end_index::*AtkHyperlink*->gint "get_end_index") (get_start_index::*AtkHyperlink*->gint "get_start_index") (is_valid::*AtkHyperlink*->gboolean "is_valid") (get_n_anchors::*AtkHyperlink*->gint "get_n_anchors") (link_state::*AtkHyperlink*->guint "link_state") (is_selected_link::*AtkHyperlink*->gboolean "is_selected_link") (link_activated::*AtkHyperlink*->void "link_activated") (pad1::AtkFunction "pad1")) "struct _AtkHyperlinkClass")
    (type AtkHyperlinkClass s-_AtkHyperlinkClass "AtkHyperlinkClass")
    (type AtkHyperlink*,gint->gchar* "gchar *($(AtkHyperlink *,gint))")
    (type *AtkHyperlink*,gint->gchar* (function gchar* (AtkHyperlink* gint)) "gchar *((*$)(AtkHyperlink *,gint))")
    (type AtkHyperlink*,gint->AtkObject* "AtkObject *($(AtkHyperlink *,gint))")
    (type *AtkHyperlink*,gint->AtkObject* (function AtkObject* (AtkHyperlink* gint)) "AtkObject *((*$)(AtkHyperlink *,gint))")
    (type AtkHyperlink*->gint "gint ($(AtkHyperlink *))")
    (type *AtkHyperlink*->gint (function gint (AtkHyperlink*)) "gint ((*$)(AtkHyperlink *))")
    (type AtkHyperlink*->gboolean "gboolean ($(AtkHyperlink *))")
    (type *AtkHyperlink*->gboolean (function gboolean (AtkHyperlink*)) "gboolean ((*$)(AtkHyperlink *))")
    (type AtkHyperlink*->guint "guint ($(AtkHyperlink *))")
    (type *AtkHyperlink*->guint (function guint (AtkHyperlink*)) "guint ((*$)(AtkHyperlink *))")
    (type AtkHyperlink*->void "void ($(AtkHyperlink *))")
    (type *AtkHyperlink*->void (function void (AtkHyperlink*)) "void ((*$)(AtkHyperlink *))")
    (type s-_AtkHypertext (struct) "struct _AtkHypertext")
    (type AtkHypertext s-_AtkHypertext "AtkHypertext")
    (type s-_AtkHypertextIface (struct (parent::GTypeInterface "parent") (get_link::*AtkHypertext*,gint->AtkHyperlink* "get_link") (get_n_links::*AtkHypertext*->gint "get_n_links") (get_link_index::*AtkHypertext*,gint->gint "get_link_index") (link_selected::*AtkHypertext*,gint->void "link_selected") (pad1::AtkFunction "pad1") (pad2::AtkFunction "pad2") (pad3::AtkFunction "pad3")) "struct _AtkHypertextIface")
    (type AtkHypertextIface s-_AtkHypertextIface "AtkHypertextIface")
    (type AtkHypertext*,gint->AtkHyperlink* "AtkHyperlink *($(AtkHypertext *,gint))")
    (type *AtkHypertext*,gint->AtkHyperlink* (function AtkHyperlink* (AtkHypertext* gint)) "AtkHyperlink *((*$)(AtkHypertext *,gint))")
    (type AtkHypertext*->gint "gint ($(AtkHypertext *))")
    (type *AtkHypertext*->gint (function gint (AtkHypertext*)) "gint ((*$)(AtkHypertext *))")
    (type AtkHypertext*,gint->gint "gint ($(AtkHypertext *,gint))")
    (type *AtkHypertext*,gint->gint (function gint (AtkHypertext* gint)) "gint ((*$)(AtkHypertext *,gint))")
    (type AtkHypertext*,gint->void "void ($(AtkHypertext *,gint))")
    (type *AtkHypertext*,gint->void (function void (AtkHypertext* gint)) "void ((*$)(AtkHypertext *,gint))")
    (type s-_AtkImage (struct) "struct _AtkImage")
    (type AtkImage s-_AtkImage "AtkImage")
    (type s-_AtkImageIface (struct (parent::GTypeInterface "parent") (get_image_position::*AtkImage*,gint*,gint*,AtkCoordType->void "get_image_position") (get_image_description::*AtkImage*->gchar* "get_image_description") (get_image_size::*AtkImage*,gint*,gint*->void "get_image_size") (set_image_description::*AtkImage*,gchar*->gboolean "set_image_description") (pad1::AtkFunction "pad1") (pad2::AtkFunction "pad2")) "struct _AtkImageIface")
    (type AtkImageIface s-_AtkImageIface "AtkImageIface")
    (type AtkImage*,gint*,gint*,AtkCoordType->void "void ($(AtkImage *,gint *,gint *,AtkCoordType))")
    (type *AtkImage*,gint*,gint*,AtkCoordType->void (function void (AtkImage* gint* gint* AtkCoordType)) "void ((*$)(AtkImage *,gint *,gint *,AtkCoordType))")
    (type AtkImage*->gchar* "gchar *($(AtkImage *))")
    (type *AtkImage*->gchar* (function gchar* (AtkImage*)) "gchar *((*$)(AtkImage *))")
    (type AtkImage*,gint*,gint*->void "void ($(AtkImage *,gint *,gint *))")
    (type *AtkImage*,gint*,gint*->void (function void (AtkImage* gint* gint*)) "void ((*$)(AtkImage *,gint *,gint *))")
    (type AtkImage*,gchar*->gboolean "gboolean ($(AtkImage *,gchar *))")
    (type *AtkImage*,gchar*->gboolean (function gboolean (AtkImage* gchar*)) "gboolean ((*$)(AtkImage *,gchar *))")
    (type s-_AtkNoOpObject (struct (parent::AtkObject "parent")) "struct _AtkNoOpObject")
    (type AtkNoOpObject s-_AtkNoOpObject "AtkNoOpObject")
    (type s-_AtkNoOpObjectClass (struct (parent_class::AtkObjectClass "parent_class")) "struct _AtkNoOpObjectClass")
    (type AtkNoOpObjectClass s-_AtkNoOpObjectClass "AtkNoOpObjectClass")
    (type s-_AtkObjectFactory (struct (parent::GObject "parent")) "struct _AtkObjectFactory")
    (type AtkObjectFactory s-_AtkObjectFactory "AtkObjectFactory")
    (type s-_AtkObjectFactoryClass (struct (parent_class::GObjectClass "parent_class") (create_accessible::*GObject*->AtkObject* "create_accessible") (invalidate::*AtkObjectFactory*->void "invalidate") (get_accessible_type::*void->GType "get_accessible_type") (pad1::AtkFunction "pad1") (pad2::AtkFunction "pad2")) "struct _AtkObjectFactoryClass")
    (type AtkObjectFactoryClass s-_AtkObjectFactoryClass "AtkObjectFactoryClass")
    (type GObject*->AtkObject* "AtkObject *($(GObject *))")
    (type *GObject*->AtkObject* (function AtkObject* (GObject*)) "AtkObject *((*$)(GObject *))")
    (type AtkObjectFactory*->void "void ($(AtkObjectFactory *))")
    (type *AtkObjectFactory*->void (function void (AtkObjectFactory*)) "void ((*$)(AtkObjectFactory *))")
    (type void->GType "GType ($(void))")
    (type *void->GType (function GType (void)) "GType ((*$)(void))")
    (type s-_AtkNoOpObjectFactory (struct (parent::AtkObjectFactory "parent")) "struct _AtkNoOpObjectFactory")
    (type AtkNoOpObjectFactory s-_AtkNoOpObjectFactory "AtkNoOpObjectFactory")
    (type s-_AtkNoOpObjectFactoryClass (struct (parent_class::AtkObjectFactoryClass "parent_class")) "struct _AtkNoOpObjectFactoryClass")
    (type AtkNoOpObjectFactoryClass s-_AtkNoOpObjectFactoryClass "AtkNoOpObjectFactoryClass")
    (type s-_AtkRegistry (struct (parent::GObject "parent") (factory_type_registry::GHashTable* "factory_type_registry") (factory_singleton_cache::GHashTable* "factory_singleton_cache")) "struct _AtkRegistry")
    (type s-_AtkRegistryClass (struct (parent_class::GObjectClass "parent_class")) "struct _AtkRegistryClass")
    (type AtkRegistry s-_AtkRegistry "AtkRegistry")
    (type AtkRegistryClass s-_AtkRegistryClass "AtkRegistryClass")
    (type s-_AtkRelation (struct (parent::GObject "parent") (target::GPtrArray* "target") (relationship::AtkRelationType "relationship")) "struct _AtkRelation")
    (type AtkRelation s-_AtkRelation "AtkRelation")
    (type s-_AtkRelationClass (struct (parent::GObjectClass "parent")) "struct _AtkRelationClass")
    (type AtkRelationClass s-_AtkRelationClass "AtkRelationClass")
    (type s-_AtkRelationSetClass (struct (parent::GObjectClass "parent") (pad1::AtkFunction "pad1") (pad2::AtkFunction "pad2")) "struct _AtkRelationSetClass")
    (type AtkRelationSetClass s-_AtkRelationSetClass "AtkRelationSetClass")
    (type s-_AtkSelection (struct) "struct _AtkSelection")
    (type AtkSelection s-_AtkSelection "AtkSelection")
    (type s-_AtkSelectionIface (struct (parent::GTypeInterface "parent") (add_selection::*AtkSelection*,gint->gboolean "add_selection") (clear_selection::*AtkSelection*->gboolean "clear_selection") (ref_selection::*AtkSelection*,gint->AtkObject* "ref_selection") (get_selection_count::*AtkSelection*->gint "get_selection_count") (is_child_selected::*AtkSelection*,gint->gboolean "is_child_selected") (remove_selection::*AtkSelection*,gint->gboolean "remove_selection") (select_all_selection::*AtkSelection*->gboolean "select_all_selection") (selection_changed::*AtkSelection*->void "selection_changed") (pad1::AtkFunction "pad1") (pad2::AtkFunction "pad2")) "struct _AtkSelectionIface")
    (type AtkSelectionIface s-_AtkSelectionIface "AtkSelectionIface")
    (type AtkSelection*,gint->gboolean "gboolean ($(AtkSelection *,gint))")
    (type *AtkSelection*,gint->gboolean (function gboolean (AtkSelection* gint)) "gboolean ((*$)(AtkSelection *,gint))")
    (type AtkSelection*->gboolean "gboolean ($(AtkSelection *))")
    (type *AtkSelection*->gboolean (function gboolean (AtkSelection*)) "gboolean ((*$)(AtkSelection *))")
    (type AtkSelection*,gint->AtkObject* "AtkObject *($(AtkSelection *,gint))")
    (type *AtkSelection*,gint->AtkObject* (function AtkObject* (AtkSelection* gint)) "AtkObject *((*$)(AtkSelection *,gint))")
    (type AtkSelection*->gint "gint ($(AtkSelection *))")
    (type *AtkSelection*->gint (function gint (AtkSelection*)) "gint ((*$)(AtkSelection *))")
    (type AtkSelection*->void "void ($(AtkSelection *))")
    (type *AtkSelection*->void (function void (AtkSelection*)) "void ((*$)(AtkSelection *))")
    (type s-_AtkStateSetClass (struct (parent::GObjectClass "parent")) "struct _AtkStateSetClass")
    (type AtkStateSetClass s-_AtkStateSetClass "AtkStateSetClass")
    (type s-_AtkStreamableContent (struct) "struct _AtkStreamableContent")
    (type AtkStreamableContent s-_AtkStreamableContent "AtkStreamableContent")
    (type s-_AtkStreamableContentIface (struct (parent::GTypeInterface "parent") (get_n_mime_types::*AtkStreamableContent*->gint "get_n_mime_types") (get_mime_type::*AtkStreamableContent*,gint->gchar* "get_mime_type") (get_stream::*AtkStreamableContent*,gchar*->GIOChannel* "get_stream") (pad1::AtkFunction "pad1") (pad2::AtkFunction "pad2") (pad3::AtkFunction "pad3") (pad4::AtkFunction "pad4")) "struct _AtkStreamableContentIface")
    (type AtkStreamableContentIface s-_AtkStreamableContentIface "AtkStreamableContentIface")
    (type AtkStreamableContent*->gint "gint ($(AtkStreamableContent *))")
    (type *AtkStreamableContent*->gint (function gint (AtkStreamableContent*)) "gint ((*$)(AtkStreamableContent *))")
    (type AtkStreamableContent*,gint->gchar* "gchar *($(AtkStreamableContent *,gint))")
    (type *AtkStreamableContent*,gint->gchar* (function gchar* (AtkStreamableContent* gint)) "gchar *((*$)(AtkStreamableContent *,gint))")
    (type AtkStreamableContent*,gchar*->GIOChannel* "GIOChannel *($(AtkStreamableContent *,gchar *))")
    (type *AtkStreamableContent*,gchar*->GIOChannel* (function GIOChannel* (AtkStreamableContent* gchar*)) "GIOChannel *((*$)(AtkStreamableContent *,gchar *))")
    (type s-_AtkTable (struct) "struct _AtkTable")
    (type AtkTable s-_AtkTable "AtkTable")
    (type s-_AtkTableIface (struct (parent::GTypeInterface "parent") (ref_at::*AtkTable*,gint,gint->AtkObject* "ref_at") (get_index_at::*AtkTable*,gint,gint->gint "get_index_at") (get_column_at_index::*AtkTable*,gint->gint "get_column_at_index") (get_row_at_index::*AtkTable*,gint->gint "get_row_at_index") (get_n_columns::*AtkTable*->gint "get_n_columns") (get_n_rows::*AtkTable*->gint "get_n_rows") (get_column_extent_at::*AtkTable*,gint,gint->gint "get_column_extent_at") (get_row_extent_at::*AtkTable*,gint,gint->gint "get_row_extent_at") (get_caption::*AtkTable*->AtkObject* "get_caption") (get_column_description::*AtkTable*,gint->gchar* "get_column_description") (get_column_header::*AtkTable*,gint->AtkObject* "get_column_header") (get_row_description::*AtkTable*,gint->gchar* "get_row_description") (get_row_header::*AtkTable*,gint->AtkObject* "get_row_header") (get_summary::*AtkTable*->AtkObject* "get_summary") (set_caption::*AtkTable*,AtkObject*->void "set_caption") (set_column_description::*AtkTable*,gint,gchar*->void "set_column_description") (set_column_header::*AtkTable*,gint,AtkObject*->void "set_column_header") (set_row_description::*AtkTable*,gint,gchar*->void "set_row_description") (set_row_header::*AtkTable*,gint,AtkObject*->void "set_row_header") (set_summary::*AtkTable*,AtkObject*->void "set_summary") (get_selected_columns::*AtkTable*,gint**->gint "get_selected_columns") (get_selected_rows::*AtkTable*,gint**->gint "get_selected_rows") (is_column_selected::*AtkTable*,gint->gboolean "is_column_selected") (is_row_selected::*AtkTable*,gint->gboolean "is_row_selected") (is_selected::*AtkTable*,gint,gint->gboolean "is_selected") (add_row_selection::*AtkTable*,gint->gboolean "add_row_selection") (remove_row_selection::*AtkTable*,gint->gboolean "remove_row_selection") (add_column_selection::*AtkTable*,gint->gboolean "add_column_selection") (remove_column_selection::*AtkTable*,gint->gboolean "remove_column_selection") (row_inserted::*AtkTable*,gint,gint->void "row_inserted") (column_inserted::*AtkTable*,gint,gint->void "column_inserted") (row_deleted::*AtkTable*,gint,gint->void "row_deleted") (column_deleted::*AtkTable*,gint,gint->void "column_deleted") (row_reordered::*AtkTable*->void "row_reordered") (column_reordered::*AtkTable*->void "column_reordered") (model_changed::*AtkTable*->void "model_changed") (pad1::AtkFunction "pad1") (pad2::AtkFunction "pad2") (pad3::AtkFunction "pad3") (pad4::AtkFunction "pad4")) "struct _AtkTableIface")
    (type AtkTableIface s-_AtkTableIface "AtkTableIface")
    (type AtkTable*,gint,gint->AtkObject* "AtkObject *($(AtkTable *,gint,gint))")
    (type *AtkTable*,gint,gint->AtkObject* (function AtkObject* (AtkTable* gint gint)) "AtkObject *((*$)(AtkTable *,gint,gint))")
    (type AtkTable*,gint,gint->gint "gint ($(AtkTable *,gint,gint))")
    (type *AtkTable*,gint,gint->gint (function gint (AtkTable* gint gint)) "gint ((*$)(AtkTable *,gint,gint))")
    (type AtkTable*,gint->gint "gint ($(AtkTable *,gint))")
    (type *AtkTable*,gint->gint (function gint (AtkTable* gint)) "gint ((*$)(AtkTable *,gint))")
    (type AtkTable*->gint "gint ($(AtkTable *))")
    (type *AtkTable*->gint (function gint (AtkTable*)) "gint ((*$)(AtkTable *))")
    (type AtkTable*->AtkObject* "AtkObject *($(AtkTable *))")
    (type *AtkTable*->AtkObject* (function AtkObject* (AtkTable*)) "AtkObject *((*$)(AtkTable *))")
    (type AtkTable*,gint->gchar* "gchar *($(AtkTable *,gint))")
    (type *AtkTable*,gint->gchar* (function gchar* (AtkTable* gint)) "gchar *((*$)(AtkTable *,gint))")
    (type AtkTable*,gint->AtkObject* "AtkObject *($(AtkTable *,gint))")
    (type *AtkTable*,gint->AtkObject* (function AtkObject* (AtkTable* gint)) "AtkObject *((*$)(AtkTable *,gint))")
    (type AtkTable*,AtkObject*->void "void ($(AtkTable *,AtkObject *))")
    (type *AtkTable*,AtkObject*->void (function void (AtkTable* AtkObject*)) "void ((*$)(AtkTable *,AtkObject *))")
    (type AtkTable*,gint,gchar*->void "void ($(AtkTable *,gint,gchar *))")
    (type *AtkTable*,gint,gchar*->void (function void (AtkTable* gint gchar*)) "void ((*$)(AtkTable *,gint,gchar *))")
    (type AtkTable*,gint,AtkObject*->void "void ($(AtkTable *,gint,AtkObject *))")
    (type *AtkTable*,gint,AtkObject*->void (function void (AtkTable* gint AtkObject*)) "void ((*$)(AtkTable *,gint,AtkObject *))")
    (type gint** (pointer gint*) "gint **")
    (type AtkTable*,gint**->gint "gint ($(AtkTable *,gint **))")
    (type *AtkTable*,gint**->gint (function gint (AtkTable* gint**)) "gint ((*$)(AtkTable *,gint **))")
    (type AtkTable*,gint->gboolean "gboolean ($(AtkTable *,gint))")
    (type *AtkTable*,gint->gboolean (function gboolean (AtkTable* gint)) "gboolean ((*$)(AtkTable *,gint))")
    (type AtkTable*,gint,gint->gboolean "gboolean ($(AtkTable *,gint,gint))")
    (type *AtkTable*,gint,gint->gboolean (function gboolean (AtkTable* gint gint)) "gboolean ((*$)(AtkTable *,gint,gint))")
    (type AtkTable*,gint,gint->void "void ($(AtkTable *,gint,gint))")
    (type *AtkTable*,gint,gint->void (function void (AtkTable* gint gint)) "void ((*$)(AtkTable *,gint,gint))")
    (type AtkTable*->void "void ($(AtkTable *))")
    (type *AtkTable*->void (function void (AtkTable*)) "void ((*$)(AtkTable *))")
    (type s-_AtkValue (struct) "struct _AtkValue")
    (type AtkValue s-_AtkValue "AtkValue")
    (type s-_AtkValueIface (struct (parent::GTypeInterface "parent") (get_current_value::*AtkValue*,GValue*->void "get_current_value") (get_maximum_value::*AtkValue*,GValue*->void "get_maximum_value") (get_minimum_value::*AtkValue*,GValue*->void "get_minimum_value") (set_current_value::*AtkValue*,GValue*->gboolean "set_current_value") (pad1::AtkFunction "pad1") (pad2::AtkFunction "pad2")) "struct _AtkValueIface")
    (type AtkValueIface s-_AtkValueIface "AtkValueIface")
    (type AtkValue*,GValue*->void "void ($(AtkValue *,GValue *))")
    (type *AtkValue*,GValue*->void (function void (AtkValue* GValue*)) "void ((*$)(AtkValue *,GValue *))")
    (type AtkValue*,GValue*->gboolean "gboolean ($(AtkValue *,GValue *))")
    (type *AtkValue*,GValue*->gboolean (function gboolean (AtkValue* GValue*)) "gboolean ((*$)(AtkValue *,GValue *))")
    (type s-_GtkAccessible (struct (parent::AtkObject "parent") (widget::GtkWidget* "widget")) "struct _GtkAccessible")
    (type GtkAccessible s-_GtkAccessible "GtkAccessible")
    (type s-_GtkAccessibleClass (struct (parent_class::AtkObjectClass "parent_class") (connect_widget_destroyed::*GtkAccessible*->void "connect_widget_destroyed") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkAccessibleClass")
    (type GtkAccessibleClass s-_GtkAccessibleClass "GtkAccessibleClass")
    (type GtkAccessible*->void "void ($(GtkAccessible *))")
    (type *GtkAccessible*->void (function void (GtkAccessible*)) "void ((*$)(GtkAccessible *))")
    (type s-_GtkAction (struct (object::GObject "object") (private_data::GtkActionPrivate* "private_data")) "struct _GtkAction")
    (type GtkAction s-_GtkAction "GtkAction")
    (type s-_GtkActionClass (struct (parent_class::GObjectClass "parent_class") (activate::*GtkAction*->void "activate") (menu_item_type::GType "menu_item_type") (toolbar_item_type::GType "toolbar_item_type") (create_menu_item::*GtkAction*->GtkWidget* "create_menu_item") (create_tool_item::*GtkAction*->GtkWidget* "create_tool_item") (connect_proxy::*GtkAction*,GtkWidget*->void "connect_proxy") (disconnect_proxy::*GtkAction*,GtkWidget*->void "disconnect_proxy") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkActionClass")
    (type GtkActionClass s-_GtkActionClass "GtkActionClass")
    (type s-_GtkActionPrivate (struct) "struct _GtkActionPrivate")
    (type GtkActionPrivate s-_GtkActionPrivate "GtkActionPrivate")
    (type GtkAction*->void "void ($(GtkAction *))")
    (type *GtkAction*->void (function void (GtkAction*)) "void ((*$)(GtkAction *))")
    (type GtkAction*->GtkWidget* "GtkWidget *($(GtkAction *))")
    (type *GtkAction*->GtkWidget* (function GtkWidget* (GtkAction*)) "GtkWidget *((*$)(GtkAction *))")
    (type GtkAction*,GtkWidget*->void "void ($(GtkAction *,GtkWidget *))")
    (type *GtkAction*,GtkWidget*->void (function void (GtkAction* GtkWidget*)) "void ((*$)(GtkAction *,GtkWidget *))")
    (type GtkTranslateFunc *gchar*,gpointer->gchar* "GtkTranslateFunc")
    (type gpointer,gchar*->void "void ($(gpointer,gchar *))")
    (type *gpointer,gchar*->void (function void (gpointer gchar*)) "void ((*$)(gpointer,gchar *))")
    (type GtkPrintFunc *gpointer,gchar*->void "GtkPrintFunc")
    (type ->void "void ($())")
    (type *->void (function void ()) "void ((*$)())")
    (type GtkItemFactoryCallback *->void "GtkItemFactoryCallback")
    (type gpointer,guint,GtkWidget*->void "void ($(gpointer,guint,GtkWidget *))")
    (type *gpointer,guint,GtkWidget*->void (function void (gpointer guint GtkWidget*)) "void ((*$)(gpointer,guint,GtkWidget *))")
    (type GtkItemFactoryCallback1 *gpointer,guint,GtkWidget*->void "GtkItemFactoryCallback1")
    (type s-_GtkItemFactory (struct (object::GtkObject "object") (path::gchar* "path") (accel_group::GtkAccelGroup* "accel_group") (widget::GtkWidget* "widget") (items::GSList* "items") (translate_func::GtkTranslateFunc "translate_func") (translate_data::gpointer "translate_data") (translate_notify::GtkDestroyNotify "translate_notify")) "struct _GtkItemFactory")
    (type GtkItemFactory s-_GtkItemFactory "GtkItemFactory")
    (type s-_GtkItemFactoryClass (struct (object_class::GtkObjectClass "object_class") (item_ht::GHashTable* "item_ht") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkItemFactoryClass")
    (type GtkItemFactoryClass s-_GtkItemFactoryClass "GtkItemFactoryClass")
    (type s-_GtkItemFactoryEntry (struct (path::gchar* "path") (accelerator::gchar* "accelerator") (callback::GtkItemFactoryCallback "callback") (callback_action::guint "callback_action") (item_type::gchar* "item_type") (extra_data::gconstpointer "extra_data")) "struct _GtkItemFactoryEntry")
    (type GtkItemFactoryEntry s-_GtkItemFactoryEntry "GtkItemFactoryEntry")
    (type s-_GtkItemFactoryItem (struct (path::gchar* "path") (widgets::GSList* "widgets")) "struct _GtkItemFactoryItem")
    (type GtkItemFactoryItem s-_GtkItemFactoryItem "GtkItemFactoryItem")
    (type GtkMenuCallback *GtkWidget*,gpointer->void "GtkMenuCallback")
    (type s-monster__s1017 (struct (path::gchar* "path") (accelerator::gchar* "accelerator") (callback::GtkMenuCallback "callback") (callback_data::gpointer "callback_data") (widget::GtkWidget* "widget")) "GtkMenuEntry")
    (type GtkMenuEntry s-monster__s1017 "GtkMenuEntry")
    (type GtkWidget*,gpointer,guint->void "void ($(GtkWidget *,gpointer,guint))")
    (type *GtkWidget*,gpointer,guint->void (function void (GtkWidget* gpointer guint)) "void ((*$)(GtkWidget *,gpointer,guint))")
    (type GtkItemFactoryCallback2 *GtkWidget*,gpointer,guint->void "GtkItemFactoryCallback2")
    (type s-_GtkActionGroup (struct (parent::GObject "parent") (private_data::GtkActionGroupPrivate* "private_data")) "struct _GtkActionGroup")
    (type GtkActionGroup s-_GtkActionGroup "GtkActionGroup")
    (type s-_GtkActionGroupPrivate (struct) "struct _GtkActionGroupPrivate")
    (type GtkActionGroupPrivate s-_GtkActionGroupPrivate "GtkActionGroupPrivate")
    (type s-_GtkActionGroupClass (struct (parent_class::GObjectClass "parent_class") (get_action::*GtkActionGroup*,gchar*->GtkAction* "get_action") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkActionGroupClass")
    (type GtkActionGroupClass s-_GtkActionGroupClass "GtkActionGroupClass")
    (type s-_GtkActionEntry (struct (name::gchar* "name") (stock_id::gchar* "stock_id") (label::gchar* "label") (accelerator::gchar* "accelerator") (tooltip::gchar* "tooltip") (callback::GCallback "callback")) "struct _GtkActionEntry")
    (type GtkActionEntry s-_GtkActionEntry "GtkActionEntry")
    (type s-_GtkToggleActionEntry (struct (name::gchar* "name") (stock_id::gchar* "stock_id") (label::gchar* "label") (accelerator::gchar* "accelerator") (tooltip::gchar* "tooltip") (callback::GCallback "callback") (is_active::gboolean "is_active")) "struct _GtkToggleActionEntry")
    (type GtkToggleActionEntry s-_GtkToggleActionEntry "GtkToggleActionEntry")
    (type s-_GtkRadioActionEntry (struct (name::gchar* "name") (stock_id::gchar* "stock_id") (label::gchar* "label") (accelerator::gchar* "accelerator") (tooltip::gchar* "tooltip") (value::gint "value")) "struct _GtkRadioActionEntry")
    (type GtkRadioActionEntry s-_GtkRadioActionEntry "GtkRadioActionEntry")
    (type GtkActionGroup*,gchar*->GtkAction* "GtkAction *($(GtkActionGroup *,gchar *))")
    (type *GtkActionGroup*,gchar*->GtkAction* (function GtkAction* (GtkActionGroup* gchar*)) "GtkAction *((*$)(GtkActionGroup *,gchar *))")
    (type s-_GtkAlignment (struct (bin::GtkBin "bin") (xalign::gfloat "xalign") (yalign::gfloat "yalign") (xscale::gfloat "xscale") (yscale::gfloat "yscale")) "struct _GtkAlignment")
    (type GtkAlignment s-_GtkAlignment "GtkAlignment")
    (type s-_GtkAlignmentClass (struct (parent_class::GtkBinClass "parent_class")) "struct _GtkAlignmentClass")
    (type GtkAlignmentClass s-_GtkAlignmentClass "GtkAlignmentClass")
    (type s-_GtkAlignmentPrivate (struct) "struct _GtkAlignmentPrivate")
    (type GtkAlignmentPrivate s-_GtkAlignmentPrivate "GtkAlignmentPrivate")
    (type s-_GtkArrow (struct (misc::GtkMisc "misc") (arrow_type::gint16 "arrow_type") (shadow_type::gint16 "shadow_type")) "struct _GtkArrow")
    (type GtkArrow s-_GtkArrow "GtkArrow")
    (type s-_GtkArrowClass (struct (parent_class::GtkMiscClass "parent_class")) "struct _GtkArrowClass")
    (type GtkArrowClass s-_GtkArrowClass "GtkArrowClass")
    (type s-_GtkFrame (struct (bin::GtkBin "bin") (label_widget::GtkWidget* "label_widget") (shadow_type::gint16 "shadow_type") (label_xalign::gfloat "label_xalign") (label_yalign::gfloat "label_yalign") (child_allocation::GtkAllocation "child_allocation")) "struct _GtkFrame")
    (type GtkFrame s-_GtkFrame "GtkFrame")
    (type s-_GtkFrameClass (struct (parent_class::GtkBinClass "parent_class") (compute_child_allocation::*GtkFrame*,GtkAllocation*->void "compute_child_allocation")) "struct _GtkFrameClass")
    (type GtkFrameClass s-_GtkFrameClass "GtkFrameClass")
    (type GtkFrame*,GtkAllocation*->void "void ($(GtkFrame *,GtkAllocation *))")
    (type *GtkFrame*,GtkAllocation*->void (function void (GtkFrame* GtkAllocation*)) "void ((*$)(GtkFrame *,GtkAllocation *))")
    (type s-_GtkAspectFrame (struct (frame::GtkFrame "frame") (xalign::gfloat "xalign") (yalign::gfloat "yalign") (ratio::gfloat "ratio") (obey_child::gboolean "obey_child") (center_allocation::GtkAllocation "center_allocation")) "struct _GtkAspectFrame")
    (type GtkAspectFrame s-_GtkAspectFrame "GtkAspectFrame")
    (type s-_GtkAspectFrameClass (struct (parent_class::GtkFrameClass "parent_class")) "struct _GtkAspectFrameClass")
    (type GtkAspectFrameClass s-_GtkAspectFrameClass "GtkAspectFrameClass")
    (type s-_GtkBox (struct (container::GtkContainer "container") (children::GList* "children") (spacing::gint16 "spacing") (homogeneous::guint "homogeneous")) "struct _GtkBox")
    (type GtkBox s-_GtkBox "GtkBox")
    (type s-_GtkBoxClass (struct (parent_class::GtkContainerClass "parent_class")) "struct _GtkBoxClass")
    (type GtkBoxClass s-_GtkBoxClass "GtkBoxClass")
    (type s-_GtkBoxChild (struct (widget::GtkWidget* "widget") (padding::guint16 "padding") (expand::guint "expand") (fill::guint "fill") (pack::guint "pack") (is_secondary::guint "is_secondary")) "struct _GtkBoxChild")
    (type GtkBoxChild s-_GtkBoxChild "GtkBoxChild")
    (type s-_GtkButtonBox (struct (box::GtkBox "box") (child_min_width::gint "child_min_width") (child_min_height::gint "child_min_height") (child_ipad_x::gint "child_ipad_x") (child_ipad_y::gint "child_ipad_y") (layout_style::GtkButtonBoxStyle "layout_style")) "struct _GtkButtonBox")
    (type GtkButtonBox s-_GtkButtonBox "GtkButtonBox")
    (type s-_GtkButtonBoxClass (struct (parent_class::GtkBoxClass "parent_class")) "struct _GtkButtonBoxClass")
    (type GtkButtonBoxClass s-_GtkButtonBoxClass "GtkButtonBoxClass")
    (type s-_GtkBindingSet (struct (set_name::gchar* "set_name") (priority::gint "priority") (widget_path_pspecs::GSList* "widget_path_pspecs") (widget_class_pspecs::GSList* "widget_class_pspecs") (class_branch_pspecs::GSList* "class_branch_pspecs") (entries::GtkBindingEntry* "entries") (current::GtkBindingEntry* "current") (parsed::guint "parsed")) "struct _GtkBindingSet")
    (type GtkBindingSet s-_GtkBindingSet "GtkBindingSet")
    (type s-_GtkBindingEntry (struct (keyval::guint "keyval") (modifiers::GdkModifierType "modifiers") (binding_set::GtkBindingSet* "binding_set") (destroyed::guint "destroyed") (in_emission::guint "in_emission") (set_next::GtkBindingEntry* "set_next") (hash_next::GtkBindingEntry* "hash_next") (signals::GtkBindingSignal* "signals")) "struct _GtkBindingEntry")
    (type GtkBindingEntry s-_GtkBindingEntry "GtkBindingEntry")
    (type s-_GtkBindingSignal (struct (next::GtkBindingSignal* "next") (signal_name::gchar* "signal_name") (n_args::guint "n_args") (args::GtkBindingArg* "args")) "struct _GtkBindingSignal")
    (type GtkBindingSignal s-_GtkBindingSignal "GtkBindingSignal")
    (type s-_GtkBindingArg (struct (arg_type::GType "arg_type") (d::s-monster__s1018 "d")) "struct _GtkBindingArg")
    (type GtkBindingArg s-_GtkBindingArg "GtkBindingArg")
    (type s-monster__s1018 (union (long_data::glong "long_data") (double_data::gdouble "double_data") (string_data::gchar* "string_data")) "void")
    (type s-_GtkImage (struct (misc::GtkMisc "misc") (storage_type::GtkImageType "storage_type") (data::s-monster__s1019 "data") (mask::GdkBitmap* "mask") (icon_size::GtkIconSize "icon_size")) "struct _GtkImage")
    (type GtkImage s-_GtkImage "GtkImage")
    (type s-_GtkImageClass (struct (parent_class::GtkMiscClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkImageClass")
    (type GtkImageClass s-_GtkImageClass "GtkImageClass")
    (type s-_GtkImagePixmapData (struct (pixmap::GdkPixmap* "pixmap")) "struct _GtkImagePixmapData")
    (type GtkImagePixmapData s-_GtkImagePixmapData "GtkImagePixmapData")
    (type s-_GtkImageImageData (struct (image::GdkImage* "image")) "struct _GtkImageImageData")
    (type GtkImageImageData s-_GtkImageImageData "GtkImageImageData")
    (type s-_GtkImagePixbufData (struct (pixbuf::GdkPixbuf* "pixbuf")) "struct _GtkImagePixbufData")
    (type GtkImagePixbufData s-_GtkImagePixbufData "GtkImagePixbufData")
    (type s-_GtkImageStockData (struct (stock_id::gchar* "stock_id")) "struct _GtkImageStockData")
    (type GtkImageStockData s-_GtkImageStockData "GtkImageStockData")
    (type s-_GtkImageIconSetData (struct (icon_set::GtkIconSet* "icon_set")) "struct _GtkImageIconSetData")
    (type GtkImageIconSetData s-_GtkImageIconSetData "GtkImageIconSetData")
    (type s-_GtkImageAnimationData (struct (anim::GdkPixbufAnimation* "anim") (iter::GdkPixbufAnimationIter* "iter") (frame_timeout::guint "frame_timeout")) "struct _GtkImageAnimationData")
    (type GtkImageAnimationData s-_GtkImageAnimationData "GtkImageAnimationData")
    (type s-_GtkImageIconNameData (struct (icon_name::gchar* "icon_name") (pixbuf::GdkPixbuf* "pixbuf") (theme_change_id::guint "theme_change_id")) "struct _GtkImageIconNameData")
    (type GtkImageIconNameData s-_GtkImageIconNameData "GtkImageIconNameData")
    (type monster__e1197 int "long")
    (macro GTK_IMAGE_EMPTY::int "GTK_IMAGE_EMPTY")
    (macro GTK_IMAGE_PIXMAP::int "GTK_IMAGE_PIXMAP")
    (macro GTK_IMAGE_IMAGE::int "GTK_IMAGE_IMAGE")
    (macro GTK_IMAGE_PIXBUF::int "GTK_IMAGE_PIXBUF")
    (macro GTK_IMAGE_STOCK::int "GTK_IMAGE_STOCK")
    (macro GTK_IMAGE_ICON_SET::int "GTK_IMAGE_ICON_SET")
    (macro GTK_IMAGE_ANIMATION::int "GTK_IMAGE_ANIMATION")
    (macro GTK_IMAGE_ICON_NAME::int "GTK_IMAGE_ICON_NAME")
    (type GtkImageType monster__e1197 "GtkImageType")
    (type s-monster__s1019 (union (pixmap::GtkImagePixmapData "pixmap") (image::GtkImageImageData "image") (pixbuf::GtkImagePixbufData "pixbuf") (stock::GtkImageStockData "stock") (icon_set::GtkImageIconSetData "icon_set") (anim::GtkImageAnimationData "anim") (name::GtkImageIconNameData "name")) "void")
    (type s-_GtkButton (struct (bin::GtkBin "bin") (event_window::GdkWindow* "event_window") (label_text::gchar* "label_text") (activate_timeout::guint "activate_timeout") (constructed::guint "constructed") (in_button::guint "in_button") (button_down::guint "button_down") (relief::guint "relief") (use_underline::guint "use_underline") (use_stock::guint "use_stock") (depressed::guint "depressed") (depress_on_activate::guint "depress_on_activate") (focus_on_click::guint "focus_on_click")) "struct _GtkButton")
    (type GtkButton s-_GtkButton "GtkButton")
    (type s-_GtkButtonClass (struct (parent_class::GtkBinClass "parent_class") (pressed::*GtkButton*->void "pressed") (released::*GtkButton*->void "released") (clicked::*GtkButton*->void "clicked") (enter::*GtkButton*->void "enter") (leave::*GtkButton*->void "leave") (activate::*GtkButton*->void "activate") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkButtonClass")
    (type GtkButtonClass s-_GtkButtonClass "GtkButtonClass")
    (type GtkButton*->void "void ($(GtkButton *))")
    (type *GtkButton*->void (function void (GtkButton*)) "void ((*$)(GtkButton *))")
    (type s-_GtkCalendar (struct (widget::GtkWidget "widget") (header_style::GtkStyle* "header_style") (label_style::GtkStyle* "label_style") (month::gint "month") (year::gint "year") (selected_day::gint "selected_day") (day_month::gint-array-7-array-6 "day_month") (day::gint-array-7-array-6 "day") (num_marked_dates::gint "num_marked_dates") (marked_date::gint-array-31 "marked_date") (display_flags::GtkCalendarDisplayOptions "display_flags") (marked_date_color::GdkColor-array-31 "marked_date_color") (gc::GdkGC* "gc") (xor_gc::GdkGC* "xor_gc") (focus_row::gint "focus_row") (focus_col::gint "focus_col") (highlight_row::gint "highlight_row") (highlight_col::gint "highlight_col") (private_data::gpointer "private_data") (grow_space::gchar-array-32 "grow_space") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkCalendar")
    (type GtkCalendar s-_GtkCalendar "GtkCalendar")
    (type s-_GtkCalendarClass (struct (parent_class::GtkWidgetClass "parent_class") (month_changed::*GtkCalendar*->void "month_changed") (day_selected::*GtkCalendar*->void "day_selected") (day_selected_double_click::*GtkCalendar*->void "day_selected_double_click") (prev_month::*GtkCalendar*->void "prev_month") (next_month::*GtkCalendar*->void "next_month") (prev_year::*GtkCalendar*->void "prev_year") (next_year::*GtkCalendar*->void "next_year")) "struct _GtkCalendarClass")
    (type GtkCalendarClass s-_GtkCalendarClass "GtkCalendarClass")
    (type monster__e1198 int "long")
    (macro GTK_CALENDAR_SHOW_HEADING::int "GTK_CALENDAR_SHOW_HEADING")
    (macro GTK_CALENDAR_SHOW_DAY_NAMES::int "GTK_CALENDAR_SHOW_DAY_NAMES")
    (macro GTK_CALENDAR_NO_MONTH_CHANGE::int "GTK_CALENDAR_NO_MONTH_CHANGE")
    (macro GTK_CALENDAR_SHOW_WEEK_NUMBERS::int "GTK_CALENDAR_SHOW_WEEK_NUMBERS")
    (macro GTK_CALENDAR_WEEK_START_MONDAY::int "GTK_CALENDAR_WEEK_START_MONDAY")
    (type GtkCalendarDisplayOptions monster__e1198 "GtkCalendarDisplayOptions")
    (type gint-array-7 (array gint) "gint $[ 7 ]")
    (type gint-array-7-array-6 (array gint-array-7) "gint $[ 6 ][ 7 ]")
    (type gint-array-31 (array gint) "gint $[ 31 ]")
    (type GdkColor-array-31 (array GdkColor) "GdkColor $[ 31 ]")
    (type gchar-array-32 (array gchar) "gchar $[ 32 ]")
    (type GtkCalendar*->void "void ($(GtkCalendar *))")
    (type *GtkCalendar*->void (function void (GtkCalendar*)) "void ((*$)(GtkCalendar *))")
    (type s-_GtkCellEditable (struct) "struct _GtkCellEditable")
    (type GtkCellEditable s-_GtkCellEditable "GtkCellEditable")
    (type s-_GtkCellEditableIface (struct (g_iface::GTypeInterface "g_iface") (editing_done::*GtkCellEditable*->void "editing_done") (remove_widget::*GtkCellEditable*->void "remove_widget") (start_editing::*GtkCellEditable*,GdkEvent*->void "start_editing")) "struct _GtkCellEditableIface")
    (type GtkCellEditableIface s-_GtkCellEditableIface "GtkCellEditableIface")
    (type GtkCellEditable*->void "void ($(GtkCellEditable *))")
    (type *GtkCellEditable*->void (function void (GtkCellEditable*)) "void ((*$)(GtkCellEditable *))")
    (type GtkCellEditable*,GdkEvent*->void "void ($(GtkCellEditable *,GdkEvent *))")
    (type *GtkCellEditable*,GdkEvent*->void (function void (GtkCellEditable* GdkEvent*)) "void ((*$)(GtkCellEditable *,GdkEvent *))")
    (type monster__e1199 int "long")
    (macro GTK_CELL_RENDERER_SELECTED::int "GTK_CELL_RENDERER_SELECTED")
    (macro GTK_CELL_RENDERER_PRELIT::int "GTK_CELL_RENDERER_PRELIT")
    (macro GTK_CELL_RENDERER_INSENSITIVE::int "GTK_CELL_RENDERER_INSENSITIVE")
    (macro GTK_CELL_RENDERER_SORTED::int "GTK_CELL_RENDERER_SORTED")
    (macro GTK_CELL_RENDERER_FOCUSED::int "GTK_CELL_RENDERER_FOCUSED")
    (type GtkCellRendererState monster__e1199 "GtkCellRendererState")
    (type monster__e1200 int "long")
    (macro GTK_CELL_RENDERER_MODE_INERT::int "GTK_CELL_RENDERER_MODE_INERT")
    (macro GTK_CELL_RENDERER_MODE_ACTIVATABLE::int "GTK_CELL_RENDERER_MODE_ACTIVATABLE")
    (macro GTK_CELL_RENDERER_MODE_EDITABLE::int "GTK_CELL_RENDERER_MODE_EDITABLE")
    (type GtkCellRendererMode monster__e1200 "GtkCellRendererMode")
    (type s-_GtkCellRenderer (struct (parent::GtkObject "parent") (xalign::gfloat "xalign") (yalign::gfloat "yalign") (width::gint "width") (height::gint "height") (xpad::guint16 "xpad") (ypad::guint16 "ypad") (mode::guint "mode") (visible::guint "visible") (is_expander::guint "is_expander") (is_expanded::guint "is_expanded") (cell_background_set::guint "cell_background_set") (sensitive::guint "sensitive") (editing::guint "editing")) "struct _GtkCellRenderer")
    (type GtkCellRenderer s-_GtkCellRenderer "GtkCellRenderer")
    (type s-_GtkCellRendererClass (struct (parent_class::GtkObjectClass "parent_class") (get_size::*GtkCellRenderer*,GtkWidget*,GdkRectangle*,gint*,gint*,gint*,gint*->void "get_size") (render::*GtkCellRenderer*,GdkDrawable*,GtkWidget*,GdkRectangle*,GdkRectangle*,GdkRectangle*,GtkCellRendererState->void "render") (activate::*GtkCellRenderer*,GdkEvent*,GtkWidget*,gchar*,GdkRectangle*,GdkRectangle*,GtkCellRendererState->gboolean "activate") (start_editing::*GtkCellRenderer*,GdkEvent*,GtkWidget*,gchar*,GdkRectangle*,GdkRectangle*,GtkCellRendererState->GtkCellEditable* "start_editing") (editing_canceled::*GtkCellRenderer*->void "editing_canceled") (editing_started::*GtkCellRenderer*,GtkCellEditable*,gchar*->void "editing_started") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2")) "struct _GtkCellRendererClass")
    (type GtkCellRendererClass s-_GtkCellRendererClass "GtkCellRendererClass")
    (type GtkCellRenderer*,GtkWidget*,GdkRectangle*,gint*,gint*,gint*,gint*->void "void ($(GtkCellRenderer *,GtkWidget *,GdkRectangle *,gint *,gint *,gint *,gint *))")
    (type *GtkCellRenderer*,GtkWidget*,GdkRectangle*,gint*,gint*,gint*,gint*->void (function void (GtkCellRenderer* GtkWidget* GdkRectangle* gint* gint* gint* gint*)) "void ((*$)(GtkCellRenderer *,GtkWidget *,GdkRectangle *,gint *,gint *,gint *,gint *))")
    (type GtkCellRenderer*,GdkDrawable*,GtkWidget*,GdkRectangle*,GdkRectangle*,GdkRectangle*,GtkCellRendererState->void "void ($(GtkCellRenderer *,GdkDrawable *,GtkWidget *,GdkRectangle *,GdkRectangle *,GdkRectangle *,GtkCellRendererState))")
    (type *GtkCellRenderer*,GdkDrawable*,GtkWidget*,GdkRectangle*,GdkRectangle*,GdkRectangle*,GtkCellRendererState->void (function void (GtkCellRenderer* GdkDrawable* GtkWidget* GdkRectangle* GdkRectangle* GdkRectangle* GtkCellRendererState)) "void ((*$)(GtkCellRenderer *,GdkDrawable *,GtkWidget *,GdkRectangle *,GdkRectangle *,GdkRectangle *,GtkCellRendererState))")
    (type GtkCellRenderer*,GdkEvent*,GtkWidget*,gchar*,GdkRectangle*,GdkRectangle*,GtkCellRendererState->gboolean "gboolean ($(GtkCellRenderer *,GdkEvent *,GtkWidget *,gchar *,GdkRectangle *,GdkRectangle *,GtkCellRendererState))")
    (type *GtkCellRenderer*,GdkEvent*,GtkWidget*,gchar*,GdkRectangle*,GdkRectangle*,GtkCellRendererState->gboolean (function gboolean (GtkCellRenderer* GdkEvent* GtkWidget* gchar* GdkRectangle* GdkRectangle* GtkCellRendererState)) "gboolean ((*$)(GtkCellRenderer *,GdkEvent *,GtkWidget *,gchar *,GdkRectangle *,GdkRectangle *,GtkCellRendererState))")
    (type GtkCellRenderer*,GdkEvent*,GtkWidget*,gchar*,GdkRectangle*,GdkRectangle*,GtkCellRendererState->GtkCellEditable* "GtkCellEditable *($(GtkCellRenderer *,GdkEvent *,GtkWidget *,gchar *,GdkRectangle *,GdkRectangle *,GtkCellRendererState))")
    (type *GtkCellRenderer*,GdkEvent*,GtkWidget*,gchar*,GdkRectangle*,GdkRectangle*,GtkCellRendererState->GtkCellEditable* (function GtkCellEditable* (GtkCellRenderer* GdkEvent* GtkWidget* gchar* GdkRectangle* GdkRectangle* GtkCellRendererState)) "GtkCellEditable *((*$)(GtkCellRenderer *,GdkEvent *,GtkWidget *,gchar *,GdkRectangle *,GdkRectangle *,GtkCellRendererState))")
    (type GtkCellRenderer*->void "void ($(GtkCellRenderer *))")
    (type *GtkCellRenderer*->void (function void (GtkCellRenderer*)) "void ((*$)(GtkCellRenderer *))")
    (type GtkCellRenderer*,GtkCellEditable*,gchar*->void "void ($(GtkCellRenderer *,GtkCellEditable *,gchar *))")
    (type *GtkCellRenderer*,GtkCellEditable*,gchar*->void (function void (GtkCellRenderer* GtkCellEditable* gchar*)) "void ((*$)(GtkCellRenderer *,GtkCellEditable *,gchar *))")
    (type s-_GtkTreeIter (struct (stamp::gint "stamp") (user_data::gpointer "user_data") (user_data2::gpointer "user_data2") (user_data3::gpointer "user_data3")) "struct _GtkTreeIter")
    (type GtkTreeIter s-_GtkTreeIter "GtkTreeIter")
    (type s-_GtkTreePath (struct) "struct _GtkTreePath")
    (type GtkTreePath s-_GtkTreePath "GtkTreePath")
    (type s-_GtkTreeRowReference (struct) "struct _GtkTreeRowReference")
    (type GtkTreeRowReference s-_GtkTreeRowReference "GtkTreeRowReference")
    (type s-_GtkTreeModel (struct) "struct _GtkTreeModel")
    (type GtkTreeModel s-_GtkTreeModel "GtkTreeModel")
    (type s-_GtkTreeModelIface (struct (g_iface::GTypeInterface "g_iface") (row_changed::*GtkTreeModel*,GtkTreePath*,GtkTreeIter*->void "row_changed") (row_inserted::*GtkTreeModel*,GtkTreePath*,GtkTreeIter*->void "row_inserted") (row_has_child_toggled::*GtkTreeModel*,GtkTreePath*,GtkTreeIter*->void "row_has_child_toggled") (row_deleted::*GtkTreeModel*,GtkTreePath*->void "row_deleted") (rows_reordered::*GtkTreeModel*,GtkTreePath*,GtkTreeIter*,gint*->void "rows_reordered") (get_flags::*GtkTreeModel*->GtkTreeModelFlags "get_flags") (get_n_columns::*GtkTreeModel*->gint "get_n_columns") (get_column_type::*GtkTreeModel*,gint->GType "get_column_type") (get_iter::*GtkTreeModel*,GtkTreeIter*,GtkTreePath*->gboolean "get_iter") (get_path::*GtkTreeModel*,GtkTreeIter*->GtkTreePath* "get_path") (get_value::*GtkTreeModel*,GtkTreeIter*,gint,GValue*->void "get_value") (iter_next::*GtkTreeModel*,GtkTreeIter*->gboolean "iter_next") (iter_children::*GtkTreeModel*,GtkTreeIter*,GtkTreeIter*->gboolean "iter_children") (iter_has_child::*GtkTreeModel*,GtkTreeIter*->gboolean "iter_has_child") (iter_n_children::*GtkTreeModel*,GtkTreeIter*->gint "iter_n_children") (iter_nth_child::*GtkTreeModel*,GtkTreeIter*,GtkTreeIter*,gint->gboolean "iter_nth_child") (iter_parent::*GtkTreeModel*,GtkTreeIter*,GtkTreeIter*->gboolean "iter_parent") (ref_node::*GtkTreeModel*,GtkTreeIter*->void "ref_node") (unref_node::*GtkTreeModel*,GtkTreeIter*->void "unref_node")) "struct _GtkTreeModelIface")
    (type GtkTreeModelIface s-_GtkTreeModelIface "GtkTreeModelIface")
    (type GtkTreeModel*,GtkTreePath*,GtkTreeIter*,gpointer->gboolean "gboolean ($(GtkTreeModel *,GtkTreePath *,GtkTreeIter *,gpointer))")
    (type *GtkTreeModel*,GtkTreePath*,GtkTreeIter*,gpointer->gboolean (function gboolean (GtkTreeModel* GtkTreePath* GtkTreeIter* gpointer)) "gboolean ((*$)(GtkTreeModel *,GtkTreePath *,GtkTreeIter *,gpointer))")
    (type GtkTreeModelForeachFunc *GtkTreeModel*,GtkTreePath*,GtkTreeIter*,gpointer->gboolean "GtkTreeModelForeachFunc")
    (type monster__e1201 int "long")
    (macro GTK_TREE_MODEL_ITERS_PERSIST::int "GTK_TREE_MODEL_ITERS_PERSIST")
    (macro GTK_TREE_MODEL_LIST_ONLY::int "GTK_TREE_MODEL_LIST_ONLY")
    (type GtkTreeModelFlags monster__e1201 "GtkTreeModelFlags")
    (type GtkTreeModel*,GtkTreePath*,GtkTreeIter*->void "void ($(GtkTreeModel *,GtkTreePath *,GtkTreeIter *))")
    (type *GtkTreeModel*,GtkTreePath*,GtkTreeIter*->void (function void (GtkTreeModel* GtkTreePath* GtkTreeIter*)) "void ((*$)(GtkTreeModel *,GtkTreePath *,GtkTreeIter *))")
    (type GtkTreeModel*,GtkTreePath*->void "void ($(GtkTreeModel *,GtkTreePath *))")
    (type *GtkTreeModel*,GtkTreePath*->void (function void (GtkTreeModel* GtkTreePath*)) "void ((*$)(GtkTreeModel *,GtkTreePath *))")
    (type GtkTreeModel*,GtkTreePath*,GtkTreeIter*,gint*->void "void ($(GtkTreeModel *,GtkTreePath *,GtkTreeIter *,gint *))")
    (type *GtkTreeModel*,GtkTreePath*,GtkTreeIter*,gint*->void (function void (GtkTreeModel* GtkTreePath* GtkTreeIter* gint*)) "void ((*$)(GtkTreeModel *,GtkTreePath *,GtkTreeIter *,gint *))")
    (type GtkTreeModel*->GtkTreeModelFlags "GtkTreeModelFlags ($(GtkTreeModel *))")
    (type *GtkTreeModel*->GtkTreeModelFlags (function GtkTreeModelFlags (GtkTreeModel*)) "GtkTreeModelFlags ((*$)(GtkTreeModel *))")
    (type GtkTreeModel*->gint "gint ($(GtkTreeModel *))")
    (type *GtkTreeModel*->gint (function gint (GtkTreeModel*)) "gint ((*$)(GtkTreeModel *))")
    (type GtkTreeModel*,gint->GType "GType ($(GtkTreeModel *,gint))")
    (type *GtkTreeModel*,gint->GType (function GType (GtkTreeModel* gint)) "GType ((*$)(GtkTreeModel *,gint))")
    (type GtkTreeModel*,GtkTreeIter*,GtkTreePath*->gboolean "gboolean ($(GtkTreeModel *,GtkTreeIter *,GtkTreePath *))")
    (type *GtkTreeModel*,GtkTreeIter*,GtkTreePath*->gboolean (function gboolean (GtkTreeModel* GtkTreeIter* GtkTreePath*)) "gboolean ((*$)(GtkTreeModel *,GtkTreeIter *,GtkTreePath *))")
    (type GtkTreeModel*,GtkTreeIter*->GtkTreePath* "GtkTreePath *($(GtkTreeModel *,GtkTreeIter *))")
    (type *GtkTreeModel*,GtkTreeIter*->GtkTreePath* (function GtkTreePath* (GtkTreeModel* GtkTreeIter*)) "GtkTreePath *((*$)(GtkTreeModel *,GtkTreeIter *))")
    (type GtkTreeModel*,GtkTreeIter*,gint,GValue*->void "void ($(GtkTreeModel *,GtkTreeIter *,gint,GValue *))")
    (type *GtkTreeModel*,GtkTreeIter*,gint,GValue*->void (function void (GtkTreeModel* GtkTreeIter* gint GValue*)) "void ((*$)(GtkTreeModel *,GtkTreeIter *,gint,GValue *))")
    (type GtkTreeModel*,GtkTreeIter*->gboolean "gboolean ($(GtkTreeModel *,GtkTreeIter *))")
    (type *GtkTreeModel*,GtkTreeIter*->gboolean (function gboolean (GtkTreeModel* GtkTreeIter*)) "gboolean ((*$)(GtkTreeModel *,GtkTreeIter *))")
    (type GtkTreeModel*,GtkTreeIter*,GtkTreeIter*->gboolean "gboolean ($(GtkTreeModel *,GtkTreeIter *,GtkTreeIter *))")
    (type *GtkTreeModel*,GtkTreeIter*,GtkTreeIter*->gboolean (function gboolean (GtkTreeModel* GtkTreeIter* GtkTreeIter*)) "gboolean ((*$)(GtkTreeModel *,GtkTreeIter *,GtkTreeIter *))")
    (type GtkTreeModel*,GtkTreeIter*->gint "gint ($(GtkTreeModel *,GtkTreeIter *))")
    (type *GtkTreeModel*,GtkTreeIter*->gint (function gint (GtkTreeModel* GtkTreeIter*)) "gint ((*$)(GtkTreeModel *,GtkTreeIter *))")
    (type GtkTreeModel*,GtkTreeIter*,GtkTreeIter*,gint->gboolean "gboolean ($(GtkTreeModel *,GtkTreeIter *,GtkTreeIter *,gint))")
    (type *GtkTreeModel*,GtkTreeIter*,GtkTreeIter*,gint->gboolean (function gboolean (GtkTreeModel* GtkTreeIter* GtkTreeIter* gint)) "gboolean ((*$)(GtkTreeModel *,GtkTreeIter *,GtkTreeIter *,gint))")
    (type GtkTreeModel*,GtkTreeIter*->void "void ($(GtkTreeModel *,GtkTreeIter *))")
    (type *GtkTreeModel*,GtkTreeIter*->void (function void (GtkTreeModel* GtkTreeIter*)) "void ((*$)(GtkTreeModel *,GtkTreeIter *))")
    (type monster__e1202 int "long")
    (macro GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID::int "GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID")
    (macro GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID::int "GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID")
    (type s-_GtkTreeSortable (struct) "struct _GtkTreeSortable")
    (type GtkTreeSortable s-_GtkTreeSortable "GtkTreeSortable")
    (type s-_GtkTreeSortableIface (struct (g_iface::GTypeInterface "g_iface") (sort_column_changed::*GtkTreeSortable*->void "sort_column_changed") (get_sort_column_id::*GtkTreeSortable*,gint*,GtkSortType*->gboolean "get_sort_column_id") (set_sort_column_id::*GtkTreeSortable*,gint,GtkSortType->void "set_sort_column_id") (set_sort_func::*GtkTreeSortable*,gint,GtkTreeIterCompareFunc,gpointer,GtkDestroyNotify->void "set_sort_func") (set_default_sort_func::*GtkTreeSortable*,GtkTreeIterCompareFunc,gpointer,GtkDestroyNotify->void "set_default_sort_func") (has_default_sort_func::*GtkTreeSortable*->gboolean "has_default_sort_func")) "struct _GtkTreeSortableIface")
    (type GtkTreeSortableIface s-_GtkTreeSortableIface "GtkTreeSortableIface")
    (type GtkTreeModel*,GtkTreeIter*,GtkTreeIter*,gpointer->gint "gint ($(GtkTreeModel *,GtkTreeIter *,GtkTreeIter *,gpointer))")
    (type *GtkTreeModel*,GtkTreeIter*,GtkTreeIter*,gpointer->gint (function gint (GtkTreeModel* GtkTreeIter* GtkTreeIter* gpointer)) "gint ((*$)(GtkTreeModel *,GtkTreeIter *,GtkTreeIter *,gpointer))")
    (type GtkTreeIterCompareFunc *GtkTreeModel*,GtkTreeIter*,GtkTreeIter*,gpointer->gint "GtkTreeIterCompareFunc")
    (type GtkTreeSortable*->void "void ($(GtkTreeSortable *))")
    (type *GtkTreeSortable*->void (function void (GtkTreeSortable*)) "void ((*$)(GtkTreeSortable *))")
    (type GtkSortType* (pointer GtkSortType) "GtkSortType *")
    (type GtkTreeSortable*,gint*,GtkSortType*->gboolean "gboolean ($(GtkTreeSortable *,gint *,GtkSortType *))")
    (type *GtkTreeSortable*,gint*,GtkSortType*->gboolean (function gboolean (GtkTreeSortable* gint* GtkSortType*)) "gboolean ((*$)(GtkTreeSortable *,gint *,GtkSortType *))")
    (type GtkTreeSortable*,gint,GtkSortType->void "void ($(GtkTreeSortable *,gint,GtkSortType))")
    (type *GtkTreeSortable*,gint,GtkSortType->void (function void (GtkTreeSortable* gint GtkSortType)) "void ((*$)(GtkTreeSortable *,gint,GtkSortType))")
    (type GtkTreeSortable*,gint,GtkTreeIterCompareFunc,gpointer,GtkDestroyNotify->void "void ($(GtkTreeSortable *,gint,GtkTreeIterCompareFunc,gpointer,GtkDestroyNotify))")
    (type *GtkTreeSortable*,gint,GtkTreeIterCompareFunc,gpointer,GtkDestroyNotify->void (function void (GtkTreeSortable* gint GtkTreeIterCompareFunc gpointer GtkDestroyNotify)) "void ((*$)(GtkTreeSortable *,gint,GtkTreeIterCompareFunc,gpointer,GtkDestroyNotify))")
    (type GtkTreeSortable*,GtkTreeIterCompareFunc,gpointer,GtkDestroyNotify->void "void ($(GtkTreeSortable *,GtkTreeIterCompareFunc,gpointer,GtkDestroyNotify))")
    (type *GtkTreeSortable*,GtkTreeIterCompareFunc,gpointer,GtkDestroyNotify->void (function void (GtkTreeSortable* GtkTreeIterCompareFunc gpointer GtkDestroyNotify)) "void ((*$)(GtkTreeSortable *,GtkTreeIterCompareFunc,gpointer,GtkDestroyNotify))")
    (type GtkTreeSortable*->gboolean "gboolean ($(GtkTreeSortable *))")
    (type *GtkTreeSortable*->gboolean (function gboolean (GtkTreeSortable*)) "gboolean ((*$)(GtkTreeSortable *))")
    (type monster__e1203 int "long")
    (macro GTK_TREE_VIEW_COLUMN_GROW_ONLY::int "GTK_TREE_VIEW_COLUMN_GROW_ONLY")
    (macro GTK_TREE_VIEW_COLUMN_AUTOSIZE::int "GTK_TREE_VIEW_COLUMN_AUTOSIZE")
    (macro GTK_TREE_VIEW_COLUMN_FIXED::int "GTK_TREE_VIEW_COLUMN_FIXED")
    (type GtkTreeViewColumnSizing monster__e1203 "GtkTreeViewColumnSizing")
    (type s-_GtkTreeViewColumn (struct (parent::GtkObject "parent") (tree_view::GtkWidget* "tree_view") (button::GtkWidget* "button") (child::GtkWidget* "child") (arrow::GtkWidget* "arrow") (alignment::GtkWidget* "alignment") (window::GdkWindow* "window") (editable_widget::GtkCellEditable* "editable_widget") (xalign::gfloat "xalign") (property_changed_signal::guint "property_changed_signal") (spacing::gint "spacing") (column_type::GtkTreeViewColumnSizing "column_type") (requested_width::gint "requested_width") (button_request::gint "button_request") (resized_width::gint "resized_width") (width::gint "width") (fixed_width::gint "fixed_width") (min_width::gint "min_width") (max_width::gint "max_width") (drag_x::gint "drag_x") (drag_y::gint "drag_y") (title::gchar* "title") (cell_list::GList* "cell_list") (sort_clicked_signal::guint "sort_clicked_signal") (sort_column_changed_signal::guint "sort_column_changed_signal") (sort_column_id::gint "sort_column_id") (sort_order::GtkSortType "sort_order") (visible::guint "visible") (resizable::guint "resizable") (clickable::guint "clickable") (dirty::guint "dirty") (show_sort_indicator::guint "show_sort_indicator") (maybe_reordered::guint "maybe_reordered") (reorderable::guint "reorderable") (use_resized_width::guint "use_resized_width") (expand::guint "expand")) "struct _GtkTreeViewColumn")
    (type GtkTreeViewColumn s-_GtkTreeViewColumn "GtkTreeViewColumn")
    (type s-_GtkTreeViewColumnClass (struct (parent_class::GtkObjectClass "parent_class") (clicked::*GtkTreeViewColumn*->void "clicked") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkTreeViewColumnClass")
    (type GtkTreeViewColumnClass s-_GtkTreeViewColumnClass "GtkTreeViewColumnClass")
    (type GtkTreeViewColumn*,GtkCellRenderer*,GtkTreeModel*,GtkTreeIter*,gpointer->void "void ($(GtkTreeViewColumn *,GtkCellRenderer *,GtkTreeModel *,GtkTreeIter *,gpointer))")
    (type *GtkTreeViewColumn*,GtkCellRenderer*,GtkTreeModel*,GtkTreeIter*,gpointer->void (function void (GtkTreeViewColumn* GtkCellRenderer* GtkTreeModel* GtkTreeIter* gpointer)) "void ((*$)(GtkTreeViewColumn *,GtkCellRenderer *,GtkTreeModel *,GtkTreeIter *,gpointer))")
    (type GtkTreeCellDataFunc *GtkTreeViewColumn*,GtkCellRenderer*,GtkTreeModel*,GtkTreeIter*,gpointer->void "GtkTreeCellDataFunc")
    (type GtkTreeViewColumn*->void "void ($(GtkTreeViewColumn *))")
    (type *GtkTreeViewColumn*->void (function void (GtkTreeViewColumn*)) "void ((*$)(GtkTreeViewColumn *))")
    (type s-_GtkCellLayout (struct) "struct _GtkCellLayout")
    (type GtkCellLayout s-_GtkCellLayout "GtkCellLayout")
    (type s-_GtkCellLayoutIface (struct (g_iface::GTypeInterface "g_iface") (pack_start::*GtkCellLayout*,GtkCellRenderer*,gboolean->void "pack_start") (pack_end::*GtkCellLayout*,GtkCellRenderer*,gboolean->void "pack_end") (clear::*GtkCellLayout*->void "clear") (add_attribute::*GtkCellLayout*,GtkCellRenderer*,gchar*,gint->void "add_attribute") (set_cell_data_func::*GtkCellLayout*,GtkCellRenderer*,GtkCellLayoutDataFunc,gpointer,GDestroyNotify->void "set_cell_data_func") (clear_attributes::*GtkCellLayout*,GtkCellRenderer*->void "clear_attributes") (reorder::*GtkCellLayout*,GtkCellRenderer*,gint->void "reorder")) "struct _GtkCellLayoutIface")
    (type GtkCellLayoutIface s-_GtkCellLayoutIface "GtkCellLayoutIface")
    (type GtkCellLayout*,GtkCellRenderer*,GtkTreeModel*,GtkTreeIter*,gpointer->void "void ($(GtkCellLayout *,GtkCellRenderer *,GtkTreeModel *,GtkTreeIter *,gpointer))")
    (type *GtkCellLayout*,GtkCellRenderer*,GtkTreeModel*,GtkTreeIter*,gpointer->void (function void (GtkCellLayout* GtkCellRenderer* GtkTreeModel* GtkTreeIter* gpointer)) "void ((*$)(GtkCellLayout *,GtkCellRenderer *,GtkTreeModel *,GtkTreeIter *,gpointer))")
    (type GtkCellLayoutDataFunc *GtkCellLayout*,GtkCellRenderer*,GtkTreeModel*,GtkTreeIter*,gpointer->void "GtkCellLayoutDataFunc")
    (type GtkCellLayout*,GtkCellRenderer*,gboolean->void "void ($(GtkCellLayout *,GtkCellRenderer *,gboolean))")
    (type *GtkCellLayout*,GtkCellRenderer*,gboolean->void (function void (GtkCellLayout* GtkCellRenderer* gboolean)) "void ((*$)(GtkCellLayout *,GtkCellRenderer *,gboolean))")
    (type GtkCellLayout*->void "void ($(GtkCellLayout *))")
    (type *GtkCellLayout*->void (function void (GtkCellLayout*)) "void ((*$)(GtkCellLayout *))")
    (type GtkCellLayout*,GtkCellRenderer*,gchar*,gint->void "void ($(GtkCellLayout *,GtkCellRenderer *,gchar *,gint))")
    (type *GtkCellLayout*,GtkCellRenderer*,gchar*,gint->void (function void (GtkCellLayout* GtkCellRenderer* gchar* gint)) "void ((*$)(GtkCellLayout *,GtkCellRenderer *,gchar *,gint))")
    (type GtkCellLayout*,GtkCellRenderer*,GtkCellLayoutDataFunc,gpointer,GDestroyNotify->void "void ($(GtkCellLayout *,GtkCellRenderer *,GtkCellLayoutDataFunc,gpointer,GDestroyNotify))")
    (type *GtkCellLayout*,GtkCellRenderer*,GtkCellLayoutDataFunc,gpointer,GDestroyNotify->void (function void (GtkCellLayout* GtkCellRenderer* GtkCellLayoutDataFunc gpointer GDestroyNotify)) "void ((*$)(GtkCellLayout *,GtkCellRenderer *,GtkCellLayoutDataFunc,gpointer,GDestroyNotify))")
    (type GtkCellLayout*,GtkCellRenderer*->void "void ($(GtkCellLayout *,GtkCellRenderer *))")
    (type *GtkCellLayout*,GtkCellRenderer*->void (function void (GtkCellLayout* GtkCellRenderer*)) "void ((*$)(GtkCellLayout *,GtkCellRenderer *))")
    (type GtkCellLayout*,GtkCellRenderer*,gint->void "void ($(GtkCellLayout *,GtkCellRenderer *,gint))")
    (type *GtkCellLayout*,GtkCellRenderer*,gint->void (function void (GtkCellLayout* GtkCellRenderer* gint)) "void ((*$)(GtkCellLayout *,GtkCellRenderer *,gint))")
    (type s-_GtkCellRendererText (struct (parent::GtkCellRenderer "parent") (text::gchar* "text") (font::PangoFontDescription* "font") (font_scale::gdouble "font_scale") (foreground::PangoColor "foreground") (background::PangoColor "background") (extra_attrs::PangoAttrList* "extra_attrs") (underline_style::PangoUnderline "underline_style") (rise::gint "rise") (fixed_height_rows::gint "fixed_height_rows") (strikethrough::guint "strikethrough") (editable::guint "editable") (scale_set::guint "scale_set") (foreground_set::guint "foreground_set") (background_set::guint "background_set") (underline_set::guint "underline_set") (rise_set::guint "rise_set") (strikethrough_set::guint "strikethrough_set") (editable_set::guint "editable_set") (calc_fixed_height::guint "calc_fixed_height")) "struct _GtkCellRendererText")
    (type GtkCellRendererText s-_GtkCellRendererText "GtkCellRendererText")
    (type s-_GtkCellRendererTextClass (struct (parent_class::GtkCellRendererClass "parent_class") (edited::*GtkCellRendererText*,gchar*,gchar*->void "edited") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkCellRendererTextClass")
    (type GtkCellRendererTextClass s-_GtkCellRendererTextClass "GtkCellRendererTextClass")
    (type GtkCellRendererText*,gchar*,gchar*->void "void ($(GtkCellRendererText *,gchar *,gchar *))")
    (type *GtkCellRendererText*,gchar*,gchar*->void (function void (GtkCellRendererText* gchar* gchar*)) "void ((*$)(GtkCellRendererText *,gchar *,gchar *))")
    (type s-_GtkCellRendererCombo (struct (parent::GtkCellRendererText "parent") (model::GtkTreeModel* "model") (text_column::gint "text_column") (has_entry::gboolean "has_entry") (focus_out_id::guint "focus_out_id")) "struct _GtkCellRendererCombo")
    (type GtkCellRendererCombo s-_GtkCellRendererCombo "GtkCellRendererCombo")
    (type s-_GtkCellRendererComboClass (struct (parent::GtkCellRendererTextClass "parent")) "struct _GtkCellRendererComboClass")
    (type GtkCellRendererComboClass s-_GtkCellRendererComboClass "GtkCellRendererComboClass")
    (type s-_GtkCellRendererPixbuf (struct (parent::GtkCellRenderer "parent") (pixbuf::GdkPixbuf* "pixbuf") (pixbuf_expander_open::GdkPixbuf* "pixbuf_expander_open") (pixbuf_expander_closed::GdkPixbuf* "pixbuf_expander_closed")) "struct _GtkCellRendererPixbuf")
    (type GtkCellRendererPixbuf s-_GtkCellRendererPixbuf "GtkCellRendererPixbuf")
    (type s-_GtkCellRendererPixbufClass (struct (parent_class::GtkCellRendererClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkCellRendererPixbufClass")
    (type GtkCellRendererPixbufClass s-_GtkCellRendererPixbufClass "GtkCellRendererPixbufClass")
    (type s-_GtkCellRendererProgress (struct (parent_instance::GtkCellRenderer "parent_instance") (priv::GtkCellRendererProgressPrivate* "priv")) "struct _GtkCellRendererProgress")
    (type GtkCellRendererProgress s-_GtkCellRendererProgress "GtkCellRendererProgress")
    (type s-_GtkCellRendererProgressClass (struct (parent_class::GtkCellRendererClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkCellRendererProgressClass")
    (type GtkCellRendererProgressClass s-_GtkCellRendererProgressClass "GtkCellRendererProgressClass")
    (type s-_GtkCellRendererProgressPrivate (struct) "struct _GtkCellRendererProgressPrivate")
    (type GtkCellRendererProgressPrivate s-_GtkCellRendererProgressPrivate "GtkCellRendererProgressPrivate")
    (type s-_GtkCellRendererToggle (struct (parent::GtkCellRenderer "parent") (active::guint "active") (activatable::guint "activatable") (radio::guint "radio")) "struct _GtkCellRendererToggle")
    (type GtkCellRendererToggle s-_GtkCellRendererToggle "GtkCellRendererToggle")
    (type s-_GtkCellRendererToggleClass (struct (parent_class::GtkCellRendererClass "parent_class") (toggled::*GtkCellRendererToggle*,gchar*->void "toggled") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkCellRendererToggleClass")
    (type GtkCellRendererToggleClass s-_GtkCellRendererToggleClass "GtkCellRendererToggleClass")
    (type GtkCellRendererToggle*,gchar*->void "void ($(GtkCellRendererToggle *,gchar *))")
    (type *GtkCellRendererToggle*,gchar*->void (function void (GtkCellRendererToggle* gchar*)) "void ((*$)(GtkCellRendererToggle *,gchar *))")
    (type s-_GtkCellView (struct (parent_instance::GtkWidget "parent_instance") (priv::GtkCellViewPrivate* "priv")) "struct _GtkCellView")
    (type GtkCellView s-_GtkCellView "GtkCellView")
    (type s-_GtkCellViewClass (struct (parent_class::GtkWidgetClass "parent_class")) "struct _GtkCellViewClass")
    (type GtkCellViewClass s-_GtkCellViewClass "GtkCellViewClass")
    (type s-_GtkCellViewPrivate (struct) "struct _GtkCellViewPrivate")
    (type GtkCellViewPrivate s-_GtkCellViewPrivate "GtkCellViewPrivate")
    (type s-_GtkToggleButton (struct (button::GtkButton "button") (active::guint "active") (draw_indicator::guint "draw_indicator") (inconsistent::guint "inconsistent")) "struct _GtkToggleButton")
    (type GtkToggleButton s-_GtkToggleButton "GtkToggleButton")
    (type s-_GtkToggleButtonClass (struct (parent_class::GtkButtonClass "parent_class") (toggled::*GtkToggleButton*->void "toggled") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkToggleButtonClass")
    (type GtkToggleButtonClass s-_GtkToggleButtonClass "GtkToggleButtonClass")
    (type GtkToggleButton*->void "void ($(GtkToggleButton *))")
    (type *GtkToggleButton*->void (function void (GtkToggleButton*)) "void ((*$)(GtkToggleButton *))")
    (type s-_GtkCheckButton (struct (toggle_button::GtkToggleButton "toggle_button")) "struct _GtkCheckButton")
    (type GtkCheckButton s-_GtkCheckButton "GtkCheckButton")
    (type s-_GtkCheckButtonClass (struct (parent_class::GtkToggleButtonClass "parent_class") (draw_indicator::*GtkCheckButton*,GdkRectangle*->void "draw_indicator") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkCheckButtonClass")
    (type GtkCheckButtonClass s-_GtkCheckButtonClass "GtkCheckButtonClass")
    (type GtkCheckButton*,GdkRectangle*->void "void ($(GtkCheckButton *,GdkRectangle *))")
    (type *GtkCheckButton*,GdkRectangle*->void (function void (GtkCheckButton* GdkRectangle*)) "void ((*$)(GtkCheckButton *,GdkRectangle *))")
    (type s-_GtkItem (struct (bin::GtkBin "bin")) "struct _GtkItem")
    (type GtkItem s-_GtkItem "GtkItem")
    (type s-_GtkItemClass (struct (parent_class::GtkBinClass "parent_class") (select::*GtkItem*->void "select") (deselect::*GtkItem*->void "deselect") (toggle::*GtkItem*->void "toggle") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkItemClass")
    (type GtkItemClass s-_GtkItemClass "GtkItemClass")
    (type GtkItem*->void "void ($(GtkItem *))")
    (type *GtkItem*->void (function void (GtkItem*)) "void ((*$)(GtkItem *))")
    (type s-_GtkMenuItem (struct (item::GtkItem "item") (submenu::GtkWidget* "submenu") (event_window::GdkWindow* "event_window") (toggle_size::guint16 "toggle_size") (accelerator_width::guint16 "accelerator_width") (accel_path::gchar* "accel_path") (show_submenu_indicator::guint "show_submenu_indicator") (submenu_placement::guint "submenu_placement") (submenu_direction::guint "submenu_direction") (right_justify::guint "right_justify") (timer_from_keypress::guint "timer_from_keypress") (timer::guint "timer")) "struct _GtkMenuItem")
    (type GtkMenuItem s-_GtkMenuItem "GtkMenuItem")
    (type s-_GtkMenuItemClass (struct (parent_class::GtkItemClass "parent_class") (hide_on_activate::guint "hide_on_activate") (activate::*GtkMenuItem*->void "activate") (activate_item::*GtkMenuItem*->void "activate_item") (toggle_size_request::*GtkMenuItem*,gint*->void "toggle_size_request") (toggle_size_allocate::*GtkMenuItem*,gint->void "toggle_size_allocate") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkMenuItemClass")
    (type GtkMenuItemClass s-_GtkMenuItemClass "GtkMenuItemClass")
    (type GtkMenuItem*->void "void ($(GtkMenuItem *))")
    (type *GtkMenuItem*->void (function void (GtkMenuItem*)) "void ((*$)(GtkMenuItem *))")
    (type GtkMenuItem*,gint*->void "void ($(GtkMenuItem *,gint *))")
    (type *GtkMenuItem*,gint*->void (function void (GtkMenuItem* gint*)) "void ((*$)(GtkMenuItem *,gint *))")
    (type GtkMenuItem*,gint->void "void ($(GtkMenuItem *,gint))")
    (type *GtkMenuItem*,gint->void (function void (GtkMenuItem* gint)) "void ((*$)(GtkMenuItem *,gint))")
    (type s-_GtkCheckMenuItem (struct (menu_item::GtkMenuItem "menu_item") (active::guint "active") (always_show_toggle::guint "always_show_toggle") (inconsistent::guint "inconsistent") (draw_as_radio::guint "draw_as_radio")) "struct _GtkCheckMenuItem")
    (type GtkCheckMenuItem s-_GtkCheckMenuItem "GtkCheckMenuItem")
    (type s-_GtkCheckMenuItemClass (struct (parent_class::GtkMenuItemClass "parent_class") (toggled::*GtkCheckMenuItem*->void "toggled") (draw_indicator::*GtkCheckMenuItem*,GdkRectangle*->void "draw_indicator") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkCheckMenuItemClass")
    (type GtkCheckMenuItemClass s-_GtkCheckMenuItemClass "GtkCheckMenuItemClass")
    (type GtkCheckMenuItem*->void "void ($(GtkCheckMenuItem *))")
    (type *GtkCheckMenuItem*->void (function void (GtkCheckMenuItem*)) "void ((*$)(GtkCheckMenuItem *))")
    (type GtkCheckMenuItem*,GdkRectangle*->void "void ($(GtkCheckMenuItem *,GdkRectangle *))")
    (type *GtkCheckMenuItem*,GdkRectangle*->void (function void (GtkCheckMenuItem* GdkRectangle*)) "void ((*$)(GtkCheckMenuItem *,GdkRectangle *))")
    (type s-_GtkTargetList (struct (list::GList* "list") (ref_count::guint "ref_count")) "struct _GtkTargetList")
    (type GtkTargetList s-_GtkTargetList "GtkTargetList")
    (type s-_GtkTargetEntry (struct (target::gchar* "target") (flags::guint "flags") (info::guint "info")) "struct _GtkTargetEntry")
    (type GtkTargetEntry s-_GtkTargetEntry "GtkTargetEntry")
    (type s-_GtkTargetPair (struct (target::GdkAtom "target") (flags::guint "flags") (info::guint "info")) "struct _GtkTargetPair")
    (type GtkTargetPair s-_GtkTargetPair "GtkTargetPair")
    (type GtkClipboard*,GtkSelectionData*,gpointer->void "void ($(GtkClipboard *,GtkSelectionData *,gpointer))")
    (type *GtkClipboard*,GtkSelectionData*,gpointer->void (function void (GtkClipboard* GtkSelectionData* gpointer)) "void ((*$)(GtkClipboard *,GtkSelectionData *,gpointer))")
    (type GtkClipboardReceivedFunc *GtkClipboard*,GtkSelectionData*,gpointer->void "GtkClipboardReceivedFunc")
    (type GtkClipboard*,gchar*,gpointer->void "void ($(GtkClipboard *,gchar *,gpointer))")
    (type *GtkClipboard*,gchar*,gpointer->void (function void (GtkClipboard* gchar* gpointer)) "void ((*$)(GtkClipboard *,gchar *,gpointer))")
    (type GtkClipboardTextReceivedFunc *GtkClipboard*,gchar*,gpointer->void "GtkClipboardTextReceivedFunc")
    (type GtkClipboard*,GdkPixbuf*,gpointer->void "void ($(GtkClipboard *,GdkPixbuf *,gpointer))")
    (type *GtkClipboard*,GdkPixbuf*,gpointer->void (function void (GtkClipboard* GdkPixbuf* gpointer)) "void ((*$)(GtkClipboard *,GdkPixbuf *,gpointer))")
    (type GtkClipboardImageReceivedFunc *GtkClipboard*,GdkPixbuf*,gpointer->void "GtkClipboardImageReceivedFunc")
    (type GdkAtom* (pointer GdkAtom) "GdkAtom *")
    (type GtkClipboard*,GdkAtom*,gint,gpointer->void "void ($(GtkClipboard *,GdkAtom *,gint,gpointer))")
    (type *GtkClipboard*,GdkAtom*,gint,gpointer->void (function void (GtkClipboard* GdkAtom* gint gpointer)) "void ((*$)(GtkClipboard *,GdkAtom *,gint,gpointer))")
    (type GtkClipboardTargetsReceivedFunc *GtkClipboard*,GdkAtom*,gint,gpointer->void "GtkClipboardTargetsReceivedFunc")
    (type GtkClipboard*,GtkSelectionData*,guint,gpointer->void "void ($(GtkClipboard *,GtkSelectionData *,guint,gpointer))")
    (type *GtkClipboard*,GtkSelectionData*,guint,gpointer->void (function void (GtkClipboard* GtkSelectionData* guint gpointer)) "void ((*$)(GtkClipboard *,GtkSelectionData *,guint,gpointer))")
    (type GtkClipboardGetFunc *GtkClipboard*,GtkSelectionData*,guint,gpointer->void "GtkClipboardGetFunc")
    (type GtkClipboard*,gpointer->void "void ($(GtkClipboard *,gpointer))")
    (type *GtkClipboard*,gpointer->void (function void (GtkClipboard* gpointer)) "void ((*$)(GtkClipboard *,gpointer))")
    (type GtkClipboardClearFunc *GtkClipboard*,gpointer->void "GtkClipboardClearFunc")
    (type s-_GtkRangeLayout (struct) "struct _GtkRangeLayout")
    (type GtkRangeLayout s-_GtkRangeLayout "GtkRangeLayout")
    (type s-_GtkRangeStepTimer (struct) "struct _GtkRangeStepTimer")
    (type GtkRangeStepTimer s-_GtkRangeStepTimer "GtkRangeStepTimer")
    (type s-_GtkRange (struct (widget::GtkWidget "widget") (adjustment::GtkAdjustment* "adjustment") (update_policy::GtkUpdateType "update_policy") (inverted::guint "inverted") (flippable::guint "flippable") (has_stepper_a::guint "has_stepper_a") (has_stepper_b::guint "has_stepper_b") (has_stepper_c::guint "has_stepper_c") (has_stepper_d::guint "has_stepper_d") (need_recalc::guint "need_recalc") (slider_size_fixed::guint "slider_size_fixed") (min_slider_size::gint "min_slider_size") (orientation::GtkOrientation "orientation") (range_rect::GdkRectangle "range_rect") (slider_start::gint "slider_start") (slider_end::gint "slider_end") (round_digits::gint "round_digits") (trough_click_forward::guint "trough_click_forward") (update_pending::guint "update_pending") (layout::GtkRangeLayout* "layout") (timer::GtkRangeStepTimer* "timer") (slide_initial_slider_position::gint "slide_initial_slider_position") (slide_initial_coordinate::gint "slide_initial_coordinate") (update_timeout_id::guint "update_timeout_id") (event_window::GdkWindow* "event_window")) "struct _GtkRange")
    (type GtkRange s-_GtkRange "GtkRange")
    (type s-_GtkRangeClass (struct (parent_class::GtkWidgetClass "parent_class") (slider_detail::gchar* "slider_detail") (stepper_detail::gchar* "stepper_detail") (value_changed::*GtkRange*->void "value_changed") (adjust_bounds::*GtkRange*,gdouble->void "adjust_bounds") (move_slider::*GtkRange*,GtkScrollType->void "move_slider") (get_range_border::*GtkRange*,GtkBorder*->void "get_range_border") (change_value::*GtkRange*,GtkScrollType,gdouble->gboolean "change_value") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3")) "struct _GtkRangeClass")
    (type GtkRangeClass s-_GtkRangeClass "GtkRangeClass")
    (type GtkRange*->void "void ($(GtkRange *))")
    (type *GtkRange*->void (function void (GtkRange*)) "void ((*$)(GtkRange *))")
    (type GtkRange*,gdouble->void "void ($(GtkRange *,gdouble))")
    (type *GtkRange*,gdouble->void (function void (GtkRange* gdouble)) "void ((*$)(GtkRange *,gdouble))")
    (type GtkRange*,GtkScrollType->void "void ($(GtkRange *,GtkScrollType))")
    (type *GtkRange*,GtkScrollType->void (function void (GtkRange* GtkScrollType)) "void ((*$)(GtkRange *,GtkScrollType))")
    (type GtkRange*,GtkBorder*->void "void ($(GtkRange *,GtkBorder *))")
    (type *GtkRange*,GtkBorder*->void (function void (GtkRange* GtkBorder*)) "void ((*$)(GtkRange *,GtkBorder *))")
    (type GtkRange*,GtkScrollType,gdouble->gboolean "gboolean ($(GtkRange *,GtkScrollType,gdouble))")
    (type *GtkRange*,GtkScrollType,gdouble->gboolean (function gboolean (GtkRange* GtkScrollType gdouble)) "gboolean ((*$)(GtkRange *,GtkScrollType,gdouble))")
    (type s-_GtkScrollbar (struct (range::GtkRange "range")) "struct _GtkScrollbar")
    (type GtkScrollbar s-_GtkScrollbar "GtkScrollbar")
    (type s-_GtkScrollbarClass (struct (parent_class::GtkRangeClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkScrollbarClass")
    (type GtkScrollbarClass s-_GtkScrollbarClass "GtkScrollbarClass")
    (type s-_GtkHScrollbar (struct (scrollbar::GtkScrollbar "scrollbar")) "struct _GtkHScrollbar")
    (type GtkHScrollbar s-_GtkHScrollbar "GtkHScrollbar")
    (type s-_GtkHScrollbarClass (struct (parent_class::GtkScrollbarClass "parent_class")) "struct _GtkHScrollbarClass")
    (type GtkHScrollbarClass s-_GtkHScrollbarClass "GtkHScrollbarClass")
    (type s-_GtkVScrollbar (struct (scrollbar::GtkScrollbar "scrollbar")) "struct _GtkVScrollbar")
    (type GtkVScrollbar s-_GtkVScrollbar "GtkVScrollbar")
    (type s-_GtkVScrollbarClass (struct (parent_class::GtkScrollbarClass "parent_class")) "struct _GtkVScrollbarClass")
    (type GtkVScrollbarClass s-_GtkVScrollbarClass "GtkVScrollbarClass")
    (type monster__e1204 int "long")
    (macro GTK_CLIST_IN_DRAG::int "GTK_CLIST_IN_DRAG")
    (macro GTK_CLIST_ROW_HEIGHT_SET::int "GTK_CLIST_ROW_HEIGHT_SET")
    (macro GTK_CLIST_SHOW_TITLES::int "GTK_CLIST_SHOW_TITLES")
    (macro GTK_CLIST_ADD_MODE::int "GTK_CLIST_ADD_MODE")
    (macro GTK_CLIST_AUTO_SORT::int "GTK_CLIST_AUTO_SORT")
    (macro GTK_CLIST_AUTO_RESIZE_BLOCKED::int "GTK_CLIST_AUTO_RESIZE_BLOCKED")
    (macro GTK_CLIST_REORDERABLE::int "GTK_CLIST_REORDERABLE")
    (macro GTK_CLIST_USE_DRAG_ICONS::int "GTK_CLIST_USE_DRAG_ICONS")
    (macro GTK_CLIST_DRAW_DRAG_LINE::int "GTK_CLIST_DRAW_DRAG_LINE")
    (macro GTK_CLIST_DRAW_DRAG_RECT::int "GTK_CLIST_DRAW_DRAG_RECT")
    (type monster__e1205 int "long")
    (macro GTK_CELL_EMPTY::int "GTK_CELL_EMPTY")
    (macro GTK_CELL_TEXT::int "GTK_CELL_TEXT")
    (macro GTK_CELL_PIXMAP::int "GTK_CELL_PIXMAP")
    (macro GTK_CELL_PIXTEXT::int "GTK_CELL_PIXTEXT")
    (macro GTK_CELL_WIDGET::int "GTK_CELL_WIDGET")
    (type GtkCellType monster__e1205 "GtkCellType")
    (type monster__e1206 int "long")
    (macro GTK_CLIST_DRAG_NONE::int "GTK_CLIST_DRAG_NONE")
    (macro GTK_CLIST_DRAG_BEFORE::int "GTK_CLIST_DRAG_BEFORE")
    (macro GTK_CLIST_DRAG_INTO::int "GTK_CLIST_DRAG_INTO")
    (macro GTK_CLIST_DRAG_AFTER::int "GTK_CLIST_DRAG_AFTER")
    (type GtkCListDragPos monster__e1206 "GtkCListDragPos")
    (type monster__e1207 int "long")
    (macro GTK_BUTTON_IGNORED::int "GTK_BUTTON_IGNORED")
    (macro GTK_BUTTON_SELECTS::int "GTK_BUTTON_SELECTS")
    (macro GTK_BUTTON_DRAGS::int "GTK_BUTTON_DRAGS")
    (macro GTK_BUTTON_EXPANDS::int "GTK_BUTTON_EXPANDS")
    (type GtkButtonAction monster__e1207 "GtkButtonAction")
    (type s-_GtkCList (struct (container::GtkContainer "container") (flags::guint16 "flags") (row_mem_chunk::GMemChunk* "row_mem_chunk") (cell_mem_chunk::GMemChunk* "cell_mem_chunk") (freeze_count::guint "freeze_count") (internal_allocation::GdkRectangle "internal_allocation") (rows::gint "rows") (row_height::gint "row_height") (row_list::GList* "row_list") (row_list_end::GList* "row_list_end") (columns::gint "columns") (column_title_area::GdkRectangle "column_title_area") (title_window::GdkWindow* "title_window") (column::GtkCListColumn* "column") (clist_window::GdkWindow* "clist_window") (clist_window_width::gint "clist_window_width") (clist_window_height::gint "clist_window_height") (hoffset::gint "hoffset") (voffset::gint "voffset") (shadow_type::GtkShadowType "shadow_type") (selection_mode::GtkSelectionMode "selection_mode") (selection::GList* "selection") (selection_end::GList* "selection_end") (undo_selection::GList* "undo_selection") (undo_unselection::GList* "undo_unselection") (undo_anchor::gint "undo_anchor") (button_actions::guint8-array-5 "button_actions") (drag_button::guint8 "drag_button") (click_cell::GtkCListCellInfo "click_cell") (hadjustment::GtkAdjustment* "hadjustment") (vadjustment::GtkAdjustment* "vadjustment") (xor_gc::GdkGC* "xor_gc") (fg_gc::GdkGC* "fg_gc") (bg_gc::GdkGC* "bg_gc") (cursor_drag::GdkCursor* "cursor_drag") (x_drag::gint "x_drag") (focus_row::gint "focus_row") (focus_header_column::gint "focus_header_column") (anchor::gint "anchor") (anchor_state::GtkStateType "anchor_state") (drag_pos::gint "drag_pos") (htimer::gint "htimer") (vtimer::gint "vtimer") (sort_type::GtkSortType "sort_type") (compare::GtkCListCompareFunc "compare") (sort_column::gint "sort_column") (drag_highlight_row::gint "drag_highlight_row") (drag_highlight_pos::GtkCListDragPos "drag_highlight_pos")) "struct _GtkCList")
    (type GtkCList s-_GtkCList "GtkCList")
    (type s-_GtkCListClass (struct (parent_class::GtkContainerClass "parent_class") (set_scroll_adjustments::*GtkCList*,GtkAdjustment*,GtkAdjustment*->void "set_scroll_adjustments") (refresh::*GtkCList*->void "refresh") (select_row::*GtkCList*,gint,gint,GdkEvent*->void "select_row") (unselect_row::*GtkCList*,gint,gint,GdkEvent*->void "unselect_row") (row_move::*GtkCList*,gint,gint->void "row_move") (click_column::*GtkCList*,gint->void "click_column") (resize_column::*GtkCList*,gint,gint->void "resize_column") (toggle_focus_row::*GtkCList*->void "toggle_focus_row") (select_all::*GtkCList*->void "select_all") (unselect_all::*GtkCList*->void "unselect_all") (undo_selection::*GtkCList*->void "undo_selection") (start_selection::*GtkCList*->void "start_selection") (end_selection::*GtkCList*->void "end_selection") (extend_selection::*GtkCList*,GtkScrollType,gfloat,gboolean->void "extend_selection") (scroll_horizontal::*GtkCList*,GtkScrollType,gfloat->void "scroll_horizontal") (scroll_vertical::*GtkCList*,GtkScrollType,gfloat->void "scroll_vertical") (toggle_add_mode::*GtkCList*->void "toggle_add_mode") (abort_column_resize::*GtkCList*->void "abort_column_resize") (resync_selection::*GtkCList*,GdkEvent*->void "resync_selection") (selection_find::*GtkCList*,gint,GList*->GList* "selection_find") (draw_row::*GtkCList*,GdkRectangle*,gint,GtkCListRow*->void "draw_row") (draw_drag_highlight::*GtkCList*,GtkCListRow*,gint,GtkCListDragPos->void "draw_drag_highlight") (clear::*GtkCList*->void "clear") (fake_unselect_all::*GtkCList*,gint->void "fake_unselect_all") (sort_list::*GtkCList*->void "sort_list") (insert_row::*GtkCList*,gint,gchar**->gint "insert_row") (remove_row::*GtkCList*,gint->void "remove_row") (set_cell_contents::*GtkCList*,GtkCListRow*,gint,GtkCellType,gchar*,guint8,GdkPixmap*,GdkBitmap*->void "set_cell_contents") (cell_size_request::*GtkCList*,GtkCListRow*,gint,GtkRequisition*->void "cell_size_request")) "struct _GtkCListClass")
    (type GtkCListClass s-_GtkCListClass "GtkCListClass")
    (type s-_GtkCListColumn (struct (title::gchar* "title") (area::GdkRectangle "area") (button::GtkWidget* "button") (window::GdkWindow* "window") (width::gint "width") (min_width::gint "min_width") (max_width::gint "max_width") (justification::GtkJustification "justification") (visible::guint "visible") (width_set::guint "width_set") (resizeable::guint "resizeable") (auto_resize::guint "auto_resize") (button_passive::guint "button_passive")) "struct _GtkCListColumn")
    (type GtkCListColumn s-_GtkCListColumn "GtkCListColumn")
    (type s-_GtkCListRow (struct (cell::GtkCell* "cell") (state::GtkStateType "state") (foreground::GdkColor "foreground") (background::GdkColor "background") (style::GtkStyle* "style") (data::gpointer "data") (destroy::GtkDestroyNotify "destroy") (fg_set::guint "fg_set") (bg_set::guint "bg_set") (selectable::guint "selectable")) "struct _GtkCListRow")
    (type GtkCListRow s-_GtkCListRow "GtkCListRow")
    (type s-_GtkCell (struct (type::GtkCellType "type") (vertical::gint16 "vertical") (horizontal::gint16 "horizontal") (style::GtkStyle* "style") (u::s-monster__s1022 "u")) "struct _GtkCell")
    (type GtkCell s-_GtkCell "GtkCell")
    (type s-_GtkCellText (struct (type::GtkCellType "type") (vertical::gint16 "vertical") (horizontal::gint16 "horizontal") (style::GtkStyle* "style") (text::gchar* "text")) "struct _GtkCellText")
    (type GtkCellText s-_GtkCellText "GtkCellText")
    (type s-_GtkCellPixmap (struct (type::GtkCellType "type") (vertical::gint16 "vertical") (horizontal::gint16 "horizontal") (style::GtkStyle* "style") (pixmap::GdkPixmap* "pixmap") (mask::GdkBitmap* "mask")) "struct _GtkCellPixmap")
    (type GtkCellPixmap s-_GtkCellPixmap "GtkCellPixmap")
    (type s-_GtkCellPixText (struct (type::GtkCellType "type") (vertical::gint16 "vertical") (horizontal::gint16 "horizontal") (style::GtkStyle* "style") (text::gchar* "text") (spacing::guint8 "spacing") (pixmap::GdkPixmap* "pixmap") (mask::GdkBitmap* "mask")) "struct _GtkCellPixText")
    (type GtkCellPixText s-_GtkCellPixText "GtkCellPixText")
    (type s-_GtkCellWidget (struct (type::GtkCellType "type") (vertical::gint16 "vertical") (horizontal::gint16 "horizontal") (style::GtkStyle* "style") (widget::GtkWidget* "widget")) "struct _GtkCellWidget")
    (type GtkCellWidget s-_GtkCellWidget "GtkCellWidget")
    (type GtkCList*,gconstpointer,gconstpointer->gint "gint ($(GtkCList *,gconstpointer,gconstpointer))")
    (type *GtkCList*,gconstpointer,gconstpointer->gint (function gint (GtkCList* gconstpointer gconstpointer)) "gint ((*$)(GtkCList *,gconstpointer,gconstpointer))")
    (type GtkCListCompareFunc *GtkCList*,gconstpointer,gconstpointer->gint "GtkCListCompareFunc")
    (type s-_GtkCListCellInfo (struct (row::gint "row") (column::gint "column")) "struct _GtkCListCellInfo")
    (type GtkCListCellInfo s-_GtkCListCellInfo "GtkCListCellInfo")
    (type s-_GtkCListDestInfo (struct (cell::GtkCListCellInfo "cell") (insert_pos::GtkCListDragPos "insert_pos")) "struct _GtkCListDestInfo")
    (type GtkCListDestInfo s-_GtkCListDestInfo "GtkCListDestInfo")
    (type guint8-array-5 (array guint8) "guint8 $[ 5 ]")
    (type GtkCList*,GtkAdjustment*,GtkAdjustment*->void "void ($(GtkCList *,GtkAdjustment *,GtkAdjustment *))")
    (type *GtkCList*,GtkAdjustment*,GtkAdjustment*->void (function void (GtkCList* GtkAdjustment* GtkAdjustment*)) "void ((*$)(GtkCList *,GtkAdjustment *,GtkAdjustment *))")
    (type GtkCList*->void "void ($(GtkCList *))")
    (type *GtkCList*->void (function void (GtkCList*)) "void ((*$)(GtkCList *))")
    (type GtkCList*,gint,gint,GdkEvent*->void "void ($(GtkCList *,gint,gint,GdkEvent *))")
    (type *GtkCList*,gint,gint,GdkEvent*->void (function void (GtkCList* gint gint GdkEvent*)) "void ((*$)(GtkCList *,gint,gint,GdkEvent *))")
    (type GtkCList*,gint,gint->void "void ($(GtkCList *,gint,gint))")
    (type *GtkCList*,gint,gint->void (function void (GtkCList* gint gint)) "void ((*$)(GtkCList *,gint,gint))")
    (type GtkCList*,gint->void "void ($(GtkCList *,gint))")
    (type *GtkCList*,gint->void (function void (GtkCList* gint)) "void ((*$)(GtkCList *,gint))")
    (type GtkCList*,GtkScrollType,gfloat,gboolean->void "void ($(GtkCList *,GtkScrollType,gfloat,gboolean))")
    (type *GtkCList*,GtkScrollType,gfloat,gboolean->void (function void (GtkCList* GtkScrollType gfloat gboolean)) "void ((*$)(GtkCList *,GtkScrollType,gfloat,gboolean))")
    (type GtkCList*,GtkScrollType,gfloat->void "void ($(GtkCList *,GtkScrollType,gfloat))")
    (type *GtkCList*,GtkScrollType,gfloat->void (function void (GtkCList* GtkScrollType gfloat)) "void ((*$)(GtkCList *,GtkScrollType,gfloat))")
    (type GtkCList*,GdkEvent*->void "void ($(GtkCList *,GdkEvent *))")
    (type *GtkCList*,GdkEvent*->void (function void (GtkCList* GdkEvent*)) "void ((*$)(GtkCList *,GdkEvent *))")
    (type GtkCList*,gint,GList*->GList* "GList *($(GtkCList *,gint,GList *))")
    (type *GtkCList*,gint,GList*->GList* (function GList* (GtkCList* gint GList*)) "GList *((*$)(GtkCList *,gint,GList *))")
    (type GtkCList*,GdkRectangle*,gint,GtkCListRow*->void "void ($(GtkCList *,GdkRectangle *,gint,GtkCListRow *))")
    (type *GtkCList*,GdkRectangle*,gint,GtkCListRow*->void (function void (GtkCList* GdkRectangle* gint GtkCListRow*)) "void ((*$)(GtkCList *,GdkRectangle *,gint,GtkCListRow *))")
    (type GtkCList*,GtkCListRow*,gint,GtkCListDragPos->void "void ($(GtkCList *,GtkCListRow *,gint,GtkCListDragPos))")
    (type *GtkCList*,GtkCListRow*,gint,GtkCListDragPos->void (function void (GtkCList* GtkCListRow* gint GtkCListDragPos)) "void ((*$)(GtkCList *,GtkCListRow *,gint,GtkCListDragPos))")
    ;(type gchar*-array (array gchar*) "gchar *$[  ]")
    (type gchar*-array string* "gchar *$[  ]")
    (type GtkCList*,gint,gchar**->gint "gint ($(GtkCList *,gint,gchar **))")
    (type *GtkCList*,gint,gchar**->gint (function gint (GtkCList* gint gchar**)) "gint ((*$)(GtkCList *,gint,gchar **))")
    (type GtkCList*,GtkCListRow*,gint,GtkCellType,gchar*,guint8,GdkPixmap*,GdkBitmap*->void "void ($(GtkCList *,GtkCListRow *,gint,GtkCellType,gchar *,guint8,GdkPixmap *,GdkBitmap *))")
    (type *GtkCList*,GtkCListRow*,gint,GtkCellType,gchar*,guint8,GdkPixmap*,GdkBitmap*->void (function void (GtkCList* GtkCListRow* gint GtkCellType gchar* guint8 GdkPixmap* GdkBitmap*)) "void ((*$)(GtkCList *,GtkCListRow *,gint,GtkCellType,gchar *,guint8,GdkPixmap *,GdkBitmap *))")
    (type GtkCList*,GtkCListRow*,gint,GtkRequisition*->void "void ($(GtkCList *,GtkCListRow *,gint,GtkRequisition *))")
    (type *GtkCList*,GtkCListRow*,gint,GtkRequisition*->void (function void (GtkCList* GtkCListRow* gint GtkRequisition*)) "void ((*$)(GtkCList *,GtkCListRow *,gint,GtkRequisition *))")
    (type s-monster__s1022 (union (text::gchar* "text") (pm::s-monster__s1020 "pm") (pt::s-monster__s1021 "pt") (widget::GtkWidget* "widget")) "void")
    (type s-monster__s1020 (struct (pixmap::GdkPixmap* "pixmap") (mask::GdkBitmap* "mask")) "void")
    (type s-monster__s1021 (struct (text::gchar* "text") (spacing::guint8 "spacing") (pixmap::GdkPixmap* "pixmap") (mask::GdkBitmap* "mask")) "void")
    (type s-_GtkColorButton (struct (button::GtkButton "button") (priv::GtkColorButtonPrivate* "priv")) "struct _GtkColorButton")
    (type GtkColorButton s-_GtkColorButton "GtkColorButton")
    (type s-_GtkColorButtonClass (struct (parent_class::GtkButtonClass "parent_class") (color_set::*GtkColorButton*->void "color_set") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkColorButtonClass")
    (type GtkColorButtonClass s-_GtkColorButtonClass "GtkColorButtonClass")
    (type s-_GtkColorButtonPrivate (struct) "struct _GtkColorButtonPrivate")
    (type GtkColorButtonPrivate s-_GtkColorButtonPrivate "GtkColorButtonPrivate")
    (type GtkColorButton*->void "void ($(GtkColorButton *))")
    (type *GtkColorButton*->void (function void (GtkColorButton*)) "void ((*$)(GtkColorButton *))")
    (type s-_GtkVBox (struct (box::GtkBox "box")) "struct _GtkVBox")
    (type GtkVBox s-_GtkVBox "GtkVBox")
    (type s-_GtkVBoxClass (struct (parent_class::GtkBoxClass "parent_class")) "struct _GtkVBoxClass")
    (type GtkVBoxClass s-_GtkVBoxClass "GtkVBoxClass")
    (type s-_GtkColorSelection (struct (parent_instance::GtkVBox "parent_instance") (private_data::gpointer "private_data")) "struct _GtkColorSelection")
    (type GtkColorSelection s-_GtkColorSelection "GtkColorSelection")
    (type s-_GtkColorSelectionClass (struct (parent_class::GtkVBoxClass "parent_class") (color_changed::*GtkColorSelection*->void "color_changed") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkColorSelectionClass")
    (type GtkColorSelectionClass s-_GtkColorSelectionClass "GtkColorSelectionClass")
    (type GdkColor*,gint->void "void ($(GdkColor *,gint))")
    (type *GdkColor*,gint->void (function void (GdkColor* gint)) "void ((*$)(GdkColor *,gint))")
    (type GtkColorSelectionChangePaletteFunc *GdkColor*,gint->void "GtkColorSelectionChangePaletteFunc")
    (type GdkScreen*,GdkColor*,gint->void "void ($(GdkScreen *,GdkColor *,gint))")
    (type *GdkScreen*,GdkColor*,gint->void (function void (GdkScreen* GdkColor* gint)) "void ((*$)(GdkScreen *,GdkColor *,gint))")
    (type GtkColorSelectionChangePaletteWithScreenFunc *GdkScreen*,GdkColor*,gint->void "GtkColorSelectionChangePaletteWithScreenFunc")
    (type GtkColorSelection*->void "void ($(GtkColorSelection *))")
    (type *GtkColorSelection*->void (function void (GtkColorSelection*)) "void ((*$)(GtkColorSelection *))")
    (type s-_GtkColorSelectionDialog (struct (parent_instance::GtkDialog "parent_instance") (colorsel::GtkWidget* "colorsel") (ok_button::GtkWidget* "ok_button") (cancel_button::GtkWidget* "cancel_button") (help_button::GtkWidget* "help_button")) "struct _GtkColorSelectionDialog")
    (type GtkColorSelectionDialog s-_GtkColorSelectionDialog "GtkColorSelectionDialog")
    (type s-_GtkColorSelectionDialogClass (struct (parent_class::GtkDialogClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkColorSelectionDialogClass")
    (type GtkColorSelectionDialogClass s-_GtkColorSelectionDialogClass "GtkColorSelectionDialogClass")
    (type s-_GtkHBox (struct (box::GtkBox "box")) "struct _GtkHBox")
    (type GtkHBox s-_GtkHBox "GtkHBox")
    (type s-_GtkHBoxClass (struct (parent_class::GtkBoxClass "parent_class")) "struct _GtkHBoxClass")
    (type GtkHBoxClass s-_GtkHBoxClass "GtkHBoxClass")
    (type s-_GtkCombo (struct (hbox::GtkHBox "hbox") (entry::GtkWidget* "entry") (button::GtkWidget* "button") (popup::GtkWidget* "popup") (popwin::GtkWidget* "popwin") (list::GtkWidget* "list") (entry_change_id::guint "entry_change_id") (list_change_id::guint "list_change_id") (value_in_list::guint "value_in_list") (ok_if_empty::guint "ok_if_empty") (case_sensitive::guint "case_sensitive") (use_arrows::guint "use_arrows") (use_arrows_always::guint "use_arrows_always") (current_button::guint16 "current_button") (activate_id::guint "activate_id")) "struct _GtkCombo")
    (type GtkCombo s-_GtkCombo "GtkCombo")
    (type s-_GtkComboClass (struct (parent_class::GtkHBoxClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkComboClass")
    (type GtkComboClass s-_GtkComboClass "GtkComboClass")
    (type monster__e1208 int "long")
    (macro GTK_DEST_DEFAULT_MOTION::int "GTK_DEST_DEFAULT_MOTION")
    (macro GTK_DEST_DEFAULT_HIGHLIGHT::int "GTK_DEST_DEFAULT_HIGHLIGHT")
    (macro GTK_DEST_DEFAULT_DROP::int "GTK_DEST_DEFAULT_DROP")
    (macro GTK_DEST_DEFAULT_ALL::int "GTK_DEST_DEFAULT_ALL")
    (type GtkDestDefaults monster__e1208 "GtkDestDefaults")
    (type monster__e1209 int "long")
    (macro GTK_TARGET_SAME_APP::int "GTK_TARGET_SAME_APP")
    (macro GTK_TARGET_SAME_WIDGET::int "GTK_TARGET_SAME_WIDGET")
    (type GtkTargetFlags monster__e1209 "GtkTargetFlags")
    (type monster__e1210 int "long")
    (macro GTK_TREE_VIEW_DROP_BEFORE::int "GTK_TREE_VIEW_DROP_BEFORE")
    (macro GTK_TREE_VIEW_DROP_AFTER::int "GTK_TREE_VIEW_DROP_AFTER")
    (macro GTK_TREE_VIEW_DROP_INTO_OR_BEFORE::int "GTK_TREE_VIEW_DROP_INTO_OR_BEFORE")
    (macro GTK_TREE_VIEW_DROP_INTO_OR_AFTER::int "GTK_TREE_VIEW_DROP_INTO_OR_AFTER")
    (type GtkTreeViewDropPosition monster__e1210 "GtkTreeViewDropPosition")
    (type s-_GtkTreeView (struct (parent::GtkContainer "parent") (priv::GtkTreeViewPrivate* "priv")) "struct _GtkTreeView")
    (type GtkTreeView s-_GtkTreeView "GtkTreeView")
    (type s-_GtkTreeViewClass (struct (parent_class::GtkContainerClass "parent_class") (set_scroll_adjustments::*GtkTreeView*,GtkAdjustment*,GtkAdjustment*->void "set_scroll_adjustments") (row_activated::*GtkTreeView*,GtkTreePath*,GtkTreeViewColumn*->void "row_activated") (test_expand_row::*GtkTreeView*,GtkTreeIter*,GtkTreePath*->gboolean "test_expand_row") (test_collapse_row::*GtkTreeView*,GtkTreeIter*,GtkTreePath*->gboolean "test_collapse_row") (row_expanded::*GtkTreeView*,GtkTreeIter*,GtkTreePath*->void "row_expanded") (row_collapsed::*GtkTreeView*,GtkTreeIter*,GtkTreePath*->void "row_collapsed") (columns_changed::*GtkTreeView*->void "columns_changed") (cursor_changed::*GtkTreeView*->void "cursor_changed") (move_cursor::*GtkTreeView*,GtkMovementStep,gint->gboolean "move_cursor") (select_all::*GtkTreeView*->gboolean "select_all") (unselect_all::*GtkTreeView*->gboolean "unselect_all") (select_cursor_row::*GtkTreeView*,gboolean->gboolean "select_cursor_row") (toggle_cursor_row::*GtkTreeView*->gboolean "toggle_cursor_row") (expand_collapse_cursor_row::*GtkTreeView*,gboolean,gboolean,gboolean->gboolean "expand_collapse_cursor_row") (select_cursor_parent::*GtkTreeView*->gboolean "select_cursor_parent") (start_interactive_search::*GtkTreeView*->gboolean "start_interactive_search") (_gtk_reserved0::*void->void "_gtk_reserved0") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkTreeViewClass")
    (type GtkTreeViewClass s-_GtkTreeViewClass "GtkTreeViewClass")
    (type s-_GtkTreeViewPrivate (struct) "struct _GtkTreeViewPrivate")
    (type GtkTreeViewPrivate s-_GtkTreeViewPrivate "GtkTreeViewPrivate")
    (type s-_GtkTreeSelection (struct (parent::GObject "parent") (tree_view::GtkTreeView* "tree_view") (type::GtkSelectionMode "type") (user_func::GtkTreeSelectionFunc "user_func") (user_data::gpointer "user_data") (destroy::GtkDestroyNotify "destroy")) "struct _GtkTreeSelection")
    (type GtkTreeSelection s-_GtkTreeSelection "GtkTreeSelection")
    (type s-_GtkTreeSelectionClass (struct (parent_class::GObjectClass "parent_class") (changed::*GtkTreeSelection*->void "changed") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkTreeSelectionClass")
    (type GtkTreeSelectionClass s-_GtkTreeSelectionClass "GtkTreeSelectionClass")
    (type GtkTreeView*,GtkAdjustment*,GtkAdjustment*->void "void ($(GtkTreeView *,GtkAdjustment *,GtkAdjustment *))")
    (type *GtkTreeView*,GtkAdjustment*,GtkAdjustment*->void (function void (GtkTreeView* GtkAdjustment* GtkAdjustment*)) "void ((*$)(GtkTreeView *,GtkAdjustment *,GtkAdjustment *))")
    (type GtkTreeView*,GtkTreePath*,GtkTreeViewColumn*->void "void ($(GtkTreeView *,GtkTreePath *,GtkTreeViewColumn *))")
    (type *GtkTreeView*,GtkTreePath*,GtkTreeViewColumn*->void (function void (GtkTreeView* GtkTreePath* GtkTreeViewColumn*)) "void ((*$)(GtkTreeView *,GtkTreePath *,GtkTreeViewColumn *))")
    (type GtkTreeView*,GtkTreeIter*,GtkTreePath*->gboolean "gboolean ($(GtkTreeView *,GtkTreeIter *,GtkTreePath *))")
    (type *GtkTreeView*,GtkTreeIter*,GtkTreePath*->gboolean (function gboolean (GtkTreeView* GtkTreeIter* GtkTreePath*)) "gboolean ((*$)(GtkTreeView *,GtkTreeIter *,GtkTreePath *))")
    (type GtkTreeView*,GtkTreeIter*,GtkTreePath*->void "void ($(GtkTreeView *,GtkTreeIter *,GtkTreePath *))")
    (type *GtkTreeView*,GtkTreeIter*,GtkTreePath*->void (function void (GtkTreeView* GtkTreeIter* GtkTreePath*)) "void ((*$)(GtkTreeView *,GtkTreeIter *,GtkTreePath *))")
    (type GtkTreeView*->void "void ($(GtkTreeView *))")
    (type *GtkTreeView*->void (function void (GtkTreeView*)) "void ((*$)(GtkTreeView *))")
    (type GtkTreeView*,GtkMovementStep,gint->gboolean "gboolean ($(GtkTreeView *,GtkMovementStep,gint))")
    (type *GtkTreeView*,GtkMovementStep,gint->gboolean (function gboolean (GtkTreeView* GtkMovementStep gint)) "gboolean ((*$)(GtkTreeView *,GtkMovementStep,gint))")
    (type GtkTreeView*->gboolean "gboolean ($(GtkTreeView *))")
    (type *GtkTreeView*->gboolean (function gboolean (GtkTreeView*)) "gboolean ((*$)(GtkTreeView *))")
    (type GtkTreeView*,gboolean->gboolean "gboolean ($(GtkTreeView *,gboolean))")
    (type *GtkTreeView*,gboolean->gboolean (function gboolean (GtkTreeView* gboolean)) "gboolean ((*$)(GtkTreeView *,gboolean))")
    (type GtkTreeView*,gboolean,gboolean,gboolean->gboolean "gboolean ($(GtkTreeView *,gboolean,gboolean,gboolean))")
    (type *GtkTreeView*,gboolean,gboolean,gboolean->gboolean (function gboolean (GtkTreeView* gboolean gboolean gboolean)) "gboolean ((*$)(GtkTreeView *,gboolean,gboolean,gboolean))")
    (type GtkTreeView*,GtkTreeViewColumn*,GtkTreeViewColumn*,GtkTreeViewColumn*,gpointer->gboolean "gboolean ($(GtkTreeView *,GtkTreeViewColumn *,GtkTreeViewColumn *,GtkTreeViewColumn *,gpointer))")
    (type *GtkTreeView*,GtkTreeViewColumn*,GtkTreeViewColumn*,GtkTreeViewColumn*,gpointer->gboolean (function gboolean (GtkTreeView* GtkTreeViewColumn* GtkTreeViewColumn* GtkTreeViewColumn* gpointer)) "gboolean ((*$)(GtkTreeView *,GtkTreeViewColumn *,GtkTreeViewColumn *,GtkTreeViewColumn *,gpointer))")
    (type GtkTreeViewColumnDropFunc *GtkTreeView*,GtkTreeViewColumn*,GtkTreeViewColumn*,GtkTreeViewColumn*,gpointer->gboolean "GtkTreeViewColumnDropFunc")
    (type GtkTreeView*,GtkTreePath*,gpointer->void "void ($(GtkTreeView *,GtkTreePath *,gpointer))")
    (type *GtkTreeView*,GtkTreePath*,gpointer->void (function void (GtkTreeView* GtkTreePath* gpointer)) "void ((*$)(GtkTreeView *,GtkTreePath *,gpointer))")
    (type GtkTreeViewMappingFunc *GtkTreeView*,GtkTreePath*,gpointer->void "GtkTreeViewMappingFunc")
    (type GtkTreeModel*,gint,gchar*,GtkTreeIter*,gpointer->gboolean "gboolean ($(GtkTreeModel *,gint,gchar *,GtkTreeIter *,gpointer))")
    (type *GtkTreeModel*,gint,gchar*,GtkTreeIter*,gpointer->gboolean (function gboolean (GtkTreeModel* gint gchar* GtkTreeIter* gpointer)) "gboolean ((*$)(GtkTreeModel *,gint,gchar *,GtkTreeIter *,gpointer))")
    (type GtkTreeViewSearchEqualFunc *GtkTreeModel*,gint,gchar*,GtkTreeIter*,gpointer->gboolean "GtkTreeViewSearchEqualFunc")
    (type GtkTreeModel*,GtkTreeIter*,gpointer->gboolean "gboolean ($(GtkTreeModel *,GtkTreeIter *,gpointer))")
    (type *GtkTreeModel*,GtkTreeIter*,gpointer->gboolean (function gboolean (GtkTreeModel* GtkTreeIter* gpointer)) "gboolean ((*$)(GtkTreeModel *,GtkTreeIter *,gpointer))")
    (type GtkTreeViewRowSeparatorFunc *GtkTreeModel*,GtkTreeIter*,gpointer->gboolean "GtkTreeViewRowSeparatorFunc")
    (type GtkTreeView*,GtkTreePath*,gint,gpointer->void "void ($(GtkTreeView *,GtkTreePath *,gint,gpointer))")
    (type *GtkTreeView*,GtkTreePath*,gint,gpointer->void (function void (GtkTreeView* GtkTreePath* gint gpointer)) "void ((*$)(GtkTreeView *,GtkTreePath *,gint,gpointer))")
    (type GtkTreeDestroyCountFunc *GtkTreeView*,GtkTreePath*,gint,gpointer->void "GtkTreeDestroyCountFunc")
    (type s-_GtkComboBox (struct (parent_instance::GtkBin "parent_instance") (priv::GtkComboBoxPrivate* "priv")) "struct _GtkComboBox")
    (type GtkComboBox s-_GtkComboBox "GtkComboBox")
    (type s-_GtkComboBoxClass (struct (parent_class::GtkBinClass "parent_class") (changed::*GtkComboBox*->void "changed") (_gtk_reserved0::*void->void "_gtk_reserved0") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3")) "struct _GtkComboBoxClass")
    (type GtkComboBoxClass s-_GtkComboBoxClass "GtkComboBoxClass")
    (type s-_GtkComboBoxPrivate (struct) "struct _GtkComboBoxPrivate")
    (type GtkComboBoxPrivate s-_GtkComboBoxPrivate "GtkComboBoxPrivate")
    (type GtkComboBox*->void "void ($(GtkComboBox *))")
    (type *GtkComboBox*->void (function void (GtkComboBox*)) "void ((*$)(GtkComboBox *))")
    (type s-_GtkComboBoxEntry (struct (parent_instance::GtkComboBox "parent_instance") (priv::GtkComboBoxEntryPrivate* "priv")) "struct _GtkComboBoxEntry")
    (type GtkComboBoxEntry s-_GtkComboBoxEntry "GtkComboBoxEntry")
    (type s-_GtkComboBoxEntryClass (struct (parent_class::GtkComboBoxClass "parent_class") (_gtk_reserved0::*void->void "_gtk_reserved0") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3")) "struct _GtkComboBoxEntryClass")
    (type GtkComboBoxEntryClass s-_GtkComboBoxEntryClass "GtkComboBoxEntryClass")
    (type s-_GtkComboBoxEntryPrivate (struct) "struct _GtkComboBoxEntryPrivate")
    (type GtkComboBoxEntryPrivate s-_GtkComboBoxEntryPrivate "GtkComboBoxEntryPrivate")
    (type monster__e1211 int "long")
    (macro GTK_CTREE_POS_BEFORE::int "GTK_CTREE_POS_BEFORE")
    (macro GTK_CTREE_POS_AS_CHILD::int "GTK_CTREE_POS_AS_CHILD")
    (macro GTK_CTREE_POS_AFTER::int "GTK_CTREE_POS_AFTER")
    (type GtkCTreePos monster__e1211 "GtkCTreePos")
    (type monster__e1212 int "long")
    (macro GTK_CTREE_LINES_NONE::int "GTK_CTREE_LINES_NONE")
    (macro GTK_CTREE_LINES_SOLID::int "GTK_CTREE_LINES_SOLID")
    (macro GTK_CTREE_LINES_DOTTED::int "GTK_CTREE_LINES_DOTTED")
    (macro GTK_CTREE_LINES_TABBED::int "GTK_CTREE_LINES_TABBED")
    (type GtkCTreeLineStyle monster__e1212 "GtkCTreeLineStyle")
    (type monster__e1213 int "long")
    (macro GTK_CTREE_EXPANDER_NONE::int "GTK_CTREE_EXPANDER_NONE")
    (macro GTK_CTREE_EXPANDER_SQUARE::int "GTK_CTREE_EXPANDER_SQUARE")
    (macro GTK_CTREE_EXPANDER_TRIANGLE::int "GTK_CTREE_EXPANDER_TRIANGLE")
    (macro GTK_CTREE_EXPANDER_CIRCULAR::int "GTK_CTREE_EXPANDER_CIRCULAR")
    (type GtkCTreeExpanderStyle monster__e1213 "GtkCTreeExpanderStyle")
    (type monster__e1214 int "long")
    (macro GTK_CTREE_EXPANSION_EXPAND::int "GTK_CTREE_EXPANSION_EXPAND")
    (macro GTK_CTREE_EXPANSION_EXPAND_RECURSIVE::int "GTK_CTREE_EXPANSION_EXPAND_RECURSIVE")
    (macro GTK_CTREE_EXPANSION_COLLAPSE::int "GTK_CTREE_EXPANSION_COLLAPSE")
    (macro GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE::int "GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE")
    (macro GTK_CTREE_EXPANSION_TOGGLE::int "GTK_CTREE_EXPANSION_TOGGLE")
    (macro GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE::int "GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE")
    (type GtkCTreeExpansionType monster__e1214 "GtkCTreeExpansionType")
    (type s-_GtkCTree (struct (clist::GtkCList "clist") (lines_gc::GdkGC* "lines_gc") (tree_indent::gint "tree_indent") (tree_spacing::gint "tree_spacing") (tree_column::gint "tree_column") (line_style::guint "line_style") (expander_style::guint "expander_style") (show_stub::guint "show_stub") (drag_compare::GtkCTreeCompareDragFunc "drag_compare")) "struct _GtkCTree")
    (type GtkCTree s-_GtkCTree "GtkCTree")
    (type s-_GtkCTreeClass (struct (parent_class::GtkCListClass "parent_class") (tree_select_row::*GtkCTree*,GtkCTreeNode*,gint->void "tree_select_row") (tree_unselect_row::*GtkCTree*,GtkCTreeNode*,gint->void "tree_unselect_row") (tree_expand::*GtkCTree*,GtkCTreeNode*->void "tree_expand") (tree_collapse::*GtkCTree*,GtkCTreeNode*->void "tree_collapse") (tree_move::*GtkCTree*,GtkCTreeNode*,GtkCTreeNode*,GtkCTreeNode*->void "tree_move") (change_focus_row_expansion::*GtkCTree*,GtkCTreeExpansionType->void "change_focus_row_expansion")) "struct _GtkCTreeClass")
    (type GtkCTreeClass s-_GtkCTreeClass "GtkCTreeClass")
    (type s-_GtkCTreeRow (struct (row::GtkCListRow "row") (parent::GtkCTreeNode* "parent") (sibling::GtkCTreeNode* "sibling") (children::GtkCTreeNode* "children") (pixmap_closed::GdkPixmap* "pixmap_closed") (mask_closed::GdkBitmap* "mask_closed") (pixmap_opened::GdkPixmap* "pixmap_opened") (mask_opened::GdkBitmap* "mask_opened") (level::guint16 "level") (is_leaf::guint "is_leaf") (expanded::guint "expanded")) "struct _GtkCTreeRow")
    (type GtkCTreeRow s-_GtkCTreeRow "GtkCTreeRow")
    (type s-_GtkCTreeNode (struct (list::GList "list")) "struct _GtkCTreeNode")
    (type GtkCTreeNode s-_GtkCTreeNode "GtkCTreeNode")
    (type GtkCTree*,GtkCTreeNode*,gpointer->void "void ($(GtkCTree *,GtkCTreeNode *,gpointer))")
    (type *GtkCTree*,GtkCTreeNode*,gpointer->void (function void (GtkCTree* GtkCTreeNode* gpointer)) "void ((*$)(GtkCTree *,GtkCTreeNode *,gpointer))")
    (type GtkCTreeFunc *GtkCTree*,GtkCTreeNode*,gpointer->void "GtkCTreeFunc")
    (type GtkCTree*,guint,GNode*,GtkCTreeNode*,gpointer->gboolean "gboolean ($(GtkCTree *,guint,GNode *,GtkCTreeNode *,gpointer))")
    (type *GtkCTree*,guint,GNode*,GtkCTreeNode*,gpointer->gboolean (function gboolean (GtkCTree* guint GNode* GtkCTreeNode* gpointer)) "gboolean ((*$)(GtkCTree *,guint,GNode *,GtkCTreeNode *,gpointer))")
    (type GtkCTreeGNodeFunc *GtkCTree*,guint,GNode*,GtkCTreeNode*,gpointer->gboolean "GtkCTreeGNodeFunc")
    (type GtkCTree*,GtkCTreeNode*,GtkCTreeNode*,GtkCTreeNode*->gboolean "gboolean ($(GtkCTree *,GtkCTreeNode *,GtkCTreeNode *,GtkCTreeNode *))")
    (type *GtkCTree*,GtkCTreeNode*,GtkCTreeNode*,GtkCTreeNode*->gboolean (function gboolean (GtkCTree* GtkCTreeNode* GtkCTreeNode* GtkCTreeNode*)) "gboolean ((*$)(GtkCTree *,GtkCTreeNode *,GtkCTreeNode *,GtkCTreeNode *))")
    (type GtkCTreeCompareDragFunc *GtkCTree*,GtkCTreeNode*,GtkCTreeNode*,GtkCTreeNode*->gboolean "GtkCTreeCompareDragFunc")
    (type GtkCTree*,GtkCTreeNode*,gint->void "void ($(GtkCTree *,GtkCTreeNode *,gint))")
    (type *GtkCTree*,GtkCTreeNode*,gint->void (function void (GtkCTree* GtkCTreeNode* gint)) "void ((*$)(GtkCTree *,GtkCTreeNode *,gint))")
    (type GtkCTree*,GtkCTreeNode*->void "void ($(GtkCTree *,GtkCTreeNode *))")
    (type *GtkCTree*,GtkCTreeNode*->void (function void (GtkCTree* GtkCTreeNode*)) "void ((*$)(GtkCTree *,GtkCTreeNode *))")
    (type GtkCTree*,GtkCTreeNode*,GtkCTreeNode*,GtkCTreeNode*->void "void ($(GtkCTree *,GtkCTreeNode *,GtkCTreeNode *,GtkCTreeNode *))")
    (type *GtkCTree*,GtkCTreeNode*,GtkCTreeNode*,GtkCTreeNode*->void (function void (GtkCTree* GtkCTreeNode* GtkCTreeNode* GtkCTreeNode*)) "void ((*$)(GtkCTree *,GtkCTreeNode *,GtkCTreeNode *,GtkCTreeNode *))")
    (type GtkCTree*,GtkCTreeExpansionType->void "void ($(GtkCTree *,GtkCTreeExpansionType))")
    (type *GtkCTree*,GtkCTreeExpansionType->void (function void (GtkCTree* GtkCTreeExpansionType)) "void ((*$)(GtkCTree *,GtkCTreeExpansionType))")
    (type s-_GtkDrawingArea (struct (widget::GtkWidget "widget") (draw_data::gpointer "draw_data")) "struct _GtkDrawingArea")
    (type GtkDrawingArea s-_GtkDrawingArea "GtkDrawingArea")
    (type s-_GtkDrawingAreaClass (struct (parent_class::GtkWidgetClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkDrawingAreaClass")
    (type GtkDrawingAreaClass s-_GtkDrawingAreaClass "GtkDrawingAreaClass")
    (type s-_GtkCurve (struct (graph::GtkDrawingArea "graph") (cursor_type::gint "cursor_type") (min_x::gfloat "min_x") (max_x::gfloat "max_x") (min_y::gfloat "min_y") (max_y::gfloat "max_y") (pixmap::GdkPixmap* "pixmap") (curve_type::GtkCurveType "curve_type") (height::gint "height") (grab_point::gint "grab_point") (last::gint "last") (num_points::gint "num_points") (point::GdkPoint* "point") (num_ctlpoints::gint "num_ctlpoints") (ctlpoint::gfloat-array-2* "ctlpoint")) "struct _GtkCurve")
    (type GtkCurve s-_GtkCurve "GtkCurve")
    (type s-_GtkCurveClass (struct (parent_class::GtkDrawingAreaClass "parent_class") (curve_type_changed::*GtkCurve*->void "curve_type_changed") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkCurveClass")
    (type GtkCurveClass s-_GtkCurveClass "GtkCurveClass")
    (type gfloat-array-2 (array gfloat) "gfloat $[ 2 ]")
    (type gfloat-array-2* (pointer gfloat-array-2) "gfloat (*$)[ 2 ]")
    (type GtkCurve*->void "void ($(GtkCurve *))")
    (type *GtkCurve*->void (function void (GtkCurve*)) "void ((*$)(GtkCurve *))")
    (type s-_GtkEditable (struct) "struct _GtkEditable")
    (type GtkEditable s-_GtkEditable "GtkEditable")
    (type s-_GtkEditableClass (struct (base_iface::GTypeInterface "base_iface") (insert_text::*GtkEditable*,gchar*,gint,gint*->void "insert_text") (delete_text::*GtkEditable*,gint,gint->void "delete_text") (changed::*GtkEditable*->void "changed") (do_insert_text::*GtkEditable*,gchar*,gint,gint*->void "do_insert_text") (do_delete_text::*GtkEditable*,gint,gint->void "do_delete_text") (get_chars::*GtkEditable*,gint,gint->gchar* "get_chars") (set_selection_bounds::*GtkEditable*,gint,gint->void "set_selection_bounds") (get_selection_bounds::*GtkEditable*,gint*,gint*->gboolean "get_selection_bounds") (set_position::*GtkEditable*,gint->void "set_position") (get_position::*GtkEditable*->gint "get_position")) "struct _GtkEditableClass")
    (type GtkEditableClass s-_GtkEditableClass "GtkEditableClass")
    (type GtkEditable*,gchar*,gint,gint*->void "void ($(GtkEditable *,gchar *,gint,gint *))")
    (type *GtkEditable*,gchar*,gint,gint*->void (function void (GtkEditable* gchar* gint gint*)) "void ((*$)(GtkEditable *,gchar *,gint,gint *))")
    (type GtkEditable*,gint,gint->void "void ($(GtkEditable *,gint,gint))")
    (type *GtkEditable*,gint,gint->void (function void (GtkEditable* gint gint)) "void ((*$)(GtkEditable *,gint,gint))")
    (type GtkEditable*->void "void ($(GtkEditable *))")
    (type *GtkEditable*->void (function void (GtkEditable*)) "void ((*$)(GtkEditable *))")
    (type GtkEditable*,gint,gint->gchar* "gchar *($(GtkEditable *,gint,gint))")
    (type *GtkEditable*,gint,gint->gchar* (function gchar* (GtkEditable* gint gint)) "gchar *((*$)(GtkEditable *,gint,gint))")
    (type GtkEditable*,gint*,gint*->gboolean "gboolean ($(GtkEditable *,gint *,gint *))")
    (type *GtkEditable*,gint*,gint*->gboolean (function gboolean (GtkEditable* gint* gint*)) "gboolean ((*$)(GtkEditable *,gint *,gint *))")
    (type GtkEditable*,gint->void "void ($(GtkEditable *,gint))")
    (type *GtkEditable*,gint->void (function void (GtkEditable* gint)) "void ((*$)(GtkEditable *,gint))")
    (type GtkEditable*->gint "gint ($(GtkEditable *))")
    (type *GtkEditable*->gint (function gint (GtkEditable*)) "gint ((*$)(GtkEditable *))")
    (type s-_GtkIMContext (struct (parent_instance::GObject "parent_instance")) "struct _GtkIMContext")
    (type GtkIMContext s-_GtkIMContext "GtkIMContext")
    (type s-_GtkIMContextClass (struct (parent_class::GtkObjectClass "parent_class") (preedit_start::*GtkIMContext*->void "preedit_start") (preedit_end::*GtkIMContext*->void "preedit_end") (preedit_changed::*GtkIMContext*->void "preedit_changed") (commit::*GtkIMContext*,gchar*->void "commit") (retrieve_surrounding::*GtkIMContext*->gboolean "retrieve_surrounding") (delete_surrounding::*GtkIMContext*,gint,gint->gboolean "delete_surrounding") (set_client_window::*GtkIMContext*,GdkWindow*->void "set_client_window") (get_preedit_string::*GtkIMContext*,gchar**,PangoAttrList**,gint*->void "get_preedit_string") (filter_keypress::*GtkIMContext*,GdkEventKey*->gboolean "filter_keypress") (focus_in::*GtkIMContext*->void "focus_in") (focus_out::*GtkIMContext*->void "focus_out") (reset::*GtkIMContext*->void "reset") (set_cursor_location::*GtkIMContext*,GdkRectangle*->void "set_cursor_location") (set_use_preedit::*GtkIMContext*,gboolean->void "set_use_preedit") (set_surrounding::*GtkIMContext*,gchar*,gint,gint->void "set_surrounding") (get_surrounding::*GtkIMContext*,gchar**,gint*->gboolean "get_surrounding") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4") (_gtk_reserved5::*void->void "_gtk_reserved5") (_gtk_reserved6::*void->void "_gtk_reserved6")) "struct _GtkIMContextClass")
    (type GtkIMContextClass s-_GtkIMContextClass "GtkIMContextClass")
    (type GtkIMContext*->void "void ($(GtkIMContext *))")
    (type *GtkIMContext*->void (function void (GtkIMContext*)) "void ((*$)(GtkIMContext *))")
    (type GtkIMContext*,gchar*->void "void ($(GtkIMContext *,gchar *))")
    (type *GtkIMContext*,gchar*->void (function void (GtkIMContext* gchar*)) "void ((*$)(GtkIMContext *,gchar *))")
    (type GtkIMContext*->gboolean "gboolean ($(GtkIMContext *))")
    (type *GtkIMContext*->gboolean (function gboolean (GtkIMContext*)) "gboolean ((*$)(GtkIMContext *))")
    (type GtkIMContext*,gint,gint->gboolean "gboolean ($(GtkIMContext *,gint,gint))")
    (type *GtkIMContext*,gint,gint->gboolean (function gboolean (GtkIMContext* gint gint)) "gboolean ((*$)(GtkIMContext *,gint,gint))")
    (type GtkIMContext*,GdkWindow*->void "void ($(GtkIMContext *,GdkWindow *))")
    (type *GtkIMContext*,GdkWindow*->void (function void (GtkIMContext* GdkWindow*)) "void ((*$)(GtkIMContext *,GdkWindow *))")
    (type PangoAttrList** (pointer PangoAttrList*) "PangoAttrList **")
    (type GtkIMContext*,gchar**,PangoAttrList**,gint*->void "void ($(GtkIMContext *,gchar **,PangoAttrList **,gint *))")
    (type *GtkIMContext*,gchar**,PangoAttrList**,gint*->void (function void (GtkIMContext* gchar** PangoAttrList** gint*)) "void ((*$)(GtkIMContext *,gchar **,PangoAttrList **,gint *))")
    (type GtkIMContext*,GdkEventKey*->gboolean "gboolean ($(GtkIMContext *,GdkEventKey *))")
    (type *GtkIMContext*,GdkEventKey*->gboolean (function gboolean (GtkIMContext* GdkEventKey*)) "gboolean ((*$)(GtkIMContext *,GdkEventKey *))")
    (type GtkIMContext*,GdkRectangle*->void "void ($(GtkIMContext *,GdkRectangle *))")
    (type *GtkIMContext*,GdkRectangle*->void (function void (GtkIMContext* GdkRectangle*)) "void ((*$)(GtkIMContext *,GdkRectangle *))")
    (type GtkIMContext*,gboolean->void "void ($(GtkIMContext *,gboolean))")
    (type *GtkIMContext*,gboolean->void (function void (GtkIMContext* gboolean)) "void ((*$)(GtkIMContext *,gboolean))")
    (type GtkIMContext*,gchar*,gint,gint->void "void ($(GtkIMContext *,gchar *,gint,gint))")
    (type *GtkIMContext*,gchar*,gint,gint->void (function void (GtkIMContext* gchar* gint gint)) "void ((*$)(GtkIMContext *,gchar *,gint,gint))")
    (type GtkIMContext*,gchar**,gint*->gboolean "gboolean ($(GtkIMContext *,gchar **,gint *))")
    (type *GtkIMContext*,gchar**,gint*->gboolean (function gboolean (GtkIMContext* gchar** gint*)) "gboolean ((*$)(GtkIMContext *,gchar **,gint *))")
    (type s-_GtkListStore (struct (parent::GObject "parent") (stamp::gint "stamp") (seq::gpointer "seq") (_gtk_reserved1::gpointer "_gtk_reserved1") (sort_list::GList* "sort_list") (n_columns::gint "n_columns") (sort_column_id::gint "sort_column_id") (order::GtkSortType "order") (column_headers::GType* "column_headers") (length::gint "length") (default_sort_func::GtkTreeIterCompareFunc "default_sort_func") (default_sort_data::gpointer "default_sort_data") (default_sort_destroy::GtkDestroyNotify "default_sort_destroy") (columns_dirty::guint "columns_dirty")) "struct _GtkListStore")
    (type GtkListStore s-_GtkListStore "GtkListStore")
    (type s-_GtkListStoreClass (struct (parent_class::GObjectClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkListStoreClass")
    (type GtkListStoreClass s-_GtkListStoreClass "GtkListStoreClass")
    (type GtkTreeModelFilterVisibleFunc *GtkTreeModel*,GtkTreeIter*,gpointer->gboolean "GtkTreeModelFilterVisibleFunc")
    (type GtkTreeModel*,GtkTreeIter*,GValue*,gint,gpointer->void "void ($(GtkTreeModel *,GtkTreeIter *,GValue *,gint,gpointer))")
    (type *GtkTreeModel*,GtkTreeIter*,GValue*,gint,gpointer->void (function void (GtkTreeModel* GtkTreeIter* GValue* gint gpointer)) "void ((*$)(GtkTreeModel *,GtkTreeIter *,GValue *,gint,gpointer))")
    (type GtkTreeModelFilterModifyFunc *GtkTreeModel*,GtkTreeIter*,GValue*,gint,gpointer->void "GtkTreeModelFilterModifyFunc")
    (type s-_GtkTreeModelFilter (struct (parent::GObject "parent") (priv::GtkTreeModelFilterPrivate* "priv")) "struct _GtkTreeModelFilter")
    (type GtkTreeModelFilter s-_GtkTreeModelFilter "GtkTreeModelFilter")
    (type s-_GtkTreeModelFilterClass (struct (parent_class::GObjectClass "parent_class") (_gtk_reserved0::*void->void "_gtk_reserved0") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3")) "struct _GtkTreeModelFilterClass")
    (type GtkTreeModelFilterClass s-_GtkTreeModelFilterClass "GtkTreeModelFilterClass")
    (type s-_GtkTreeModelFilterPrivate (struct) "struct _GtkTreeModelFilterPrivate")
    (type GtkTreeModelFilterPrivate s-_GtkTreeModelFilterPrivate "GtkTreeModelFilterPrivate")
    (type s-_GtkEntryCompletion (struct (parent_instance::GObject "parent_instance") (priv::GtkEntryCompletionPrivate* "priv")) "struct _GtkEntryCompletion")
    (type GtkEntryCompletion s-_GtkEntryCompletion "GtkEntryCompletion")
    (type s-_GtkEntryCompletionClass (struct (parent_class::GObjectClass "parent_class") (match_selected::*GtkEntryCompletion*,GtkTreeModel*,GtkTreeIter*->gboolean "match_selected") (action_activated::*GtkEntryCompletion*,gint->void "action_activated") (insert_prefix::*GtkEntryCompletion*,gchar*->gboolean "insert_prefix") (_gtk_reserved0::*void->void "_gtk_reserved0") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2")) "struct _GtkEntryCompletionClass")
    (type GtkEntryCompletionClass s-_GtkEntryCompletionClass "GtkEntryCompletionClass")
    (type s-_GtkEntryCompletionPrivate (struct) "struct _GtkEntryCompletionPrivate")
    (type GtkEntryCompletionPrivate s-_GtkEntryCompletionPrivate "GtkEntryCompletionPrivate")
    (type GtkEntryCompletion*,gchar*,GtkTreeIter*,gpointer->gboolean "gboolean ($(GtkEntryCompletion *,gchar *,GtkTreeIter *,gpointer))")
    (type *GtkEntryCompletion*,gchar*,GtkTreeIter*,gpointer->gboolean (function gboolean (GtkEntryCompletion* gchar* GtkTreeIter* gpointer)) "gboolean ((*$)(GtkEntryCompletion *,gchar *,GtkTreeIter *,gpointer))")
    (type GtkEntryCompletionMatchFunc *GtkEntryCompletion*,gchar*,GtkTreeIter*,gpointer->gboolean "GtkEntryCompletionMatchFunc")
    (type GtkEntryCompletion*,GtkTreeModel*,GtkTreeIter*->gboolean "gboolean ($(GtkEntryCompletion *,GtkTreeModel *,GtkTreeIter *))")
    (type *GtkEntryCompletion*,GtkTreeModel*,GtkTreeIter*->gboolean (function gboolean (GtkEntryCompletion* GtkTreeModel* GtkTreeIter*)) "gboolean ((*$)(GtkEntryCompletion *,GtkTreeModel *,GtkTreeIter *))")
    (type GtkEntryCompletion*,gint->void "void ($(GtkEntryCompletion *,gint))")
    (type *GtkEntryCompletion*,gint->void (function void (GtkEntryCompletion* gint)) "void ((*$)(GtkEntryCompletion *,gint))")
    (type GtkEntryCompletion*,gchar*->gboolean "gboolean ($(GtkEntryCompletion *,gchar *))")
    (type *GtkEntryCompletion*,gchar*->gboolean (function gboolean (GtkEntryCompletion* gchar*)) "gboolean ((*$)(GtkEntryCompletion *,gchar *))")
    (type s-_GtkEntry (struct (widget::GtkWidget "widget") (text::gchar* "text") (editable::guint "editable") (visible::guint "visible") (overwrite_mode::guint "overwrite_mode") (in_drag::guint "in_drag") (text_length::guint16 "text_length") (text_max_length::guint16 "text_max_length") (text_area::GdkWindow* "text_area") (im_context::GtkIMContext* "im_context") (popup_menu::GtkWidget* "popup_menu") (current_pos::gint "current_pos") (selection_bound::gint "selection_bound") (cached_layout::PangoLayout* "cached_layout") (cache_includes_preedit::guint "cache_includes_preedit") (need_im_reset::guint "need_im_reset") (has_frame::guint "has_frame") (activates_default::guint "activates_default") (cursor_visible::guint "cursor_visible") (in_click::guint "in_click") (is_cell_renderer::guint "is_cell_renderer") (editing_canceled::guint "editing_canceled") (mouse_cursor_obscured::guint "mouse_cursor_obscured") (select_words::guint "select_words") (select_lines::guint "select_lines") (resolved_dir::guint "resolved_dir") (button::guint "button") (blink_timeout::guint "blink_timeout") (recompute_idle::guint "recompute_idle") (scroll_offset::gint "scroll_offset") (ascent::gint "ascent") (descent::gint "descent") (text_size::guint16 "text_size") (n_bytes::guint16 "n_bytes") (preedit_length::guint16 "preedit_length") (preedit_cursor::guint16 "preedit_cursor") (dnd_position::gint "dnd_position") (drag_start_x::gint "drag_start_x") (drag_start_y::gint "drag_start_y") (invisible_char::gunichar "invisible_char") (width_chars::gint "width_chars")) "struct _GtkEntry")
    (type GtkEntry s-_GtkEntry "GtkEntry")
    (type s-_GtkEntryClass (struct (parent_class::GtkWidgetClass "parent_class") (populate_popup::*GtkEntry*,GtkMenu*->void "populate_popup") (activate::*GtkEntry*->void "activate") (move_cursor::*GtkEntry*,GtkMovementStep,gint,gboolean->void "move_cursor") (insert_at_cursor::*GtkEntry*,gchar*->void "insert_at_cursor") (delete_from_cursor::*GtkEntry*,GtkDeleteType,gint->void "delete_from_cursor") (backspace::*GtkEntry*->void "backspace") (cut_clipboard::*GtkEntry*->void "cut_clipboard") (copy_clipboard::*GtkEntry*->void "copy_clipboard") (paste_clipboard::*GtkEntry*->void "paste_clipboard") (toggle_overwrite::*GtkEntry*->void "toggle_overwrite") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3")) "struct _GtkEntryClass")
    (type GtkEntryClass s-_GtkEntryClass "GtkEntryClass")
    (type GtkEntry*,GtkMenu*->void "void ($(GtkEntry *,GtkMenu *))")
    (type *GtkEntry*,GtkMenu*->void (function void (GtkEntry* GtkMenu*)) "void ((*$)(GtkEntry *,GtkMenu *))")
    (type GtkEntry*->void "void ($(GtkEntry *))")
    (type *GtkEntry*->void (function void (GtkEntry*)) "void ((*$)(GtkEntry *))")
    (type GtkEntry*,GtkMovementStep,gint,gboolean->void "void ($(GtkEntry *,GtkMovementStep,gint,gboolean))")
    (type *GtkEntry*,GtkMovementStep,gint,gboolean->void (function void (GtkEntry* GtkMovementStep gint gboolean)) "void ((*$)(GtkEntry *,GtkMovementStep,gint,gboolean))")
    (type GtkEntry*,gchar*->void "void ($(GtkEntry *,gchar *))")
    (type *GtkEntry*,gchar*->void (function void (GtkEntry* gchar*)) "void ((*$)(GtkEntry *,gchar *))")
    (type GtkEntry*,GtkDeleteType,gint->void "void ($(GtkEntry *,GtkDeleteType,gint))")
    (type *GtkEntry*,GtkDeleteType,gint->void (function void (GtkEntry* GtkDeleteType gint)) "void ((*$)(GtkEntry *,GtkDeleteType,gint))")
    (type s-_GtkEventBox (struct (bin::GtkBin "bin")) "struct _GtkEventBox")
    (type GtkEventBox s-_GtkEventBox "GtkEventBox")
    (type s-_GtkEventBoxClass (struct (parent_class::GtkBinClass "parent_class")) "struct _GtkEventBoxClass")
    (type GtkEventBoxClass s-_GtkEventBoxClass "GtkEventBoxClass")
    (type s-_GtkExpander (struct (bin::GtkBin "bin") (priv::GtkExpanderPrivate* "priv")) "struct _GtkExpander")
    (type GtkExpander s-_GtkExpander "GtkExpander")
    (type s-_GtkExpanderClass (struct (parent_class::GtkBinClass "parent_class") (activate::*GtkExpander*->void "activate")) "struct _GtkExpanderClass")
    (type GtkExpanderClass s-_GtkExpanderClass "GtkExpanderClass")
    (type s-_GtkExpanderPrivate (struct) "struct _GtkExpanderPrivate")
    (type GtkExpanderPrivate s-_GtkExpanderPrivate "GtkExpanderPrivate")
    (type GtkExpander*->void "void ($(GtkExpander *))")
    (type *GtkExpander*->void (function void (GtkExpander*)) "void ((*$)(GtkExpander *))")
    (type s-_GtkFileSelection (struct (parent_instance::GtkDialog "parent_instance") (dir_list::GtkWidget* "dir_list") (file_list::GtkWidget* "file_list") (selection_entry::GtkWidget* "selection_entry") (selection_text::GtkWidget* "selection_text") (main_vbox::GtkWidget* "main_vbox") (ok_button::GtkWidget* "ok_button") (cancel_button::GtkWidget* "cancel_button") (help_button::GtkWidget* "help_button") (history_pulldown::GtkWidget* "history_pulldown") (history_menu::GtkWidget* "history_menu") (history_list::GList* "history_list") (fileop_dialog::GtkWidget* "fileop_dialog") (fileop_entry::GtkWidget* "fileop_entry") (fileop_file::gchar* "fileop_file") (cmpl_state::gpointer "cmpl_state") (fileop_c_dir::GtkWidget* "fileop_c_dir") (fileop_del_file::GtkWidget* "fileop_del_file") (fileop_ren_file::GtkWidget* "fileop_ren_file") (button_area::GtkWidget* "button_area") (action_area::GtkWidget* "action_area") (selected_names::GPtrArray* "selected_names") (last_selected::gchar* "last_selected")) "struct _GtkFileSelection")
    (type GtkFileSelection s-_GtkFileSelection "GtkFileSelection")
    (type s-_GtkFileSelectionClass (struct (parent_class::GtkDialogClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkFileSelectionClass")
    (type GtkFileSelectionClass s-_GtkFileSelectionClass "GtkFileSelectionClass")
    (type s-_GtkFixed (struct (container::GtkContainer "container") (children::GList* "children")) "struct _GtkFixed")
    (type GtkFixed s-_GtkFixed "GtkFixed")
    (type s-_GtkFixedClass (struct (parent_class::GtkContainerClass "parent_class")) "struct _GtkFixedClass")
    (type GtkFixedClass s-_GtkFixedClass "GtkFixedClass")
    (type s-_GtkFixedChild (struct (widget::GtkWidget* "widget") (x::gint "x") (y::gint "y")) "struct _GtkFixedChild")
    (type GtkFixedChild s-_GtkFixedChild "GtkFixedChild")
    (type s-_GtkFileFilter (struct) "struct _GtkFileFilter")
    (type GtkFileFilter s-_GtkFileFilter "GtkFileFilter")
    (type s-_GtkFileFilterInfo (struct (contains::GtkFileFilterFlags "contains") (filename::gchar* "filename") (uri::gchar* "uri") (display_name::gchar* "display_name") (mime_type::gchar* "mime_type")) "struct _GtkFileFilterInfo")
    (type GtkFileFilterInfo s-_GtkFileFilterInfo "GtkFileFilterInfo")
    (type monster__e1215 int "long")
    (macro GTK_FILE_FILTER_FILENAME::int "GTK_FILE_FILTER_FILENAME")
    (macro GTK_FILE_FILTER_URI::int "GTK_FILE_FILTER_URI")
    (macro GTK_FILE_FILTER_DISPLAY_NAME::int "GTK_FILE_FILTER_DISPLAY_NAME")
    (macro GTK_FILE_FILTER_MIME_TYPE::int "GTK_FILE_FILTER_MIME_TYPE")
    (type GtkFileFilterFlags monster__e1215 "GtkFileFilterFlags")
    (type GtkFileFilterInfo*,gpointer->gboolean "gboolean ($(GtkFileFilterInfo *,gpointer))")
    (type *GtkFileFilterInfo*,gpointer->gboolean (function gboolean (GtkFileFilterInfo* gpointer)) "gboolean ((*$)(GtkFileFilterInfo *,gpointer))")
    (type GtkFileFilterFunc *GtkFileFilterInfo*,gpointer->gboolean "GtkFileFilterFunc")
    (type s-_GtkFileChooser (struct) "struct _GtkFileChooser")
    (type GtkFileChooser s-_GtkFileChooser "GtkFileChooser")
    (type monster__e1216 int "long")
    (macro GTK_FILE_CHOOSER_ACTION_OPEN::int "GTK_FILE_CHOOSER_ACTION_OPEN")
    (macro GTK_FILE_CHOOSER_ACTION_SAVE::int "GTK_FILE_CHOOSER_ACTION_SAVE")
    (macro GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER::int "GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER")
    (macro GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER::int "GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER")
    (type GtkFileChooserAction monster__e1216 "GtkFileChooserAction")
    (type monster__e1217 int "long")
    (macro GTK_FILE_CHOOSER_ERROR_NONEXISTENT::int "GTK_FILE_CHOOSER_ERROR_NONEXISTENT")
    (macro GTK_FILE_CHOOSER_ERROR_BAD_FILENAME::int "GTK_FILE_CHOOSER_ERROR_BAD_FILENAME")
    (type GtkFileChooserError monster__e1217 "GtkFileChooserError")
    (type s-_GtkFileChooserButton (struct (parent::GtkHBox "parent") (priv::GtkFileChooserButtonPrivate* "priv")) "struct _GtkFileChooserButton")
    (type GtkFileChooserButton s-_GtkFileChooserButton "GtkFileChooserButton")
    (type s-_GtkFileChooserButtonPrivate (struct) "struct _GtkFileChooserButtonPrivate")
    (type GtkFileChooserButtonPrivate s-_GtkFileChooserButtonPrivate "GtkFileChooserButtonPrivate")
    (type s-_GtkFileChooserButtonClass (struct (parent_class::GtkHBoxClass "parent_class") (__gtk_reserved1::void* "__gtk_reserved1") (__gtk_reserved2::void* "__gtk_reserved2") (__gtk_reserved3::void* "__gtk_reserved3") (__gtk_reserved4::void* "__gtk_reserved4") (__gtk_reserved5::void* "__gtk_reserved5") (__gtk_reserved6::void* "__gtk_reserved6") (__gtk_reserved7::void* "__gtk_reserved7") (__gtk_reserved8::void* "__gtk_reserved8")) "struct _GtkFileChooserButtonClass")
    (type GtkFileChooserButtonClass s-_GtkFileChooserButtonClass "GtkFileChooserButtonClass")
    (type s-_GtkFileChooserDialog (struct (parent_instance::GtkDialog "parent_instance") (priv::GtkFileChooserDialogPrivate* "priv")) "struct _GtkFileChooserDialog")
    (type GtkFileChooserDialog s-_GtkFileChooserDialog "GtkFileChooserDialog")
    (type s-_GtkFileChooserDialogClass (struct (parent_class::GtkDialogClass "parent_class")) "struct _GtkFileChooserDialogClass")
    (type GtkFileChooserDialogClass s-_GtkFileChooserDialogClass "GtkFileChooserDialogClass")
    (type s-_GtkFileChooserDialogPrivate (struct) "struct _GtkFileChooserDialogPrivate")
    (type GtkFileChooserDialogPrivate s-_GtkFileChooserDialogPrivate "GtkFileChooserDialogPrivate")
    (type s-_GtkFileChooserWidget (struct (parent_instance::GtkVBox "parent_instance") (priv::GtkFileChooserWidgetPrivate* "priv")) "struct _GtkFileChooserWidget")
    (type GtkFileChooserWidget s-_GtkFileChooserWidget "GtkFileChooserWidget")
    (type s-_GtkFileChooserWidgetClass (struct (parent_class::GtkVBoxClass "parent_class")) "struct _GtkFileChooserWidgetClass")
    (type GtkFileChooserWidgetClass s-_GtkFileChooserWidgetClass "GtkFileChooserWidgetClass")
    (type s-_GtkFileChooserWidgetPrivate (struct) "struct _GtkFileChooserWidgetPrivate")
    (type GtkFileChooserWidgetPrivate s-_GtkFileChooserWidgetPrivate "GtkFileChooserWidgetPrivate")
    (type s-_GtkFontButton (struct (button::GtkButton "button") (priv::GtkFontButtonPrivate* "priv")) "struct _GtkFontButton")
    (type GtkFontButton s-_GtkFontButton "GtkFontButton")
    (type s-_GtkFontButtonClass (struct (parent_class::GtkButtonClass "parent_class") (font_set::*GtkFontButton*->void "font_set") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkFontButtonClass")
    (type GtkFontButtonClass s-_GtkFontButtonClass "GtkFontButtonClass")
    (type s-_GtkFontButtonPrivate (struct) "struct _GtkFontButtonPrivate")
    (type GtkFontButtonPrivate s-_GtkFontButtonPrivate "GtkFontButtonPrivate")
    (type GtkFontButton*->void "void ($(GtkFontButton *))")
    (type *GtkFontButton*->void (function void (GtkFontButton*)) "void ((*$)(GtkFontButton *))")
    (type s-_GtkFontSelection (struct (parent_instance::GtkVBox "parent_instance") (font_entry::GtkWidget* "font_entry") (family_list::GtkWidget* "family_list") (font_style_entry::GtkWidget* "font_style_entry") (face_list::GtkWidget* "face_list") (size_entry::GtkWidget* "size_entry") (size_list::GtkWidget* "size_list") (pixels_button::GtkWidget* "pixels_button") (points_button::GtkWidget* "points_button") (filter_button::GtkWidget* "filter_button") (preview_entry::GtkWidget* "preview_entry") (family::PangoFontFamily* "family") (face::PangoFontFace* "face") (size::gint "size") (font::GdkFont* "font")) "struct _GtkFontSelection")
    (type GtkFontSelection s-_GtkFontSelection "GtkFontSelection")
    (type s-_GtkFontSelectionClass (struct (parent_class::GtkVBoxClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkFontSelectionClass")
    (type GtkFontSelectionClass s-_GtkFontSelectionClass "GtkFontSelectionClass")
    (type s-_GtkFontSelectionDialog (struct (parent_instance::GtkDialog "parent_instance") (fontsel::GtkWidget* "fontsel") (main_vbox::GtkWidget* "main_vbox") (action_area::GtkWidget* "action_area") (ok_button::GtkWidget* "ok_button") (apply_button::GtkWidget* "apply_button") (cancel_button::GtkWidget* "cancel_button") (dialog_width::gint "dialog_width") (auto_resize::gboolean "auto_resize")) "struct _GtkFontSelectionDialog")
    (type GtkFontSelectionDialog s-_GtkFontSelectionDialog "GtkFontSelectionDialog")
    (type s-_GtkFontSelectionDialogClass (struct (parent_class::GtkDialogClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkFontSelectionDialogClass")
    (type GtkFontSelectionDialogClass s-_GtkFontSelectionDialogClass "GtkFontSelectionDialogClass")
    (type s-_GtkGammaCurve (struct (vbox::GtkVBox "vbox") (table::GtkWidget* "table") (curve::GtkWidget* "curve") (button::GtkWidget*-array-5 "button") (gamma::gfloat "gamma") (gamma_dialog::GtkWidget* "gamma_dialog") (gamma_text::GtkWidget* "gamma_text")) "struct _GtkGammaCurve")
    (type GtkGammaCurve s-_GtkGammaCurve "GtkGammaCurve")
    (type s-_GtkGammaCurveClass (struct (parent_class::GtkVBoxClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkGammaCurveClass")
    (type GtkGammaCurveClass s-_GtkGammaCurveClass "GtkGammaCurveClass")
    (type GtkWidget*-array-5 (array GtkWidget*) "GtkWidget *$[ 5 ]")
    (type s-_GtkHandleBox (struct (bin::GtkBin "bin") (bin_window::GdkWindow* "bin_window") (float_window::GdkWindow* "float_window") (shadow_type::GtkShadowType "shadow_type") (handle_position::guint "handle_position") (float_window_mapped::guint "float_window_mapped") (child_detached::guint "child_detached") (in_drag::guint "in_drag") (shrink_on_detach::guint "shrink_on_detach") (snap_edge::int "snap_edge") (deskoff_x::gint "deskoff_x") (deskoff_y::gint "deskoff_y") (attach_allocation::GtkAllocation "attach_allocation") (float_allocation::GtkAllocation "float_allocation")) "struct _GtkHandleBox")
    (type GtkHandleBox s-_GtkHandleBox "GtkHandleBox")
    (type s-_GtkHandleBoxClass (struct (parent_class::GtkBinClass "parent_class") (child_attached::*GtkHandleBox*,GtkWidget*->void "child_attached") (child_detached::*GtkHandleBox*,GtkWidget*->void "child_detached") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkHandleBoxClass")
    (type GtkHandleBoxClass s-_GtkHandleBoxClass "GtkHandleBoxClass")
    (type GtkHandleBox*,GtkWidget*->void "void ($(GtkHandleBox *,GtkWidget *))")
    (type *GtkHandleBox*,GtkWidget*->void (function void (GtkHandleBox* GtkWidget*)) "void ((*$)(GtkHandleBox *,GtkWidget *))")
    (type s-_GtkHButtonBox (struct (button_box::GtkButtonBox "button_box")) "struct _GtkHButtonBox")
    (type GtkHButtonBox s-_GtkHButtonBox "GtkHButtonBox")
    (type s-_GtkHButtonBoxClass (struct (parent_class::GtkButtonBoxClass "parent_class")) "struct _GtkHButtonBoxClass")
    (type GtkHButtonBoxClass s-_GtkHButtonBoxClass "GtkHButtonBoxClass")
    (type s-_GtkPaned (struct (container::GtkContainer "container") (child1::GtkWidget* "child1") (child2::GtkWidget* "child2") (handle::GdkWindow* "handle") (xor_gc::GdkGC* "xor_gc") (cursor_type::GdkCursorType "cursor_type") (handle_pos::GdkRectangle "handle_pos") (child1_size::gint "child1_size") (last_allocation::gint "last_allocation") (min_position::gint "min_position") (max_position::gint "max_position") (position_set::guint "position_set") (in_drag::guint "in_drag") (child1_shrink::guint "child1_shrink") (child1_resize::guint "child1_resize") (child2_shrink::guint "child2_shrink") (child2_resize::guint "child2_resize") (orientation::guint "orientation") (in_recursion::guint "in_recursion") (handle_prelit::guint "handle_prelit") (last_child1_focus::GtkWidget* "last_child1_focus") (last_child2_focus::GtkWidget* "last_child2_focus") (priv::GtkPanedPrivate* "priv") (drag_pos::gint "drag_pos") (original_position::gint "original_position")) "struct _GtkPaned")
    (type GtkPaned s-_GtkPaned "GtkPaned")
    (type s-_GtkPanedClass (struct (parent_class::GtkContainerClass "parent_class") (cycle_child_focus::*GtkPaned*,gboolean->gboolean "cycle_child_focus") (toggle_handle_focus::*GtkPaned*->gboolean "toggle_handle_focus") (move_handle::*GtkPaned*,GtkScrollType->gboolean "move_handle") (cycle_handle_focus::*GtkPaned*,gboolean->gboolean "cycle_handle_focus") (accept_position::*GtkPaned*->gboolean "accept_position") (cancel_position::*GtkPaned*->gboolean "cancel_position") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkPanedClass")
    (type GtkPanedClass s-_GtkPanedClass "GtkPanedClass")
    (type s-_GtkPanedPrivate (struct) "struct _GtkPanedPrivate")
    (type GtkPanedPrivate s-_GtkPanedPrivate "GtkPanedPrivate")
    (type GtkPaned*,gboolean->gboolean "gboolean ($(GtkPaned *,gboolean))")
    (type *GtkPaned*,gboolean->gboolean (function gboolean (GtkPaned* gboolean)) "gboolean ((*$)(GtkPaned *,gboolean))")
    (type GtkPaned*->gboolean "gboolean ($(GtkPaned *))")
    (type *GtkPaned*->gboolean (function gboolean (GtkPaned*)) "gboolean ((*$)(GtkPaned *))")
    (type GtkPaned*,GtkScrollType->gboolean "gboolean ($(GtkPaned *,GtkScrollType))")
    (type *GtkPaned*,GtkScrollType->gboolean (function gboolean (GtkPaned* GtkScrollType)) "gboolean ((*$)(GtkPaned *,GtkScrollType))")
    (type s-_GtkHPaned (struct (paned::GtkPaned "paned")) "struct _GtkHPaned")
    (type GtkHPaned s-_GtkHPaned "GtkHPaned")
    (type s-_GtkHPanedClass (struct (parent_class::GtkPanedClass "parent_class")) "struct _GtkHPanedClass")
    (type GtkHPanedClass s-_GtkHPanedClass "GtkHPanedClass")
    (type s-_GtkRuler (struct (widget::GtkWidget "widget") (backing_store::GdkPixmap* "backing_store") (non_gr_exp_gc::GdkGC* "non_gr_exp_gc") (metric::GtkRulerMetric* "metric") (xsrc::gint "xsrc") (ysrc::gint "ysrc") (slider_size::gint "slider_size") (lower::gdouble "lower") (upper::gdouble "upper") (position::gdouble "position") (max_size::gdouble "max_size")) "struct _GtkRuler")
    (type GtkRuler s-_GtkRuler "GtkRuler")
    (type s-_GtkRulerClass (struct (parent_class::GtkWidgetClass "parent_class") (draw_ticks::*GtkRuler*->void "draw_ticks") (draw_pos::*GtkRuler*->void "draw_pos") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkRulerClass")
    (type GtkRulerClass s-_GtkRulerClass "GtkRulerClass")
    (type s-_GtkRulerMetric (struct (metric_name::gchar* "metric_name") (abbrev::gchar* "abbrev") (pixels_per_unit::gdouble "pixels_per_unit") (ruler_scale::gdouble-array-10 "ruler_scale") (subdivide::gint-array-5 "subdivide")) "struct _GtkRulerMetric")
    (type GtkRulerMetric s-_GtkRulerMetric "GtkRulerMetric")
    (type GtkRuler*->void "void ($(GtkRuler *))")
    (type *GtkRuler*->void (function void (GtkRuler*)) "void ((*$)(GtkRuler *))")
    (type gdouble-array-10 (array gdouble) "gdouble $[ 10 ]")
    (type gint-array-5 (array gint) "gint $[ 5 ]")
    (type s-_GtkHRuler (struct (ruler::GtkRuler "ruler")) "struct _GtkHRuler")
    (type GtkHRuler s-_GtkHRuler "GtkHRuler")
    (type s-_GtkHRulerClass (struct (parent_class::GtkRulerClass "parent_class")) "struct _GtkHRulerClass")
    (type GtkHRulerClass s-_GtkHRulerClass "GtkHRulerClass")
    (type s-_GtkScale (struct (range::GtkRange "range") (digits::gint "digits") (draw_value::guint "draw_value") (value_pos::guint "value_pos")) "struct _GtkScale")
    (type GtkScale s-_GtkScale "GtkScale")
    (type s-_GtkScaleClass (struct (parent_class::GtkRangeClass "parent_class") (format_value::*GtkScale*,gdouble->gchar* "format_value") (draw_value::*GtkScale*->void "draw_value") (get_layout_offsets::*GtkScale*,gint*,gint*->void "get_layout_offsets") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkScaleClass")
    (type GtkScaleClass s-_GtkScaleClass "GtkScaleClass")
    (type GtkScale*,gdouble->gchar* "gchar *($(GtkScale *,gdouble))")
    (type *GtkScale*,gdouble->gchar* (function gchar* (GtkScale* gdouble)) "gchar *((*$)(GtkScale *,gdouble))")
    (type GtkScale*->void "void ($(GtkScale *))")
    (type *GtkScale*->void (function void (GtkScale*)) "void ((*$)(GtkScale *))")
    (type GtkScale*,gint*,gint*->void "void ($(GtkScale *,gint *,gint *))")
    (type *GtkScale*,gint*,gint*->void (function void (GtkScale* gint* gint*)) "void ((*$)(GtkScale *,gint *,gint *))")
    (type s-_GtkHScale (struct (scale::GtkScale "scale")) "struct _GtkHScale")
    (type GtkHScale s-_GtkHScale "GtkHScale")
    (type s-_GtkHScaleClass (struct (parent_class::GtkScaleClass "parent_class")) "struct _GtkHScaleClass")
    (type GtkHScaleClass s-_GtkHScaleClass "GtkHScaleClass")
    (type s-_GtkSeparator (struct (widget::GtkWidget "widget")) "struct _GtkSeparator")
    (type GtkSeparator s-_GtkSeparator "GtkSeparator")
    (type s-_GtkSeparatorClass (struct (parent_class::GtkWidgetClass "parent_class")) "struct _GtkSeparatorClass")
    (type GtkSeparatorClass s-_GtkSeparatorClass "GtkSeparatorClass")
    (type s-_GtkHSeparator (struct (separator::GtkSeparator "separator")) "struct _GtkHSeparator")
    (type GtkHSeparator s-_GtkHSeparator "GtkHSeparator")
    (type s-_GtkHSeparatorClass (struct (parent_class::GtkSeparatorClass "parent_class")) "struct _GtkHSeparatorClass")
    (type GtkHSeparatorClass s-_GtkHSeparatorClass "GtkHSeparatorClass")
    (type s-_GtkIconFactoryClass (struct (parent_class::GObjectClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkIconFactoryClass")
    (type GtkIconFactoryClass s-_GtkIconFactoryClass "GtkIconFactoryClass")
    (type s-_GtkIconInfo (struct) "struct _GtkIconInfo")
    (type GtkIconInfo s-_GtkIconInfo "GtkIconInfo")
    (type s-_GtkIconTheme (struct (parent_instance::GObject "parent_instance") (priv::GtkIconThemePrivate* "priv")) "struct _GtkIconTheme")
    (type GtkIconTheme s-_GtkIconTheme "GtkIconTheme")
    (type s-_GtkIconThemeClass (struct (parent_class::GObjectClass "parent_class") (changed::*GtkIconTheme*->void "changed")) "struct _GtkIconThemeClass")
    (type GtkIconThemeClass s-_GtkIconThemeClass "GtkIconThemeClass")
    (type s-_GtkIconThemePrivate (struct) "struct _GtkIconThemePrivate")
    (type GtkIconThemePrivate s-_GtkIconThemePrivate "GtkIconThemePrivate")
    (type GtkIconTheme*->void "void ($(GtkIconTheme *))")
    (type *GtkIconTheme*->void (function void (GtkIconTheme*)) "void ((*$)(GtkIconTheme *))")
    (type monster__e1218 int "long")
    (macro GTK_ICON_LOOKUP_NO_SVG::int "GTK_ICON_LOOKUP_NO_SVG")
    (macro GTK_ICON_LOOKUP_FORCE_SVG::int "GTK_ICON_LOOKUP_FORCE_SVG")
    (macro GTK_ICON_LOOKUP_USE_BUILTIN::int "GTK_ICON_LOOKUP_USE_BUILTIN")
    (type GtkIconLookupFlags monster__e1218 "GtkIconLookupFlags")
    (type monster__e1219 int "long")
    (macro GTK_ICON_THEME_NOT_FOUND::int "GTK_ICON_THEME_NOT_FOUND")
    (macro GTK_ICON_THEME_FAILED::int "GTK_ICON_THEME_FAILED")
    (type GtkIconThemeError monster__e1219 "GtkIconThemeError")
    (type s-_GtkIconView (struct (parent::GtkContainer "parent") (priv::GtkIconViewPrivate* "priv")) "struct _GtkIconView")
    (type GtkIconView s-_GtkIconView "GtkIconView")
    (type s-_GtkIconViewClass (struct (parent_class::GtkContainerClass "parent_class") (set_scroll_adjustments::*GtkIconView*,GtkAdjustment*,GtkAdjustment*->void "set_scroll_adjustments") (item_activated::*GtkIconView*,GtkTreePath*->void "item_activated") (selection_changed::*GtkIconView*->void "selection_changed") (select_all::*GtkIconView*->void "select_all") (unselect_all::*GtkIconView*->void "unselect_all") (select_cursor_item::*GtkIconView*->void "select_cursor_item") (toggle_cursor_item::*GtkIconView*->void "toggle_cursor_item") (move_cursor::*GtkIconView*,GtkMovementStep,gint->gboolean "move_cursor") (activate_cursor_item::*GtkIconView*->gboolean "activate_cursor_item")) "struct _GtkIconViewClass")
    (type GtkIconViewClass s-_GtkIconViewClass "GtkIconViewClass")
    (type s-_GtkIconViewPrivate (struct) "struct _GtkIconViewPrivate")
    (type GtkIconViewPrivate s-_GtkIconViewPrivate "GtkIconViewPrivate")
    (type GtkIconView*,GtkTreePath*,gpointer->void "void ($(GtkIconView *,GtkTreePath *,gpointer))")
    (type *GtkIconView*,GtkTreePath*,gpointer->void (function void (GtkIconView* GtkTreePath* gpointer)) "void ((*$)(GtkIconView *,GtkTreePath *,gpointer))")
    (type GtkIconViewForeachFunc *GtkIconView*,GtkTreePath*,gpointer->void "GtkIconViewForeachFunc")
    (type GtkIconView*,GtkAdjustment*,GtkAdjustment*->void "void ($(GtkIconView *,GtkAdjustment *,GtkAdjustment *))")
    (type *GtkIconView*,GtkAdjustment*,GtkAdjustment*->void (function void (GtkIconView* GtkAdjustment* GtkAdjustment*)) "void ((*$)(GtkIconView *,GtkAdjustment *,GtkAdjustment *))")
    (type GtkIconView*,GtkTreePath*->void "void ($(GtkIconView *,GtkTreePath *))")
    (type *GtkIconView*,GtkTreePath*->void (function void (GtkIconView* GtkTreePath*)) "void ((*$)(GtkIconView *,GtkTreePath *))")
    (type GtkIconView*->void "void ($(GtkIconView *))")
    (type *GtkIconView*->void (function void (GtkIconView*)) "void ((*$)(GtkIconView *))")
    (type GtkIconView*,GtkMovementStep,gint->gboolean "gboolean ($(GtkIconView *,GtkMovementStep,gint))")
    (type *GtkIconView*,GtkMovementStep,gint->gboolean (function gboolean (GtkIconView* GtkMovementStep gint)) "gboolean ((*$)(GtkIconView *,GtkMovementStep,gint))")
    (type GtkIconView*->gboolean "gboolean ($(GtkIconView *))")
    (type *GtkIconView*->gboolean (function gboolean (GtkIconView*)) "gboolean ((*$)(GtkIconView *))")
    (type s-_GtkImageMenuItem (struct (menu_item::GtkMenuItem "menu_item") (image::GtkWidget* "image")) "struct _GtkImageMenuItem")
    (type GtkImageMenuItem s-_GtkImageMenuItem "GtkImageMenuItem")
    (type s-_GtkImageMenuItemClass (struct (parent_class::GtkMenuItemClass "parent_class")) "struct _GtkImageMenuItemClass")
    (type GtkImageMenuItemClass s-_GtkImageMenuItemClass "GtkImageMenuItemClass")
    (type s-_GtkIMContextSimple (struct (object::GtkIMContext "object") (tables::GSList* "tables") (compose_buffer::guint-array-7+1 "compose_buffer") (tentative_match::gunichar "tentative_match") (tentative_match_len::gint "tentative_match_len") (in_hex_sequence::guint "in_hex_sequence")) "struct _GtkIMContextSimple")
    (type GtkIMContextSimple s-_GtkIMContextSimple "GtkIMContextSimple")
    (type s-_GtkIMContextSimpleClass (struct (parent_class::GtkIMContextClass "parent_class")) "struct _GtkIMContextSimpleClass")
    (type GtkIMContextSimpleClass s-_GtkIMContextSimpleClass "GtkIMContextSimpleClass")
    (type guint-array-7+1 (array guint) "guint $[ 7+1 ]")
    (type s-_GtkIMMulticontext (struct (object::GtkIMContext "object") (slave::GtkIMContext* "slave") (priv::GtkIMMulticontextPrivate* "priv") (context_id::gchar* "context_id")) "struct _GtkIMMulticontext")
    (type GtkIMMulticontext s-_GtkIMMulticontext "GtkIMMulticontext")
    (type s-_GtkIMMulticontextClass (struct (parent_class::GtkIMContextClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkIMMulticontextClass")
    (type GtkIMMulticontextClass s-_GtkIMMulticontextClass "GtkIMMulticontextClass")
    (type s-_GtkIMMulticontextPrivate (struct) "struct _GtkIMMulticontextPrivate")
    (type GtkIMMulticontextPrivate s-_GtkIMMulticontextPrivate "GtkIMMulticontextPrivate")
    (type s-_GtkInputDialog (struct (dialog::GtkDialog "dialog") (axis_list::GtkWidget* "axis_list") (axis_listbox::GtkWidget* "axis_listbox") (mode_optionmenu::GtkWidget* "mode_optionmenu") (close_button::GtkWidget* "close_button") (save_button::GtkWidget* "save_button") (axis_items::GtkWidget*-array-GDK_AXIS_LAST "axis_items") (current_device::GdkDevice* "current_device") (keys_list::GtkWidget* "keys_list") (keys_listbox::GtkWidget* "keys_listbox")) "struct _GtkInputDialog")
    (type GtkInputDialog s-_GtkInputDialog "GtkInputDialog")
    (type s-_GtkInputDialogClass (struct (parent_class::GtkDialogClass "parent_class") (enable_device::*GtkInputDialog*,GdkDevice*->void "enable_device") (disable_device::*GtkInputDialog*,GdkDevice*->void "disable_device") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkInputDialogClass")
    (type GtkInputDialogClass s-_GtkInputDialogClass "GtkInputDialogClass")
    (type GtkWidget*-array-GDK_AXIS_LAST (array GtkWidget*) "GtkWidget *$[ GDK_AXIS_LAST ]")
    (type GtkInputDialog*,GdkDevice*->void "void ($(GtkInputDialog *,GdkDevice *))")
    (type *GtkInputDialog*,GdkDevice*->void (function void (GtkInputDialog* GdkDevice*)) "void ((*$)(GtkInputDialog *,GdkDevice *))")
    (type s-_GtkInvisible (struct (widget::GtkWidget "widget") (has_user_ref_count::gboolean "has_user_ref_count") (screen::GdkScreen* "screen")) "struct _GtkInvisible")
    (type GtkInvisible s-_GtkInvisible "GtkInvisible")
    (type s-_GtkInvisibleClass (struct (parent_class::GtkWidgetClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkInvisibleClass")
    (type GtkInvisibleClass s-_GtkInvisibleClass "GtkInvisibleClass")
    (type s-_GtkLayout (struct (container::GtkContainer "container") (children::GList* "children") (width::guint "width") (height::guint "height") (hadjustment::GtkAdjustment* "hadjustment") (vadjustment::GtkAdjustment* "vadjustment") (bin_window::GdkWindow* "bin_window") (visibility::GdkVisibilityState "visibility") (scroll_x::gint "scroll_x") (scroll_y::gint "scroll_y") (freeze_count::guint "freeze_count")) "struct _GtkLayout")
    (type GtkLayout s-_GtkLayout "GtkLayout")
    (type s-_GtkLayoutClass (struct (parent_class::GtkContainerClass "parent_class") (set_scroll_adjustments::*GtkLayout*,GtkAdjustment*,GtkAdjustment*->void "set_scroll_adjustments") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkLayoutClass")
    (type GtkLayoutClass s-_GtkLayoutClass "GtkLayoutClass")
    (type GtkLayout*,GtkAdjustment*,GtkAdjustment*->void "void ($(GtkLayout *,GtkAdjustment *,GtkAdjustment *))")
    (type *GtkLayout*,GtkAdjustment*,GtkAdjustment*->void (function void (GtkLayout* GtkAdjustment* GtkAdjustment*)) "void ((*$)(GtkLayout *,GtkAdjustment *,GtkAdjustment *))")
    (type s-_GtkListItem (struct (item::GtkItem "item")) "struct _GtkListItem")
    (type GtkListItem s-_GtkListItem "GtkListItem")
    (type s-_GtkListItemClass (struct (parent_class::GtkItemClass "parent_class") (toggle_focus_row::*GtkListItem*->void "toggle_focus_row") (select_all::*GtkListItem*->void "select_all") (unselect_all::*GtkListItem*->void "unselect_all") (undo_selection::*GtkListItem*->void "undo_selection") (start_selection::*GtkListItem*->void "start_selection") (end_selection::*GtkListItem*->void "end_selection") (extend_selection::*GtkListItem*,GtkScrollType,gfloat,gboolean->void "extend_selection") (scroll_horizontal::*GtkListItem*,GtkScrollType,gfloat->void "scroll_horizontal") (scroll_vertical::*GtkListItem*,GtkScrollType,gfloat->void "scroll_vertical") (toggle_add_mode::*GtkListItem*->void "toggle_add_mode")) "struct _GtkListItemClass")
    (type GtkListItemClass s-_GtkListItemClass "GtkListItemClass")
    (type GtkListItem*->void "void ($(GtkListItem *))")
    (type *GtkListItem*->void (function void (GtkListItem*)) "void ((*$)(GtkListItem *))")
    (type GtkListItem*,GtkScrollType,gfloat,gboolean->void "void ($(GtkListItem *,GtkScrollType,gfloat,gboolean))")
    (type *GtkListItem*,GtkScrollType,gfloat,gboolean->void (function void (GtkListItem* GtkScrollType gfloat gboolean)) "void ((*$)(GtkListItem *,GtkScrollType,gfloat,gboolean))")
    (type GtkListItem*,GtkScrollType,gfloat->void "void ($(GtkListItem *,GtkScrollType,gfloat))")
    (type *GtkListItem*,GtkScrollType,gfloat->void (function void (GtkListItem* GtkScrollType gfloat)) "void ((*$)(GtkListItem *,GtkScrollType,gfloat))")
    (type s-_GtkList (struct (container::GtkContainer "container") (children::GList* "children") (selection::GList* "selection") (undo_selection::GList* "undo_selection") (undo_unselection::GList* "undo_unselection") (last_focus_child::GtkWidget* "last_focus_child") (undo_focus_child::GtkWidget* "undo_focus_child") (htimer::guint "htimer") (vtimer::guint "vtimer") (anchor::gint "anchor") (drag_pos::gint "drag_pos") (anchor_state::GtkStateType "anchor_state") (selection_mode::guint "selection_mode") (drag_selection::guint "drag_selection") (add_mode::guint "add_mode")) "struct _GtkList")
    (type GtkList s-_GtkList "GtkList")
    (type s-_GtkListClass (struct (parent_class::GtkContainerClass "parent_class") (selection_changed::*GtkList*->void "selection_changed") (select_child::*GtkList*,GtkWidget*->void "select_child") (unselect_child::*GtkList*,GtkWidget*->void "unselect_child")) "struct _GtkListClass")
    (type GtkListClass s-_GtkListClass "GtkListClass")
    (type GtkList*->void "void ($(GtkList *))")
    (type *GtkList*->void (function void (GtkList*)) "void ((*$)(GtkList *))")
    (type GtkList*,GtkWidget*->void "void ($(GtkList *,GtkWidget *))")
    (type *GtkList*,GtkWidget*->void (function void (GtkList* GtkWidget*)) "void ((*$)(GtkList *,GtkWidget *))")
    (type GtkWidget*,GdkEventKey*,gpointer->gint "gint ($(GtkWidget *,GdkEventKey *,gpointer))")
    (type *GtkWidget*,GdkEventKey*,gpointer->gint (function gint (GtkWidget* GdkEventKey* gpointer)) "gint ((*$)(GtkWidget *,GdkEventKey *,gpointer))")
    (type GtkKeySnoopFunc *GtkWidget*,GdkEventKey*,gpointer->gint "GtkKeySnoopFunc")
    (type s-_GtkMenuBar (struct (menu_shell::GtkMenuShell "menu_shell")) "struct _GtkMenuBar")
    (type GtkMenuBar s-_GtkMenuBar "GtkMenuBar")
    (type s-_GtkMenuBarClass (struct (parent_class::GtkMenuShellClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkMenuBarClass")
    (type GtkMenuBarClass s-_GtkMenuBarClass "GtkMenuBarClass")
    (type s-_GtkTooltips (struct (parent_instance::GtkObject "parent_instance") (tip_window::GtkWidget* "tip_window") (tip_label::GtkWidget* "tip_label") (active_tips_data::GtkTooltipsData* "active_tips_data") (tips_data_list::GList* "tips_data_list") (delay::guint "delay") (enabled::guint "enabled") (have_grab::guint "have_grab") (use_sticky_delay::guint "use_sticky_delay") (timer_tag::gint "timer_tag") (last_popdown::GTimeVal "last_popdown")) "struct _GtkTooltips")
    (type GtkTooltips s-_GtkTooltips "GtkTooltips")
    (type s-_GtkTooltipsClass (struct (parent_class::GtkObjectClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkTooltipsClass")
    (type GtkTooltipsClass s-_GtkTooltipsClass "GtkTooltipsClass")
    (type s-_GtkTooltipsData (struct (tooltips::GtkTooltips* "tooltips") (widget::GtkWidget* "widget") (tip_text::gchar* "tip_text") (tip_private::gchar* "tip_private")) "struct _GtkTooltipsData")
    (type GtkTooltipsData s-_GtkTooltipsData "GtkTooltipsData")
    (type s-_GtkToolItem (struct (parent::GtkBin "parent") (priv::GtkToolItemPrivate* "priv")) "struct _GtkToolItem")
    (type GtkToolItem s-_GtkToolItem "GtkToolItem")
    (type s-_GtkToolItemClass (struct (parent_class::GtkBinClass "parent_class") (create_menu_proxy::*GtkToolItem*->gboolean "create_menu_proxy") (toolbar_reconfigured::*GtkToolItem*->void "toolbar_reconfigured") (set_tooltip::*GtkToolItem*,GtkTooltips*,gchar*,gchar*->gboolean "set_tooltip") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkToolItemClass")
    (type GtkToolItemClass s-_GtkToolItemClass "GtkToolItemClass")
    (type s-_GtkToolItemPrivate (struct) "struct _GtkToolItemPrivate")
    (type GtkToolItemPrivate s-_GtkToolItemPrivate "GtkToolItemPrivate")
    (type GtkToolItem*->gboolean "gboolean ($(GtkToolItem *))")
    (type *GtkToolItem*->gboolean (function gboolean (GtkToolItem*)) "gboolean ((*$)(GtkToolItem *))")
    (type GtkToolItem*->void "void ($(GtkToolItem *))")
    (type *GtkToolItem*->void (function void (GtkToolItem*)) "void ((*$)(GtkToolItem *))")
    (type GtkToolItem*,GtkTooltips*,gchar*,gchar*->gboolean "gboolean ($(GtkToolItem *,GtkTooltips *,gchar *,gchar *))")
    (type *GtkToolItem*,GtkTooltips*,gchar*,gchar*->gboolean (function gboolean (GtkToolItem* GtkTooltips* gchar* gchar*)) "gboolean ((*$)(GtkToolItem *,GtkTooltips *,gchar *,gchar *))")
    (type s-_GtkToolButton (struct (parent::GtkToolItem "parent") (priv::GtkToolButtonPrivate* "priv")) "struct _GtkToolButton")
    (type GtkToolButton s-_GtkToolButton "GtkToolButton")
    (type s-_GtkToolButtonClass (struct (parent_class::GtkToolItemClass "parent_class") (button_type::GType "button_type") (clicked::*GtkToolButton*->void "clicked") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkToolButtonClass")
    (type GtkToolButtonClass s-_GtkToolButtonClass "GtkToolButtonClass")
    (type s-_GtkToolButtonPrivate (struct) "struct _GtkToolButtonPrivate")
    (type GtkToolButtonPrivate s-_GtkToolButtonPrivate "GtkToolButtonPrivate")
    (type GtkToolButton*->void "void ($(GtkToolButton *))")
    (type *GtkToolButton*->void (function void (GtkToolButton*)) "void ((*$)(GtkToolButton *))")
    (type s-_GtkMenuToolButtonClass (struct (parent_class::GtkToolButtonClass "parent_class") (show_menu::*GtkMenuToolButton*->void "show_menu") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkMenuToolButtonClass")
    (type GtkMenuToolButtonClass s-_GtkMenuToolButtonClass "GtkMenuToolButtonClass")
    (type s-_GtkMenuToolButton (struct (parent::GtkToolButton "parent") (priv::GtkMenuToolButtonPrivate* "priv")) "struct _GtkMenuToolButton")
    (type GtkMenuToolButton s-_GtkMenuToolButton "GtkMenuToolButton")
    (type s-_GtkMenuToolButtonPrivate (struct) "struct _GtkMenuToolButtonPrivate")
    (type GtkMenuToolButtonPrivate s-_GtkMenuToolButtonPrivate "GtkMenuToolButtonPrivate")
    (type GtkMenuToolButton*->void "void ($(GtkMenuToolButton *))")
    (type *GtkMenuToolButton*->void (function void (GtkMenuToolButton*)) "void ((*$)(GtkMenuToolButton *))")
    (type monster__e1220 int "long")
    (macro GTK_MESSAGE_INFO::int "GTK_MESSAGE_INFO")
    (macro GTK_MESSAGE_WARNING::int "GTK_MESSAGE_WARNING")
    (macro GTK_MESSAGE_QUESTION::int "GTK_MESSAGE_QUESTION")
    (macro GTK_MESSAGE_ERROR::int "GTK_MESSAGE_ERROR")
    (type GtkMessageType monster__e1220 "GtkMessageType")
    (type monster__e1221 int "long")
    (macro GTK_BUTTONS_NONE::int "GTK_BUTTONS_NONE")
    (macro GTK_BUTTONS_OK::int "GTK_BUTTONS_OK")
    (macro GTK_BUTTONS_CLOSE::int "GTK_BUTTONS_CLOSE")
    (macro GTK_BUTTONS_CANCEL::int "GTK_BUTTONS_CANCEL")
    (macro GTK_BUTTONS_YES_NO::int "GTK_BUTTONS_YES_NO")
    (macro GTK_BUTTONS_OK_CANCEL::int "GTK_BUTTONS_OK_CANCEL")
    (type GtkButtonsType monster__e1221 "GtkButtonsType")
    (type s-_GtkMessageDialog (struct (parent_instance::GtkDialog "parent_instance") (image::GtkWidget* "image") (label::GtkWidget* "label")) "struct _GtkMessageDialog")
    (type GtkMessageDialog s-_GtkMessageDialog "GtkMessageDialog")
    (type s-_GtkMessageDialogClass (struct (parent_class::GtkDialogClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkMessageDialogClass")
    (type GtkMessageDialogClass s-_GtkMessageDialogClass "GtkMessageDialogClass")
    (type gchar*** (pointer gchar**) "gchar ***")
    (type gint*,gchar***->void "void ($(gint *,gchar ***))")
    (type *gint*,gchar***->void (function void (gint* gchar***)) "void ((*$)(gint *,gchar ***))")
    (type GtkModuleInitFunc *gint*,gchar***->void "GtkModuleInitFunc")
    (type GdkDisplay*->void "void ($(GdkDisplay *))")
    (type *GdkDisplay*->void (function void (GdkDisplay*)) "void ((*$)(GdkDisplay *))")
    (type GtkModuleDisplayInitFunc *GdkDisplay*->void "GtkModuleDisplayInitFunc")
    (type monster__e1222 int "long")
    (macro GTK_NOTEBOOK_TAB_FIRST::int "GTK_NOTEBOOK_TAB_FIRST")
    (macro GTK_NOTEBOOK_TAB_LAST::int "GTK_NOTEBOOK_TAB_LAST")
    (type GtkNotebookTab monster__e1222 "GtkNotebookTab")
    (type s-_GtkNotebook (struct (container::GtkContainer "container") (cur_page::GtkNotebookPage* "cur_page") (children::GList* "children") (first_tab::GList* "first_tab") (focus_tab::GList* "focus_tab") (menu::GtkWidget* "menu") (event_window::GdkWindow* "event_window") (timer::guint32 "timer") (tab_hborder::guint16 "tab_hborder") (tab_vborder::guint16 "tab_vborder") (show_tabs::guint "show_tabs") (homogeneous::guint "homogeneous") (show_border::guint "show_border") (tab_pos::guint "tab_pos") (scrollable::guint "scrollable") (in_child::guint "in_child") (click_child::guint "click_child") (button::guint "button") (need_timer::guint "need_timer") (child_has_focus::guint "child_has_focus") (have_visible_child::guint "have_visible_child") (focus_out::guint "focus_out") (has_before_previous::guint "has_before_previous") (has_before_next::guint "has_before_next") (has_after_previous::guint "has_after_previous") (has_after_next::guint "has_after_next")) "struct _GtkNotebook")
    (type GtkNotebook s-_GtkNotebook "GtkNotebook")
    (type s-_GtkNotebookClass (struct (parent_class::GtkContainerClass "parent_class") (switch_page::*GtkNotebook*,GtkNotebookPage*,guint->void "switch_page") (select_page::*GtkNotebook*,gboolean->gboolean "select_page") (focus_tab::*GtkNotebook*,GtkNotebookTab->gboolean "focus_tab") (change_current_page::*GtkNotebook*,gint->void "change_current_page") (move_focus_out::*GtkNotebook*,GtkDirectionType->void "move_focus_out") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkNotebookClass")
    (type GtkNotebookClass s-_GtkNotebookClass "GtkNotebookClass")
    (type s-_GtkNotebookPage (struct) "struct _GtkNotebookPage")
    (type GtkNotebookPage s-_GtkNotebookPage "GtkNotebookPage")
    (type GtkNotebook*,GtkNotebookPage*,guint->void "void ($(GtkNotebook *,GtkNotebookPage *,guint))")
    (type *GtkNotebook*,GtkNotebookPage*,guint->void (function void (GtkNotebook* GtkNotebookPage* guint)) "void ((*$)(GtkNotebook *,GtkNotebookPage *,guint))")
    (type GtkNotebook*,gboolean->gboolean "gboolean ($(GtkNotebook *,gboolean))")
    (type *GtkNotebook*,gboolean->gboolean (function gboolean (GtkNotebook* gboolean)) "gboolean ((*$)(GtkNotebook *,gboolean))")
    (type GtkNotebook*,GtkNotebookTab->gboolean "gboolean ($(GtkNotebook *,GtkNotebookTab))")
    (type *GtkNotebook*,GtkNotebookTab->gboolean (function gboolean (GtkNotebook* GtkNotebookTab)) "gboolean ((*$)(GtkNotebook *,GtkNotebookTab))")
    (type GtkNotebook*,gint->void "void ($(GtkNotebook *,gint))")
    (type *GtkNotebook*,gint->void (function void (GtkNotebook* gint)) "void ((*$)(GtkNotebook *,gint))")
    (type GtkNotebook*,GtkDirectionType->void "void ($(GtkNotebook *,GtkDirectionType))")
    (type *GtkNotebook*,GtkDirectionType->void (function void (GtkNotebook* GtkDirectionType)) "void ((*$)(GtkNotebook *,GtkDirectionType))")
    (type s-_GtkOldEditable (struct (widget::GtkWidget "widget") (current_pos::guint "current_pos") (selection_start_pos::guint "selection_start_pos") (selection_end_pos::guint "selection_end_pos") (has_selection::guint "has_selection") (editable::guint "editable") (visible::guint "visible") (clipboard_text::gchar* "clipboard_text")) "struct _GtkOldEditable")
    (type GtkOldEditable s-_GtkOldEditable "GtkOldEditable")
    (type s-_GtkOldEditableClass (struct (parent_class::GtkWidgetClass "parent_class") (activate::*GtkOldEditable*->void "activate") (set_editable::*GtkOldEditable*,gboolean->void "set_editable") (move_cursor::*GtkOldEditable*,gint,gint->void "move_cursor") (move_word::*GtkOldEditable*,gint->void "move_word") (move_page::*GtkOldEditable*,gint,gint->void "move_page") (move_to_row::*GtkOldEditable*,gint->void "move_to_row") (move_to_column::*GtkOldEditable*,gint->void "move_to_column") (kill_char::*GtkOldEditable*,gint->void "kill_char") (kill_word::*GtkOldEditable*,gint->void "kill_word") (kill_line::*GtkOldEditable*,gint->void "kill_line") (cut_clipboard::*GtkOldEditable*->void "cut_clipboard") (copy_clipboard::*GtkOldEditable*->void "copy_clipboard") (paste_clipboard::*GtkOldEditable*->void "paste_clipboard") (update_text::*GtkOldEditable*,gint,gint->void "update_text") (get_chars::*GtkOldEditable*,gint,gint->gchar* "get_chars") (set_selection::*GtkOldEditable*,gint,gint->void "set_selection") (set_position::*GtkOldEditable*,gint->void "set_position")) "struct _GtkOldEditableClass")
    (type GtkOldEditableClass s-_GtkOldEditableClass "GtkOldEditableClass")
    (type GtkOldEditable*,guint32->void "void ($(GtkOldEditable *,guint32))")
    (type *GtkOldEditable*,guint32->void (function void (GtkOldEditable* guint32)) "void ((*$)(GtkOldEditable *,guint32))")
    (type GtkTextFunction *GtkOldEditable*,guint32->void "GtkTextFunction")
    (type GtkOldEditable*->void "void ($(GtkOldEditable *))")
    (type *GtkOldEditable*->void (function void (GtkOldEditable*)) "void ((*$)(GtkOldEditable *))")
    (type GtkOldEditable*,gboolean->void "void ($(GtkOldEditable *,gboolean))")
    (type *GtkOldEditable*,gboolean->void (function void (GtkOldEditable* gboolean)) "void ((*$)(GtkOldEditable *,gboolean))")
    (type GtkOldEditable*,gint,gint->void "void ($(GtkOldEditable *,gint,gint))")
    (type *GtkOldEditable*,gint,gint->void (function void (GtkOldEditable* gint gint)) "void ((*$)(GtkOldEditable *,gint,gint))")
    (type GtkOldEditable*,gint->void "void ($(GtkOldEditable *,gint))")
    (type *GtkOldEditable*,gint->void (function void (GtkOldEditable* gint)) "void ((*$)(GtkOldEditable *,gint))")
    (type GtkOldEditable*,gint,gint->gchar* "gchar *($(GtkOldEditable *,gint,gint))")
    (type *GtkOldEditable*,gint,gint->gchar* (function gchar* (GtkOldEditable* gint gint)) "gchar *((*$)(GtkOldEditable *,gint,gint))")
    (type s-_GtkOptionMenu (struct (button::GtkButton "button") (menu::GtkWidget* "menu") (menu_item::GtkWidget* "menu_item") (width::guint16 "width") (height::guint16 "height")) "struct _GtkOptionMenu")
    (type GtkOptionMenu s-_GtkOptionMenu "GtkOptionMenu")
    (type s-_GtkOptionMenuClass (struct (parent_class::GtkButtonClass "parent_class") (changed::*GtkOptionMenu*->void "changed") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkOptionMenuClass")
    (type GtkOptionMenuClass s-_GtkOptionMenuClass "GtkOptionMenuClass")
    (type GtkOptionMenu*->void "void ($(GtkOptionMenu *))")
    (type *GtkOptionMenu*->void (function void (GtkOptionMenu*)) "void ((*$)(GtkOptionMenu *))")
    (type s-_GtkPixmap (struct (misc::GtkMisc "misc") (pixmap::GdkPixmap* "pixmap") (mask::GdkBitmap* "mask") (pixmap_insensitive::GdkPixmap* "pixmap_insensitive") (build_insensitive::guint "build_insensitive")) "struct _GtkPixmap")
    (type GtkPixmap s-_GtkPixmap "GtkPixmap")
    (type s-_GtkPixmapClass (struct (parent_class::GtkMiscClass "parent_class")) "struct _GtkPixmapClass")
    (type GtkPixmapClass s-_GtkPixmapClass "GtkPixmapClass")
    (type s-_GtkSocket (struct (container::GtkContainer "container") (request_width::guint16 "request_width") (request_height::guint16 "request_height") (current_width::guint16 "current_width") (current_height::guint16 "current_height") (plug_window::GdkWindow* "plug_window") (plug_widget::GtkWidget* "plug_widget") (xembed_version::gshort "xembed_version") (same_app::guint "same_app") (focus_in::guint "focus_in") (have_size::guint "have_size") (need_map::guint "need_map") (is_mapped::guint "is_mapped") (active::guint "active") (accel_group::GtkAccelGroup* "accel_group") (toplevel::GtkWidget* "toplevel")) "struct _GtkSocket")
    (type GtkSocket s-_GtkSocket "GtkSocket")
    (type s-_GtkSocketClass (struct (parent_class::GtkContainerClass "parent_class") (plug_added::*GtkSocket*->void "plug_added") (plug_removed::*GtkSocket*->gboolean "plug_removed") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkSocketClass")
    (type GtkSocketClass s-_GtkSocketClass "GtkSocketClass")
    (type GtkSocket*->void "void ($(GtkSocket *))")
    (type *GtkSocket*->void (function void (GtkSocket*)) "void ((*$)(GtkSocket *))")
    (type GtkSocket*->gboolean "gboolean ($(GtkSocket *))")
    (type *GtkSocket*->gboolean (function gboolean (GtkSocket*)) "gboolean ((*$)(GtkSocket *))")
    (type s-_GtkPlug (struct (window::GtkWindow "window") (socket_window::GdkWindow* "socket_window") (modality_window::GtkWidget* "modality_window") (modality_group::GtkWindowGroup* "modality_group") (grabbed_keys::GHashTable* "grabbed_keys") (same_app::guint "same_app")) "struct _GtkPlug")
    (type GtkPlug s-_GtkPlug "GtkPlug")
    (type s-_GtkPlugClass (struct (parent_class::GtkWindowClass "parent_class") (embedded::*GtkPlug*->void "embedded") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkPlugClass")
    (type GtkPlugClass s-_GtkPlugClass "GtkPlugClass")
    (type GtkPlug*->void "void ($(GtkPlug *))")
    (type *GtkPlug*->void (function void (GtkPlug*)) "void ((*$)(GtkPlug *))")
    (type s-_GtkPreview (struct (widget::GtkWidget "widget") (buffer::guchar* "buffer") (buffer_width::guint16 "buffer_width") (buffer_height::guint16 "buffer_height") (bpp::guint16 "bpp") (rowstride::guint16 "rowstride") (dither::GdkRgbDither "dither") (type::guint "type") (expand::guint "expand")) "struct _GtkPreview")
    (type GtkPreview s-_GtkPreview "GtkPreview")
    (type s-_GtkPreviewInfo (struct (lookup::guchar* "lookup") (gamma::gdouble "gamma")) "struct _GtkPreviewInfo")
    (type GtkPreviewInfo s-_GtkPreviewInfo "GtkPreviewInfo")
    (type s-_GtkDitherInfo (union (s::gushort-array-2 "s") (c::guchar-array-4 "c")) "union _GtkDitherInfo")
    (type GtkDitherInfo s-_GtkDitherInfo "GtkDitherInfo")
    (type s-_GtkPreviewClass (struct (parent_class::GtkWidgetClass "parent_class") (info::GtkPreviewInfo "info")) "struct _GtkPreviewClass")
    (type GtkPreviewClass s-_GtkPreviewClass "GtkPreviewClass")
    (type gushort-array-2 (array gushort) "gushort $[ 2 ]")
    (type guchar-array-4 (array guchar) "guchar $[ 4 ]")
    (type s-_GtkProgress (struct (widget::GtkWidget "widget") (adjustment::GtkAdjustment* "adjustment") (offscreen_pixmap::GdkPixmap* "offscreen_pixmap") (format::gchar* "format") (x_align::gfloat "x_align") (y_align::gfloat "y_align") (show_text::guint "show_text") (activity_mode::guint "activity_mode") (use_text_format::guint "use_text_format")) "struct _GtkProgress")
    (type GtkProgress s-_GtkProgress "GtkProgress")
    (type s-_GtkProgressClass (struct (parent_class::GtkWidgetClass "parent_class") (paint::*GtkProgress*->void "paint") (update::*GtkProgress*->void "update") (act_mode_enter::*GtkProgress*->void "act_mode_enter") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkProgressClass")
    (type GtkProgressClass s-_GtkProgressClass "GtkProgressClass")
    (type GtkProgress*->void "void ($(GtkProgress *))")
    (type *GtkProgress*->void (function void (GtkProgress*)) "void ((*$)(GtkProgress *))")
    (type s-_GtkProgressBar (struct (progress::GtkProgress "progress") (bar_style::GtkProgressBarStyle "bar_style") (orientation::GtkProgressBarOrientation "orientation") (blocks::guint "blocks") (in_block::gint "in_block") (activity_pos::gint "activity_pos") (activity_step::guint "activity_step") (activity_blocks::guint "activity_blocks") (pulse_fraction::gdouble "pulse_fraction") (activity_dir::guint "activity_dir") (ellipsize::guint "ellipsize")) "struct _GtkProgressBar")
    (type GtkProgressBar s-_GtkProgressBar "GtkProgressBar")
    (type s-_GtkProgressBarClass (struct (parent_class::GtkProgressClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkProgressBarClass")
    (type GtkProgressBarClass s-_GtkProgressBarClass "GtkProgressBarClass")
    (type monster__e1223 int "long")
    (macro GTK_PROGRESS_CONTINUOUS::int "GTK_PROGRESS_CONTINUOUS")
    (macro GTK_PROGRESS_DISCRETE::int "GTK_PROGRESS_DISCRETE")
    (type GtkProgressBarStyle monster__e1223 "GtkProgressBarStyle")
    (type monster__e1224 int "long")
    (macro GTK_PROGRESS_LEFT_TO_RIGHT::int "GTK_PROGRESS_LEFT_TO_RIGHT")
    (macro GTK_PROGRESS_RIGHT_TO_LEFT::int "GTK_PROGRESS_RIGHT_TO_LEFT")
    (macro GTK_PROGRESS_BOTTOM_TO_TOP::int "GTK_PROGRESS_BOTTOM_TO_TOP")
    (macro GTK_PROGRESS_TOP_TO_BOTTOM::int "GTK_PROGRESS_TOP_TO_BOTTOM")
    (type GtkProgressBarOrientation monster__e1224 "GtkProgressBarOrientation")
    (type s-_GtkToggleAction (struct (parent::GtkAction "parent") (private_data::GtkToggleActionPrivate* "private_data")) "struct _GtkToggleAction")
    (type GtkToggleAction s-_GtkToggleAction "GtkToggleAction")
    (type s-_GtkToggleActionPrivate (struct) "struct _GtkToggleActionPrivate")
    (type GtkToggleActionPrivate s-_GtkToggleActionPrivate "GtkToggleActionPrivate")
    (type s-_GtkToggleActionClass (struct (parent_class::GtkActionClass "parent_class") (toggled::*GtkToggleAction*->void "toggled") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkToggleActionClass")
    (type GtkToggleActionClass s-_GtkToggleActionClass "GtkToggleActionClass")
    (type GtkToggleAction*->void "void ($(GtkToggleAction *))")
    (type *GtkToggleAction*->void (function void (GtkToggleAction*)) "void ((*$)(GtkToggleAction *))")
    (type s-_GtkRadioAction (struct (parent::GtkToggleAction "parent") (private_data::GtkRadioActionPrivate* "private_data")) "struct _GtkRadioAction")
    (type GtkRadioAction s-_GtkRadioAction "GtkRadioAction")
    (type s-_GtkRadioActionPrivate (struct) "struct _GtkRadioActionPrivate")
    (type GtkRadioActionPrivate s-_GtkRadioActionPrivate "GtkRadioActionPrivate")
    (type s-_GtkRadioActionClass (struct (parent_class::GtkToggleActionClass "parent_class") (changed::*GtkRadioAction*,GtkRadioAction*->void "changed") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkRadioActionClass")
    (type GtkRadioActionClass s-_GtkRadioActionClass "GtkRadioActionClass")
    (type GtkRadioAction*,GtkRadioAction*->void "void ($(GtkRadioAction *,GtkRadioAction *))")
    (type *GtkRadioAction*,GtkRadioAction*->void (function void (GtkRadioAction* GtkRadioAction*)) "void ((*$)(GtkRadioAction *,GtkRadioAction *))")
    (type s-_GtkRadioButton (struct (check_button::GtkCheckButton "check_button") (group::GSList* "group")) "struct _GtkRadioButton")
    (type GtkRadioButton s-_GtkRadioButton "GtkRadioButton")
    (type s-_GtkRadioButtonClass (struct (parent_class::GtkCheckButtonClass "parent_class") (group_changed::*GtkRadioButton*->void "group_changed") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkRadioButtonClass")
    (type GtkRadioButtonClass s-_GtkRadioButtonClass "GtkRadioButtonClass")
    (type GtkRadioButton*->void "void ($(GtkRadioButton *))")
    (type *GtkRadioButton*->void (function void (GtkRadioButton*)) "void ((*$)(GtkRadioButton *))")
    (type s-_GtkRadioMenuItem (struct (check_menu_item::GtkCheckMenuItem "check_menu_item") (group::GSList* "group")) "struct _GtkRadioMenuItem")
    (type GtkRadioMenuItem s-_GtkRadioMenuItem "GtkRadioMenuItem")
    (type s-_GtkRadioMenuItemClass (struct (parent_class::GtkCheckMenuItemClass "parent_class") (group_changed::*GtkRadioMenuItem*->void "group_changed") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkRadioMenuItemClass")
    (type GtkRadioMenuItemClass s-_GtkRadioMenuItemClass "GtkRadioMenuItemClass")
    (type GtkRadioMenuItem*->void "void ($(GtkRadioMenuItem *))")
    (type *GtkRadioMenuItem*->void (function void (GtkRadioMenuItem*)) "void ((*$)(GtkRadioMenuItem *))")
    (type s-_GtkToggleToolButton (struct (parent::GtkToolButton "parent") (priv::GtkToggleToolButtonPrivate* "priv")) "struct _GtkToggleToolButton")
    (type GtkToggleToolButton s-_GtkToggleToolButton "GtkToggleToolButton")
    (type s-_GtkToggleToolButtonClass (struct (parent_class::GtkToolButtonClass "parent_class") (toggled::*GtkToggleToolButton*->void "toggled") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkToggleToolButtonClass")
    (type GtkToggleToolButtonClass s-_GtkToggleToolButtonClass "GtkToggleToolButtonClass")
    (type s-_GtkToggleToolButtonPrivate (struct) "struct _GtkToggleToolButtonPrivate")
    (type GtkToggleToolButtonPrivate s-_GtkToggleToolButtonPrivate "GtkToggleToolButtonPrivate")
    (type GtkToggleToolButton*->void "void ($(GtkToggleToolButton *))")
    (type *GtkToggleToolButton*->void (function void (GtkToggleToolButton*)) "void ((*$)(GtkToggleToolButton *))")
    (type s-_GtkRadioToolButton (struct (parent::GtkToggleToolButton "parent")) "struct _GtkRadioToolButton")
    (type GtkRadioToolButton s-_GtkRadioToolButton "GtkRadioToolButton")
    (type s-_GtkRadioToolButtonClass (struct (parent_class::GtkToggleToolButtonClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkRadioToolButtonClass")
    (type GtkRadioToolButtonClass s-_GtkRadioToolButtonClass "GtkRadioToolButtonClass")
    (type s-_GtkViewport (struct (bin::GtkBin "bin") (shadow_type::GtkShadowType "shadow_type") (view_window::GdkWindow* "view_window") (bin_window::GdkWindow* "bin_window") (hadjustment::GtkAdjustment* "hadjustment") (vadjustment::GtkAdjustment* "vadjustment")) "struct _GtkViewport")
    (type GtkViewport s-_GtkViewport "GtkViewport")
    (type s-_GtkViewportClass (struct (parent_class::GtkBinClass "parent_class") (set_scroll_adjustments::*GtkViewport*,GtkAdjustment*,GtkAdjustment*->void "set_scroll_adjustments")) "struct _GtkViewportClass")
    (type GtkViewportClass s-_GtkViewportClass "GtkViewportClass")
    (type GtkViewport*,GtkAdjustment*,GtkAdjustment*->void "void ($(GtkViewport *,GtkAdjustment *,GtkAdjustment *))")
    (type *GtkViewport*,GtkAdjustment*,GtkAdjustment*->void (function void (GtkViewport* GtkAdjustment* GtkAdjustment*)) "void ((*$)(GtkViewport *,GtkAdjustment *,GtkAdjustment *))")
    (type s-_GtkScrolledWindow (struct (container::GtkBin "container") (hscrollbar::GtkWidget* "hscrollbar") (vscrollbar::GtkWidget* "vscrollbar") (hscrollbar_policy::guint "hscrollbar_policy") (vscrollbar_policy::guint "vscrollbar_policy") (hscrollbar_visible::guint "hscrollbar_visible") (vscrollbar_visible::guint "vscrollbar_visible") (window_placement::guint "window_placement") (focus_out::guint "focus_out") (shadow_type::guint16 "shadow_type")) "struct _GtkScrolledWindow")
    (type GtkScrolledWindow s-_GtkScrolledWindow "GtkScrolledWindow")
    (type s-_GtkScrolledWindowClass (struct (parent_class::GtkBinClass "parent_class") (scrollbar_spacing::gint "scrollbar_spacing") (scroll_child::*GtkScrolledWindow*,GtkScrollType,gboolean->void "scroll_child") (move_focus_out::*GtkScrolledWindow*,GtkDirectionType->void "move_focus_out") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkScrolledWindowClass")
    (type GtkScrolledWindowClass s-_GtkScrolledWindowClass "GtkScrolledWindowClass")
    (type GtkScrolledWindow*,GtkScrollType,gboolean->void "void ($(GtkScrolledWindow *,GtkScrollType,gboolean))")
    (type *GtkScrolledWindow*,GtkScrollType,gboolean->void (function void (GtkScrolledWindow* GtkScrollType gboolean)) "void ((*$)(GtkScrolledWindow *,GtkScrollType,gboolean))")
    (type GtkScrolledWindow*,GtkDirectionType->void "void ($(GtkScrolledWindow *,GtkDirectionType))")
    (type *GtkScrolledWindow*,GtkDirectionType->void (function void (GtkScrolledWindow* GtkDirectionType)) "void ((*$)(GtkScrolledWindow *,GtkDirectionType))")
    (type s-_GtkSeparatorMenuItem (struct (menu_item::GtkMenuItem "menu_item")) "struct _GtkSeparatorMenuItem")
    (type GtkSeparatorMenuItem s-_GtkSeparatorMenuItem "GtkSeparatorMenuItem")
    (type s-_GtkSeparatorMenuItemClass (struct (parent_class::GtkMenuItemClass "parent_class")) "struct _GtkSeparatorMenuItemClass")
    (type GtkSeparatorMenuItemClass s-_GtkSeparatorMenuItemClass "GtkSeparatorMenuItemClass")
    (type s-_GtkSeparatorToolItem (struct (parent::GtkToolItem "parent") (priv::GtkSeparatorToolItemPrivate* "priv")) "struct _GtkSeparatorToolItem")
    (type GtkSeparatorToolItem s-_GtkSeparatorToolItem "GtkSeparatorToolItem")
    (type s-_GtkSeparatorToolItemClass (struct (parent_class::GtkToolItemClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkSeparatorToolItemClass")
    (type GtkSeparatorToolItemClass s-_GtkSeparatorToolItemClass "GtkSeparatorToolItemClass")
    (type s-_GtkSeparatorToolItemPrivate (struct) "struct _GtkSeparatorToolItemPrivate")
    (type GtkSeparatorToolItemPrivate s-_GtkSeparatorToolItemPrivate "GtkSeparatorToolItemPrivate")
    (type s-_GtkSizeGroup (struct (parent_instance::GObject "parent_instance") (widgets::GSList* "widgets") (mode::guint8 "mode") (have_width::guint "have_width") (have_height::guint "have_height") (requisition::GtkRequisition "requisition")) "struct _GtkSizeGroup")
    (type GtkSizeGroup s-_GtkSizeGroup "GtkSizeGroup")
    (type s-_GtkSizeGroupClass (struct (parent_class::GObjectClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkSizeGroupClass")
    (type GtkSizeGroupClass s-_GtkSizeGroupClass "GtkSizeGroupClass")
    (type monster__e1225 int "long")
    (macro GTK_SIZE_GROUP_NONE::int "GTK_SIZE_GROUP_NONE")
    (macro GTK_SIZE_GROUP_HORIZONTAL::int "GTK_SIZE_GROUP_HORIZONTAL")
    (macro GTK_SIZE_GROUP_VERTICAL::int "GTK_SIZE_GROUP_VERTICAL")
    (macro GTK_SIZE_GROUP_BOTH::int "GTK_SIZE_GROUP_BOTH")
    (type GtkSizeGroupMode monster__e1225 "GtkSizeGroupMode")
    (type monster__e1226 int "long")
    (macro GTK_UPDATE_ALWAYS::int "GTK_UPDATE_ALWAYS")
    (macro GTK_UPDATE_IF_VALID::int "GTK_UPDATE_IF_VALID")
    (type GtkSpinButtonUpdatePolicy monster__e1226 "GtkSpinButtonUpdatePolicy")
    (type monster__e1227 int "long")
    (macro GTK_SPIN_STEP_FORWARD::int "GTK_SPIN_STEP_FORWARD")
    (macro GTK_SPIN_STEP_BACKWARD::int "GTK_SPIN_STEP_BACKWARD")
    (macro GTK_SPIN_PAGE_FORWARD::int "GTK_SPIN_PAGE_FORWARD")
    (macro GTK_SPIN_PAGE_BACKWARD::int "GTK_SPIN_PAGE_BACKWARD")
    (macro GTK_SPIN_HOME::int "GTK_SPIN_HOME")
    (macro GTK_SPIN_END::int "GTK_SPIN_END")
    (macro GTK_SPIN_USER_DEFINED::int "GTK_SPIN_USER_DEFINED")
    (type GtkSpinType monster__e1227 "GtkSpinType")
    (type s-_GtkSpinButton (struct (entry::GtkEntry "entry") (adjustment::GtkAdjustment* "adjustment") (panel::GdkWindow* "panel") (timer::guint32 "timer") (climb_rate::gdouble "climb_rate") (timer_step::gdouble "timer_step") (update_policy::GtkSpinButtonUpdatePolicy "update_policy") (in_child::guint "in_child") (click_child::guint "click_child") (button::guint "button") (need_timer::guint "need_timer") (timer_calls::guint "timer_calls") (digits::guint "digits") (numeric::guint "numeric") (wrap::guint "wrap") (snap_to_ticks::guint "snap_to_ticks")) "struct _GtkSpinButton")
    (type GtkSpinButton s-_GtkSpinButton "GtkSpinButton")
    (type s-_GtkSpinButtonClass (struct (parent_class::GtkEntryClass "parent_class") (input::*GtkSpinButton*,gdouble*->gint "input") (output::*GtkSpinButton*->gint "output") (value_changed::*GtkSpinButton*->void "value_changed") (change_value::*GtkSpinButton*,GtkScrollType->void "change_value") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkSpinButtonClass")
    (type GtkSpinButtonClass s-_GtkSpinButtonClass "GtkSpinButtonClass")
    (type GtkSpinButton*,gdouble*->gint "gint ($(GtkSpinButton *,gdouble *))")
    (type *GtkSpinButton*,gdouble*->gint (function gint (GtkSpinButton* gdouble*)) "gint ((*$)(GtkSpinButton *,gdouble *))")
    (type GtkSpinButton*->gint "gint ($(GtkSpinButton *))")
    (type *GtkSpinButton*->gint (function gint (GtkSpinButton*)) "gint ((*$)(GtkSpinButton *))")
    (type GtkSpinButton*->void "void ($(GtkSpinButton *))")
    (type *GtkSpinButton*->void (function void (GtkSpinButton*)) "void ((*$)(GtkSpinButton *))")
    (type GtkSpinButton*,GtkScrollType->void "void ($(GtkSpinButton *,GtkScrollType))")
    (type *GtkSpinButton*,GtkScrollType->void (function void (GtkSpinButton* GtkScrollType)) "void ((*$)(GtkSpinButton *,GtkScrollType))")
    (type s-_GtkStatusbar (struct (parent_widget::GtkHBox "parent_widget") (frame::GtkWidget* "frame") (label::GtkWidget* "label") (messages::GSList* "messages") (keys::GSList* "keys") (seq_context_id::guint "seq_context_id") (seq_message_id::guint "seq_message_id") (grip_window::GdkWindow* "grip_window") (has_resize_grip::guint "has_resize_grip")) "struct _GtkStatusbar")
    (type GtkStatusbar s-_GtkStatusbar "GtkStatusbar")
    (type s-_GtkStatusbarClass (struct (parent_class::GtkHBoxClass "parent_class") (messages_mem_chunk::GMemChunk* "messages_mem_chunk") (text_pushed::*GtkStatusbar*,guint,gchar*->void "text_pushed") (text_popped::*GtkStatusbar*,guint,gchar*->void "text_popped") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkStatusbarClass")
    (type GtkStatusbarClass s-_GtkStatusbarClass "GtkStatusbarClass")
    (type GtkStatusbar*,guint,gchar*->void "void ($(GtkStatusbar *,guint,gchar *))")
    (type *GtkStatusbar*,guint,gchar*->void (function void (GtkStatusbar* guint gchar*)) "void ((*$)(GtkStatusbar *,guint,gchar *))")
    (type s-_GtkStockItem (struct (stock_id::gchar* "stock_id") (label::gchar* "label") (modifier::GdkModifierType "modifier") (keyval::guint "keyval") (translation_domain::gchar* "translation_domain")) "struct _GtkStockItem")
    (type GtkStockItem s-_GtkStockItem "GtkStockItem")
    (type s-_GtkTable (struct (container::GtkContainer "container") (children::GList* "children") (rows::GtkTableRowCol* "rows") (cols::GtkTableRowCol* "cols") (nrows::guint16 "nrows") (ncols::guint16 "ncols") (column_spacing::guint16 "column_spacing") (row_spacing::guint16 "row_spacing") (homogeneous::guint "homogeneous")) "struct _GtkTable")
    (type GtkTable s-_GtkTable "GtkTable")
    (type s-_GtkTableClass (struct (parent_class::GtkContainerClass "parent_class")) "struct _GtkTableClass")
    (type GtkTableClass s-_GtkTableClass "GtkTableClass")
    (type s-_GtkTableChild (struct (widget::GtkWidget* "widget") (left_attach::guint16 "left_attach") (right_attach::guint16 "right_attach") (top_attach::guint16 "top_attach") (bottom_attach::guint16 "bottom_attach") (xpadding::guint16 "xpadding") (ypadding::guint16 "ypadding") (xexpand::guint "xexpand") (yexpand::guint "yexpand") (xshrink::guint "xshrink") (yshrink::guint "yshrink") (xfill::guint "xfill") (yfill::guint "yfill")) "struct _GtkTableChild")
    (type GtkTableChild s-_GtkTableChild "GtkTableChild")
    (type s-_GtkTableRowCol (struct (requisition::guint16 "requisition") (allocation::guint16 "allocation") (spacing::guint16 "spacing") (need_expand::guint "need_expand") (need_shrink::guint "need_shrink") (expand::guint "expand") (shrink::guint "shrink") (empty::guint "empty")) "struct _GtkTableRowCol")
    (type GtkTableRowCol s-_GtkTableRowCol "GtkTableRowCol")
    (type s-_GtkTearoffMenuItem (struct (menu_item::GtkMenuItem "menu_item") (torn_off::guint "torn_off")) "struct _GtkTearoffMenuItem")
    (type GtkTearoffMenuItem s-_GtkTearoffMenuItem "GtkTearoffMenuItem")
    (type s-_GtkTearoffMenuItemClass (struct (parent_class::GtkMenuItemClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkTearoffMenuItemClass")
    (type GtkTearoffMenuItemClass s-_GtkTearoffMenuItemClass "GtkTearoffMenuItemClass")
    (type s-_GtkTextIter (struct (dummy1::gpointer "dummy1") (dummy2::gpointer "dummy2") (dummy3::gint "dummy3") (dummy4::gint "dummy4") (dummy5::gint "dummy5") (dummy6::gint "dummy6") (dummy7::gint "dummy7") (dummy8::gint "dummy8") (dummy9::gpointer "dummy9") (dummy10::gpointer "dummy10") (dummy11::gint "dummy11") (dummy12::gint "dummy12") (dummy13::gint "dummy13") (dummy14::gpointer "dummy14")) "struct _GtkTextIter")
    (type GtkTextIter s-_GtkTextIter "GtkTextIter")
    (type s-_GtkTextTagTable (struct (parent_instance::GObject "parent_instance") (hash::GHashTable* "hash") (anonymous::GSList* "anonymous") (anon_count::gint "anon_count") (buffers::GSList* "buffers")) "struct _GtkTextTagTable")
    (type GtkTextTagTable s-_GtkTextTagTable "GtkTextTagTable")
    (type s-_GtkTextAttributes (struct (refcount::guint "refcount") (appearance::GtkTextAppearance "appearance") (justification::GtkJustification "justification") (direction::GtkTextDirection "direction") (font::PangoFontDescription* "font") (font_scale::gdouble "font_scale") (left_margin::gint "left_margin") (indent::gint "indent") (right_margin::gint "right_margin") (pixels_above_lines::gint "pixels_above_lines") (pixels_below_lines::gint "pixels_below_lines") (pixels_inside_wrap::gint "pixels_inside_wrap") (tabs::PangoTabArray* "tabs") (wrap_mode::GtkWrapMode "wrap_mode") (language::PangoLanguage* "language") (padding1::gpointer "padding1") (invisible::guint "invisible") (bg_full_height::guint "bg_full_height") (editable::guint "editable") (realized::guint "realized") (pad1::guint "pad1") (pad2::guint "pad2") (pad3::guint "pad3") (pad4::guint "pad4")) "struct _GtkTextAttributes")
    (type GtkTextAttributes s-_GtkTextAttributes "GtkTextAttributes")
    (type s-_GtkTextTag (struct (parent_instance::GObject "parent_instance") (table::GtkTextTagTable* "table") (name::string "name") (priority::int "priority") (values::GtkTextAttributes* "values") (bg_color_set::guint "bg_color_set") (bg_stipple_set::guint "bg_stipple_set") (fg_color_set::guint "fg_color_set") (scale_set::guint "scale_set") (fg_stipple_set::guint "fg_stipple_set") (justification_set::guint "justification_set") (left_margin_set::guint "left_margin_set") (indent_set::guint "indent_set") (rise_set::guint "rise_set") (strikethrough_set::guint "strikethrough_set") (right_margin_set::guint "right_margin_set") (pixels_above_lines_set::guint "pixels_above_lines_set") (pixels_below_lines_set::guint "pixels_below_lines_set") (pixels_inside_wrap_set::guint "pixels_inside_wrap_set") (tabs_set::guint "tabs_set") (underline_set::guint "underline_set") (wrap_mode_set::guint "wrap_mode_set") (bg_full_height_set::guint "bg_full_height_set") (invisible_set::guint "invisible_set") (editable_set::guint "editable_set") (language_set::guint "language_set") (pad1::guint "pad1") (pad2::guint "pad2") (pad3::guint "pad3")) "struct _GtkTextTag")
    (type GtkTextTag s-_GtkTextTag "GtkTextTag")
    (type s-_GtkTextTagClass (struct (parent_class::GObjectClass "parent_class") (event::*GtkTextTag*,GObject*,GdkEvent*,GtkTextIter*->gboolean "event") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkTextTagClass")
    (type GtkTextTagClass s-_GtkTextTagClass "GtkTextTagClass")
    (type GtkTextTag*,GObject*,GdkEvent*,GtkTextIter*->gboolean "gboolean ($(GtkTextTag *,GObject *,GdkEvent *,GtkTextIter *))")
    (type *GtkTextTag*,GObject*,GdkEvent*,GtkTextIter*->gboolean (function gboolean (GtkTextTag* GObject* GdkEvent* GtkTextIter*)) "gboolean ((*$)(GtkTextTag *,GObject *,GdkEvent *,GtkTextIter *))")
    (type s-_GtkTextAppearance (struct (bg_color::GdkColor "bg_color") (fg_color::GdkColor "fg_color") (bg_stipple::GdkBitmap* "bg_stipple") (fg_stipple::GdkBitmap* "fg_stipple") (rise::gint "rise") (padding1::gpointer "padding1") (underline::guint "underline") (strikethrough::guint "strikethrough") (draw_bg::guint "draw_bg") (inside_selection::guint "inside_selection") (is_text::guint "is_text") (pad1::guint "pad1") (pad2::guint "pad2") (pad3::guint "pad3") (pad4::guint "pad4")) "struct _GtkTextAppearance")
    (type GtkTextAppearance s-_GtkTextAppearance "GtkTextAppearance")
    (type GtkTextTag*,gpointer->void "void ($(GtkTextTag *,gpointer))")
    (type *GtkTextTag*,gpointer->void (function void (GtkTextTag* gpointer)) "void ((*$)(GtkTextTag *,gpointer))")
    (type GtkTextTagTableForeach *GtkTextTag*,gpointer->void "GtkTextTagTableForeach")
    (type s-_GtkTextTagTableClass (struct (parent_class::GObjectClass "parent_class") (tag_changed::*GtkTextTagTable*,GtkTextTag*,gboolean->void "tag_changed") (tag_added::*GtkTextTagTable*,GtkTextTag*->void "tag_added") (tag_removed::*GtkTextTagTable*,GtkTextTag*->void "tag_removed") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkTextTagTableClass")
    (type GtkTextTagTableClass s-_GtkTextTagTableClass "GtkTextTagTableClass")
    (type GtkTextTagTable*,GtkTextTag*,gboolean->void "void ($(GtkTextTagTable *,GtkTextTag *,gboolean))")
    (type *GtkTextTagTable*,GtkTextTag*,gboolean->void (function void (GtkTextTagTable* GtkTextTag* gboolean)) "void ((*$)(GtkTextTagTable *,GtkTextTag *,gboolean))")
    (type GtkTextTagTable*,GtkTextTag*->void "void ($(GtkTextTagTable *,GtkTextTag *))")
    (type *GtkTextTagTable*,GtkTextTag*->void (function void (GtkTextTagTable* GtkTextTag*)) "void ((*$)(GtkTextTagTable *,GtkTextTag *))")
    (type s-_GtkTextChildAnchor (struct (parent_instance::GObject "parent_instance") (segment::gpointer "segment")) "struct _GtkTextChildAnchor")
    (type GtkTextChildAnchor s-_GtkTextChildAnchor "GtkTextChildAnchor")
    (type s-_GtkTextChildAnchorClass (struct (parent_class::GObjectClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkTextChildAnchorClass")
    (type GtkTextChildAnchorClass s-_GtkTextChildAnchorClass "GtkTextChildAnchorClass")
    (type monster__e1228 int "long")
    (macro GTK_TEXT_SEARCH_VISIBLE_ONLY::int "GTK_TEXT_SEARCH_VISIBLE_ONLY")
    (macro GTK_TEXT_SEARCH_TEXT_ONLY::int "GTK_TEXT_SEARCH_TEXT_ONLY")
    (type GtkTextSearchFlags monster__e1228 "GtkTextSearchFlags")
    (type s-_GtkTextBuffer (struct (parent_instance::GObject "parent_instance") (tag_table::GtkTextTagTable* "tag_table") (btree::GtkTextBTree* "btree") (clipboard_contents_buffers::GSList* "clipboard_contents_buffers") (selection_clipboards::GSList* "selection_clipboards") (log_attr_cache::GtkTextLogAttrCache* "log_attr_cache") (user_action_count::guint "user_action_count") (modified::guint "modified")) "struct _GtkTextBuffer")
    (type GtkTextBuffer s-_GtkTextBuffer "GtkTextBuffer")
    (type gunichar,gpointer->gboolean "gboolean ($(gunichar,gpointer))")
    (type *gunichar,gpointer->gboolean (function gboolean (gunichar gpointer)) "gboolean ((*$)(gunichar,gpointer))")
    (type GtkTextCharPredicate *gunichar,gpointer->gboolean "GtkTextCharPredicate")
    (type s-_GtkTextMark (struct (parent_instance::GObject "parent_instance") (segment::gpointer "segment")) "struct _GtkTextMark")
    (type GtkTextMark s-_GtkTextMark "GtkTextMark")
    (type s-_GtkTextMarkClass (struct (parent_class::GObjectClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkTextMarkClass")
    (type GtkTextMarkClass s-_GtkTextMarkClass "GtkTextMarkClass")
    (type s-_GtkTextBTree (struct) "struct _GtkTextBTree")
    (type GtkTextBTree s-_GtkTextBTree "GtkTextBTree")
    (type s-_GtkTextLogAttrCache (struct) "struct _GtkTextLogAttrCache")
    (type GtkTextLogAttrCache s-_GtkTextLogAttrCache "GtkTextLogAttrCache")
    (type s-_GtkTextBufferClass (struct (parent_class::GObjectClass "parent_class") (insert_text::*GtkTextBuffer*,GtkTextIter*,gchar*,gint->void "insert_text") (insert_pixbuf::*GtkTextBuffer*,GtkTextIter*,GdkPixbuf*->void "insert_pixbuf") (insert_child_anchor::*GtkTextBuffer*,GtkTextIter*,GtkTextChildAnchor*->void "insert_child_anchor") (delete_range::*GtkTextBuffer*,GtkTextIter*,GtkTextIter*->void "delete_range") (changed::*GtkTextBuffer*->void "changed") (modified_changed::*GtkTextBuffer*->void "modified_changed") (mark_set::*GtkTextBuffer*,GtkTextIter*,GtkTextMark*->void "mark_set") (mark_deleted::*GtkTextBuffer*,GtkTextMark*->void "mark_deleted") (apply_tag::*GtkTextBuffer*,GtkTextTag*,GtkTextIter*,GtkTextIter*->void "apply_tag") (remove_tag::*GtkTextBuffer*,GtkTextTag*,GtkTextIter*,GtkTextIter*->void "remove_tag") (begin_user_action::*GtkTextBuffer*->void "begin_user_action") (end_user_action::*GtkTextBuffer*->void "end_user_action") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4") (_gtk_reserved5::*void->void "_gtk_reserved5") (_gtk_reserved6::*void->void "_gtk_reserved6")) "struct _GtkTextBufferClass")
    (type GtkTextBufferClass s-_GtkTextBufferClass "GtkTextBufferClass")
    (type GtkTextBuffer*,GtkTextIter*,gchar*,gint->void "void ($(GtkTextBuffer *,GtkTextIter *,gchar *,gint))")
    (type *GtkTextBuffer*,GtkTextIter*,gchar*,gint->void (function void (GtkTextBuffer* GtkTextIter* gchar* gint)) "void ((*$)(GtkTextBuffer *,GtkTextIter *,gchar *,gint))")
    (type GtkTextBuffer*,GtkTextIter*,GdkPixbuf*->void "void ($(GtkTextBuffer *,GtkTextIter *,GdkPixbuf *))")
    (type *GtkTextBuffer*,GtkTextIter*,GdkPixbuf*->void (function void (GtkTextBuffer* GtkTextIter* GdkPixbuf*)) "void ((*$)(GtkTextBuffer *,GtkTextIter *,GdkPixbuf *))")
    (type GtkTextBuffer*,GtkTextIter*,GtkTextChildAnchor*->void "void ($(GtkTextBuffer *,GtkTextIter *,GtkTextChildAnchor *))")
    (type *GtkTextBuffer*,GtkTextIter*,GtkTextChildAnchor*->void (function void (GtkTextBuffer* GtkTextIter* GtkTextChildAnchor*)) "void ((*$)(GtkTextBuffer *,GtkTextIter *,GtkTextChildAnchor *))")
    (type GtkTextBuffer*,GtkTextIter*,GtkTextIter*->void "void ($(GtkTextBuffer *,GtkTextIter *,GtkTextIter *))")
    (type *GtkTextBuffer*,GtkTextIter*,GtkTextIter*->void (function void (GtkTextBuffer* GtkTextIter* GtkTextIter*)) "void ((*$)(GtkTextBuffer *,GtkTextIter *,GtkTextIter *))")
    (type GtkTextBuffer*->void "void ($(GtkTextBuffer *))")
    (type *GtkTextBuffer*->void (function void (GtkTextBuffer*)) "void ((*$)(GtkTextBuffer *))")
    (type GtkTextBuffer*,GtkTextIter*,GtkTextMark*->void "void ($(GtkTextBuffer *,GtkTextIter *,GtkTextMark *))")
    (type *GtkTextBuffer*,GtkTextIter*,GtkTextMark*->void (function void (GtkTextBuffer* GtkTextIter* GtkTextMark*)) "void ((*$)(GtkTextBuffer *,GtkTextIter *,GtkTextMark *))")
    (type GtkTextBuffer*,GtkTextMark*->void "void ($(GtkTextBuffer *,GtkTextMark *))")
    (type *GtkTextBuffer*,GtkTextMark*->void (function void (GtkTextBuffer* GtkTextMark*)) "void ((*$)(GtkTextBuffer *,GtkTextMark *))")
    (type GtkTextBuffer*,GtkTextTag*,GtkTextIter*,GtkTextIter*->void "void ($(GtkTextBuffer *,GtkTextTag *,GtkTextIter *,GtkTextIter *))")
    (type *GtkTextBuffer*,GtkTextTag*,GtkTextIter*,GtkTextIter*->void (function void (GtkTextBuffer* GtkTextTag* GtkTextIter* GtkTextIter*)) "void ((*$)(GtkTextBuffer *,GtkTextTag *,GtkTextIter *,GtkTextIter *))")
    (type monster__e1229 int "long")
    (macro GTK_TEXT_WINDOW_PRIVATE::int "GTK_TEXT_WINDOW_PRIVATE")
    (macro GTK_TEXT_WINDOW_WIDGET::int "GTK_TEXT_WINDOW_WIDGET")
    (macro GTK_TEXT_WINDOW_TEXT::int "GTK_TEXT_WINDOW_TEXT")
    (macro GTK_TEXT_WINDOW_LEFT::int "GTK_TEXT_WINDOW_LEFT")
    (macro GTK_TEXT_WINDOW_RIGHT::int "GTK_TEXT_WINDOW_RIGHT")
    (macro GTK_TEXT_WINDOW_TOP::int "GTK_TEXT_WINDOW_TOP")
    (macro GTK_TEXT_WINDOW_BOTTOM::int "GTK_TEXT_WINDOW_BOTTOM")
    (type GtkTextWindowType monster__e1229 "GtkTextWindowType")
    (type s-_GtkTextView (struct (parent_instance::GtkContainer "parent_instance") (layout::s-_GtkTextLayout* "layout") (buffer::GtkTextBuffer* "buffer") (selection_drag_handler::guint "selection_drag_handler") (scroll_timeout::guint "scroll_timeout") (pixels_above_lines::gint "pixels_above_lines") (pixels_below_lines::gint "pixels_below_lines") (pixels_inside_wrap::gint "pixels_inside_wrap") (wrap_mode::GtkWrapMode "wrap_mode") (justify::GtkJustification "justify") (left_margin::gint "left_margin") (right_margin::gint "right_margin") (indent::gint "indent") (tabs::PangoTabArray* "tabs") (editable::guint "editable") (overwrite_mode::guint "overwrite_mode") (cursor_visible::guint "cursor_visible") (need_im_reset::guint "need_im_reset") (accepts_tab::guint "accepts_tab") (reserved::guint "reserved") (onscreen_validated::guint "onscreen_validated") (mouse_cursor_obscured::guint "mouse_cursor_obscured") (text_window::GtkTextWindow* "text_window") (left_window::GtkTextWindow* "left_window") (right_window::GtkTextWindow* "right_window") (top_window::GtkTextWindow* "top_window") (bottom_window::GtkTextWindow* "bottom_window") (hadjustment::GtkAdjustment* "hadjustment") (vadjustment::GtkAdjustment* "vadjustment") (xoffset::gint "xoffset") (yoffset::gint "yoffset") (width::gint "width") (height::gint "height") (virtual_cursor_x::gint "virtual_cursor_x") (virtual_cursor_y::gint "virtual_cursor_y") (first_para_mark::GtkTextMark* "first_para_mark") (first_para_pixels::gint "first_para_pixels") (dnd_mark::GtkTextMark* "dnd_mark") (blink_timeout::guint "blink_timeout") (first_validate_idle::guint "first_validate_idle") (incremental_validate_idle::guint "incremental_validate_idle") (im_context::GtkIMContext* "im_context") (popup_menu::GtkWidget* "popup_menu") (drag_start_x::gint "drag_start_x") (drag_start_y::gint "drag_start_y") (children::GSList* "children") (pending_scroll::GtkTextPendingScroll* "pending_scroll") (pending_place_cursor_button::gint "pending_place_cursor_button")) "struct _GtkTextView")
    (type GtkTextView s-_GtkTextView "GtkTextView")
    (type s-_GtkTextViewClass (struct (parent_class::GtkContainerClass "parent_class") (set_scroll_adjustments::*GtkTextView*,GtkAdjustment*,GtkAdjustment*->void "set_scroll_adjustments") (populate_popup::*GtkTextView*,GtkMenu*->void "populate_popup") (move_cursor::*GtkTextView*,GtkMovementStep,gint,gboolean->void "move_cursor") (page_horizontally::*GtkTextView*,gint,gboolean->void "page_horizontally") (set_anchor::*GtkTextView*->void "set_anchor") (insert_at_cursor::*GtkTextView*,gchar*->void "insert_at_cursor") (delete_from_cursor::*GtkTextView*,GtkDeleteType,gint->void "delete_from_cursor") (backspace::*GtkTextView*->void "backspace") (cut_clipboard::*GtkTextView*->void "cut_clipboard") (copy_clipboard::*GtkTextView*->void "copy_clipboard") (paste_clipboard::*GtkTextView*->void "paste_clipboard") (toggle_overwrite::*GtkTextView*->void "toggle_overwrite") (move_focus::*GtkTextView*,GtkDirectionType->void "move_focus") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4") (_gtk_reserved5::*void->void "_gtk_reserved5") (_gtk_reserved6::*void->void "_gtk_reserved6") (_gtk_reserved7::*void->void "_gtk_reserved7")) "struct _GtkTextViewClass")
    (type GtkTextViewClass s-_GtkTextViewClass "GtkTextViewClass")
    (type s-_GtkTextWindow (struct) "struct _GtkTextWindow")
    (type GtkTextWindow s-_GtkTextWindow "GtkTextWindow")
    (type s-_GtkTextPendingScroll (struct) "struct _GtkTextPendingScroll")
    (type GtkTextPendingScroll s-_GtkTextPendingScroll "GtkTextPendingScroll")
    (type s-_GtkTextLayout (struct) "struct _GtkTextLayout")
    (type GtkTextView*,GtkAdjustment*,GtkAdjustment*->void "void ($(GtkTextView *,GtkAdjustment *,GtkAdjustment *))")
    (type *GtkTextView*,GtkAdjustment*,GtkAdjustment*->void (function void (GtkTextView* GtkAdjustment* GtkAdjustment*)) "void ((*$)(GtkTextView *,GtkAdjustment *,GtkAdjustment *))")
    (type GtkTextView*,GtkMenu*->void "void ($(GtkTextView *,GtkMenu *))")
    (type *GtkTextView*,GtkMenu*->void (function void (GtkTextView* GtkMenu*)) "void ((*$)(GtkTextView *,GtkMenu *))")
    (type GtkTextView*,GtkMovementStep,gint,gboolean->void "void ($(GtkTextView *,GtkMovementStep,gint,gboolean))")
    (type *GtkTextView*,GtkMovementStep,gint,gboolean->void (function void (GtkTextView* GtkMovementStep gint gboolean)) "void ((*$)(GtkTextView *,GtkMovementStep,gint,gboolean))")
    (type GtkTextView*,gint,gboolean->void "void ($(GtkTextView *,gint,gboolean))")
    (type *GtkTextView*,gint,gboolean->void (function void (GtkTextView* gint gboolean)) "void ((*$)(GtkTextView *,gint,gboolean))")
    (type GtkTextView*->void "void ($(GtkTextView *))")
    (type *GtkTextView*->void (function void (GtkTextView*)) "void ((*$)(GtkTextView *))")
    (type GtkTextView*,gchar*->void "void ($(GtkTextView *,gchar *))")
    (type *GtkTextView*,gchar*->void (function void (GtkTextView* gchar*)) "void ((*$)(GtkTextView *,gchar *))")
    (type GtkTextView*,GtkDeleteType,gint->void "void ($(GtkTextView *,GtkDeleteType,gint))")
    (type *GtkTextView*,GtkDeleteType,gint->void (function void (GtkTextView* GtkDeleteType gint)) "void ((*$)(GtkTextView *,GtkDeleteType,gint))")
    (type GtkTextView*,GtkDirectionType->void "void ($(GtkTextView *,GtkDirectionType))")
    (type *GtkTextView*,GtkDirectionType->void (function void (GtkTextView* GtkDirectionType)) "void ((*$)(GtkTextView *,GtkDirectionType))")
    (type s-_GtkTipsQuery (struct (label::GtkLabel "label") (emit_always::guint "emit_always") (in_query::guint "in_query") (label_inactive::gchar* "label_inactive") (label_no_tip::gchar* "label_no_tip") (caller::GtkWidget* "caller") (last_crossed::GtkWidget* "last_crossed") (query_cursor::GdkCursor* "query_cursor")) "struct _GtkTipsQuery")
    (type GtkTipsQuery s-_GtkTipsQuery "GtkTipsQuery")
    (type s-_GtkTipsQueryClass (struct (parent_class::GtkLabelClass "parent_class") (start_query::*GtkTipsQuery*->void "start_query") (stop_query::*GtkTipsQuery*->void "stop_query") (widget_entered::*GtkTipsQuery*,GtkWidget*,gchar*,gchar*->void "widget_entered") (widget_selected::*GtkTipsQuery*,GtkWidget*,gchar*,gchar*,GdkEventButton*->gint "widget_selected") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkTipsQueryClass")
    (type GtkTipsQueryClass s-_GtkTipsQueryClass "GtkTipsQueryClass")
    (type GtkTipsQuery*->void "void ($(GtkTipsQuery *))")
    (type *GtkTipsQuery*->void (function void (GtkTipsQuery*)) "void ((*$)(GtkTipsQuery *))")
    (type GtkTipsQuery*,GtkWidget*,gchar*,gchar*->void "void ($(GtkTipsQuery *,GtkWidget *,gchar *,gchar *))")
    (type *GtkTipsQuery*,GtkWidget*,gchar*,gchar*->void (function void (GtkTipsQuery* GtkWidget* gchar* gchar*)) "void ((*$)(GtkTipsQuery *,GtkWidget *,gchar *,gchar *))")
    (type GtkTipsQuery*,GtkWidget*,gchar*,gchar*,GdkEventButton*->gint "gint ($(GtkTipsQuery *,GtkWidget *,gchar *,gchar *,GdkEventButton *))")
    (type *GtkTipsQuery*,GtkWidget*,gchar*,gchar*,GdkEventButton*->gint (function gint (GtkTipsQuery* GtkWidget* gchar* gchar* GdkEventButton*)) "gint ((*$)(GtkTipsQuery *,GtkWidget *,gchar *,gchar *,GdkEventButton *))")
    (type monster__e1230 int "long")
    (macro GTK_TOOLBAR_CHILD_SPACE::int "GTK_TOOLBAR_CHILD_SPACE")
    (macro GTK_TOOLBAR_CHILD_BUTTON::int "GTK_TOOLBAR_CHILD_BUTTON")
    (macro GTK_TOOLBAR_CHILD_TOGGLEBUTTON::int "GTK_TOOLBAR_CHILD_TOGGLEBUTTON")
    (macro GTK_TOOLBAR_CHILD_RADIOBUTTON::int "GTK_TOOLBAR_CHILD_RADIOBUTTON")
    (macro GTK_TOOLBAR_CHILD_WIDGET::int "GTK_TOOLBAR_CHILD_WIDGET")
    (type GtkToolbarChildType monster__e1230 "GtkToolbarChildType")
    (type s-_GtkToolbarChild (struct (type::GtkToolbarChildType "type") (widget::GtkWidget* "widget") (icon::GtkWidget* "icon") (label::GtkWidget* "label")) "struct _GtkToolbarChild")
    (type GtkToolbarChild s-_GtkToolbarChild "GtkToolbarChild")
    (type monster__e1231 int "long")
    (macro GTK_TOOLBAR_SPACE_EMPTY::int "GTK_TOOLBAR_SPACE_EMPTY")
    (macro GTK_TOOLBAR_SPACE_LINE::int "GTK_TOOLBAR_SPACE_LINE")
    (type GtkToolbarSpaceStyle monster__e1231 "GtkToolbarSpaceStyle")
    (type s-_GtkToolbar (struct (container::GtkContainer "container") (num_children::gint "num_children") (children::GList* "children") (orientation::GtkOrientation "orientation") (style::GtkToolbarStyle "style") (icon_size::GtkIconSize "icon_size") (tooltips::GtkTooltips* "tooltips") (button_maxw::gint "button_maxw") (button_maxh::gint "button_maxh") (style_set_connection::guint "style_set_connection") (icon_size_connection::guint "icon_size_connection") (style_set::guint "style_set") (icon_size_set::guint "icon_size_set")) "struct _GtkToolbar")
    (type GtkToolbar s-_GtkToolbar "GtkToolbar")
    (type s-_GtkToolbarClass (struct (parent_class::GtkContainerClass "parent_class") (orientation_changed::*GtkToolbar*,GtkOrientation->void "orientation_changed") (style_changed::*GtkToolbar*,GtkToolbarStyle->void "style_changed") (popup_context_menu::*GtkToolbar*,gint,gint,gint->gboolean "popup_context_menu") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3")) "struct _GtkToolbarClass")
    (type GtkToolbarClass s-_GtkToolbarClass "GtkToolbarClass")
    (type s-_GtkToolbarPrivate (struct) "struct _GtkToolbarPrivate")
    (type GtkToolbarPrivate s-_GtkToolbarPrivate "GtkToolbarPrivate")
    (type GtkToolbar*,GtkOrientation->void "void ($(GtkToolbar *,GtkOrientation))")
    (type *GtkToolbar*,GtkOrientation->void (function void (GtkToolbar* GtkOrientation)) "void ((*$)(GtkToolbar *,GtkOrientation))")
    (type GtkToolbar*,GtkToolbarStyle->void "void ($(GtkToolbar *,GtkToolbarStyle))")
    (type *GtkToolbar*,GtkToolbarStyle->void (function void (GtkToolbar* GtkToolbarStyle)) "void ((*$)(GtkToolbar *,GtkToolbarStyle))")
    (type GtkToolbar*,gint,gint,gint->gboolean "gboolean ($(GtkToolbar *,gint,gint,gint))")
    (type *GtkToolbar*,gint,gint,gint->gboolean (function gboolean (GtkToolbar* gint gint gint)) "gboolean ((*$)(GtkToolbar *,gint,gint,gint))")
    (type s-_GtkTreeDragSource (struct) "struct _GtkTreeDragSource")
    (type GtkTreeDragSource s-_GtkTreeDragSource "GtkTreeDragSource")
    (type s-_GtkTreeDragSourceIface (struct (g_iface::GTypeInterface "g_iface") (row_draggable::*GtkTreeDragSource*,GtkTreePath*->gboolean "row_draggable") (drag_data_get::*GtkTreeDragSource*,GtkTreePath*,GtkSelectionData*->gboolean "drag_data_get") (drag_data_delete::*GtkTreeDragSource*,GtkTreePath*->gboolean "drag_data_delete")) "struct _GtkTreeDragSourceIface")
    (type GtkTreeDragSourceIface s-_GtkTreeDragSourceIface "GtkTreeDragSourceIface")
    (type GtkTreeDragSource*,GtkTreePath*->gboolean "gboolean ($(GtkTreeDragSource *,GtkTreePath *))")
    (type *GtkTreeDragSource*,GtkTreePath*->gboolean (function gboolean (GtkTreeDragSource* GtkTreePath*)) "gboolean ((*$)(GtkTreeDragSource *,GtkTreePath *))")
    (type GtkTreeDragSource*,GtkTreePath*,GtkSelectionData*->gboolean "gboolean ($(GtkTreeDragSource *,GtkTreePath *,GtkSelectionData *))")
    (type *GtkTreeDragSource*,GtkTreePath*,GtkSelectionData*->gboolean (function gboolean (GtkTreeDragSource* GtkTreePath* GtkSelectionData*)) "gboolean ((*$)(GtkTreeDragSource *,GtkTreePath *,GtkSelectionData *))")
    (type s-_GtkTreeDragDest (struct) "struct _GtkTreeDragDest")
    (type GtkTreeDragDest s-_GtkTreeDragDest "GtkTreeDragDest")
    (type s-_GtkTreeDragDestIface (struct (g_iface::GTypeInterface "g_iface") (drag_data_received::*GtkTreeDragDest*,GtkTreePath*,GtkSelectionData*->gboolean "drag_data_received") (row_drop_possible::*GtkTreeDragDest*,GtkTreePath*,GtkSelectionData*->gboolean "row_drop_possible")) "struct _GtkTreeDragDestIface")
    (type GtkTreeDragDestIface s-_GtkTreeDragDestIface "GtkTreeDragDestIface")
    (type GtkTreeDragDest*,GtkTreePath*,GtkSelectionData*->gboolean "gboolean ($(GtkTreeDragDest *,GtkTreePath *,GtkSelectionData *))")
    (type *GtkTreeDragDest*,GtkTreePath*,GtkSelectionData*->gboolean (function gboolean (GtkTreeDragDest* GtkTreePath* GtkSelectionData*)) "gboolean ((*$)(GtkTreeDragDest *,GtkTreePath *,GtkSelectionData *))")
    (type s-_GtkTreeModelSort (struct (parent::GObject "parent") (root::gpointer "root") (stamp::gint "stamp") (child_flags::guint "child_flags") (child_model::GtkTreeModel* "child_model") (zero_ref_count::gint "zero_ref_count") (sort_list::GList* "sort_list") (sort_column_id::gint "sort_column_id") (order::GtkSortType "order") (default_sort_func::GtkTreeIterCompareFunc "default_sort_func") (default_sort_data::gpointer "default_sort_data") (default_sort_destroy::GtkDestroyNotify "default_sort_destroy") (changed_id::guint "changed_id") (inserted_id::guint "inserted_id") (has_child_toggled_id::guint "has_child_toggled_id") (deleted_id::guint "deleted_id") (reordered_id::guint "reordered_id")) "struct _GtkTreeModelSort")
    (type GtkTreeModelSort s-_GtkTreeModelSort "GtkTreeModelSort")
    (type s-_GtkTreeModelSortClass (struct (parent_class::GObjectClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkTreeModelSortClass")
    (type GtkTreeModelSortClass s-_GtkTreeModelSortClass "GtkTreeModelSortClass")
    (type GtkTreeSelection*,GtkTreeModel*,GtkTreePath*,gboolean,gpointer->gboolean "gboolean ($(GtkTreeSelection *,GtkTreeModel *,GtkTreePath *,gboolean,gpointer))")
    (type *GtkTreeSelection*,GtkTreeModel*,GtkTreePath*,gboolean,gpointer->gboolean (function gboolean (GtkTreeSelection* GtkTreeModel* GtkTreePath* gboolean gpointer)) "gboolean ((*$)(GtkTreeSelection *,GtkTreeModel *,GtkTreePath *,gboolean,gpointer))")
    (type GtkTreeSelectionFunc *GtkTreeSelection*,GtkTreeModel*,GtkTreePath*,gboolean,gpointer->gboolean "GtkTreeSelectionFunc")
    (type GtkTreeModel*,GtkTreePath*,GtkTreeIter*,gpointer->void "void ($(GtkTreeModel *,GtkTreePath *,GtkTreeIter *,gpointer))")
    (type *GtkTreeModel*,GtkTreePath*,GtkTreeIter*,gpointer->void (function void (GtkTreeModel* GtkTreePath* GtkTreeIter* gpointer)) "void ((*$)(GtkTreeModel *,GtkTreePath *,GtkTreeIter *,gpointer))")
    (type GtkTreeSelectionForeachFunc *GtkTreeModel*,GtkTreePath*,GtkTreeIter*,gpointer->void "GtkTreeSelectionForeachFunc")
    (type GtkTreeSelection*->void "void ($(GtkTreeSelection *))")
    (type *GtkTreeSelection*->void (function void (GtkTreeSelection*)) "void ((*$)(GtkTreeSelection *))")
    (type s-_GtkTreeStore (struct (parent::GObject "parent") (stamp::gint "stamp") (root::gpointer "root") (last::gpointer "last") (n_columns::gint "n_columns") (sort_column_id::gint "sort_column_id") (sort_list::GList* "sort_list") (order::GtkSortType "order") (column_headers::GType* "column_headers") (default_sort_func::GtkTreeIterCompareFunc "default_sort_func") (default_sort_data::gpointer "default_sort_data") (default_sort_destroy::GtkDestroyNotify "default_sort_destroy") (columns_dirty::guint "columns_dirty")) "struct _GtkTreeStore")
    (type GtkTreeStore s-_GtkTreeStore "GtkTreeStore")
    (type s-_GtkTreeStoreClass (struct (parent_class::GObjectClass "parent_class") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2") (_gtk_reserved3::*void->void "_gtk_reserved3") (_gtk_reserved4::*void->void "_gtk_reserved4")) "struct _GtkTreeStoreClass")
    (type GtkTreeStoreClass s-_GtkTreeStoreClass "GtkTreeStoreClass")
    (type s-_GtkUIManager (struct (parent::GObject "parent") (private_data::GtkUIManagerPrivate* "private_data")) "struct _GtkUIManager")
    (type GtkUIManager s-_GtkUIManager "GtkUIManager")
    (type s-_GtkUIManagerClass (struct (parent_class::GObjectClass "parent_class") (add_widget::*GtkUIManager*,GtkWidget*->void "add_widget") (actions_changed::*GtkUIManager*->void "actions_changed") (connect_proxy::*GtkUIManager*,GtkAction*,GtkWidget*->void "connect_proxy") (disconnect_proxy::*GtkUIManager*,GtkAction*,GtkWidget*->void "disconnect_proxy") (pre_activate::*GtkUIManager*,GtkAction*->void "pre_activate") (post_activate::*GtkUIManager*,GtkAction*->void "post_activate") (get_widget::*GtkUIManager*,gchar*->GtkWidget* "get_widget") (get_action::*GtkUIManager*,gchar*->GtkAction* "get_action") (_gtk_reserved1::*void->void "_gtk_reserved1") (_gtk_reserved2::*void->void "_gtk_reserved2")) "struct _GtkUIManagerClass")
    (type GtkUIManagerClass s-_GtkUIManagerClass "GtkUIManagerClass")
    (type s-_GtkUIManagerPrivate (struct) "struct _GtkUIManagerPrivate")
    (type GtkUIManagerPrivate s-_GtkUIManagerPrivate "GtkUIManagerPrivate")
    (type GtkUIManager*,GtkWidget*->void "void ($(GtkUIManager *,GtkWidget *))")
    (type *GtkUIManager*,GtkWidget*->void (function void (GtkUIManager* GtkWidget*)) "void ((*$)(GtkUIManager *,GtkWidget *))")
    (type GtkUIManager*->void "void ($(GtkUIManager *))")
    (type *GtkUIManager*->void (function void (GtkUIManager*)) "void ((*$)(GtkUIManager *))")
    (type GtkUIManager*,GtkAction*,GtkWidget*->void "void ($(GtkUIManager *,GtkAction *,GtkWidget *))")
    (type *GtkUIManager*,GtkAction*,GtkWidget*->void (function void (GtkUIManager* GtkAction* GtkWidget*)) "void ((*$)(GtkUIManager *,GtkAction *,GtkWidget *))")
    (type GtkUIManager*,GtkAction*->void "void ($(GtkUIManager *,GtkAction *))")
    (type *GtkUIManager*,GtkAction*->void (function void (GtkUIManager* GtkAction*)) "void ((*$)(GtkUIManager *,GtkAction *))")
    (type GtkUIManager*,gchar*->GtkWidget* "GtkWidget *($(GtkUIManager *,gchar *))")
    (type *GtkUIManager*,gchar*->GtkWidget* (function GtkWidget* (GtkUIManager* gchar*)) "GtkWidget *((*$)(GtkUIManager *,gchar *))")
    (type GtkUIManager*,gchar*->GtkAction* "GtkAction *($(GtkUIManager *,gchar *))")
    (type *GtkUIManager*,gchar*->GtkAction* (function GtkAction* (GtkUIManager* gchar*)) "GtkAction *((*$)(GtkUIManager *,gchar *))")
    (type monster__e1232 int "long")
    (macro GTK_UI_MANAGER_AUTO::int "GTK_UI_MANAGER_AUTO")
    (macro GTK_UI_MANAGER_MENUBAR::int "GTK_UI_MANAGER_MENUBAR")
    (macro GTK_UI_MANAGER_MENU::int "GTK_UI_MANAGER_MENU")
    (macro GTK_UI_MANAGER_TOOLBAR::int "GTK_UI_MANAGER_TOOLBAR")
    (macro GTK_UI_MANAGER_PLACEHOLDER::int "GTK_UI_MANAGER_PLACEHOLDER")
    (macro GTK_UI_MANAGER_POPUP::int "GTK_UI_MANAGER_POPUP")
    (macro GTK_UI_MANAGER_MENUITEM::int "GTK_UI_MANAGER_MENUITEM")
    (macro GTK_UI_MANAGER_TOOLITEM::int "GTK_UI_MANAGER_TOOLITEM")
    (macro GTK_UI_MANAGER_SEPARATOR::int "GTK_UI_MANAGER_SEPARATOR")
    (macro GTK_UI_MANAGER_ACCELERATOR::int "GTK_UI_MANAGER_ACCELERATOR")
    (type GtkUIManagerItemType monster__e1232 "GtkUIManagerItemType")
    (type s-_GtkVButtonBox (struct (button_box::GtkButtonBox "button_box")) "struct _GtkVButtonBox")
    (type GtkVButtonBox s-_GtkVButtonBox "GtkVButtonBox")
    (type s-_GtkVButtonBoxClass (struct (parent_class::GtkButtonBoxClass "parent_class")) "struct _GtkVButtonBoxClass")
    (type GtkVButtonBoxClass s-_GtkVButtonBoxClass "GtkVButtonBoxClass")
    (type s-_GtkVPaned (struct (paned::GtkPaned "paned")) "struct _GtkVPaned")
    (type GtkVPaned s-_GtkVPaned "GtkVPaned")
    (type s-_GtkVPanedClass (struct (parent_class::GtkPanedClass "parent_class")) "struct _GtkVPanedClass")
    (type GtkVPanedClass s-_GtkVPanedClass "GtkVPanedClass")
    (type s-_GtkVRuler (struct (ruler::GtkRuler "ruler")) "struct _GtkVRuler")
    (type GtkVRuler s-_GtkVRuler "GtkVRuler")
    (type s-_GtkVRulerClass (struct (parent_class::GtkRulerClass "parent_class")) "struct _GtkVRulerClass")
    (type GtkVRulerClass s-_GtkVRulerClass "GtkVRulerClass")
    (type s-_GtkVScale (struct (scale::GtkScale "scale")) "struct _GtkVScale")
    (type GtkVScale s-_GtkVScale "GtkVScale")
    (type s-_GtkVScaleClass (struct (parent_class::GtkScaleClass "parent_class")) "struct _GtkVScaleClass")
    (type GtkVScaleClass s-_GtkVScaleClass "GtkVScaleClass")
    (type s-_GtkVSeparator (struct (separator::GtkSeparator "separator")) "struct _GtkVSeparator")
    (type GtkVSeparator s-_GtkVSeparator "GtkVSeparator")
    (type s-_GtkVSeparatorClass (struct (parent_class::GtkSeparatorClass "parent_class")) "struct _GtkVSeparatorClass")
    (type GtkVSeparatorClass s-_GtkVSeparatorClass "GtkVSeparatorClass")
    (type size_t->void* "void *($(size_t))")
    (type gboolean,gboolean,guint->GArray* "GArray *($(gboolean,gboolean,guint))")
    (type gboolean,gboolean,guint,guint->GArray* "GArray *($(gboolean,gboolean,guint,guint))")
    (type GArray*,gboolean->gchar* "gchar *($(GArray *,gboolean))")
    (type GArray*,gconstpointer,guint->GArray* "GArray *($(GArray *,gconstpointer,guint))")
    (type GArray*,guint,gconstpointer,guint->GArray* "GArray *($(GArray *,guint,gconstpointer,guint))")
    (type GArray*,guint->GArray* "GArray *($(GArray *,guint))")
    (type GArray*,guint,guint->GArray* "GArray *($(GArray *,guint,guint))")
    (type GArray*,GCompareFunc->void "void ($(GArray *,GCompareFunc))")
    (type GArray*,GCompareDataFunc,gpointer->void "void ($(GArray *,GCompareDataFunc,gpointer))")
    (type void->GPtrArray* "GPtrArray *($(void))")
    (type guint->GPtrArray* "GPtrArray *($(guint))")
    (type GPtrArray*,gboolean->gpointer* "gpointer *($(GPtrArray *,gboolean))")
    (type GPtrArray*,gint->void "void ($(GPtrArray *,gint))")
    (type GPtrArray*,guint->gpointer "gpointer ($(GPtrArray *,guint))")
    (type GPtrArray*,gpointer->gboolean "gboolean ($(GPtrArray *,gpointer))")
    (type GPtrArray*,guint,guint->void "void ($(GPtrArray *,guint,guint))")
    (type GPtrArray*,gpointer->void "void ($(GPtrArray *,gpointer))")
    (type GPtrArray*,GCompareFunc->void "void ($(GPtrArray *,GCompareFunc))")
    (type GPtrArray*,GCompareDataFunc,gpointer->void "void ($(GPtrArray *,GCompareDataFunc,gpointer))")
    (type GPtrArray*,GFunc,gpointer->void "void ($(GPtrArray *,GFunc,gpointer))")
    (type void->GByteArray* "GByteArray *($(void))")
    (type guint->GByteArray* "GByteArray *($(guint))")
    (type GByteArray*,gboolean->guint8* "guint8 *($(GByteArray *,gboolean))")
    (type GByteArray*,guint8*,guint->GByteArray* "GByteArray *($(GByteArray *,guint8 *,guint))")
    (type GByteArray*,guint->GByteArray* "GByteArray *($(GByteArray *,guint))")
    (type GByteArray*,guint,guint->GByteArray* "GByteArray *($(GByteArray *,guint,guint))")
    (type GByteArray*,GCompareFunc->void "void ($(GByteArray *,GCompareFunc))")
    (type GByteArray*,GCompareDataFunc,gpointer->void "void ($(GByteArray *,GCompareDataFunc,gpointer))")
    (type gchar*->GQuark "GQuark ($(gchar *))")
    (type GQuark->gchar* "gchar *($(GQuark))")
    (type GQuark,gint,gchar*,...gchar*->GError* "GError *($(GQuark,gint,gchar *,...))")
    (type GQuark,gint,gchar*->GError* "GError *($(GQuark,gint,gchar *))")
    (type GError*->void "void ($(GError *))")
    (type GError*->GError* "GError *($(GError *))")
    (type GError*,GQuark,gint->gboolean "gboolean ($(GError *,GQuark,gint))")
    (type GError**,GQuark,gint,gchar*,...gchar*->void "void ($(GError **,GQuark,gint,gchar *,...))")
    (type GError**,GError*->void "void ($(GError **,GError *))")
    (type GError**->void "void ($(GError **))")
    (type gint*,gint->gint "gint ($(gint *,gint))")
    (type gint*,gint->void "void ($(gint *,gint))")
    (type gint*,gint,gint->gboolean "gboolean ($(gint *,gint,gint))")
    (type gpointer*,gpointer,gpointer->gboolean "gboolean ($(gpointer *,gpointer,gpointer))")
    (type void->GQuark "GQuark ($(void))")
    (type GThreadFunctions*->void "void ($(GThreadFunctions *))")
    (type GMutex** (pointer GMutex*) "GMutex **")
    (type GMutex**->GMutex* "GMutex *($(GMutex **))")
    (type GThreadFunc,gpointer,gulong,gboolean,gboolean,GThreadPriority,GError**->GThread* "GThread *($(GThreadFunc,gpointer,gulong,gboolean,gboolean,GThreadPriority,GError **))")
    (type void->GThread* "GThread *($(void))")
    (type GThread*->gpointer "gpointer ($(GThread *))")
    (type GThread*,GThreadPriority->void "void ($(GThread *,GThreadPriority))")
    (type GStaticMutex*->void "void ($(GStaticMutex *))")
    (type GStaticPrivate*->void "void ($(GStaticPrivate *))")
    (type GStaticPrivate*->gpointer "gpointer ($(GStaticPrivate *))")
    (type GStaticPrivate*,gpointer,GDestroyNotify->void "void ($(GStaticPrivate *,gpointer,GDestroyNotify))")
    (type GStaticRecMutex*->void "void ($(GStaticRecMutex *))")
    (type GStaticRecMutex*->gboolean "gboolean ($(GStaticRecMutex *))")
    (type GStaticRecMutex*,guint->void "void ($(GStaticRecMutex *,guint))")
    (type GStaticRecMutex*->guint "guint ($(GStaticRecMutex *))")
    (type GStaticRWLock*->void "void ($(GStaticRWLock *))")
    (type GStaticRWLock*->gboolean "gboolean ($(GStaticRWLock *))")
    (type GOnce*,GThreadFunc,gpointer->gpointer "gpointer ($(GOnce *,GThreadFunc,gpointer))")
    (type void->GAsyncQueue* "GAsyncQueue *($(void))")
    (type GAsyncQueue*->void "void ($(GAsyncQueue *))")
    (type GAsyncQueue*->GAsyncQueue* "GAsyncQueue *($(GAsyncQueue *))")
    (type GAsyncQueue*,gpointer->void "void ($(GAsyncQueue *,gpointer))")
    (type GAsyncQueue*->gpointer "gpointer ($(GAsyncQueue *))")
    (type GAsyncQueue*,GTimeVal*->gpointer "gpointer ($(GAsyncQueue *,GTimeVal *))")
    (type GAsyncQueue*->gint "gint ($(GAsyncQueue *))")
    (type gulong->gpointer "gpointer ($(gulong))")
    (type gpointer,gulong->gpointer "gpointer ($(gpointer,gulong))")
    (type GMemVTable*->void "void ($(GMemVTable *))")
    (type void->gboolean "gboolean ($(void))")
    (type gchar*,gint,gulong,gint->GMemChunk* "GMemChunk *($(gchar *,gint,gulong,gint))")
    (type GMemChunk*->void "void ($(GMemChunk *))")
    (type GMemChunk*->gpointer "gpointer ($(GMemChunk *))")
    (type GMemChunk*,gpointer->void "void ($(GMemChunk *,gpointer))")
    (type gchar*,guint->GAllocator* "GAllocator *($(gchar *,guint))")
    (type GAllocator*->void "void ($(GAllocator *))")
    (type void->GList* "GList *($(void))")
    (type GList*->void "void ($(GList *))")
    (type GList*,gpointer->GList* "GList *($(GList *,gpointer))")
    (type GList*,gpointer,gint->GList* "GList *($(GList *,gpointer,gint))")
    (type GList*,gpointer,GCompareFunc->GList* "GList *($(GList *,gpointer,GCompareFunc))")
    (type GList*,GList*,gpointer->GList* "GList *($(GList *,GList *,gpointer))")
    (type GList*,GList*->GList* "GList *($(GList *,GList *))")
    (type GList*,gconstpointer->GList* "GList *($(GList *,gconstpointer))")
    (type GList*->GList* "GList *($(GList *))")
    (type GList*,guint->GList* "GList *($(GList *,guint))")
    (type GList*,gconstpointer,GCompareFunc->GList* "GList *($(GList *,gconstpointer,GCompareFunc))")
    (type GList*,GList*->gint "gint ($(GList *,GList *))")
    (type GList*,gconstpointer->gint "gint ($(GList *,gconstpointer))")
    (type GList*->guint "guint ($(GList *))")
    (type GList*,GFunc,gpointer->void "void ($(GList *,GFunc,gpointer))")
    (type GList*,GCompareFunc->GList* "GList *($(GList *,GCompareFunc))")
    (type GList*,GCompareDataFunc,gpointer->GList* "GList *($(GList *,GCompareDataFunc,gpointer))")
    (type GList*,guint->gpointer "gpointer ($(GList *,guint))")
    (type GCacheNewFunc,GCacheDestroyFunc,GCacheDupFunc,GCacheDestroyFunc,GHashFunc,GHashFunc,GEqualFunc->GCache* "GCache *($(GCacheNewFunc,GCacheDestroyFunc,GCacheDupFunc,GCacheDestroyFunc,GHashFunc,GHashFunc,GEqualFunc))")
    (type GCache*->void "void ($(GCache *))")
    (type GCache*,gpointer->gpointer "gpointer ($(GCache *,gpointer))")
    (type GCache*,gconstpointer->void "void ($(GCache *,gconstpointer))")
    (type GCache*,GHFunc,gpointer->void "void ($(GCache *,GHFunc,gpointer))")
    (type GCompletionFunc->GCompletion* "GCompletion *($(GCompletionFunc))")
    (type GCompletion*,GList*->void "void ($(GCompletion *,GList *))")
    (type GCompletion*->void "void ($(GCompletion *))")
    (type GCompletion*,gchar*,gchar**->GList* "GList *($(GCompletion *,gchar *,gchar **))")
    (type GCompletion*,GCompletionStrncmpFunc->void "void ($(GCompletion *,GCompletionStrncmpFunc))")
    (type gchar*,gchar*->GIConv "GIConv ($(gchar *,gchar *))")
    (type GIConv,gchar**,gsize*,gchar**,gsize*->size_t "size_t ($(GIConv,gchar **,gsize *,gchar **,gsize *))")
    (type GIConv->gint "gint ($(GIConv))")
    (type gchar*,gssize,gchar*,gchar*,gsize*,gsize*,GError**->gchar* "gchar *($(gchar *,gssize,gchar *,gchar *,gsize *,gsize *,GError **))")
    (type gchar*,gssize,GIConv,gsize*,gsize*,GError**->gchar* "gchar *($(gchar *,gssize,GIConv,gsize *,gsize *,GError **))")
    (type gchar*,gssize,gchar*,gchar*,gchar*,gsize*,gsize*,GError**->gchar* "gchar *($(gchar *,gssize,gchar *,gchar *,gchar *,gsize *,gsize *,GError **))")
    (type gchar*,gssize,gsize*,gsize*,GError**->gchar* "gchar *($(gchar *,gssize,gsize *,gsize *,GError **))")
    (type gchar*,gchar**,GError**->gchar* "gchar *($(gchar *,gchar **,GError **))")
    (type gchar*,gchar*,GError**->gchar* "gchar *($(gchar *,gchar *,GError **))")
    (type gchar*->gchar* "gchar *($(gchar *))")
    (type gchar***->gboolean "gboolean ($(gchar ***))")
    (type gchar*->gchar** "gchar **($(gchar *))")
    (type GData** (pointer GData*) "GData **")
    (type GData**->void "void ($(GData **))")
    (type GData**,GQuark->gpointer "gpointer ($(GData **,GQuark))")
    (type GData**,GQuark,gpointer,GDestroyNotify->void "void ($(GData **,GQuark,gpointer,GDestroyNotify))")
    (type GData**,GDataForeachFunc,gpointer->void "void ($(GData **,GDataForeachFunc,gpointer))")
    (type gconstpointer->void "void ($(gconstpointer))")
    (type gconstpointer,GQuark->gpointer "gpointer ($(gconstpointer,GQuark))")
    (type gconstpointer,GQuark,gpointer,GDestroyNotify->void "void ($(gconstpointer,GQuark,gpointer,GDestroyNotify))")
    (type gconstpointer,GDataForeachFunc,gpointer->void "void ($(gconstpointer,GDataForeachFunc,gpointer))")
    (type void->GDate* "GDate *($(void))")
    (type GDateDay,GDateMonth,GDateYear->GDate* "GDate *($(GDateDay,GDateMonth,GDateYear))")
    (type guint32->GDate* "GDate *($(guint32))")
    (type GDate*->void "void ($(GDate *))")
    (type GDate*->gboolean "gboolean ($(GDate *))")
    (type GDateDay->gboolean "gboolean ($(GDateDay))")
    (type GDateMonth->gboolean "gboolean ($(GDateMonth))")
    (type GDateYear->gboolean "gboolean ($(GDateYear))")
    (type GDateWeekday->gboolean "gboolean ($(GDateWeekday))")
    (type guint32->gboolean "gboolean ($(guint32))")
    (type GDateDay,GDateMonth,GDateYear->gboolean "gboolean ($(GDateDay,GDateMonth,GDateYear))")
    (type GDate*->GDateWeekday "GDateWeekday ($(GDate *))")
    (type GDate*->GDateMonth "GDateMonth ($(GDate *))")
    (type GDate*->GDateYear "GDateYear ($(GDate *))")
    (type GDate*->GDateDay "GDateDay ($(GDate *))")
    (type GDate*->guint32 "guint32 ($(GDate *))")
    (type GDate*->guint "guint ($(GDate *))")
    (type GDate*,guint->void "void ($(GDate *,guint))")
    (type GDate*,gchar*->void "void ($(GDate *,gchar *))")
    (type GDate*,GTime->void "void ($(GDate *,GTime))")
    (type GDate*,GDateMonth->void "void ($(GDate *,GDateMonth))")
    (type GDate*,GDateDay->void "void ($(GDate *,GDateDay))")
    (type GDate*,GDateYear->void "void ($(GDate *,GDateYear))")
    (type GDate*,GDateDay,GDateMonth,GDateYear->void "void ($(GDate *,GDateDay,GDateMonth,GDateYear))")
    (type GDate*,guint32->void "void ($(GDate *,guint32))")
    (type GDateMonth,GDateYear->guint8 "guint8 ($(GDateMonth,GDateYear))")
    (type GDateYear->guint8 "guint8 ($(GDateYear))")
    (type GDate*,GDate*->gint "gint ($(GDate *,GDate *))")
    (type GDate*,s-tm*->void "void ($(GDate *,struct tm *))")
    (type GDate*,GDate*,GDate*->void "void ($(GDate *,GDate *,GDate *))")
    (type GDate*,GDate*->void "void ($(GDate *,GDate *))")
    (type gchar*,gsize,gchar*,GDate*->gsize "gsize ($(gchar *,gsize,gchar *,GDate *))")
    (type gchar*,guint,GError**->GDir* "GDir *($(gchar *,guint,GError **))")
    (type GDir*->gchar* "gchar *($(GDir *))")
    (type GDir*->void "void ($(GDir *))")
    (type gint->GFileError "GFileError ($(gint))")
    (type gchar*,GFileTest->gboolean "gboolean ($(gchar *,GFileTest))")
    (type gchar*,gchar**,gsize*,GError**->gboolean "gboolean ($(gchar *,gchar **,gsize *,GError **))")
    (type gchar*,GError**->gchar* "gchar *($(gchar *,GError **))")
    (type gchar*->gint "gint ($(gchar *))")
    (type gchar*,gchar**,GError**->gint "gint ($(gchar *,gchar **,GError **))")
    (type gchar*,gchar*,...gchar*->gchar* "gchar *($(gchar *,gchar *,...))")
    (type gchar*,...gchar*->gchar* "gchar *($(gchar *,...))")
    (type GHashFunc,GEqualFunc->GHashTable* "GHashTable *($(GHashFunc,GEqualFunc))")
    (type GHashFunc,GEqualFunc,GDestroyNotify,GDestroyNotify->GHashTable* "GHashTable *($(GHashFunc,GEqualFunc,GDestroyNotify,GDestroyNotify))")
    (type GHashTable*->void "void ($(GHashTable *))")
    (type GHashTable*,gpointer,gpointer->void "void ($(GHashTable *,gpointer,gpointer))")
    (type GHashTable*,gconstpointer->gboolean "gboolean ($(GHashTable *,gconstpointer))")
    (type GHashTable*,gconstpointer->gpointer "gpointer ($(GHashTable *,gconstpointer))")
    (type GHashTable*,gconstpointer,gpointer*,gpointer*->gboolean "gboolean ($(GHashTable *,gconstpointer,gpointer *,gpointer *))")
    (type GHashTable*,GHFunc,gpointer->void "void ($(GHashTable *,GHFunc,gpointer))")
    (type GHashTable*,GHRFunc,gpointer->gpointer "gpointer ($(GHashTable *,GHRFunc,gpointer))")
    (type GHashTable*,GHRFunc,gpointer->guint "guint ($(GHashTable *,GHRFunc,gpointer))")
    (type GHashTable*->guint "guint ($(GHashTable *))")
    (type GHookList*,guint->void "void ($(GHookList *,guint))")
    (type GHookList*->void "void ($(GHookList *))")
    (type GHookList*->GHook* "GHook *($(GHookList *))")
    (type GHookList*,GHook*->GHook* "GHook *($(GHookList *,GHook *))")
    (type GHookList*,gulong->gboolean "gboolean ($(GHookList *,gulong))")
    (type GHookList*,GHook*,GHook*->void "void ($(GHookList *,GHook *,GHook *))")
    (type GHookList*,GHook*,GHookCompareFunc->void "void ($(GHookList *,GHook *,GHookCompareFunc))")
    (type GHookList*,gulong->GHook* "GHook *($(GHookList *,gulong))")
    (type GHookList*,gboolean,GHookFindFunc,gpointer->GHook* "GHook *($(GHookList *,gboolean,GHookFindFunc,gpointer))")
    (type GHookList*,gboolean,gpointer->GHook* "GHook *($(GHookList *,gboolean,gpointer))")
    (type GHookList*,gboolean,gpointer,gpointer->GHook* "GHook *($(GHookList *,gboolean,gpointer,gpointer))")
    (type GHookList*,gboolean->GHook* "GHook *($(GHookList *,gboolean))")
    (type GHookList*,GHook*,gboolean->GHook* "GHook *($(GHookList *,GHook *,gboolean))")
    (type GHookList*,gboolean->void "void ($(GHookList *,gboolean))")
    (type GHookList*,gboolean,GHookMarshaller,gpointer->void "void ($(GHookList *,gboolean,GHookMarshaller,gpointer))")
    (type GHookList*,gboolean,GHookCheckMarshaller,gpointer->void "void ($(GHookList *,gboolean,GHookCheckMarshaller,gpointer))")
    (type void->GSList* "GSList *($(void))")
    (type GSList*->void "void ($(GSList *))")
    (type GSList*,gpointer->GSList* "GSList *($(GSList *,gpointer))")
    (type GSList*,gpointer,gint->GSList* "GSList *($(GSList *,gpointer,gint))")
    (type GSList*,gpointer,GCompareFunc->GSList* "GSList *($(GSList *,gpointer,GCompareFunc))")
    (type GSList*,GSList*,gpointer->GSList* "GSList *($(GSList *,GSList *,gpointer))")
    (type GSList*,GSList*->GSList* "GSList *($(GSList *,GSList *))")
    (type GSList*,gconstpointer->GSList* "GSList *($(GSList *,gconstpointer))")
    (type GSList*->GSList* "GSList *($(GSList *))")
    (type GSList*,guint->GSList* "GSList *($(GSList *,guint))")
    (type GSList*,gconstpointer,GCompareFunc->GSList* "GSList *($(GSList *,gconstpointer,GCompareFunc))")
    (type GSList*,GSList*->gint "gint ($(GSList *,GSList *))")
    (type GSList*,gconstpointer->gint "gint ($(GSList *,gconstpointer))")
    (type GSList*->guint "guint ($(GSList *))")
    (type GSList*,GFunc,gpointer->void "void ($(GSList *,GFunc,gpointer))")
    (type GSList*,GCompareFunc->GSList* "GSList *($(GSList *,GCompareFunc))")
    (type GSList*,GCompareDataFunc,gpointer->GSList* "GSList *($(GSList *,GCompareDataFunc,gpointer))")
    (type GSList*,guint->gpointer "gpointer ($(GSList *,guint))")
    (type void->GMainContext* "GMainContext *($(void))")
    (type GMainContext*->GMainContext* "GMainContext *($(GMainContext *))")
    (type GMainContext*->void "void ($(GMainContext *))")
    (type GMainContext*,gboolean->gboolean "gboolean ($(GMainContext *,gboolean))")
    (type GMainContext*->gboolean "gboolean ($(GMainContext *))")
    (type GMainContext*,guint->GSource* "GSource *($(GMainContext *,guint))")
    (type GMainContext*,gpointer->GSource* "GSource *($(GMainContext *,gpointer))")
    (type GMainContext*,GSourceFuncs*,gpointer->GSource* "GSource *($(GMainContext *,GSourceFuncs *,gpointer))")
    (type GMainContext*,GCond*,GMutex*->gboolean "gboolean ($(GMainContext *,GCond *,GMutex *))")
    (type GMainContext*,gint*->gboolean "gboolean ($(GMainContext *,gint *))")
    (type GMainContext*,gint,gint*,GPollFD*,gint->gint "gint ($(GMainContext *,gint,gint *,GPollFD *,gint))")
    (type GMainContext*,gint,GPollFD*,gint->gint "gint ($(GMainContext *,gint,GPollFD *,gint))")
    (type GMainContext*,GPollFunc->void "void ($(GMainContext *,GPollFunc))")
    (type GMainContext*->GPollFunc "GPollFunc ($(GMainContext *))")
    (type GMainContext*,GPollFD*,gint->void "void ($(GMainContext *,GPollFD *,gint))")
    (type GMainContext*,GPollFD*->void "void ($(GMainContext *,GPollFD *))")
    (type void->int "int ($(void))")
    (type GMainContext*,gboolean->GMainLoop* "GMainLoop *($(GMainContext *,gboolean))")
    (type GMainLoop*->void "void ($(GMainLoop *))")
    (type GMainLoop*->GMainLoop* "GMainLoop *($(GMainLoop *))")
    (type GMainLoop*->gboolean "gboolean ($(GMainLoop *))")
    (type GMainLoop*->GMainContext* "GMainContext *($(GMainLoop *))")
    (type GSourceFuncs*,guint->GSource* "GSource *($(GSourceFuncs *,guint))")
    (type GSource*->GSource* "GSource *($(GSource *))")
    (type GSource*,GMainContext*->guint "guint ($(GSource *,GMainContext *))")
    (type GSource*,gint->void "void ($(GSource *,gint))")
    (type GSource*->gint "gint ($(GSource *))")
    (type GSource*,gboolean->void "void ($(GSource *,gboolean))")
    (type GSource*->guint "guint ($(GSource *))")
    (type GSource*->GMainContext* "GMainContext *($(GSource *))")
    (type GSource*,GSourceFunc,gpointer,GDestroyNotify->void "void ($(GSource *,GSourceFunc,gpointer,GDestroyNotify))")
    (type GSource*,gpointer,GSourceCallbackFuncs*->void "void ($(GSource *,gpointer,GSourceCallbackFuncs *))")
    (type GSource*,GPollFD*->void "void ($(GSource *,GPollFD *))")
    (type GSource*,GTimeVal*->void "void ($(GSource *,GTimeVal *))")
    (type void->GSource* "GSource *($(void))")
    (type GPid->GSource* "GSource *($(GPid))")
    (type guint->GSource* "GSource *($(guint))")
    (type GTimeVal*->void "void ($(GTimeVal *))")
    (type guint->gboolean "gboolean ($(guint))")
    (type GSourceFuncs*,gpointer->gboolean "gboolean ($(GSourceFuncs *,gpointer))")
    (type gint,guint,GSourceFunc,gpointer,GDestroyNotify->guint "guint ($(gint,guint,GSourceFunc,gpointer,GDestroyNotify))")
    (type guint,GSourceFunc,gpointer->guint "guint ($(guint,GSourceFunc,gpointer))")
    (type gint,GPid,GChildWatchFunc,gpointer,GDestroyNotify->guint "guint ($(gint,GPid,GChildWatchFunc,gpointer,GDestroyNotify))")
    (type GPid,GChildWatchFunc,gpointer->guint "guint ($(GPid,GChildWatchFunc,gpointer))")
    (type GSourceFunc,gpointer->guint "guint ($(GSourceFunc,gpointer))")
    (type gint,GSourceFunc,gpointer,GDestroyNotify->guint "guint ($(gint,GSourceFunc,gpointer,GDestroyNotify))")
    (type string*->gboolean "gboolean ($(char **))")
    (type gunichar->gboolean "gboolean ($(gunichar))")
    (type gunichar->gunichar "gunichar ($(gunichar))")
    (type gunichar->gint "gint ($(gunichar))")
    (type gunichar->GUnicodeType "GUnicodeType ($(gunichar))")
    (type gunichar->GUnicodeBreakType "GUnicodeBreakType ($(gunichar))")
    (type gunichar* (pointer gunichar) "gunichar *")
    (type gunichar*,gsize->void "void ($(gunichar *,gsize))")
    (type gunichar,gsize*->gunichar* "gunichar *($(gunichar,gsize *))")
    (type gchar*->gunichar "gunichar ($(gchar *))")
    (type gchar*,gssize->gunichar "gunichar ($(gchar *,gssize))")
    (type gchar*,glong->gchar* "gchar *($(gchar *,glong))")
    (type gchar*,gchar*->glong "glong ($(gchar *,gchar *))")
    (type gchar*,gchar*->gchar* "gchar *($(gchar *,gchar *))")
    (type gchar*,gssize->glong "glong ($(gchar *,gssize))")
    (type gchar*,gchar*,gsize->gchar* "gchar *($(gchar *,gchar *,gsize))")
    (type gchar*,gssize,gunichar->gchar* "gchar *($(gchar *,gssize,gunichar))")
    (type gchar*,gssize->gchar* "gchar *($(gchar *,gssize))")
    (type gunichar2* (pointer gunichar2) "gunichar2 *")
    (type glong* (pointer glong) "glong *")
    (type gchar*,glong,glong*,glong*,GError**->gunichar2* "gunichar2 *($(gchar *,glong,glong *,glong *,GError **))")
    (type gchar*,glong,glong*,glong*,GError**->gunichar* "gunichar *($(gchar *,glong,glong *,glong *,GError **))")
    (type gchar*,glong,glong*->gunichar* "gunichar *($(gchar *,glong,glong *))")
    (type gunichar2*,glong,glong*,glong*,GError**->gunichar* "gunichar *($(gunichar2 *,glong,glong *,glong *,GError **))")
    (type gunichar2*,glong,glong*,glong*,GError**->gchar* "gchar *($(gunichar2 *,glong,glong *,glong *,GError **))")
    (type gunichar*,glong,glong*,glong*,GError**->gunichar2* "gunichar2 *($(gunichar *,glong,glong *,glong *,GError **))")
    (type gunichar*,glong,glong*,glong*,GError**->gchar* "gchar *($(gunichar *,glong,glong *,glong *,GError **))")
    (type gunichar,gchar*->gint "gint ($(gunichar,gchar *))")
    (type gchar*,gssize,gchar**->gboolean "gboolean ($(gchar *,gssize,gchar **))")
    (type gchar*,gssize,GNormalizeMode->gchar* "gchar *($(gchar *,gssize,GNormalizeMode))")
    (type gchar*,gchar*->gint "gint ($(gchar *,gchar *))")
    (type gunichar,gunichar*->gboolean "gboolean ($(gunichar,gunichar *))")
    (type gchar*,GDebugKey*,guint->guint "guint ($(gchar *,GDebugKey *,guint))")
    (type gchar*,gulong,gchar*,...gchar*->gint "gint ($(gchar *,gulong,gchar *,...))")
    (type gchar*->gboolean "gboolean ($(gchar *))")
    (type gpointer*->void "void ($(gpointer *))")
    (type gchar*,gchar*,gboolean->gboolean "gboolean ($(gchar *,gchar *,gboolean))")
    (type GVoidFunc->void "void ($(GVoidFunc))")
    (type guint,guint,guint->gchar* "gchar *($(guint,guint,guint))")
    (type gsize->GStringChunk* "GStringChunk *($(gsize))")
    (type GStringChunk*->void "void ($(GStringChunk *))")
    (type GStringChunk*,gchar*->gchar* "gchar *($(GStringChunk *,gchar *))")
    (type GStringChunk*,gchar*,gssize->gchar* "gchar *($(GStringChunk *,gchar *,gssize))")
    (type gchar*->GString* "GString *($(gchar *))")
    (type gchar*,gssize->GString* "GString *($(gchar *,gssize))")
    (type gsize->GString* "GString *($(gsize))")
    (type GString*,gboolean->gchar* "gchar *($(GString *,gboolean))")
    (type GString*,GString*->gboolean "gboolean ($(GString *,GString *))")
    (type GString*->guint "guint ($(GString *))")
    (type GString*,gchar*->GString* "GString *($(GString *,gchar *))")
    (type GString*,gsize->GString* "GString *($(GString *,gsize))")
    (type GString*,gssize,gchar*,gssize->GString* "GString *($(GString *,gssize,gchar *,gssize))")
    (type GString*,gchar*,gssize->GString* "GString *($(GString *,gchar *,gssize))")
    (type GString*,gchar->GString* "GString *($(GString *,gchar))")
    (type GString*,gunichar->GString* "GString *($(GString *,gunichar))")
    (type GString*,gssize,gchar*->GString* "GString *($(GString *,gssize,gchar *))")
    (type GString*,gssize,gchar->GString* "GString *($(GString *,gssize,gchar))")
    (type GString*,gssize,gunichar->GString* "GString *($(GString *,gssize,gunichar))")
    (type GString*,gssize,gssize->GString* "GString *($(GString *,gssize,gssize))")
    (type GString*->GString* "GString *($(GString *))")
    (type GString*,gchar*,...gchar*->void "void ($(GString *,gchar *,...))")
    (type GIOChannel*->GIOChannel* "GIOChannel *($(GIOChannel *))")
    (type GIOChannel*,gchar*,gsize,gsize*->GIOError "GIOError ($(GIOChannel *,gchar *,gsize,gsize *))")
    (type GIOChannel*,gint64,GSeekType->GIOError "GIOError ($(GIOChannel *,gint64,GSeekType))")
    (type GIOChannel*,gboolean,GError**->GIOStatus "GIOStatus ($(GIOChannel *,gboolean,GError **))")
    (type GIOChannel*,gint,GIOCondition,GIOFunc,gpointer,GDestroyNotify->guint "guint ($(GIOChannel *,gint,GIOCondition,GIOFunc,gpointer,GDestroyNotify))")
    (type GIOChannel*,GIOCondition,GIOFunc,gpointer->guint "guint ($(GIOChannel *,GIOCondition,GIOFunc,gpointer))")
    (type GIOChannel*,gsize->void "void ($(GIOChannel *,gsize))")
    (type GIOChannel*->gsize "gsize ($(GIOChannel *))")
    (type GIOChannel*->GIOCondition "GIOCondition ($(GIOChannel *))")
    (type GIOChannel*,gchar*,gint->void "void ($(GIOChannel *,gchar *,gint))")
    (type GIOChannel*,gint*->gchar* "gchar *($(GIOChannel *,gint *))")
    (type GIOChannel*,gboolean->void "void ($(GIOChannel *,gboolean))")
    (type GIOChannel*->gboolean "gboolean ($(GIOChannel *))")
    (type GIOChannel*,gchar*,GError**->GIOStatus "GIOStatus ($(GIOChannel *,gchar *,GError **))")
    (type GIOChannel*->gchar* "gchar *($(GIOChannel *))")
    (type GIOChannel*,gchar**,gsize*,gsize*,GError**->GIOStatus "GIOStatus ($(GIOChannel *,gchar **,gsize *,gsize *,GError **))")
    (type GIOChannel*,GString*,gsize*,GError**->GIOStatus "GIOStatus ($(GIOChannel *,GString *,gsize *,GError **))")
    (type GIOChannel*,gchar**,gsize*,GError**->GIOStatus "GIOStatus ($(GIOChannel *,gchar **,gsize *,GError **))")
    (type GIOChannel*,gunichar*,GError**->GIOStatus "GIOStatus ($(GIOChannel *,gunichar *,GError **))")
    (type GIOChannel*,gchar*,gssize,gsize*,GError**->GIOStatus "GIOStatus ($(GIOChannel *,gchar *,gssize,gsize *,GError **))")
    (type GIOChannel*,gunichar,GError**->GIOStatus "GIOStatus ($(GIOChannel *,gunichar,GError **))")
    (type gchar*,gchar*,GError**->GIOChannel* "GIOChannel *($(gchar *,gchar *,GError **))")
    (type gint->GIOChannelError "GIOChannelError ($(gint))")
    (type int->GIOChannel* "GIOChannel *($(int))")
    (type GIOChannel*->gint "gint ($(GIOChannel *))")
    (type void->GKeyFile* "GKeyFile *($(void))")
    (type GKeyFile*->void "void ($(GKeyFile *))")
    (type GKeyFile*,gchar->void "void ($(GKeyFile *,gchar))")
    (type GKeyFile*,gchar*,GKeyFileFlags,GError**->gboolean "gboolean ($(GKeyFile *,gchar *,GKeyFileFlags,GError **))")
    (type GKeyFile*,gchar*,gsize,GKeyFileFlags,GError**->gboolean "gboolean ($(GKeyFile *,gchar *,gsize,GKeyFileFlags,GError **))")
    (type GKeyFile*,gchar*,gchar**,GKeyFileFlags,GError**->gboolean "gboolean ($(GKeyFile *,gchar *,gchar **,GKeyFileFlags,GError **))")
    (type GKeyFile*,gsize*,GError**->gchar* "gchar *($(GKeyFile *,gsize *,GError **))")
    (type GKeyFile*->gchar* "gchar *($(GKeyFile *))")
    (type GKeyFile*,gsize*->gchar** "gchar **($(GKeyFile *,gsize *))")
    (type GKeyFile*,gchar*,gsize*,GError**->gchar** "gchar **($(GKeyFile *,gchar *,gsize *,GError **))")
    (type GKeyFile*,gchar*->gboolean "gboolean ($(GKeyFile *,gchar *))")
    (type GKeyFile*,gchar*,gchar*,GError**->gboolean "gboolean ($(GKeyFile *,gchar *,gchar *,GError **))")
    (type GKeyFile*,gchar*,gchar*,GError**->gchar* "gchar *($(GKeyFile *,gchar *,gchar *,GError **))")
    (type GKeyFile*,gchar*,gchar*,gchar*->void "void ($(GKeyFile *,gchar *,gchar *,gchar *))")
    (type GKeyFile*,gchar*,gchar*,gchar*,GError**->gchar* "gchar *($(GKeyFile *,gchar *,gchar *,gchar *,GError **))")
    (type GKeyFile*,gchar*,gchar*,gchar*,gchar*->void "void ($(GKeyFile *,gchar *,gchar *,gchar *,gchar *))")
    (type GKeyFile*,gchar*,gchar*,gboolean->void "void ($(GKeyFile *,gchar *,gchar *,gboolean))")
    (type GKeyFile*,gchar*,gchar*,GError**->gint "gint ($(GKeyFile *,gchar *,gchar *,GError **))")
    (type GKeyFile*,gchar*,gchar*,gint->void "void ($(GKeyFile *,gchar *,gchar *,gint))")
    (type GKeyFile*,gchar*,gchar*,gsize*,GError**->gchar** "gchar **($(GKeyFile *,gchar *,gchar *,gsize *,GError **))")
    (type GKeyFile*,gchar*,gchar*,gchar**,gsize->void "void ($(GKeyFile *,gchar *,gchar *,gchar **,gsize))")
    (type GKeyFile*,gchar*,gchar*,gchar*,gsize*,GError**->gchar** "gchar **($(GKeyFile *,gchar *,gchar *,gchar *,gsize *,GError **))")
    (type GKeyFile*,gchar*,gchar*,gchar*,gchar**,gsize->void "void ($(GKeyFile *,gchar *,gchar *,gchar *,gchar **,gsize))")
    (type GKeyFile*,gchar*,gchar*,gsize*,GError**->gboolean* "gboolean *($(GKeyFile *,gchar *,gchar *,gsize *,GError **))")
    (type gboolean-array (array gboolean) "gboolean $[  ]")
    (type GKeyFile*,gchar*,gchar*,gboolean*,gsize->void "void ($(GKeyFile *,gchar *,gchar *,gboolean *,gsize))")
    (type GKeyFile*,gchar*,gchar*,gsize*,GError**->gint* "gint *($(GKeyFile *,gchar *,gchar *,gsize *,GError **))")
    (type gint-array (array gint) "gint $[  ]")
    (type GKeyFile*,gchar*,gchar*,gint*,gsize->void "void ($(GKeyFile *,gchar *,gchar *,gint *,gsize))")
    (type GKeyFile*,gchar*,gchar*,gchar*,GError**->void "void ($(GKeyFile *,gchar *,gchar *,gchar *,GError **))")
    (type GKeyFile*,gchar*,gchar*,GError**->void "void ($(GKeyFile *,gchar *,gchar *,GError **))")
    (type GKeyFile*,gchar*,GError**->void "void ($(GKeyFile *,gchar *,GError **))")
    (type GMarkupParser*,GMarkupParseFlags,gpointer,GDestroyNotify->GMarkupParseContext* "GMarkupParseContext *($(GMarkupParser *,GMarkupParseFlags,gpointer,GDestroyNotify))")
    (type GMarkupParseContext*->void "void ($(GMarkupParseContext *))")
    (type GMarkupParseContext*,gchar*,gssize,GError**->gboolean "gboolean ($(GMarkupParseContext *,gchar *,gssize,GError **))")
    (type GMarkupParseContext*,GError**->gboolean "gboolean ($(GMarkupParseContext *,GError **))")
    (type GMarkupParseContext*->gchar* "gchar *($(GMarkupParseContext *))")
    (type GMarkupParseContext*,gint*,gint*->void "void ($(GMarkupParseContext *,gint *,gint *))")
    (type string,...string->gchar* "gchar *($(char *,...))")
    (type gchar*,GLogLevelFlags,GLogFunc,gpointer->guint "guint ($(gchar *,GLogLevelFlags,GLogFunc,gpointer))")
    (type gchar*,guint->void "void ($(gchar *,guint))")
    (type GLogFunc,gpointer->GLogFunc "GLogFunc ($(GLogFunc,gpointer))")
    (type gchar*,GLogLevelFlags,gchar*,...gchar*->void "void ($(gchar *,GLogLevelFlags,gchar *,...))")
    (type gchar*,GLogLevelFlags->GLogLevelFlags "GLogLevelFlags ($(gchar *,GLogLevelFlags))")
    (type GLogLevelFlags->GLogLevelFlags "GLogLevelFlags ($(GLogLevelFlags))")
    (type string,string,string->void "void ($(char *,char *,char *))")
    (type string,string,int,string,string->void "void ($(char *,char *,int,char *,char *))")
    (type gchar*,...gchar*->void "void ($(gchar *,...))")
    (type GPrintFunc->GPrintFunc "GPrintFunc ($(GPrintFunc))")
    (type gpointer->GNode* "GNode *($(gpointer))")
    (type GNode*->void "void ($(GNode *))")
    (type GNode*,GCopyFunc,gpointer->GNode* "GNode *($(GNode *,GCopyFunc,gpointer))")
    (type GNode*->GNode* "GNode *($(GNode *))")
    (type GNode*,gint,GNode*->GNode* "GNode *($(GNode *,gint,GNode *))")
    (type GNode*,GNode*,GNode*->GNode* "GNode *($(GNode *,GNode *,GNode *))")
    (type GNode*,GNode*->GNode* "GNode *($(GNode *,GNode *))")
    (type GNode*,GTraverseFlags->guint "guint ($(GNode *,GTraverseFlags))")
    (type GNode*,GNode*->gboolean "gboolean ($(GNode *,GNode *))")
    (type GNode*->guint "guint ($(GNode *))")
    (type GNode*,GTraverseType,GTraverseFlags,gpointer->GNode* "GNode *($(GNode *,GTraverseType,GTraverseFlags,gpointer))")
    (type GNode*,GTraverseType,GTraverseFlags,gint,GNodeTraverseFunc,gpointer->void "void ($(GNode *,GTraverseType,GTraverseFlags,gint,GNodeTraverseFunc,gpointer))")
    (type GNode*,GTraverseFlags,GNodeForeachFunc,gpointer->void "void ($(GNode *,GTraverseFlags,GNodeForeachFunc,gpointer))")
    (type GNode*,guint->GNode* "GNode *($(GNode *,guint))")
    (type GNode*,GTraverseFlags,gpointer->GNode* "GNode *($(GNode *,GTraverseFlags,gpointer))")
    (type GNode*,GNode*->gint "gint ($(GNode *,GNode *))")
    (type GNode*,gpointer->gint "gint ($(GNode *,gpointer))")
    (type gchar*->GOptionContext* "GOptionContext *($(gchar *))")
    (type GOptionContext*->void "void ($(GOptionContext *))")
    (type GOptionContext*,gboolean->void "void ($(GOptionContext *,gboolean))")
    (type GOptionContext*->gboolean "gboolean ($(GOptionContext *))")
    (type GOptionContext*,GOptionEntry*,gchar*->void "void ($(GOptionContext *,GOptionEntry *,gchar *))")
    (type GOptionContext*,gint*,gchar***,GError**->gboolean "gboolean ($(GOptionContext *,gint *,gchar ***,GError **))")
    (type GOptionContext*,GOptionGroup*->void "void ($(GOptionContext *,GOptionGroup *))")
    (type GOptionContext*->GOptionGroup* "GOptionGroup *($(GOptionContext *))")
    (type gchar*,gchar*,gchar*,gpointer,GDestroyNotify->GOptionGroup* "GOptionGroup *($(gchar *,gchar *,gchar *,gpointer,GDestroyNotify))")
    (type GOptionGroup*,GOptionParseFunc,GOptionParseFunc->void "void ($(GOptionGroup *,GOptionParseFunc,GOptionParseFunc))")
    (type GOptionGroup*,GOptionErrorFunc->void "void ($(GOptionGroup *,GOptionErrorFunc))")
    (type GOptionGroup*->void "void ($(GOptionGroup *))")
    (type GOptionGroup*,GOptionEntry*->void "void ($(GOptionGroup *,GOptionEntry *))")
    (type GOptionGroup*,GTranslateFunc,gpointer,GDestroyNotify->void "void ($(GOptionGroup *,GTranslateFunc,gpointer,GDestroyNotify))")
    (type GOptionGroup*,gchar*->void "void ($(GOptionGroup *,gchar *))")
    (type gchar*->GPatternSpec* "GPatternSpec *($(gchar *))")
    (type GPatternSpec*->void "void ($(GPatternSpec *))")
    (type GPatternSpec*,GPatternSpec*->gboolean "gboolean ($(GPatternSpec *,GPatternSpec *))")
    (type GPatternSpec*,guint,gchar*,gchar*->gboolean "gboolean ($(GPatternSpec *,guint,gchar *,gchar *))")
    (type GPatternSpec*,gchar*->gboolean "gboolean ($(GPatternSpec *,gchar *))")
    (type gchar*,gchar*->gboolean "gboolean ($(gchar *,gchar *))")
    (type guint->guint "guint ($(guint))")
    (type gconstpointer,gint,gsize,GCompareDataFunc,gpointer->void "void ($(gconstpointer,gint,gsize,GCompareDataFunc,gpointer))")
    (type void->GQueue* "GQueue *($(void))")
    (type GQueue*->void "void ($(GQueue *))")
    (type GQueue*->gboolean "gboolean ($(GQueue *))")
    (type GQueue*->guint "guint ($(GQueue *))")
    (type GQueue*->GQueue* "GQueue *($(GQueue *))")
    (type GQueue*,GFunc,gpointer->void "void ($(GQueue *,GFunc,gpointer))")
    (type GQueue*,gconstpointer->GList* "GList *($(GQueue *,gconstpointer))")
    (type GQueue*,gconstpointer,GCompareFunc->GList* "GList *($(GQueue *,gconstpointer,GCompareFunc))")
    (type GQueue*,GCompareDataFunc,gpointer->void "void ($(GQueue *,GCompareDataFunc,gpointer))")
    (type GQueue*,gpointer->void "void ($(GQueue *,gpointer))")
    (type GQueue*,gpointer,gint->void "void ($(GQueue *,gpointer,gint))")
    (type GQueue*->gpointer "gpointer ($(GQueue *))")
    (type GQueue*,guint->gpointer "gpointer ($(GQueue *,guint))")
    (type GQueue*,gconstpointer->gint "gint ($(GQueue *,gconstpointer))")
    (type GQueue*,gconstpointer->void "void ($(GQueue *,gconstpointer))")
    (type GQueue*,GList*,gpointer->void "void ($(GQueue *,GList *,gpointer))")
    (type GQueue*,gpointer,GCompareDataFunc,gpointer->void "void ($(GQueue *,gpointer,GCompareDataFunc,gpointer))")
    (type GQueue*,GList*->void "void ($(GQueue *,GList *))")
    (type GQueue*,gint,GList*->void "void ($(GQueue *,gint,GList *))")
    (type GQueue*->GList* "GList *($(GQueue *))")
    (type GQueue*,guint->GList* "GList *($(GQueue *,guint))")
    (type GQueue*,GList*->gint "gint ($(GQueue *,GList *))")
    (type guint32->GRand* "GRand *($(guint32))")
    (type guint32* (pointer guint32) "guint32 *")
    (type guint32*,guint->GRand* "GRand *($(guint32 *,guint))")
    (type void->GRand* "GRand *($(void))")
    (type GRand*->void "void ($(GRand *))")
    (type GRand*->GRand* "GRand *($(GRand *))")
    (type GRand*,guint32->void "void ($(GRand *,guint32))")
    (type GRand*,guint32*,guint->void "void ($(GRand *,guint32 *,guint))")
    (type GRand*->guint32 "guint32 ($(GRand *))")
    (type GRand*,gint32,gint32->gint32 "gint32 ($(GRand *,gint32,gint32))")
    (type GRand*->gdouble "gdouble ($(GRand *))")
    (type GRand*,gdouble,gdouble->gdouble "gdouble ($(GRand *,gdouble,gdouble))")
    (type guint32->void "void ($(guint32))")
    (type void->guint32 "guint32 ($(void))")
    (type gint32,gint32->gint32 "gint32 ($(gint32,gint32))")
    (type void->gdouble "gdouble ($(void))")
    (type gdouble,gdouble->gdouble "gdouble ($(gdouble,gdouble))")
    (type gint->GRelation* "GRelation *($(gint))")
    (type GRelation*->void "void ($(GRelation *))")
    (type GRelation*,gint,GHashFunc,GEqualFunc->void "void ($(GRelation *,gint,GHashFunc,GEqualFunc))")
    (type GRelation*,...GRelation*->void "void ($(GRelation *,...))")
    (type GRelation*,gconstpointer,gint->gint "gint ($(GRelation *,gconstpointer,gint))")
    (type GRelation*,gconstpointer,gint->GTuples* "GTuples *($(GRelation *,gconstpointer,gint))")
    (type GRelation*,...GRelation*->gboolean "gboolean ($(GRelation *,...))")
    (type GTuples*->void "void ($(GTuples *))")
    (type GTuples*,gint,gint->gpointer "gpointer ($(GTuples *,gint,gint))")
    (type GScannerConfig*->GScanner* "GScanner *($(GScannerConfig *))")
    (type GScanner*->void "void ($(GScanner *))")
    (type GScanner*,gint->void "void ($(GScanner *,gint))")
    (type GScanner*,gchar*,guint->void "void ($(GScanner *,gchar *,guint))")
    (type GScanner*->GTokenType "GTokenType ($(GScanner *))")
    (type GScanner*->GTokenValue "GTokenValue ($(GScanner *))")
    (type GScanner*->guint "guint ($(GScanner *))")
    (type GScanner*->gboolean "gboolean ($(GScanner *))")
    (type GScanner*,guint->guint "guint ($(GScanner *,guint))")
    (type GScanner*,guint,gchar*,gpointer->void "void ($(GScanner *,guint,gchar *,gpointer))")
    (type GScanner*,guint,gchar*->void "void ($(GScanner *,guint,gchar *))")
    (type GScanner*,guint,gchar*->gpointer "gpointer ($(GScanner *,guint,gchar *))")
    (type GScanner*,guint,GHFunc,gpointer->void "void ($(GScanner *,guint,GHFunc,gpointer))")
    (type GScanner*,gchar*->gpointer "gpointer ($(GScanner *,gchar *))")
    (type GScanner*,GTokenType,gchar*,gchar*,gchar*,gchar*,gint->void "void ($(GScanner *,GTokenType,gchar *,gchar *,gchar *,gchar *,gint))")
    (type GScanner*,gchar*,...gchar*->void "void ($(GScanner *,gchar *,...))")
    (type gchar*,gint*,gchar***,GError**->gboolean "gboolean ($(gchar *,gint *,gchar ***,GError **))")
    (type GPid* (pointer GPid) "GPid *")
    (type gchar*,gchar**,gchar**,GSpawnFlags,GSpawnChildSetupFunc,gpointer,GPid*,GError**->gboolean "gboolean ($(gchar *,gchar **,gchar **,GSpawnFlags,GSpawnChildSetupFunc,gpointer,GPid *,GError **))")
    (type gchar*,gchar**,gchar**,GSpawnFlags,GSpawnChildSetupFunc,gpointer,GPid*,gint*,gint*,gint*,GError**->gboolean "gboolean ($(gchar *,gchar **,gchar **,GSpawnFlags,GSpawnChildSetupFunc,gpointer,GPid *,gint *,gint *,gint *,GError **))")
    (type gchar*,gchar**,gchar**,GSpawnFlags,GSpawnChildSetupFunc,gpointer,gchar**,gchar**,gint*,GError**->gboolean "gboolean ($(gchar *,gchar **,gchar **,GSpawnFlags,GSpawnChildSetupFunc,gpointer,gchar **,gchar **,gint *,GError **))")
    (type gchar*,gchar**,gchar**,gint*,GError**->gboolean "gboolean ($(gchar *,gchar **,gchar **,gint *,GError **))")
    (type gchar*,GError**->gboolean "gboolean ($(gchar *,GError **))")
    (type GPid->void "void ($(GPid))")
    (type gchar->gchar "gchar ($(gchar))")
    (type gchar->gint "gint ($(gchar))")
    (type gchar*,gchar*,gchar->gchar* "gchar *($(gchar *,gchar *,gchar))")
    (type gint->gchar* "gchar *($(gint))")
    (type gchar*,gchar*,gsize->gsize "gsize ($(gchar *,gchar *,gsize))")
    (type gchar*,gssize,gchar*->gchar* "gchar *($(gchar *,gssize,gchar *))")
    (type gchar*,gchar**->gdouble "gdouble ($(gchar *,gchar **))")
    (type gchar*,gchar**,guint->guint64 "guint64 ($(gchar *,gchar **,guint))")
    (type gchar*,gint,gdouble->gchar* "gchar *($(gchar *,gint,gdouble))")
    (type gchar*,gint,gchar*,gdouble->gchar* "gchar *($(gchar *,gint,gchar *,gdouble))")
    (type gchar*,gchar*,guint->gint "gint ($(gchar *,gchar *,guint))")
    (type gchar*,gsize->gchar* "gchar *($(gchar *,gsize))")
    (type gsize,gchar->gchar* "gchar *($(gsize,gchar))")
    (type gconstpointer,guint->gpointer "gpointer ($(gconstpointer,guint))")
    (type gchar*,gchar*,gint->gchar** "gchar **($(gchar *,gchar *,gint))")
    (type gchar*,gchar**->gchar* "gchar *($(gchar *,gchar **))")
    (type gchar**->void "void ($(gchar **))")
    (type gchar**->gchar** "gchar **($(gchar **))")
    (type gchar**->guint "guint ($(gchar **))")
    (type gchar*,string->gchar* "gchar *($(gchar *,char *))")
    (type GFunc,gpointer,gint,gboolean,GError**->GThreadPool* "GThreadPool *($(GFunc,gpointer,gint,gboolean,GError **))")
    (type GThreadPool*,gpointer,GError**->void "void ($(GThreadPool *,gpointer,GError **))")
    (type GThreadPool*,gint,GError**->void "void ($(GThreadPool *,gint,GError **))")
    (type GThreadPool*->gint "gint ($(GThreadPool *))")
    (type GThreadPool*->guint "guint ($(GThreadPool *))")
    (type GThreadPool*,gboolean,gboolean->void "void ($(GThreadPool *,gboolean,gboolean))")
    (type gint->void "void ($(gint))")
    (type void->gint "gint ($(void))")
    (type void->guint "guint ($(void))")
    (type void->GTimer* "GTimer *($(void))")
    (type GTimer*->void "void ($(GTimer *))")
    (type gulong* (pointer gulong) "gulong *")
    (type GTimer*,gulong*->gdouble "gdouble ($(GTimer *,gulong *))")
    (type gulong->void "void ($(gulong))")
    (type GTimeVal*,glong->void "void ($(GTimeVal *,glong))")
    (type GCompareFunc->GTree* "GTree *($(GCompareFunc))")
    (type GCompareDataFunc,gpointer->GTree* "GTree *($(GCompareDataFunc,gpointer))")
    (type GCompareDataFunc,gpointer,GDestroyNotify,GDestroyNotify->GTree* "GTree *($(GCompareDataFunc,gpointer,GDestroyNotify,GDestroyNotify))")
    (type GTree*->void "void ($(GTree *))")
    (type GTree*,gpointer,gpointer->void "void ($(GTree *,gpointer,gpointer))")
    (type GTree*,gconstpointer->void "void ($(GTree *,gconstpointer))")
    (type GTree*,gconstpointer->gpointer "gpointer ($(GTree *,gconstpointer))")
    (type GTree*,gconstpointer,gpointer*,gpointer*->gboolean "gboolean ($(GTree *,gconstpointer,gpointer *,gpointer *))")
    (type GTree*,GTraverseFunc,gpointer->void "void ($(GTree *,GTraverseFunc,gpointer))")
    (type GTree*,GTraverseFunc,GTraverseType,gpointer->void "void ($(GTree *,GTraverseFunc,GTraverseType,gpointer))")
    (type GTree*,GCompareFunc,gconstpointer->gpointer "gpointer ($(GTree *,GCompareFunc,gconstpointer))")
    (type GTree*->gint "gint ($(GTree *))")
    (type void->PangoCoverage* "PangoCoverage *($(void))")
    (type PangoCoverage*->PangoCoverage* "PangoCoverage *($(PangoCoverage *))")
    (type PangoCoverage*->void "void ($(PangoCoverage *))")
    (type PangoCoverage*,int->PangoCoverageLevel "PangoCoverageLevel ($(PangoCoverage *,int))")
    (type PangoCoverage*,int,PangoCoverageLevel->void "void ($(PangoCoverage *,int,PangoCoverageLevel))")
    (type PangoCoverage*,PangoCoverage*->void "void ($(PangoCoverage *,PangoCoverage *))")
    (type guchar** (pointer guchar*) "guchar **")
    (type int* (pointer int) "int *")
    (type PangoCoverage*,guchar**,int*->void "void ($(PangoCoverage *,guchar **,int *))")
    (type guchar*,int->PangoCoverage* "PangoCoverage *($(guchar *,int))")
    (type GTypeDebugFlags->void "void ($(GTypeDebugFlags))")
    (type GType->gchar* "gchar *($(GType))")
    (type GType->GQuark "GQuark ($(GType))")
    (type gchar*->GType "GType ($(gchar *))")
    (type GType->GType "GType ($(GType))")
    (type GType->guint "guint ($(GType))")
    (type GType,GType->GType "GType ($(GType,GType))")
    (type GType,GType->gboolean "gboolean ($(GType,GType))")
    (type GType->gpointer "gpointer ($(GType))")
    (type gpointer,GType->gpointer "gpointer ($(gpointer,GType))")
    (type guint* (pointer guint) "guint *")
    (type GType,guint*->GType* "GType *($(GType,guint *))")
    (type GType,GQuark,gpointer->void "void ($(GType,GQuark,gpointer))")
    (type GType,GQuark->gpointer "gpointer ($(GType,GQuark))")
    (type GType,GTypeQuery*->void "void ($(GType,GTypeQuery *))")
    (type GType,gchar*,GTypeInfo*,GTypeFlags->GType "GType ($(GType,gchar *,GTypeInfo *,GTypeFlags))")
    (type GType,gchar*,GTypePlugin*,GTypeFlags->GType "GType ($(GType,gchar *,GTypePlugin *,GTypeFlags))")
    (type GType,gchar*,GTypeInfo*,GTypeFundamentalInfo*,GTypeFlags->GType "GType ($(GType,gchar *,GTypeInfo *,GTypeFundamentalInfo *,GTypeFlags))")
    (type GType,GType,GInterfaceInfo*->void "void ($(GType,GType,GInterfaceInfo *))")
    (type GType,GType,GTypePlugin*->void "void ($(GType,GType,GTypePlugin *))")
    (type GType,GType->void "void ($(GType,GType))")
    (type gpointer,gsize->void "void ($(gpointer,gsize))")
    (type GTypeInstance*,GType->gpointer "gpointer ($(GTypeInstance *,GType))")
    (type GType->GTypePlugin* "GTypePlugin *($(GType))")
    (type GType,GType->GTypePlugin* "GTypePlugin *($(GType,GType))")
    (type GType->GTypeInstance* "GTypeInstance *($(GType))")
    (type GTypeInstance*->void "void ($(GTypeInstance *))")
    (type gpointer,GTypeClassCacheFunc->void "void ($(gpointer,GTypeClassCacheFunc))")
    (type gpointer,GTypeInterfaceCheckFunc->void "void ($(gpointer,GTypeInterfaceCheckFunc))")
    (type GType->GTypeValueTable* "GTypeValueTable *($(GType))")
    (type GTypeInstance*->gboolean "gboolean ($(GTypeInstance *))")
    (type GTypeInstance*,GType->GTypeInstance* "GTypeInstance *($(GTypeInstance *,GType))")
    (type GTypeInstance*,GType->gboolean "gboolean ($(GTypeInstance *,GType))")
    (type GTypeClass*,GType->GTypeClass* "GTypeClass *($(GTypeClass *,GType))")
    (type GTypeClass*,GType->gboolean "gboolean ($(GTypeClass *,GType))")
    (type GType->gboolean "gboolean ($(GType))")
    (type GValue*->gboolean "gboolean ($(GValue *))")
    (type GValue*,GType->gboolean "gboolean ($(GValue *,GType))")
    (type GType,guint->gboolean "gboolean ($(GType,guint))")
    (type GTypeInstance*->gchar* "gchar *($(GTypeInstance *))")
    (type GTypeClass*->gchar* "gchar *($(GTypeClass *))")
    (type GType,gconstpointer->gpointer "gpointer ($(GType,gconstpointer))")
    (type GType,gpointer->void "void ($(GType,gpointer))")
    (type GValue*,gconstpointer->void "void ($(GValue *,gconstpointer))")
    (type gchar*,GBoxedCopyFunc,GBoxedFreeFunc->GType "GType ($(gchar *,GBoxedCopyFunc,GBoxedFreeFunc))")
    (type GEnumClass*,gint->GEnumValue* "GEnumValue *($(GEnumClass *,gint))")
    (type GEnumClass*,gchar*->GEnumValue* "GEnumValue *($(GEnumClass *,gchar *))")
    (type GFlagsClass*,guint->GFlagsValue* "GFlagsValue *($(GFlagsClass *,guint))")
    (type GFlagsClass*,gchar*->GFlagsValue* "GFlagsValue *($(GFlagsClass *,gchar *))")
    (type GValue*,gint->void "void ($(GValue *,gint))")
    (type GValue*->gint "gint ($(GValue *))")
    (type GValue*,guint->void "void ($(GValue *,guint))")
    (type GValue*->guint "guint ($(GValue *))")
    (type gchar*,GEnumValue*->GType "GType ($(gchar *,GEnumValue *))")
    (type gchar*,GFlagsValue*->GType "GType ($(gchar *,GFlagsValue *))")
    (type GType,GTypeInfo*,GEnumValue*->void "void ($(GType,GTypeInfo *,GEnumValue *))")
    (type GType,GTypeInfo*,GFlagsValue*->void "void ($(GType,GTypeInfo *,GFlagsValue *))")
    (type GValue*,GType->GValue* "GValue *($(GValue *,GType))")
    (type GValue*->GValue* "GValue *($(GValue *))")
    (type GValue*,gpointer->void "void ($(GValue *,gpointer))")
    (type GValue*,GValue*->gboolean "gboolean ($(GValue *,GValue *))")
    (type GType,GType,GValueTransform->void "void ($(GType,GType,GValueTransform))")
    (type GParamSpec*->GParamSpec* "GParamSpec *($(GParamSpec *))")
    (type GParamSpec*,GQuark->gpointer "gpointer ($(GParamSpec *,GQuark))")
    (type GParamSpec*,GQuark,gpointer->void "void ($(GParamSpec *,GQuark,gpointer))")
    (type GParamSpec*,GQuark,gpointer,GDestroyNotify->void "void ($(GParamSpec *,GQuark,gpointer,GDestroyNotify))")
    (type GParamSpec*,GValue*,GValue*,gboolean->gboolean "gboolean ($(GParamSpec *,GValue *,GValue *,gboolean))")
    (type GParamSpec*->gchar* "gchar *($(GParamSpec *))")
    (type GValue*,GParamSpec*->void "void ($(GValue *,GParamSpec *))")
    (type GValue*->GParamSpec* "GParamSpec *($(GValue *))")
    (type gchar*,GParamSpecTypeInfo*->GType "GType ($(gchar *,GParamSpecTypeInfo *))")
    (type gchar*,GParamSpecTypeInfo*,GType->GType "GType ($(gchar *,GParamSpecTypeInfo *,GType))")
    (type GType,gchar*,gchar*,gchar*,GParamFlags->gpointer "gpointer ($(GType,gchar *,gchar *,gchar *,GParamFlags))")
    (type gboolean->GParamSpecPool* "GParamSpecPool *($(gboolean))")
    (type GParamSpecPool*,GParamSpec*,GType->void "void ($(GParamSpecPool *,GParamSpec *,GType))")
    (type GParamSpecPool*,GParamSpec*->void "void ($(GParamSpecPool *,GParamSpec *))")
    (type GParamSpecPool*,gchar*,GType,gboolean->GParamSpec* "GParamSpec *($(GParamSpecPool *,gchar *,GType,gboolean))")
    (type GParamSpecPool*,GType->GList* "GList *($(GParamSpecPool *,GType))")
    (type GParamSpecPool*,GType,guint*->GParamSpec** "GParamSpec **($(GParamSpecPool *,GType,guint *))")
    (type GCallback,gpointer,GClosureNotify->GClosure* "GClosure *($(GCallback,gpointer,GClosureNotify))")
    (type GType,guint->GClosure* "GClosure *($(GType,guint))")
    (type GClosure*->GClosure* "GClosure *($(GClosure *))")
    (type GClosure*->void "void ($(GClosure *))")
    (type guint,gpointer->GClosure* "GClosure *($(guint,gpointer))")
    (type GClosure*,gpointer,GClosureNotify->void "void ($(GClosure *,gpointer,GClosureNotify))")
    (type GClosure*,gpointer,GClosureNotify,gpointer,GClosureNotify->void "void ($(GClosure *,gpointer,GClosureNotify,gpointer,GClosureNotify))")
    (type GClosure*,GClosureMarshal->void "void ($(GClosure *,GClosureMarshal))")
    (type GClosure*,gpointer,GClosureMarshal->void "void ($(GClosure *,gpointer,GClosureMarshal))")
    (type GClosure*,GValue*,guint,GValue*,gpointer->void "void ($(GClosure *,GValue *,guint,GValue *,gpointer))")
    (type gchar*,GType,GSignalFlags,GClosure*,GSignalAccumulator,gpointer,GSignalCMarshaller,GType,guint,GType*->guint "guint ($(gchar *,GType,GSignalFlags,GClosure *,GSignalAccumulator,gpointer,GSignalCMarshaller,GType,guint,GType *))")
    (type gchar*,GType,GSignalFlags,guint,GSignalAccumulator,gpointer,GSignalCMarshaller,GType,guint,...guint->guint "guint ($(gchar *,GType,GSignalFlags,guint,GSignalAccumulator,gpointer,GSignalCMarshaller,GType,guint,...))")
    (type GValue*,guint,GQuark,GValue*->void "void ($(GValue *,guint,GQuark,GValue *))")
    (type gpointer,guint,GQuark,...GQuark->void "void ($(gpointer,guint,GQuark,...))")
    (type gpointer,gchar*,...gchar*->void "void ($(gpointer,gchar *,...))")
    (type gchar*,GType->guint "guint ($(gchar *,GType))")
    (type guint->gchar* "gchar *($(guint))")
    (type guint,GSignalQuery*->void "void ($(guint,GSignalQuery *))")
    (type GType,guint*->guint* "guint *($(GType,guint *))")
    (type GQuark* (pointer GQuark) "GQuark *")
    (type gchar*,GType,guint*,GQuark*,gboolean->gboolean "gboolean ($(gchar *,GType,guint *,GQuark *,gboolean))")
    (type gpointer->GSignalInvocationHint* "GSignalInvocationHint *($(gpointer))")
    (type gpointer,guint,GQuark->void "void ($(gpointer,guint,GQuark))")
    (type guint,GQuark,GSignalEmissionHook,gpointer,GDestroyNotify->gulong "gulong ($(guint,GQuark,GSignalEmissionHook,gpointer,GDestroyNotify))")
    (type guint,gulong->void "void ($(guint,gulong))")
    (type gpointer,guint,GQuark,gboolean->gboolean "gboolean ($(gpointer,guint,GQuark,gboolean))")
    (type gpointer,guint,GQuark,GClosure*,gboolean->gulong "gulong ($(gpointer,guint,GQuark,GClosure *,gboolean))")
    (type gpointer,gchar*,GClosure*,gboolean->gulong "gulong ($(gpointer,gchar *,GClosure *,gboolean))")
    (type gpointer,gchar*,GCallback,gpointer,GClosureNotify,GConnectFlags->gulong "gulong ($(gpointer,gchar *,GCallback,gpointer,GClosureNotify,GConnectFlags))")
    (type gpointer,gulong->void "void ($(gpointer,gulong))")
    (type gpointer,gulong->gboolean "gboolean ($(gpointer,gulong))")
    (type gpointer,GSignalMatchType,guint,GQuark,GClosure*,gpointer,gpointer->gulong "gulong ($(gpointer,GSignalMatchType,guint,GQuark,GClosure *,gpointer,gpointer))")
    (type gpointer,GSignalMatchType,guint,GQuark,GClosure*,gpointer,gpointer->guint "guint ($(gpointer,GSignalMatchType,guint,GQuark,GClosure *,gpointer,gpointer))")
    (type guint,GType,GClosure*->void "void ($(guint,GType,GClosure *))")
    (type GType->void "void ($(GType))")
    (type GObjectClass*,guint,GParamSpec*->void "void ($(GObjectClass *,guint,GParamSpec *))")
    (type GObjectClass*,gchar*->GParamSpec* "GParamSpec *($(GObjectClass *,gchar *))")
    (type GObjectClass*,guint*->GParamSpec** "GParamSpec **($(GObjectClass *,guint *))")
    (type GObjectClass*,guint,gchar*->void "void ($(GObjectClass *,guint,gchar *))")
    (type gpointer,GParamSpec*->void "void ($(gpointer,GParamSpec *))")
    (type gpointer,gchar*->GParamSpec* "GParamSpec *($(gpointer,gchar *))")
    (type gpointer,guint*->GParamSpec** "GParamSpec **($(gpointer,guint *))")
    (type GType,gchar*,...gchar*->gpointer "gpointer ($(GType,gchar *,...))")
    (type GType,guint,GParameter*->gpointer "gpointer ($(GType,guint,GParameter *))")
    (type gpointer,gchar*,...gchar*->gpointer "gpointer ($(gpointer,gchar *,...))")
    (type GObject*,gchar*,GValue*->void "void ($(GObject *,gchar *,GValue *))")
    (type GObject*,gchar*->void "void ($(GObject *,gchar *))")
    (type GObject*,GWeakNotify,gpointer->void "void ($(GObject *,GWeakNotify,gpointer))")
    (type GObject*,gpointer*->void "void ($(GObject *,gpointer *))")
    (type GObject*,GQuark->gpointer "gpointer ($(GObject *,GQuark))")
    (type GObject*,GQuark,gpointer->void "void ($(GObject *,GQuark,gpointer))")
    (type GObject*,GQuark,gpointer,GDestroyNotify->void "void ($(GObject *,GQuark,gpointer,GDestroyNotify))")
    (type GObject*,gchar*->gpointer "gpointer ($(GObject *,gchar *))")
    (type GObject*,gchar*,gpointer->void "void ($(GObject *,gchar *,gpointer))")
    (type GObject*,gchar*,gpointer,GDestroyNotify->void "void ($(GObject *,gchar *,gpointer,GDestroyNotify))")
    (type GObject*,GClosure*->void "void ($(GObject *,GClosure *))")
    (type GCallback,GObject*->GClosure* "GClosure *($(GCallback,GObject *))")
    (type guint,GObject*->GClosure* "GClosure *($(guint,GObject *))")
    (type GValue*->GObject* "GObject *($(GValue *))")
    (type gpointer,gchar*,GCallback,gpointer,GConnectFlags->gulong "gulong ($(gpointer,gchar *,GCallback,gpointer,GConnectFlags))")
    (type gchar*,gchar*,gchar*,gint8,gint8,gint8,GParamFlags->GParamSpec* "GParamSpec *($(gchar *,gchar *,gchar *,gint8,gint8,gint8,GParamFlags))")
    (type gchar*,gchar*,gchar*,guint8,guint8,guint8,GParamFlags->GParamSpec* "GParamSpec *($(gchar *,gchar *,gchar *,guint8,guint8,guint8,GParamFlags))")
    (type gchar*,gchar*,gchar*,gboolean,GParamFlags->GParamSpec* "GParamSpec *($(gchar *,gchar *,gchar *,gboolean,GParamFlags))")
    (type gchar*,gchar*,gchar*,gint,gint,gint,GParamFlags->GParamSpec* "GParamSpec *($(gchar *,gchar *,gchar *,gint,gint,gint,GParamFlags))")
    (type gchar*,gchar*,gchar*,guint,guint,guint,GParamFlags->GParamSpec* "GParamSpec *($(gchar *,gchar *,gchar *,guint,guint,guint,GParamFlags))")
    (type gchar*,gchar*,gchar*,glong,glong,glong,GParamFlags->GParamSpec* "GParamSpec *($(gchar *,gchar *,gchar *,glong,glong,glong,GParamFlags))")
    (type gchar*,gchar*,gchar*,gulong,gulong,gulong,GParamFlags->GParamSpec* "GParamSpec *($(gchar *,gchar *,gchar *,gulong,gulong,gulong,GParamFlags))")
    (type gchar*,gchar*,gchar*,gint64,gint64,gint64,GParamFlags->GParamSpec* "GParamSpec *($(gchar *,gchar *,gchar *,gint64,gint64,gint64,GParamFlags))")
    (type gchar*,gchar*,gchar*,guint64,guint64,guint64,GParamFlags->GParamSpec* "GParamSpec *($(gchar *,gchar *,gchar *,guint64,guint64,guint64,GParamFlags))")
    (type gchar*,gchar*,gchar*,gunichar,GParamFlags->GParamSpec* "GParamSpec *($(gchar *,gchar *,gchar *,gunichar,GParamFlags))")
    (type gchar*,gchar*,gchar*,GType,gint,GParamFlags->GParamSpec* "GParamSpec *($(gchar *,gchar *,gchar *,GType,gint,GParamFlags))")
    (type gchar*,gchar*,gchar*,GType,guint,GParamFlags->GParamSpec* "GParamSpec *($(gchar *,gchar *,gchar *,GType,guint,GParamFlags))")
    (type gchar*,gchar*,gchar*,gfloat,gfloat,gfloat,GParamFlags->GParamSpec* "GParamSpec *($(gchar *,gchar *,gchar *,gfloat,gfloat,gfloat,GParamFlags))")
    (type gchar*,gchar*,gchar*,gdouble,gdouble,gdouble,GParamFlags->GParamSpec* "GParamSpec *($(gchar *,gchar *,gchar *,gdouble,gdouble,gdouble,GParamFlags))")
    (type gchar*,gchar*,gchar*,gchar*,GParamFlags->GParamSpec* "GParamSpec *($(gchar *,gchar *,gchar *,gchar *,GParamFlags))")
    (type gchar*,gchar*,gchar*,GType,GParamFlags->GParamSpec* "GParamSpec *($(gchar *,gchar *,gchar *,GType,GParamFlags))")
    (type gchar*,gchar*,gchar*,GParamFlags->GParamSpec* "GParamSpec *($(gchar *,gchar *,gchar *,GParamFlags))")
    (type gchar*,gchar*,gchar*,GParamSpec*,GParamFlags->GParamSpec* "GParamSpec *($(gchar *,gchar *,gchar *,GParamSpec *,GParamFlags))")
    (type gchar*,GParamSpec*->GParamSpec* "GParamSpec *($(gchar *,GParamSpec *))")
    (type GSource*,GClosure*->void "void ($(GSource *,GClosure *))")
    (type GTypeModule*,gchar*->void "void ($(GTypeModule *,gchar *))")
    (type GTypeModule*,GType,gchar*,GTypeInfo*,GTypeFlags->GType "GType ($(GTypeModule *,GType,gchar *,GTypeInfo *,GTypeFlags))")
    (type GTypeModule*,GType,GType,GInterfaceInfo*->void "void ($(GTypeModule *,GType,GType,GInterfaceInfo *))")
    (type GTypeModule*,gchar*,GEnumValue*->GType "GType ($(GTypeModule *,gchar *,GEnumValue *))")
    (type GTypeModule*,gchar*,GFlagsValue*->GType "GType ($(GTypeModule *,gchar *,GFlagsValue *))")
    (type GValueArray*,guint->GValue* "GValue *($(GValueArray *,guint))")
    (type guint->GValueArray* "GValueArray *($(guint))")
    (type GValueArray*->void "void ($(GValueArray *))")
    (type GValueArray*->GValueArray* "GValueArray *($(GValueArray *))")
    (type GValueArray*,GValue*->GValueArray* "GValueArray *($(GValueArray *,GValue *))")
    (type GValueArray*,guint,GValue*->GValueArray* "GValueArray *($(GValueArray *,guint,GValue *))")
    (type GValueArray*,guint->GValueArray* "GValueArray *($(GValueArray *,guint))")
    (type GValueArray*,GCompareFunc->GValueArray* "GValueArray *($(GValueArray *,GCompareFunc))")
    (type GValueArray*,GCompareDataFunc,gpointer->GValueArray* "GValueArray *($(GValueArray *,GCompareDataFunc,gpointer))")
    (type GValue*,gchar->void "void ($(GValue *,gchar))")
    (type GValue*->gchar "gchar ($(GValue *))")
    (type GValue*,guchar->void "void ($(GValue *,guchar))")
    (type GValue*->guchar "guchar ($(GValue *))")
    (type GValue*,gboolean->void "void ($(GValue *,gboolean))")
    (type GValue*,glong->void "void ($(GValue *,glong))")
    (type GValue*->glong "glong ($(GValue *))")
    (type GValue*,gulong->void "void ($(GValue *,gulong))")
    (type GValue*->gulong "gulong ($(GValue *))")
    (type GValue*,gint64->void "void ($(GValue *,gint64))")
    (type GValue*->gint64 "gint64 ($(GValue *))")
    (type GValue*,guint64->void "void ($(GValue *,guint64))")
    (type GValue*->guint64 "guint64 ($(GValue *))")
    (type GValue*,gfloat->void "void ($(GValue *,gfloat))")
    (type GValue*->gfloat "gfloat ($(GValue *))")
    (type GValue*,gdouble->void "void ($(GValue *,gdouble))")
    (type GValue*->gdouble "gdouble ($(GValue *))")
    (type GValue*,gchar*->void "void ($(GValue *,gchar *))")
    (type GValue*->gchar* "gchar *($(GValue *))")
    (type PangoMatrix*->PangoMatrix* "PangoMatrix *($(PangoMatrix *))")
    (type PangoMatrix*->void "void ($(PangoMatrix *))")
    (type PangoMatrix*,double,double->void "void ($(PangoMatrix *,double,double))")
    (type PangoMatrix*,double->void "void ($(PangoMatrix *,double))")
    (type PangoMatrix*,PangoMatrix*->void "void ($(PangoMatrix *,PangoMatrix *))")
    (type string->PangoLanguage* "PangoLanguage *($(char *))")
    (type PangoLanguage*,string->gboolean "gboolean ($(PangoLanguage *,char *))")
    (type gunichar->PangoDirection "PangoDirection ($(gunichar))")
    (type gchar*,gint->PangoDirection "PangoDirection ($(gchar *,gint))")
    (type void->PangoFontDescription* "PangoFontDescription *($(void))")
    (type PangoFontDescription*->PangoFontDescription* "PangoFontDescription *($(PangoFontDescription *))")
    (type PangoFontDescription*->guint "guint ($(PangoFontDescription *))")
    (type PangoFontDescription*,PangoFontDescription*->gboolean "gboolean ($(PangoFontDescription *,PangoFontDescription *))")
    (type PangoFontDescription*->void "void ($(PangoFontDescription *))")
    (type PangoFontDescription** (pointer PangoFontDescription*) "PangoFontDescription **")
    (type PangoFontDescription**,int->void "void ($(PangoFontDescription **,int))")
    (type PangoFontDescription*,string->void "void ($(PangoFontDescription *,char *))")
    (type PangoFontDescription*->string "char *($(PangoFontDescription *))")
    (type PangoFontDescription*,PangoStyle->void "void ($(PangoFontDescription *,PangoStyle))")
    (type PangoFontDescription*->PangoStyle "PangoStyle ($(PangoFontDescription *))")
    (type PangoFontDescription*,PangoVariant->void "void ($(PangoFontDescription *,PangoVariant))")
    (type PangoFontDescription*->PangoVariant "PangoVariant ($(PangoFontDescription *))")
    (type PangoFontDescription*,PangoWeight->void "void ($(PangoFontDescription *,PangoWeight))")
    (type PangoFontDescription*->PangoWeight "PangoWeight ($(PangoFontDescription *))")
    (type PangoFontDescription*,PangoStretch->void "void ($(PangoFontDescription *,PangoStretch))")
    (type PangoFontDescription*->PangoStretch "PangoStretch ($(PangoFontDescription *))")
    (type PangoFontDescription*,gint->void "void ($(PangoFontDescription *,gint))")
    (type PangoFontDescription*->gint "gint ($(PangoFontDescription *))")
    (type PangoFontDescription*,double->void "void ($(PangoFontDescription *,double))")
    (type PangoFontDescription*->gboolean "gboolean ($(PangoFontDescription *))")
    (type PangoFontDescription*->PangoFontMask "PangoFontMask ($(PangoFontDescription *))")
    (type PangoFontDescription*,PangoFontMask->void "void ($(PangoFontDescription *,PangoFontMask))")
    (type PangoFontDescription*,PangoFontDescription*,gboolean->void "void ($(PangoFontDescription *,PangoFontDescription *,gboolean))")
    (type PangoFontDescription*,PangoFontDescription*,PangoFontDescription*->gboolean "gboolean ($(PangoFontDescription *,PangoFontDescription *,PangoFontDescription *))")
    (type string->PangoFontDescription* "PangoFontDescription *($(char *))")
    (type PangoFontMetrics*->PangoFontMetrics* "PangoFontMetrics *($(PangoFontMetrics *))")
    (type PangoFontMetrics*->void "void ($(PangoFontMetrics *))")
    (type PangoFontMetrics*->int "int ($(PangoFontMetrics *))")
    (type PangoFontFace** (pointer PangoFontFace*) "PangoFontFace **")
    (type PangoFontFace*** (pointer PangoFontFace**) "PangoFontFace ***")
    (type PangoFontFamily*,PangoFontFace***,int*->void "void ($(PangoFontFamily *,PangoFontFace ***,int *))")
    (type PangoFontFamily*->string "char *($(PangoFontFamily *))")
    (type PangoFontFamily*->gboolean "gboolean ($(PangoFontFamily *))")
    (type PangoFontFace*->PangoFontDescription* "PangoFontDescription *($(PangoFontFace *))")
    (type PangoFontFace*->string "char *($(PangoFontFace *))")
    (type int** (pointer int*) "int **")
    (type PangoFontFace*,int**,int*->void "void ($(PangoFontFace *,int **,int *))")
    (type PangoFont*->PangoFontDescription* "PangoFontDescription *($(PangoFont *))")
    (type PangoFont*,PangoLanguage*->PangoCoverage* "PangoCoverage *($(PangoFont *,PangoLanguage *))")
    (type PangoFont*,PangoLanguage*,guint32->PangoEngineShape* "PangoEngineShape *($(PangoFont *,PangoLanguage *,guint32))")
    (type PangoFont*,PangoLanguage*->PangoFontMetrics* "PangoFontMetrics *($(PangoFont *,PangoLanguage *))")
    (type PangoFont*,PangoGlyph,PangoRectangle*,PangoRectangle*->void "void ($(PangoFont *,PangoGlyph,PangoRectangle *,PangoRectangle *))")
    (type PangoColor*->PangoColor* "PangoColor *($(PangoColor *))")
    (type PangoColor*->void "void ($(PangoColor *))")
    (type PangoColor*,string->gboolean "gboolean ($(PangoColor *,char *))")
    (type gchar*->PangoAttrType "PangoAttrType ($(gchar *))")
    (type PangoLanguage*->PangoAttribute* "PangoAttribute *($(PangoLanguage *))")
    (type string->PangoAttribute* "PangoAttribute *($(char *))")
    (type guint16,guint16,guint16->PangoAttribute* "PangoAttribute *($(guint16,guint16,guint16))")
    (type int->PangoAttribute* "PangoAttribute *($(int))")
    (type PangoStyle->PangoAttribute* "PangoAttribute *($(PangoStyle))")
    (type PangoWeight->PangoAttribute* "PangoAttribute *($(PangoWeight))")
    (type PangoVariant->PangoAttribute* "PangoAttribute *($(PangoVariant))")
    (type PangoStretch->PangoAttribute* "PangoAttribute *($(PangoStretch))")
    (type PangoFontDescription*->PangoAttribute* "PangoAttribute *($(PangoFontDescription *))")
    (type PangoUnderline->PangoAttribute* "PangoAttribute *($(PangoUnderline))")
    (type gboolean->PangoAttribute* "PangoAttribute *($(gboolean))")
    (type double->PangoAttribute* "PangoAttribute *($(double))")
    (type PangoRectangle*,PangoRectangle*->PangoAttribute* "PangoAttribute *($(PangoRectangle *,PangoRectangle *))")
    (type PangoRectangle*,PangoRectangle*,gpointer,PangoAttrDataCopyFunc,GDestroyNotify->PangoAttribute* "PangoAttribute *($(PangoRectangle *,PangoRectangle *,gpointer,PangoAttrDataCopyFunc,GDestroyNotify))")
    (type void->PangoAttrList* "PangoAttrList *($(void))")
    (type PangoAttrList*->void "void ($(PangoAttrList *))")
    (type PangoAttrList*->PangoAttrList* "PangoAttrList *($(PangoAttrList *))")
    (type PangoAttrList*,PangoAttribute*->void "void ($(PangoAttrList *,PangoAttribute *))")
    (type PangoAttrList*,PangoAttrList*,gint,gint->void "void ($(PangoAttrList *,PangoAttrList *,gint,gint))")
    (type PangoAttrList*,PangoAttrFilterFunc,gpointer->PangoAttrList* "PangoAttrList *($(PangoAttrList *,PangoAttrFilterFunc,gpointer))")
    (type PangoAttrList*->PangoAttrIterator* "PangoAttrIterator *($(PangoAttrList *))")
    (type PangoAttrIterator*,gint*,gint*->void "void ($(PangoAttrIterator *,gint *,gint *))")
    (type PangoAttrIterator*->gboolean "gboolean ($(PangoAttrIterator *))")
    (type PangoAttrIterator*->PangoAttrIterator* "PangoAttrIterator *($(PangoAttrIterator *))")
    (type PangoAttrIterator*->void "void ($(PangoAttrIterator *))")
    (type PangoAttrIterator*,PangoAttrType->PangoAttribute* "PangoAttribute *($(PangoAttrIterator *,PangoAttrType))")
    (type PangoLanguage** (pointer PangoLanguage*) "PangoLanguage **")
    (type GSList** (pointer GSList*) "GSList **")
    (type PangoAttrIterator*,PangoFontDescription*,PangoLanguage**,GSList**->void "void ($(PangoAttrIterator *,PangoFontDescription *,PangoLanguage **,GSList **))")
    (type PangoAttrIterator*->GSList* "GSList *($(PangoAttrIterator *))")
    (type string,int,gunichar,PangoAttrList**,string*,gunichar*,GError**->gboolean "gboolean ($(char *,int,gunichar,PangoAttrList **,char **,gunichar *,GError **))")
    (type void->PangoItem* "PangoItem *($(void))")
    (type PangoItem*->PangoItem* "PangoItem *($(PangoItem *))")
    (type PangoItem*->void "void ($(PangoItem *))")
    (type PangoItem*,int,int->PangoItem* "PangoItem *($(PangoItem *,int,int))")
    (type gchar*,int,PangoAnalysis*,PangoLogAttr*,int->void "void ($(gchar *,int,PangoAnalysis *,PangoLogAttr *,int))")
    (type gchar*,gint,gint*,gint*->void "void ($(gchar *,gint,gint *,gint *))")
    (type string,int,int,PangoLanguage*,PangoLogAttr*,int->void "void ($(char *,int,int,PangoLanguage *,PangoLogAttr *,int))")
    (type PangoFontset*,guint->PangoFont* "PangoFont *($(PangoFontset *,guint))")
    (type PangoFontset*->PangoFontMetrics* "PangoFontMetrics *($(PangoFontset *))")
    (type PangoFontset*,PangoFontsetForeachFunc,gpointer->void "void ($(PangoFontset *,PangoFontsetForeachFunc,gpointer))")
    (type PangoFontMap*,PangoContext*,PangoFontDescription*->PangoFont* "PangoFont *($(PangoFontMap *,PangoContext *,PangoFontDescription *))")
    (type PangoFontMap*,PangoContext*,PangoFontDescription*,PangoLanguage*->PangoFontset* "PangoFontset *($(PangoFontMap *,PangoContext *,PangoFontDescription *,PangoLanguage *))")
    (type PangoFontFamily** (pointer PangoFontFamily*) "PangoFontFamily **")
    (type PangoFontFamily*** (pointer PangoFontFamily**) "PangoFontFamily ***")
    (type PangoFontMap*,PangoFontFamily***,int*->void "void ($(PangoFontMap *,PangoFontFamily ***,int *))")
    (type PangoContext*->PangoFontMap* "PangoFontMap *($(PangoContext *))")
    (type PangoContext*,PangoFontFamily***,int*->void "void ($(PangoContext *,PangoFontFamily ***,int *))")
    (type PangoContext*,PangoFontDescription*->PangoFont* "PangoFont *($(PangoContext *,PangoFontDescription *))")
    (type PangoContext*,PangoFontDescription*,PangoLanguage*->PangoFontset* "PangoFontset *($(PangoContext *,PangoFontDescription *,PangoLanguage *))")
    (type PangoContext*,PangoFontDescription*,PangoLanguage*->PangoFontMetrics* "PangoFontMetrics *($(PangoContext *,PangoFontDescription *,PangoLanguage *))")
    (type PangoContext*,PangoFontDescription*->void "void ($(PangoContext *,PangoFontDescription *))")
    (type PangoContext*->PangoFontDescription* "PangoFontDescription *($(PangoContext *))")
    (type PangoContext*->PangoLanguage* "PangoLanguage *($(PangoContext *))")
    (type PangoContext*,PangoLanguage*->void "void ($(PangoContext *,PangoLanguage *))")
    (type PangoContext*,PangoDirection->void "void ($(PangoContext *,PangoDirection))")
    (type PangoContext*->PangoDirection "PangoDirection ($(PangoContext *))")
    (type PangoContext*,PangoMatrix*->void "void ($(PangoContext *,PangoMatrix *))")
    (type PangoContext*->PangoMatrix* "PangoMatrix *($(PangoContext *))")
    (type PangoContext*,string,int,int,PangoAttrList*,PangoAttrIterator*->GList* "GList *($(PangoContext *,char *,int,int,PangoAttrList *,PangoAttrIterator *))")
    (type PangoContext*,PangoDirection,string,int,int,PangoAttrList*,PangoAttrIterator*->GList* "GList *($(PangoContext *,PangoDirection,char *,int,int,PangoAttrList *,PangoAttrIterator *))")
    (type void->PangoGlyphString* "PangoGlyphString *($(void))")
    (type PangoGlyphString*,gint->void "void ($(PangoGlyphString *,gint))")
    (type PangoGlyphString*->PangoGlyphString* "PangoGlyphString *($(PangoGlyphString *))")
    (type PangoGlyphString*->void "void ($(PangoGlyphString *))")
    (type PangoGlyphString*,PangoFont*,PangoRectangle*,PangoRectangle*->void "void ($(PangoGlyphString *,PangoFont *,PangoRectangle *,PangoRectangle *))")
    (type PangoGlyphString*,int,int,PangoFont*,PangoRectangle*,PangoRectangle*->void "void ($(PangoGlyphString *,int,int,PangoFont *,PangoRectangle *,PangoRectangle *))")
    (type PangoGlyphString*,string,int,int,int*->void "void ($(PangoGlyphString *,char *,int,int,int *))")
    (type PangoGlyphString*,string,int,PangoAnalysis*,int,gboolean,int*->void "void ($(PangoGlyphString *,char *,int,PangoAnalysis *,int,gboolean,int *))")
    (type PangoGlyphString*,string,int,PangoAnalysis*,int,int*,int*->void "void ($(PangoGlyphString *,char *,int,PangoAnalysis *,int,int *,int *))")
    (type gchar*,gint,PangoAnalysis*,PangoGlyphString*->void "void ($(gchar *,gint,PangoAnalysis *,PangoGlyphString *))")
    (type gunichar->PangoScript "PangoScript ($(gunichar))")
    (type string,int->PangoScriptIter* "PangoScriptIter *($(char *,int))")
    (type PangoScript* (pointer PangoScript) "PangoScript *")
    (type PangoScriptIter*,string*,string*,PangoScript*->void "void ($(PangoScriptIter *,char **,char **,PangoScript *))")
    (type PangoScriptIter*->gboolean "gboolean ($(PangoScriptIter *))")
    (type PangoScriptIter*->void "void ($(PangoScriptIter *))")
    (type PangoScript->PangoLanguage* "PangoLanguage *($(PangoScript))")
    (type PangoLanguage*,PangoScript->gboolean "gboolean ($(PangoLanguage *,PangoScript))")
    (type PangoGlyphItem*,string,int->PangoGlyphItem* "PangoGlyphItem *($(PangoGlyphItem *,char *,int))")
    (type PangoGlyphItem*->void "void ($(PangoGlyphItem *))")
    (type PangoGlyphItem*,string,PangoAttrList*->GSList* "GSList *($(PangoGlyphItem *,char *,PangoAttrList *))")
    (type PangoGlyphItem*,string,PangoLogAttr*,int->void "void ($(PangoGlyphItem *,char *,PangoLogAttr *,int))")
    (type gint,gboolean->PangoTabArray* "PangoTabArray *($(gint,gboolean))")
    (type gint,gboolean,PangoTabAlign,gint,...gint->PangoTabArray* "PangoTabArray *($(gint,gboolean,PangoTabAlign,gint,...))")
    (type PangoTabArray*->PangoTabArray* "PangoTabArray *($(PangoTabArray *))")
    (type PangoTabArray*->void "void ($(PangoTabArray *))")
    (type PangoTabArray*->gint "gint ($(PangoTabArray *))")
    (type PangoTabArray*,gint->void "void ($(PangoTabArray *,gint))")
    (type PangoTabArray*,gint,PangoTabAlign,gint->void "void ($(PangoTabArray *,gint,PangoTabAlign,gint))")
    (type PangoTabAlign* (pointer PangoTabAlign) "PangoTabAlign *")
    (type PangoTabArray*,gint,PangoTabAlign*,gint*->void "void ($(PangoTabArray *,gint,PangoTabAlign *,gint *))")
    (type PangoTabAlign** (pointer PangoTabAlign*) "PangoTabAlign **")
    (type PangoTabArray*,PangoTabAlign**,gint**->void "void ($(PangoTabArray *,PangoTabAlign **,gint **))")
    (type PangoTabArray*->gboolean "gboolean ($(PangoTabArray *))")
    (type PangoContext*->PangoLayout* "PangoLayout *($(PangoContext *))")
    (type PangoLayout*->PangoLayout* "PangoLayout *($(PangoLayout *))")
    (type PangoLayout*->PangoContext* "PangoContext *($(PangoLayout *))")
    (type PangoLayout*,PangoAttrList*->void "void ($(PangoLayout *,PangoAttrList *))")
    (type PangoLayout*->PangoAttrList* "PangoAttrList *($(PangoLayout *))")
    (type PangoLayout*,string,int->void "void ($(PangoLayout *,char *,int))")
    (type PangoLayout*->string "char *($(PangoLayout *))")
    (type PangoLayout*,string,int,gunichar,gunichar*->void "void ($(PangoLayout *,char *,int,gunichar,gunichar *))")
    (type PangoLayout*,PangoFontDescription*->void "void ($(PangoLayout *,PangoFontDescription *))")
    (type PangoLayout*->PangoFontDescription* "PangoFontDescription *($(PangoLayout *))")
    (type PangoLayout*,int->void "void ($(PangoLayout *,int))")
    (type PangoLayout*->int "int ($(PangoLayout *))")
    (type PangoLayout*,PangoWrapMode->void "void ($(PangoLayout *,PangoWrapMode))")
    (type PangoLayout*->PangoWrapMode "PangoWrapMode ($(PangoLayout *))")
    (type PangoLayout*,gboolean->void "void ($(PangoLayout *,gboolean))")
    (type PangoLayout*->gboolean "gboolean ($(PangoLayout *))")
    (type PangoLayout*,PangoAlignment->void "void ($(PangoLayout *,PangoAlignment))")
    (type PangoLayout*->PangoAlignment "PangoAlignment ($(PangoLayout *))")
    (type PangoLayout*,PangoTabArray*->void "void ($(PangoLayout *,PangoTabArray *))")
    (type PangoLayout*->PangoTabArray* "PangoTabArray *($(PangoLayout *))")
    (type PangoLayout*,PangoEllipsizeMode->void "void ($(PangoLayout *,PangoEllipsizeMode))")
    (type PangoLayout*->PangoEllipsizeMode "PangoEllipsizeMode ($(PangoLayout *))")
    (type PangoLayout*->void "void ($(PangoLayout *))")
    (type PangoLogAttr** (pointer PangoLogAttr*) "PangoLogAttr **")
    (type PangoLayout*,PangoLogAttr**,gint*->void "void ($(PangoLayout *,PangoLogAttr **,gint *))")
    (type PangoLayout*,int,PangoRectangle*->void "void ($(PangoLayout *,int,PangoRectangle *))")
    (type PangoLayout*,int,PangoRectangle*,PangoRectangle*->void "void ($(PangoLayout *,int,PangoRectangle *,PangoRectangle *))")
    (type PangoLayout*,gboolean,int,int,int,int*,int*->void "void ($(PangoLayout *,gboolean,int,int,int,int *,int *))")
    (type PangoLayout*,int,int,int*,int*->gboolean "gboolean ($(PangoLayout *,int,int,int *,int *))")
    (type PangoLayout*,PangoRectangle*,PangoRectangle*->void "void ($(PangoLayout *,PangoRectangle *,PangoRectangle *))")
    (type PangoLayout*,int*,int*->void "void ($(PangoLayout *,int *,int *))")
    (type PangoLayout*,int->PangoLayoutLine* "PangoLayoutLine *($(PangoLayout *,int))")
    (type PangoLayout*->GSList* "GSList *($(PangoLayout *))")
    (type PangoLayoutLine*->void "void ($(PangoLayoutLine *))")
    (type PangoLayoutLine*,int,int*,int*->gboolean "gboolean ($(PangoLayoutLine *,int,int *,int *))")
    (type PangoLayoutLine*,int,gboolean,int*->void "void ($(PangoLayoutLine *,int,gboolean,int *))")
    (type PangoLayoutLine*,int,int,int**,int*->void "void ($(PangoLayoutLine *,int,int,int **,int *))")
    (type PangoLayoutLine*,PangoRectangle*,PangoRectangle*->void "void ($(PangoLayoutLine *,PangoRectangle *,PangoRectangle *))")
    (type PangoLayout*->PangoLayoutIter* "PangoLayoutIter *($(PangoLayout *))")
    (type PangoLayoutIter*->void "void ($(PangoLayoutIter *))")
    (type PangoLayoutIter*->int "int ($(PangoLayoutIter *))")
    (type PangoLayoutIter*->PangoLayoutRun* "PangoLayoutRun *($(PangoLayoutIter *))")
    (type PangoLayoutIter*->PangoLayoutLine* "PangoLayoutLine *($(PangoLayoutIter *))")
    (type PangoLayoutIter*->gboolean "gboolean ($(PangoLayoutIter *))")
    (type PangoLayoutIter*,PangoRectangle*->void "void ($(PangoLayoutIter *,PangoRectangle *))")
    (type PangoLayoutIter*,PangoRectangle*,PangoRectangle*->void "void ($(PangoLayoutIter *,PangoRectangle *,PangoRectangle *))")
    (type PangoLayoutIter*,int*,int*->void "void ($(PangoLayoutIter *,int *,int *))")
    (type PangoRenderer*,PangoLayout*,int,int->void "void ($(PangoRenderer *,PangoLayout *,int,int))")
    (type PangoRenderer*,PangoLayoutLine*,int,int->void "void ($(PangoRenderer *,PangoLayoutLine *,int,int))")
    (type PangoRenderer*,PangoRenderPart,PangoColor*->void "void ($(PangoRenderer *,PangoRenderPart,PangoColor *))")
    (type PangoRenderer*,PangoRenderPart->PangoColor* "PangoColor *($(PangoRenderer *,PangoRenderPart))")
    (type PangoRenderer*,PangoMatrix*->void "void ($(PangoRenderer *,PangoMatrix *))")
    (type PangoRenderer*->PangoMatrix* "PangoMatrix *($(PangoRenderer *))")
    (type GdkVisual*,gboolean->GdkColormap* "GdkColormap *($(GdkVisual *,gboolean))")
    (type GdkColormap*->GdkColormap* "GdkColormap *($(GdkColormap *))")
    (type GdkColormap*->void "void ($(GdkColormap *))")
    (type void->GdkColormap* "GdkColormap *($(void))")
    (type GdkColormap*->GdkScreen* "GdkScreen *($(GdkColormap *))")
    (type GdkColormap*,gint->void "void ($(GdkColormap *,gint))")
    (type GdkColormap*,GdkColor*,gint,gboolean,gboolean,gboolean*->gint "gint ($(GdkColormap *,GdkColor *,gint,gboolean,gboolean,gboolean *))")
    (type GdkColormap*,GdkColor*,gboolean,gboolean->gboolean "gboolean ($(GdkColormap *,GdkColor *,gboolean,gboolean))")
    (type GdkColormap*,GdkColor*,gint->void "void ($(GdkColormap *,GdkColor *,gint))")
    (type GdkColormap*,gulong,GdkColor*->void "void ($(GdkColormap *,gulong,GdkColor *))")
    (type GdkColormap*->GdkVisual* "GdkVisual *($(GdkColormap *))")
    (type GdkColor*->GdkColor* "GdkColor *($(GdkColor *))")
    (type GdkColor*->void "void ($(GdkColor *))")
    (type gchar*,GdkColor*->gint "gint ($(gchar *,GdkColor *))")
    (type GdkColor*->guint "guint ($(GdkColor *))")
    (type GdkColor*,GdkColor*->gboolean "gboolean ($(GdkColor *,GdkColor *))")
    (type GdkColormap*,GdkColor*->gint "gint ($(GdkColormap *,GdkColor *))")
    (type GdkColormap*,gboolean,gulong*,gint,gulong*,gint->gint "gint ($(GdkColormap *,gboolean,gulong *,gint,gulong *,gint))")
    (type GdkColormap*,gulong*,gint,gulong->void "void ($(GdkColormap *,gulong *,gint,gulong))")
    (type GdkPixbuf*->GdkPixbuf* "GdkPixbuf *($(GdkPixbuf *))")
    (type GdkPixbuf*->void "void ($(GdkPixbuf *))")
    (type GdkPixbuf*->GdkColorspace "GdkColorspace ($(GdkPixbuf *))")
    (type GdkPixbuf*->int "int ($(GdkPixbuf *))")
    (type GdkPixbuf*->gboolean "gboolean ($(GdkPixbuf *))")
    (type GdkPixbuf*->guchar* "guchar *($(GdkPixbuf *))")
    (type GdkColorspace,gboolean,int,int,int->GdkPixbuf* "GdkPixbuf *($(GdkColorspace,gboolean,int,int,int))")
    (type GdkPixbuf*,int,int,int,int->GdkPixbuf* "GdkPixbuf *($(GdkPixbuf *,int,int,int,int))")
    (type string,GError**->GdkPixbuf* "GdkPixbuf *($(char *,GError **))")
    (type string,int,int,GError**->GdkPixbuf* "GdkPixbuf *($(char *,int,int,GError **))")
    (type string,int,int,gboolean,GError**->GdkPixbuf* "GdkPixbuf *($(char *,int,int,gboolean,GError **))")
    (type guchar*,GdkColorspace,gboolean,int,int,int,int,GdkPixbufDestroyNotify,gpointer->GdkPixbuf* "GdkPixbuf *($(guchar *,GdkColorspace,gboolean,int,int,int,int,GdkPixbufDestroyNotify,gpointer))")
    (type string*->GdkPixbuf* "GdkPixbuf *($(char **))")
    (type gint,guint8*,gboolean,GError**->GdkPixbuf* "GdkPixbuf *($(gint,guint8 *,gboolean,GError **))")
    (type GdkPixbuf*,guint32->void "void ($(GdkPixbuf *,guint32))")
    (type GdkPixbuf*,string,string,GError**,...GError**->gboolean "gboolean ($(GdkPixbuf *,char *,char *,GError **,...))")
    (type GdkPixbuf*,string,string,string*,string*,GError**->gboolean "gboolean ($(GdkPixbuf *,char *,char *,char **,char **,GError **))")
    (type GdkPixbuf*,GdkPixbufSaveFunc,gpointer,string,GError**,...GError**->gboolean "gboolean ($(GdkPixbuf *,GdkPixbufSaveFunc,gpointer,char *,GError **,...))")
    (type GdkPixbuf*,GdkPixbufSaveFunc,gpointer,string,string*,string*,GError**->gboolean "gboolean ($(GdkPixbuf *,GdkPixbufSaveFunc,gpointer,char *,char **,char **,GError **))")
    (type GdkPixbuf*,gchar**,gsize*,string,GError**,...GError**->gboolean "gboolean ($(GdkPixbuf *,gchar **,gsize *,char *,GError **,...))")
    (type GdkPixbuf*,gchar**,gsize*,string,string*,string*,GError**->gboolean "gboolean ($(GdkPixbuf *,gchar **,gsize *,char *,char **,char **,GError **))")
    (type GdkPixbuf*,gboolean,guchar,guchar,guchar->GdkPixbuf* "GdkPixbuf *($(GdkPixbuf *,gboolean,guchar,guchar,guchar))")
    (type GdkPixbuf*,int,int,int,int,GdkPixbuf*,int,int->void "void ($(GdkPixbuf *,int,int,int,int,GdkPixbuf *,int,int))")
    (type GdkPixbuf*,GdkPixbuf*,gfloat,gboolean->void "void ($(GdkPixbuf *,GdkPixbuf *,gfloat,gboolean))")
    (type GdkPixbuf*,gchar*->gchar* "gchar *($(GdkPixbuf *,gchar *))")
    (type GdkPixbuf*,GdkPixbuf*,int,int,int,int,double,double,double,double,GdkInterpType->void "void ($(GdkPixbuf *,GdkPixbuf *,int,int,int,int,double,double,double,double,GdkInterpType))")
    (type GdkPixbuf*,GdkPixbuf*,int,int,int,int,double,double,double,double,GdkInterpType,int->void "void ($(GdkPixbuf *,GdkPixbuf *,int,int,int,int,double,double,double,double,GdkInterpType,int))")
    (type GdkPixbuf*,GdkPixbuf*,int,int,int,int,double,double,double,double,GdkInterpType,int,int,int,int,guint32,guint32->void "void ($(GdkPixbuf *,GdkPixbuf *,int,int,int,int,double,double,double,double,GdkInterpType,int,int,int,int,guint32,guint32))")
    (type GdkPixbuf*,int,int,GdkInterpType->GdkPixbuf* "GdkPixbuf *($(GdkPixbuf *,int,int,GdkInterpType))")
    (type GdkPixbuf*,int,int,GdkInterpType,int,int,guint32,guint32->GdkPixbuf* "GdkPixbuf *($(GdkPixbuf *,int,int,GdkInterpType,int,int,guint32,guint32))")
    (type GdkPixbuf*,GdkPixbufRotation->GdkPixbuf* "GdkPixbuf *($(GdkPixbuf *,GdkPixbufRotation))")
    (type GdkPixbuf*,gboolean->GdkPixbuf* "GdkPixbuf *($(GdkPixbuf *,gboolean))")
    (type string,GError**->GdkPixbufAnimation* "GdkPixbufAnimation *($(char *,GError **))")
    (type GdkPixbufAnimation*->GdkPixbufAnimation* "GdkPixbufAnimation *($(GdkPixbufAnimation *))")
    (type GdkPixbufAnimation*->void "void ($(GdkPixbufAnimation *))")
    (type GdkPixbufAnimation*->int "int ($(GdkPixbufAnimation *))")
    (type GdkPixbufAnimation*->gboolean "gboolean ($(GdkPixbufAnimation *))")
    (type GdkPixbufAnimation*->GdkPixbuf* "GdkPixbuf *($(GdkPixbufAnimation *))")
    (type GdkPixbufAnimation*,GTimeVal*->GdkPixbufAnimationIter* "GdkPixbufAnimationIter *($(GdkPixbufAnimation *,GTimeVal *))")
    (type GdkPixbufAnimationIter*->int "int ($(GdkPixbufAnimationIter *))")
    (type GdkPixbufAnimationIter*->GdkPixbuf* "GdkPixbuf *($(GdkPixbufAnimationIter *))")
    (type GdkPixbufAnimationIter*->gboolean "gboolean ($(GdkPixbufAnimationIter *))")
    (type GdkPixbufAnimationIter*,GTimeVal*->gboolean "gboolean ($(GdkPixbufAnimationIter *,GTimeVal *))")
    (type void*,string,size_t->__ssize_t "__ssize_t ($(void *,char *,size_t))")
    (type __off64_t* (pointer __off64_t) "__off64_t *")
    (type void*,__off64_t*,int->int "int ($(void *,__off64_t *,int))")
    (type void*->int "int ($(void *))")
    (type _IO_FILE*->int "int ($(_IO_FILE *))")
    (type _IO_FILE*,int->int "int ($(_IO_FILE *,int))")
    (type _IO_FILE*->wint_t "wint_t ($(_IO_FILE *))")
    (type _IO_FILE*,wint_t->wint_t "wint_t ($(_IO_FILE *,wint_t))")
    (type int,_IO_FILE*->int "int ($(int,_IO_FILE *))")
    (type _IO_FILE*->void "void ($(_IO_FILE *))")
    (type _IO_FILE*,__off64_t,int,int->__off64_t "__off64_t ($(_IO_FILE *,__off64_t,int,int))")
    (type _IO_FILE*,__off64_t,int->__off64_t "__off64_t ($(_IO_FILE *,__off64_t,int))")
    (type string->int "int ($(char *))")
    (type string,string->int "int ($(char *,char *))")
    (type void->file "FILE *($(void))")
    (type string->string "char *($(char *))")
    (type string,string->string "char *($(char *,char *))")
    (type file->int "int ($(FILE *))")
    (type string,string->file "FILE *($(char *,char *))")
    (type string,string,file->file "FILE *($(char *,char *,FILE *))")
    (type int,string->file "FILE *($(int,char *))")
    (type file,string->void "void ($(FILE *,char *))")
    (type file,string,int,size_t->int "int ($(FILE *,char *,int,size_t))")
    (type file,string,size_t->void "void ($(FILE *,char *,size_t))")
    (type file->void "void ($(FILE *))")
    (type file,string,...string->int "int ($(FILE *,char *,...))")
    (type string,...string->int "int ($(char *,...))")
    (type string,string,...string->int "int ($(char *,char *,...))")
    (type int,file->int "int ($(int,FILE *))")
    (type int->int "int ($(int))")
    (type string,int,file->string "char *($(char *,int,FILE *))")
    (type string,file->int "int ($(char *,FILE *))")
    (type void*,size_t,size_t,file->size_t "size_t ($(void *,size_t,size_t,FILE *))")
    (type file,long,int->int "int ($(FILE *,long,int))")
    (type file->long "long ($(FILE *))")
    (type file,fpos_t*->int "int ($(FILE *,fpos_t *))")
    (type string->void "void ($(char *))")
    (type gchar*,GModuleFlags->GModule* "GModule *($(gchar *,GModuleFlags))")
    (type GModule*->gboolean "gboolean ($(GModule *))")
    (type GModule*,gchar*,gpointer*->gboolean "gboolean ($(GModule *,gchar *,gpointer *))")
    (type GdkPixbufFormat*->gchar* "gchar *($(GdkPixbufFormat *))")
    (type GdkPixbufFormat*->gchar** "gchar **($(GdkPixbufFormat *))")
    (type GdkPixbufFormat*->gboolean "gboolean ($(GdkPixbufFormat *))")
    (type GdkPixbufFormat*,gboolean->void "void ($(GdkPixbufFormat *,gboolean))")
    (type gchar*,gint*,gint*->GdkPixbufFormat* "GdkPixbufFormat *($(gchar *,gint *,gint *))")
    (type void->GdkPixbufLoader* "GdkPixbufLoader *($(void))")
    (type string,GError**->GdkPixbufLoader* "GdkPixbufLoader *($(char *,GError **))")
    (type GdkPixbufLoader*,guchar*,gsize,GError**->gboolean "gboolean ($(GdkPixbufLoader *,guchar *,gsize,GError **))")
    (type GdkPixbufLoader*->GdkPixbuf* "GdkPixbuf *($(GdkPixbufLoader *))")
    (type GdkPixbufLoader*->GdkPixbufAnimation* "GdkPixbufAnimation *($(GdkPixbufLoader *))")
    (type GdkPixbufLoader*,GError**->gboolean "gboolean ($(GdkPixbufLoader *,GError **))")
    (type GdkPixbufLoader*->GdkPixbufFormat* "GdkPixbufFormat *($(GdkPixbufLoader *))")
    (type GdkDisplay*,GdkCursorType->GdkCursor* "GdkCursor *($(GdkDisplay *,GdkCursorType))")
    (type GdkCursorType->GdkCursor* "GdkCursor *($(GdkCursorType))")
    (type GdkPixmap*,GdkPixmap*,GdkColor*,GdkColor*,gint,gint->GdkCursor* "GdkCursor *($(GdkPixmap *,GdkPixmap *,GdkColor *,GdkColor *,gint,gint))")
    (type GdkDisplay*,GdkPixbuf*,gint,gint->GdkCursor* "GdkCursor *($(GdkDisplay *,GdkPixbuf *,gint,gint))")
    (type GdkCursor*->GdkDisplay* "GdkDisplay *($(GdkCursor *))")
    (type GdkCursor*->GdkCursor* "GdkCursor *($(GdkCursor *))")
    (type GdkCursor*->void "void ($(GdkCursor *))")
    (type void->GdkDragContext* "GdkDragContext *($(void))")
    (type GdkDragContext*->void "void ($(GdkDragContext *))")
    (type GdkDragContext*,GdkDragAction,guint32->void "void ($(GdkDragContext *,GdkDragAction,guint32))")
    (type GdkDragContext*,gboolean,guint32->void "void ($(GdkDragContext *,gboolean,guint32))")
    (type GdkDragContext*->GdkAtom "GdkAtom ($(GdkDragContext *))")
    (type GdkWindow*,GList*->GdkDragContext* "GdkDragContext *($(GdkWindow *,GList *))")
    (type GdkDragProtocol* (pointer GdkDragProtocol) "GdkDragProtocol *")
    (type GdkDisplay*,guint32,GdkDragProtocol*->guint32 "guint32 ($(GdkDisplay *,guint32,GdkDragProtocol *))")
    (type GdkWindow** (pointer GdkWindow*) "GdkWindow **")
    (type GdkDragContext*,GdkWindow*,GdkScreen*,gint,gint,GdkWindow**,GdkDragProtocol*->void "void ($(GdkDragContext *,GdkWindow *,GdkScreen *,gint,gint,GdkWindow **,GdkDragProtocol *))")
    (type guint32,GdkDragProtocol*->guint32 "guint32 ($(guint32,GdkDragProtocol *))")
    (type GdkDragContext*,GdkWindow*,gint,gint,GdkWindow**,GdkDragProtocol*->void "void ($(GdkDragContext *,GdkWindow *,gint,gint,GdkWindow **,GdkDragProtocol *))")
    (type GdkDragContext*,GdkWindow*,GdkDragProtocol,gint,gint,GdkDragAction,GdkDragAction,guint32->gboolean "gboolean ($(GdkDragContext *,GdkWindow *,GdkDragProtocol,gint,gint,GdkDragAction,GdkDragAction,guint32))")
    (type GdkDragContext*,guint32->void "void ($(GdkDragContext *,guint32))")
    (type GdkDragContext*->gboolean "gboolean ($(GdkDragContext *))")
    (type GdkDevice*,GdkInputSource->void "void ($(GdkDevice *,GdkInputSource))")
    (type GdkDevice*,GdkInputMode->gboolean "gboolean ($(GdkDevice *,GdkInputMode))")
    (type GdkDevice*,guint,guint,GdkModifierType->void "void ($(GdkDevice *,guint,guint,GdkModifierType))")
    (type GdkDevice*,guint,GdkAxisUse->void "void ($(GdkDevice *,guint,GdkAxisUse))")
    (type GdkDevice*,GdkWindow*,gdouble*,GdkModifierType*->void "void ($(GdkDevice *,GdkWindow *,gdouble *,GdkModifierType *))")
    (type GdkTimeCoord** (pointer GdkTimeCoord*) "GdkTimeCoord **")
    (type GdkTimeCoord*** (pointer GdkTimeCoord**) "GdkTimeCoord ***")
    (type GdkDevice*,GdkWindow*,guint32,guint32,GdkTimeCoord***,gint*->gboolean "gboolean ($(GdkDevice *,GdkWindow *,guint32,guint32,GdkTimeCoord ***,gint *))")
    (type GdkTimeCoord**,gint->void "void ($(GdkTimeCoord **,gint))")
    (type GdkDevice*,gdouble*,GdkAxisUse,gdouble*->gboolean "gboolean ($(GdkDevice *,gdouble *,GdkAxisUse,gdouble *))")
    (type GdkWindow*,gint,GdkExtensionMode->void "void ($(GdkWindow *,gint,GdkExtensionMode))")
    (type void->GdkDevice* "GdkDevice *($(void))")
    (type void->GdkEvent* "GdkEvent *($(void))")
    (type GdkWindow*->GdkEvent* "GdkEvent *($(GdkWindow *))")
    (type GdkEvent*->void "void ($(GdkEvent *))")
    (type GdkEventType->GdkEvent* "GdkEvent *($(GdkEventType))")
    (type GdkEvent*->GdkEvent* "GdkEvent *($(GdkEvent *))")
    (type GdkEvent*->guint32 "guint32 ($(GdkEvent *))")
    (type GdkEvent*,GdkModifierType*->gboolean "gboolean ($(GdkEvent *,GdkModifierType *))")
    (type GdkEvent*,gdouble*,gdouble*->gboolean "gboolean ($(GdkEvent *,gdouble *,gdouble *))")
    (type GdkEvent*,GdkAxisUse,gdouble*->gboolean "gboolean ($(GdkEvent *,GdkAxisUse,gdouble *))")
    (type GdkEventFunc,gpointer,GDestroyNotify->void "void ($(GdkEventFunc,gpointer,GDestroyNotify))")
    (type GdkEvent*,GdkScreen*->void "void ($(GdkEvent *,GdkScreen *))")
    (type GdkEvent*->GdkScreen* "GdkScreen *($(GdkEvent *))")
    (type gboolean->void "void ($(gboolean))")
    (type GdkAtom,GdkFilterFunc,gpointer->void "void ($(GdkAtom,GdkFilterFunc,gpointer))")
    (type gchar*,GValue*->gboolean "gboolean ($(gchar *,GValue *))")
    (type gchar*->GdkDisplay* "GdkDisplay *($(gchar *))")
    (type GdkDisplay*,guint32->void "void ($(GdkDisplay *,guint32))")
    (type GdkDisplay*->gboolean "gboolean ($(GdkDisplay *))")
    (type GdkDisplay*->GList* "GList *($(GdkDisplay *))")
    (type GdkDisplay*->GdkEvent* "GdkEvent *($(GdkDisplay *))")
    (type GdkDisplay*,GdkEvent*->void "void ($(GdkDisplay *,GdkEvent *))")
    (type GdkDisplay*,GdkAtom,GdkFilterFunc,gpointer->void "void ($(GdkDisplay *,GdkAtom,GdkFilterFunc,gpointer))")
    (type GdkDisplay*,guint->void "void ($(GdkDisplay *,guint))")
    (type void->GdkDisplay* "GdkDisplay *($(void))")
    (type GdkDisplay*->GdkDevice* "GdkDevice *($(GdkDisplay *))")
    (type GdkDisplay*,GdkDisplayPointerHooks*->GdkDisplayPointerHooks* "GdkDisplayPointerHooks *($(GdkDisplay *,GdkDisplayPointerHooks *))")
    (type GdkDisplay*->guint "guint ($(GdkDisplay *))")
    (type GdkDisplay*,guint*,guint*->void "void ($(GdkDisplay *,guint *,guint *))")
    (type GdkDisplay*->GdkWindow* "GdkWindow *($(GdkDisplay *))")
    (type GdkDisplay*,GdkAtom->gboolean "gboolean ($(GdkDisplay *,GdkAtom))")
    (type GdkDisplay*,GdkWindow*,guint32,GdkAtom*,gint->void "void ($(GdkDisplay *,GdkWindow *,guint32,GdkAtom *,gint))")
    (type GdkDrawable*->GdkGC* "GdkGC *($(GdkDrawable *))")
    (type GdkGC*->GdkGC* "GdkGC *($(GdkGC *))")
    (type GdkGC*->void "void ($(GdkGC *))")
    (type GdkGC*,GdkColor*->void "void ($(GdkGC *,GdkColor *))")
    (type GdkGC*,GdkFont*->void "void ($(GdkGC *,GdkFont *))")
    (type GdkGC*,GdkFunction->void "void ($(GdkGC *,GdkFunction))")
    (type GdkGC*,GdkFill->void "void ($(GdkGC *,GdkFill))")
    (type GdkGC*,GdkPixmap*->void "void ($(GdkGC *,GdkPixmap *))")
    (type GdkGC*,gint,gint->void "void ($(GdkGC *,gint,gint))")
    (type GdkGC*,GdkBitmap*->void "void ($(GdkGC *,GdkBitmap *))")
    (type GdkGC*,GdkRectangle*->void "void ($(GdkGC *,GdkRectangle *))")
    (type GdkGC*,GdkRegion*->void "void ($(GdkGC *,GdkRegion *))")
    (type GdkGC*,GdkSubwindowMode->void "void ($(GdkGC *,GdkSubwindowMode))")
    (type GdkGC*,gboolean->void "void ($(GdkGC *,gboolean))")
    (type GdkGC*,gint,GdkLineStyle,GdkCapStyle,GdkJoinStyle->void "void ($(GdkGC *,gint,GdkLineStyle,GdkCapStyle,GdkJoinStyle))")
    (type GdkGC*,GdkGC*->void "void ($(GdkGC *,GdkGC *))")
    (type GdkGC*,GdkColormap*->void "void ($(GdkGC *,GdkColormap *))")
    (type GdkGC*->GdkColormap* "GdkColormap *($(GdkGC *))")
    (type GdkGC*->GdkScreen* "GdkScreen *($(GdkGC *))")
    (type guint32->gulong "gulong ($(guint32))")
    (type GdkGC*,guint32->void "void ($(GdkGC *,guint32))")
    (type GdkColormap*,GdkColor*->void "void ($(GdkColormap *,GdkColor *))")
    (type GdkDrawable*,GdkGC*,gint,gint,gint,gint,GdkRgbDither,guchar*,gint->void "void ($(GdkDrawable *,GdkGC *,gint,gint,gint,gint,GdkRgbDither,guchar *,gint))")
    (type GdkDrawable*,GdkGC*,gint,gint,gint,gint,GdkRgbDither,guchar*,gint,gint,gint->void "void ($(GdkDrawable *,GdkGC *,gint,gint,gint,gint,GdkRgbDither,guchar *,gint,gint,gint))")
    (type GdkDrawable*,GdkGC*,gint,gint,gint,gint,GdkRgbDither,guchar*,gint,GdkRgbCmap*->void "void ($(GdkDrawable *,GdkGC *,gint,gint,gint,gint,GdkRgbDither,guchar *,gint,GdkRgbCmap *))")
    (type guint32*,gint->GdkRgbCmap* "GdkRgbCmap *($(guint32 *,gint))")
    (type GdkRgbCmap*->void "void ($(GdkRgbCmap *))")
    (type void->GdkVisual* "GdkVisual *($(void))")
    (type GdkColormap*->gboolean "gboolean ($(GdkColormap *))")
    (type GdkDrawable*,gchar*,gpointer,GDestroyNotify->void "void ($(GdkDrawable *,gchar *,gpointer,GDestroyNotify))")
    (type GdkDrawable*,gchar*->gpointer "gpointer ($(GdkDrawable *,gchar *))")
    (type GdkDrawable*->GdkDisplay* "GdkDisplay *($(GdkDrawable *))")
    (type GdkDrawable*->GdkDrawable* "GdkDrawable *($(GdkDrawable *))")
    (type GdkDrawable*->void "void ($(GdkDrawable *))")
    (type GdkDrawable*,GdkGC*,gint,gint->void "void ($(GdkDrawable *,GdkGC *,gint,gint))")
    (type GdkDrawable*,GdkGC*,gint,gint,gint,gint->void "void ($(GdkDrawable *,GdkGC *,gint,gint,gint,gint))")
    (type GdkDrawable*,GdkFont*,GdkGC*,gint,gint,gchar*->void "void ($(GdkDrawable *,GdkFont *,GdkGC *,gint,gint,gchar *))")
    (type GdkDrawable*,GdkGC*,gint,gint,PangoLayoutLine*->void "void ($(GdkDrawable *,GdkGC *,gint,gint,PangoLayoutLine *))")
    (type GdkDrawable*,GdkGC*,gint,gint,PangoLayout*->void "void ($(GdkDrawable *,GdkGC *,gint,gint,PangoLayout *))")
    (type GdkDrawable*,GdkGC*,gint,gint,PangoLayoutLine*,GdkColor*,GdkColor*->void "void ($(GdkDrawable *,GdkGC *,gint,gint,PangoLayoutLine *,GdkColor *,GdkColor *))")
    (type GdkDrawable*,GdkGC*,gint,gint,PangoLayout*,GdkColor*,GdkColor*->void "void ($(GdkDrawable *,GdkGC *,gint,gint,PangoLayout *,GdkColor *,GdkColor *))")
    (type GdkDrawable*,gint,gint,gint,gint,GdkColor*,guint16->gboolean "gboolean ($(GdkDrawable *,gint,gint,gint,gint,GdkColor *,guint16))")
    (type GdkFont*->GdkFont* "GdkFont *($(GdkFont *))")
    (type GdkFont*->void "void ($(GdkFont *))")
    (type GdkFont*->gint "gint ($(GdkFont *))")
    (type GdkFont*,GdkFont*->gboolean "gboolean ($(GdkFont *,GdkFont *))")
    (type GdkDisplay*,gchar*->GdkFont* "GdkFont *($(GdkDisplay *,gchar *))")
    (type GdkDisplay*,PangoFontDescription*->GdkFont* "GdkFont *($(GdkDisplay *,PangoFontDescription *))")
    (type gchar*->GdkFont* "GdkFont *($(gchar *))")
    (type PangoFontDescription*->GdkFont* "GdkFont *($(PangoFontDescription *))")
    (type GdkFont*,gchar*->gint "gint ($(GdkFont *,gchar *))")
    (type GdkFont*,gchar*,gint->gint "gint ($(GdkFont *,gchar *,gint))")
    (type GdkFont*,GdkWChar*,gint->gint "gint ($(GdkFont *,GdkWChar *,gint))")
    (type GdkFont*,gchar->gint "gint ($(GdkFont *,gchar))")
    (type GdkFont*,GdkWChar->gint "gint ($(GdkFont *,GdkWChar))")
    (type GdkFont*,gchar*,gint,gint*,gint*,gint*,gint*,gint*->void "void ($(GdkFont *,gchar *,gint,gint *,gint *,gint *,gint *,gint *))")
    (type GdkFont*,GdkWChar*,gint,gint*,gint*,gint*,gint*,gint*->void "void ($(GdkFont *,GdkWChar *,gint,gint *,gint *,gint *,gint *,gint *))")
    (type GdkFont*,gchar*,gint*,gint*,gint*,gint*,gint*->void "void ($(GdkFont *,gchar *,gint *,gint *,gint *,gint *,gint *))")
    (type GdkFont*->GdkDisplay* "GdkDisplay *($(GdkFont *))")
    (type GdkImageType,GdkVisual*,gint,gint->GdkImage* "GdkImage *($(GdkImageType,GdkVisual *,gint,gint))")
    (type GdkImage*->GdkImage* "GdkImage *($(GdkImage *))")
    (type GdkImage*->void "void ($(GdkImage *))")
    (type GdkImage*,gint,gint,guint32->void "void ($(GdkImage *,gint,gint,guint32))")
    (type GdkImage*,gint,gint->guint32 "guint32 ($(GdkImage *,gint,gint))")
    (type GdkImage*,GdkColormap*->void "void ($(GdkImage *,GdkColormap *))")
    (type GdkImage*->GdkColormap* "GdkColormap *($(GdkImage *))")
    (type void->GdkKeymap* "GdkKeymap *($(void))")
    (type GdkDisplay*->GdkKeymap* "GdkKeymap *($(GdkDisplay *))")
    (type GdkKeymap*,GdkKeymapKey*->guint "guint ($(GdkKeymap *,GdkKeymapKey *))")
    (type GdkKeymap*,guint,GdkModifierType,gint,guint*,gint*,gint*,GdkModifierType*->gboolean "gboolean ($(GdkKeymap *,guint,GdkModifierType,gint,guint *,gint *,gint *,GdkModifierType *))")
    (type GdkKeymapKey** (pointer GdkKeymapKey*) "GdkKeymapKey **")
    (type GdkKeymap*,guint,GdkKeymapKey**,gint*->gboolean "gboolean ($(GdkKeymap *,guint,GdkKeymapKey **,gint *))")
    (type guint** (pointer guint*) "guint **")
    (type GdkKeymap*,guint,GdkKeymapKey**,guint**,gint*->gboolean "gboolean ($(GdkKeymap *,guint,GdkKeymapKey **,guint **,gint *))")
    (type GdkKeymap*->PangoDirection "PangoDirection ($(GdkKeymap *))")
    (type gchar*->guint "guint ($(gchar *))")
    (type guint,guint*,guint*->void "void ($(guint,guint *,guint *))")
    (type guint->guint32 "guint32 ($(guint))")
    (type guint32->guint "guint ($(guint32))")
    (type void->GdkDisplayManager* "GdkDisplayManager *($(void))")
    (type GdkDisplayManager*->GdkDisplay* "GdkDisplay *($(GdkDisplayManager *))")
    (type GdkDisplayManager*->GSList* "GSList *($(GdkDisplayManager *))")
    (type GdkScreen*->PangoRenderer* "PangoRenderer *($(GdkScreen *))")
    (type GdkPangoRenderer*,GdkDrawable*->void "void ($(GdkPangoRenderer *,GdkDrawable *))")
    (type GdkPangoRenderer*,GdkGC*->void "void ($(GdkPangoRenderer *,GdkGC *))")
    (type GdkPangoRenderer*,PangoRenderPart,GdkBitmap*->void "void ($(GdkPangoRenderer *,PangoRenderPart,GdkBitmap *))")
    (type GdkPangoRenderer*,PangoRenderPart,GdkColor*->void "void ($(GdkPangoRenderer *,PangoRenderPart,GdkColor *))")
    (type GdkScreen*->PangoContext* "PangoContext *($(GdkScreen *))")
    (type void->PangoContext* "PangoContext *($(void))")
    (type PangoContext*,GdkColormap*->void "void ($(PangoContext *,GdkColormap *))")
    (type PangoLayoutLine*,gint,gint,gint*,gint->GdkRegion* "GdkRegion *($(PangoLayoutLine *,gint,gint,gint *,gint))")
    (type PangoLayout*,gint,gint,gint*,gint->GdkRegion* "GdkRegion *($(PangoLayout *,gint,gint,gint *,gint))")
    (type GdkBitmap*->PangoAttribute* "PangoAttribute *($(GdkBitmap *))")
    (type GdkPixbuf*,GdkBitmap*,int,int,int,int,int,int,int->void "void ($(GdkPixbuf *,GdkBitmap *,int,int,int,int,int,int,int))")
    (type GdkPixbuf*,GdkDrawable*,GdkGC*,int,int,int,int,int,int,GdkRgbDither,int,int->void "void ($(GdkPixbuf *,GdkDrawable *,GdkGC *,int,int,int,int,int,int,GdkRgbDither,int,int))")
    (type GdkPixbuf*,GdkDrawable*,int,int,int,int,int,int,GdkPixbufAlphaMode,int,GdkRgbDither,int,int->void "void ($(GdkPixbuf *,GdkDrawable *,int,int,int,int,int,int,GdkPixbufAlphaMode,int,GdkRgbDither,int,int))")
    (type GdkPixmap** (pointer GdkPixmap*) "GdkPixmap **")
    (type GdkBitmap** (pointer GdkBitmap*) "GdkBitmap **")
    (type GdkPixbuf*,GdkColormap*,GdkPixmap**,GdkBitmap**,int->void "void ($(GdkPixbuf *,GdkColormap *,GdkPixmap **,GdkBitmap **,int))")
    (type GdkPixbuf*,GdkPixmap**,GdkBitmap**,int->void "void ($(GdkPixbuf *,GdkPixmap **,GdkBitmap **,int))")
    (type GdkPixbuf*,GdkDrawable*,GdkColormap*,int,int,int,int,int,int->GdkPixbuf* "GdkPixbuf *($(GdkPixbuf *,GdkDrawable *,GdkColormap *,int,int,int,int,int,int))")
    (type GdkPixbuf*,GdkImage*,GdkColormap*,int,int,int,int,int,int->GdkPixbuf* "GdkPixbuf *($(GdkPixbuf *,GdkImage *,GdkColormap *,int,int,int,int,int,int))")
    (type GdkDrawable*,gint,gint,gint->GdkPixmap* "GdkPixmap *($(GdkDrawable *,gint,gint,gint))")
    (type GdkDrawable*,gchar*,gint,gint->GdkBitmap* "GdkBitmap *($(GdkDrawable *,gchar *,gint,gint))")
    (type GdkDrawable*,gchar*,gint,gint,gint,GdkColor*,GdkColor*->GdkPixmap* "GdkPixmap *($(GdkDrawable *,gchar *,gint,gint,gint,GdkColor *,GdkColor *))")
    (type GdkDrawable*,GdkBitmap**,GdkColor*,gchar*->GdkPixmap* "GdkPixmap *($(GdkDrawable *,GdkBitmap **,GdkColor *,gchar *))")
    (type GdkDrawable*,GdkColormap*,GdkBitmap**,GdkColor*,gchar*->GdkPixmap* "GdkPixmap *($(GdkDrawable *,GdkColormap *,GdkBitmap **,GdkColor *,gchar *))")
    (type GdkDrawable*,GdkBitmap**,GdkColor*,gchar**->GdkPixmap* "GdkPixmap *($(GdkDrawable *,GdkBitmap **,GdkColor *,gchar **))")
    (type GdkDrawable*,GdkColormap*,GdkBitmap**,GdkColor*,gchar**->GdkPixmap* "GdkPixmap *($(GdkDrawable *,GdkColormap *,GdkBitmap **,GdkColor *,gchar **))")
    (type GdkNativeWindow->GdkPixmap* "GdkPixmap *($(GdkNativeWindow))")
    (type GdkDisplay*,GdkNativeWindow->GdkPixmap* "GdkPixmap *($(GdkDisplay *,GdkNativeWindow))")
    (type gchar*,gboolean->GdkAtom "GdkAtom ($(gchar *,gboolean))")
    (type GdkAtom->gchar* "gchar *($(GdkAtom))")
    (type GdkWindow*,GdkAtom,GdkAtom,gulong,gulong,gint,GdkAtom*,gint*,gint*,guchar**->gboolean "gboolean ($(GdkWindow *,GdkAtom,GdkAtom,gulong,gulong,gint,GdkAtom *,gint *,gint *,guchar **))")
    (type GdkWindow*,GdkAtom,GdkAtom,gint,GdkPropMode,guchar*,gint->void "void ($(GdkWindow *,GdkAtom,GdkAtom,gint,GdkPropMode,guchar *,gint))")
    (type GdkWindow*,GdkAtom->void "void ($(GdkWindow *,GdkAtom))")
    (type GdkAtom,gint,guchar*,gint,gchar***->gint "gint ($(GdkAtom,gint,guchar *,gint,gchar ***))")
    (type gchar*,GdkAtom*,gint*,guchar**,gint*->gboolean "gboolean ($(gchar *,GdkAtom *,gint *,guchar **,gint *))")
    (type gchar*,GdkAtom*,gint*,guchar**,gint*->gint "gint ($(gchar *,GdkAtom *,gint *,guchar **,gint *))")
    (type GdkDisplay*,GdkAtom,gint,guchar*,gint,gchar***->gint "gint ($(GdkDisplay *,GdkAtom,gint,guchar *,gint,gchar ***))")
    (type GdkDisplay*,gchar*,GdkAtom*,gint*,guchar**,gint*->gint "gint ($(GdkDisplay *,gchar *,GdkAtom *,gint *,guchar **,gint *))")
    (type GdkDisplay*,gchar*,GdkAtom*,gint*,guchar**,gint*->gboolean "gboolean ($(GdkDisplay *,gchar *,GdkAtom *,gint *,guchar **,gint *))")
    (type guchar*->void "void ($(guchar *))")
    (type void->GdkRegion* "GdkRegion *($(void))")
    (type GdkPoint*,gint,GdkFillRule->GdkRegion* "GdkRegion *($(GdkPoint *,gint,GdkFillRule))")
    (type GdkRegion*->GdkRegion* "GdkRegion *($(GdkRegion *))")
    (type GdkRectangle*->GdkRegion* "GdkRegion *($(GdkRectangle *))")
    (type GdkRegion*->void "void ($(GdkRegion *))")
    (type GdkRegion*,GdkRectangle*->void "void ($(GdkRegion *,GdkRectangle *))")
    (type GdkRectangle** (pointer GdkRectangle*) "GdkRectangle **")
    (type GdkRegion*,GdkRectangle**,gint*->void "void ($(GdkRegion *,GdkRectangle **,gint *))")
    (type GdkRegion*->gboolean "gboolean ($(GdkRegion *))")
    (type GdkRegion*,GdkRegion*->gboolean "gboolean ($(GdkRegion *,GdkRegion *))")
    (type GdkRegion*,int,int->gboolean "gboolean ($(GdkRegion *,int,int))")
    (type GdkRegion*,GdkRectangle*->GdkOverlapType "GdkOverlapType ($(GdkRegion *,GdkRectangle *))")
    (type GdkRegion*,gint,gint->void "void ($(GdkRegion *,gint,gint))")
    (type GdkRegion*,GdkRegion*->void "void ($(GdkRegion *,GdkRegion *))")
    (type GdkRegion*,GdkSpan*,int,gboolean,GdkSpanFunc,gpointer->void "void ($(GdkRegion *,GdkSpan *,int,gboolean,GdkSpanFunc,gpointer))")
    (type GdkScreen*->GdkColormap* "GdkColormap *($(GdkScreen *))")
    (type GdkScreen*,GdkColormap*->void "void ($(GdkScreen *,GdkColormap *))")
    (type GdkScreen*->GdkVisual* "GdkVisual *($(GdkScreen *))")
    (type GdkScreen*->GdkWindow* "GdkWindow *($(GdkScreen *))")
    (type GdkScreen*->GdkDisplay* "GdkDisplay *($(GdkScreen *))")
    (type GdkScreen*->gint "gint ($(GdkScreen *))")
    (type GdkScreen*->GList* "GList *($(GdkScreen *))")
    (type GdkScreen*->gchar* "gchar *($(GdkScreen *))")
    (type GdkScreen*,gint,GdkRectangle*->void "void ($(GdkScreen *,gint,GdkRectangle *))")
    (type GdkScreen*,gint,gint->gint "gint ($(GdkScreen *,gint,gint))")
    (type GdkScreen*,GdkWindow*->gint "gint ($(GdkScreen *,GdkWindow *))")
    (type GdkScreen*,GdkEvent*->void "void ($(GdkScreen *,GdkEvent *))")
    (type void->GdkScreen* "GdkScreen *($(void))")
    (type GdkScreen*,gchar*,GValue*->gboolean "gboolean ($(GdkScreen *,gchar *,GValue *))")
    (type GdkWindow*,GdkAtom,guint32,gboolean->gboolean "gboolean ($(GdkWindow *,GdkAtom,guint32,gboolean))")
    (type GdkAtom->GdkWindow* "GdkWindow *($(GdkAtom))")
    (type GdkDisplay*,GdkWindow*,GdkAtom,guint32,gboolean->gboolean "gboolean ($(GdkDisplay *,GdkWindow *,GdkAtom,guint32,gboolean))")
    (type GdkDisplay*,GdkAtom->GdkWindow* "GdkWindow *($(GdkDisplay *,GdkAtom))")
    (type GdkWindow*,GdkAtom,GdkAtom,guint32->void "void ($(GdkWindow *,GdkAtom,GdkAtom,guint32))")
    (type GdkWindow*,guchar**,GdkAtom*,gint*->gboolean "gboolean ($(GdkWindow *,guchar **,GdkAtom *,gint *))")
    (type guint32,GdkAtom,GdkAtom,GdkAtom,guint32->void "void ($(guint32,GdkAtom,GdkAtom,GdkAtom,guint32))")
    (type GdkDisplay*,guint32,GdkAtom,GdkAtom,GdkAtom,guint32->void "void ($(GdkDisplay *,guint32,GdkAtom,GdkAtom,GdkAtom,guint32))")
    (type GdkScreen*,gchar*,gchar**,gchar**,GSpawnFlags,GSpawnChildSetupFunc,gpointer,gint*,GError**->gboolean "gboolean ($(GdkScreen *,gchar *,gchar **,gchar **,GSpawnFlags,GSpawnChildSetupFunc,gpointer,gint *,GError **))")
    (type GdkScreen*,gchar*,gchar**,gchar**,GSpawnFlags,GSpawnChildSetupFunc,gpointer,gint*,gint*,gint*,gint*,GError**->gboolean "gboolean ($(GdkScreen *,gchar *,gchar **,gchar **,GSpawnFlags,GSpawnChildSetupFunc,gpointer,gint *,gint *,gint *,gint *,GError **))")
    (type GdkScreen*,gchar*,GError**->gboolean "gboolean ($(GdkScreen *,gchar *,GError **))")
    (type void->GdkVisualType "GdkVisualType ($(void))")
    (type gint->GdkVisual* "GdkVisual *($(gint))")
    (type GdkVisualType->GdkVisual* "GdkVisual *($(GdkVisualType))")
    (type gint,GdkVisualType->GdkVisual* "GdkVisual *($(gint,GdkVisualType))")
    (type gint**,gint*->void "void ($(gint **,gint *))")
    (type GdkVisualType* (pointer GdkVisualType) "GdkVisualType *")
    (type GdkVisualType** (pointer GdkVisualType*) "GdkVisualType **")
    (type GdkVisualType**,gint*->void "void ($(GdkVisualType **,gint *))")
    (type GdkVisual*->GdkScreen* "GdkScreen *($(GdkVisual *))")
    (type GdkWindow*,GdkWindowAttr*,gint->GdkWindow* "GdkWindow *($(GdkWindow *,GdkWindowAttr *,gint))")
    (type GdkWindow*->void "void ($(GdkWindow *))")
    (type GdkWindow*->GdkWindowType "GdkWindowType ($(GdkWindow *))")
    (type gint*,gint*->GdkWindow* "GdkWindow *($(gint *,gint *))")
    (type GdkWindow*,gint,gint->void "void ($(GdkWindow *,gint,gint))")
    (type GdkWindow*,gint,gint,gint,gint->void "void ($(GdkWindow *,gint,gint,gint,gint))")
    (type GdkWindow*,GdkWindow*,gint,gint->void "void ($(GdkWindow *,GdkWindow *,gint,gint))")
    (type GdkWindow*,guint32->void "void ($(GdkWindow *,guint32))")
    (type GdkWindow*,gpointer->void "void ($(GdkWindow *,gpointer))")
    (type GdkWindow*,gboolean->void "void ($(GdkWindow *,gboolean))")
    (type GdkWindow*,GdkFilterFunc,gpointer->void "void ($(GdkWindow *,GdkFilterFunc,gpointer))")
    (type GdkWindow*,GdkBitmap*,gint,gint->void "void ($(GdkWindow *,GdkBitmap *,gint,gint))")
    (type GdkWindow*,GdkRegion*,gint,gint->void "void ($(GdkWindow *,GdkRegion *,gint,gint))")
    (type GdkWindow*->gboolean "gboolean ($(GdkWindow *))")
    (type GdkWindow*->GdkWindowState "GdkWindowState ($(GdkWindow *))")
    (type GdkWindow*,gboolean->gboolean "gboolean ($(GdkWindow *,gboolean))")
    (type GdkNativeWindow->GdkWindow* "GdkWindow *($(GdkNativeWindow))")
    (type GdkDisplay*,GdkNativeWindow->GdkWindow* "GdkWindow *($(GdkDisplay *,GdkNativeWindow))")
    (type GdkWindow*,gint,gint,gint,gint,gint,gint,gint->void "void ($(GdkWindow *,gint,gint,gint,gint,gint,gint,gint))")
    (type GdkWindow*,GdkWindowTypeHint->void "void ($(GdkWindow *,GdkWindowTypeHint))")
    (type GdkWindow*,GdkGeometry*,GdkWindowHints->void "void ($(GdkWindow *,GdkGeometry *,GdkWindowHints))")
    (type GdkWindow*,GdkRectangle*->void "void ($(GdkWindow *,GdkRectangle *))")
    (type GdkWindow*,GdkRegion*->void "void ($(GdkWindow *,GdkRegion *))")
    (type GdkWindow*,gchar*->void "void ($(GdkWindow *,gchar *))")
    (type GdkWindow*,GdkWindow*->void "void ($(GdkWindow *,GdkWindow *))")
    (type GdkWindow*,GdkColor*->void "void ($(GdkWindow *,GdkColor *))")
    (type GdkWindow*,GdkPixmap*,gboolean->void "void ($(GdkWindow *,GdkPixmap *,gboolean))")
    (type GdkWindow*,GdkCursor*->void "void ($(GdkWindow *,GdkCursor *))")
    (type GdkWindow*,gpointer*->void "void ($(GdkWindow *,gpointer *))")
    (type GdkWindow*,gint*,gint*,gint*,gint*,gint*->void "void ($(GdkWindow *,gint *,gint *,gint *,gint *,gint *))")
    (type GdkWindow*,gint*,gint*->void "void ($(GdkWindow *,gint *,gint *))")
    (type GdkWindow*,gint*,gint*->gint "gint ($(GdkWindow *,gint *,gint *))")
    (type GdkWindow*,gint*,gint*->gboolean "gboolean ($(GdkWindow *,gint *,gint *))")
    (type GdkWindow*->GdkWindow* "GdkWindow *($(GdkWindow *))")
    (type GdkWindow*->GList* "GList *($(GdkWindow *))")
    (type GdkWindow*->GdkEventMask "GdkEventMask ($(GdkWindow *))")
    (type GdkWindow*,GdkEventMask->void "void ($(GdkWindow *,GdkEventMask))")
    (type GdkWindow*,GList*->void "void ($(GdkWindow *,GList *))")
    (type GdkWindow*,GdkWindow*,GdkPixmap*,GdkBitmap*->void "void ($(GdkWindow *,GdkWindow *,GdkPixmap *,GdkBitmap *))")
    (type GdkWindow*,GdkWMDecoration->void "void ($(GdkWindow *,GdkWMDecoration))")
    (type GdkWMDecoration* (pointer GdkWMDecoration) "GdkWMDecoration *")
    (type GdkWindow*,GdkWMDecoration*->gboolean "gboolean ($(GdkWindow *,GdkWMDecoration *))")
    (type GdkWindow*,GdkWMFunction->void "void ($(GdkWindow *,GdkWMFunction))")
    (type GdkWindow*,GdkWindowEdge,gint,gint,gint,guint32->void "void ($(GdkWindow *,GdkWindowEdge,gint,gint,gint,guint32))")
    (type GdkWindow*,gint,gint,gint,guint32->void "void ($(GdkWindow *,gint,gint,gint,guint32))")
    (type GdkWindow*,GdkRectangle*,gboolean->void "void ($(GdkWindow *,GdkRectangle *,gboolean))")
    (type GdkWindow*,GdkRegion*,gboolean->void "void ($(GdkWindow *,GdkRegion *,gboolean))")
    (type GdkWindow*,gpointer->gboolean "gboolean ($(GdkWindow *,gpointer))")
    (type *GdkWindow*,gpointer->gboolean (function gboolean (GdkWindow* gpointer)) "gboolean ((*$)(GdkWindow *,gpointer))")
    (type GdkWindow*,GdkRegion*,*GdkWindow*,gpointer->gboolean,gpointer->void "void ($(GdkWindow *,GdkRegion *,gboolean ((*)(GdkWindow *,gpointer)),gpointer))")
    (type GdkWindow*->GdkRegion* "GdkRegion *($(GdkWindow *))")
    (type GdkGeometry*,guint,gint,gint,gint*,gint*->void "void ($(GdkGeometry *,guint,gint,gint,gint *,gint *))")
    (type GdkDrawable** (pointer GdkDrawable*) "GdkDrawable **")
    (type GdkWindow*,GdkDrawable**,gint*,gint*->void "void ($(GdkWindow *,GdkDrawable **,gint *,gint *))")
    (type GdkPointerHooks*->GdkPointerHooks* "GdkPointerHooks *($(GdkPointerHooks *))")
    (type void->GdkWindow* "GdkWindow *($(void))")
    (type gint*,gchar***->gboolean "gboolean ($(gint *,gchar ***))")
    (type void->string "char *($(void))")
    (type gint,GdkInputCondition,GdkInputFunction,gpointer,GdkDestroyNotify->gint "gint ($(gint,GdkInputCondition,GdkInputFunction,gpointer,GdkDestroyNotify))")
    (type gint,GdkInputCondition,GdkInputFunction,gpointer->gint "gint ($(gint,GdkInputCondition,GdkInputFunction,gpointer))")
    (type GdkWindow*,gboolean,GdkEventMask,GdkWindow*,GdkCursor*,guint32->GdkGrabStatus "GdkGrabStatus ($(GdkWindow *,gboolean,GdkEventMask,GdkWindow *,GdkCursor *,guint32))")
    (type GdkWindow*,gboolean,guint32->GdkGrabStatus "GdkGrabStatus ($(GdkWindow *,gboolean,guint32))")
    (type GdkDisplay*,GdkWindow**,gboolean*->gboolean "gboolean ($(GdkDisplay *,GdkWindow **,gboolean *))")
    (type GdkRectangle*,GdkRectangle*,GdkRectangle*->gboolean "gboolean ($(GdkRectangle *,GdkRectangle *,GdkRectangle *))")
    (type GdkRectangle*,GdkRectangle*,GdkRectangle*->void "void ($(GdkRectangle *,GdkRectangle *,GdkRectangle *))")
    (type GdkWChar*->gchar* "gchar *($(GdkWChar *))")
    (type GdkWChar*,gchar*,gint->gint "gint ($(GdkWChar *,gchar *,gint))")
    (type GdkEvent*,GdkNativeWindow->gboolean "gboolean ($(GdkEvent *,GdkNativeWindow))")
    (type GdkDisplay*,GdkEvent*,GdkNativeWindow->gboolean "gboolean ($(GdkDisplay *,GdkEvent *,GdkNativeWindow))")
    (type GCallback,GCallback->void "void ($(GCallback,GCallback))")
    (type void->GtkAccelGroup* "GtkAccelGroup *($(void))")
    (type GtkAccelGroup*->void "void ($(GtkAccelGroup *))")
    (type GtkAccelGroup*,guint,GdkModifierType,GtkAccelFlags,GClosure*->void "void ($(GtkAccelGroup *,guint,GdkModifierType,GtkAccelFlags,GClosure *))")
    (type GtkAccelGroup*,gchar*,GClosure*->void "void ($(GtkAccelGroup *,gchar *,GClosure *))")
    (type GtkAccelGroup*,GClosure*->gboolean "gboolean ($(GtkAccelGroup *,GClosure *))")
    (type GtkAccelGroup*,guint,GdkModifierType->gboolean "gboolean ($(GtkAccelGroup *,guint,GdkModifierType))")
    (type GtkAccelGroup*,GQuark,GObject*,guint,GdkModifierType->gboolean "gboolean ($(GtkAccelGroup *,GQuark,GObject *,guint,GdkModifierType))")
    (type GtkAccelGroup*,GObject*->void "void ($(GtkAccelGroup *,GObject *))")
    (type GObject*,guint,GdkModifierType->gboolean "gboolean ($(GObject *,guint,GdkModifierType))")
    (type GObject*->GSList* "GSList *($(GObject *))")
    (type GtkAccelGroup*,GtkAccelGroupFindFunc,gpointer->GtkAccelKey* "GtkAccelKey *($(GtkAccelGroup *,GtkAccelGroupFindFunc,gpointer))")
    (type GClosure*->GtkAccelGroup* "GtkAccelGroup *($(GClosure *))")
    (type guint,GdkModifierType->gboolean "gboolean ($(guint,GdkModifierType))")
    (type gchar*,guint*,GdkModifierType*->void "void ($(gchar *,guint *,GdkModifierType *))")
    (type guint,GdkModifierType->gchar* "gchar *($(guint,GdkModifierType))")
    (type GdkModifierType->void "void ($(GdkModifierType))")
    (type GtkAccelGroup*,guint,GdkModifierType,guint*->GtkAccelGroupEntry* "GtkAccelGroupEntry *($(GtkAccelGroup *,guint,GdkModifierType,guint *))")
    (type GtkAccelGroup*,GQuark->void "void ($(GtkAccelGroup *,GQuark))")
    (type GtkType->gpointer "gpointer ($(GtkType))")
    (type GtkType,GtkTypeInfo*->GtkType "GtkType ($(GtkType,GtkTypeInfo *))")
    (type GtkType->GtkEnumValue* "GtkEnumValue *($(GtkType))")
    (type GtkType->GtkFlagValue* "GtkFlagValue *($(GtkType))")
    (type GtkType,gchar*->GtkEnumValue* "GtkEnumValue *($(GtkType,gchar *))")
    (type GtkType,gchar*->GtkFlagValue* "GtkFlagValue *($(GtkType,gchar *))")
    (type void->GtkType "GtkType ($(void))")
    (type GtkType,gchar*,...gchar*->GtkObject* "GtkObject *($(GtkType,gchar *,...))")
    (type GtkObject*->GtkObject* "GtkObject *($(GtkObject *))")
    (type GtkObject*,GtkDestroyNotify,gpointer->void "void ($(GtkObject *,GtkDestroyNotify,gpointer))")
    (type GtkObject*,gchar*,gpointer->void "void ($(GtkObject *,gchar *,gpointer))")
    (type GtkObject*,gchar*,gpointer,GtkDestroyNotify->void "void ($(GtkObject *,gchar *,gpointer,GtkDestroyNotify))")
    (type GtkObject*,gchar*->void "void ($(GtkObject *,gchar *))")
    (type GtkObject*,gchar*->gpointer "gpointer ($(GtkObject *,gchar *))")
    (type GtkObject*,gpointer->void "void ($(GtkObject *,gpointer))")
    (type GtkObject*->gpointer "gpointer ($(GtkObject *))")
    (type GtkObject*,GQuark,gpointer->void "void ($(GtkObject *,GQuark,gpointer))")
    (type GtkObject*,GQuark,gpointer,GtkDestroyNotify->void "void ($(GtkObject *,GQuark,gpointer,GtkDestroyNotify))")
    (type GtkObject*,GQuark->gpointer "gpointer ($(GtkObject *,GQuark))")
    (type GtkObject*,GQuark->void "void ($(GtkObject *,GQuark))")
    (type GtkObject*,gchar*,...gchar*->void "void ($(GtkObject *,gchar *,...))")
    (type gchar*,GtkType,guint,guint->void "void ($(gchar *,GtkType,guint,guint))")
    (type gdouble,gdouble,gdouble,gdouble,gdouble,gdouble->GtkObject* "GtkObject *($(gdouble,gdouble,gdouble,gdouble,gdouble,gdouble))")
    (type GtkAdjustment*,gdouble,gdouble->void "void ($(GtkAdjustment *,gdouble,gdouble))")
    (type GtkAdjustment*->gdouble "gdouble ($(GtkAdjustment *))")
    (type GtkAdjustment*,gdouble->void "void ($(GtkAdjustment *,gdouble))")
    (type void->GtkStyle* "GtkStyle *($(void))")
    (type GtkStyle*,GdkWindow*->GtkStyle* "GtkStyle *($(GtkStyle *,GdkWindow *))")
    (type GtkStyle*->GdkFont* "GdkFont *($(GtkStyle *))")
    (type GtkStyle*,GdkFont*->void "void ($(GtkStyle *,GdkFont *))")
    (type GtkStyle*,GdkWindow*,gboolean,GtkStateType,GdkRectangle*,gint,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,gboolean,GtkStateType,GdkRectangle *,gint,gint,gint,gint))")
    (type GtkStyle*,gchar*->GtkIconSet* "GtkIconSet *($(GtkStyle *,gchar *))")
    (type GtkStyle*,GdkWindow*,GtkStateType,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,gint,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,gint,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkPoint*,gint,gboolean->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkPoint *,gint,gboolean))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GtkArrowType,gboolean,gint,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GtkArrowType,gboolean,gint,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,gint,gint,gint,gint,GtkPositionType,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,gint,gint,gint,gint,GtkPositionType,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,gint,gint,gint,gint,GtkPositionType->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,gint,gint,gint,gint,GtkPositionType))")
    (type GtkStyle*,GdkWindow*,gint,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,gint,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,gint,gint,gint,gint,GtkOrientation->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,gint,gint,gint,gint,GtkOrientation))")
    (type GtkStyle*,GdkWindow*,GtkStateType,gint,gint,GtkExpanderStyle->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,gint,gint,GtkExpanderStyle))")
    (type GtkStyle*,GdkWindow*,GtkStateType,gboolean,gint,gint,PangoLayout*->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,gboolean,gint,gint,PangoLayout *))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GdkWindowEdge,gint,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GdkWindowEdge,gint,gint,gint,gint))")
    (type GtkBorder*->GtkBorder* "GtkBorder *($(GtkBorder *))")
    (type GtkBorder*->void "void ($(GtkBorder *))")
    (type GtkStyle*,GType,GParamSpec*,GtkRcPropertyParser->GValue* "GValue *($(GtkStyle *,GType,GParamSpec *,GtkRcPropertyParser))")
    (type GtkStyle*,GtkSettings*->void "void ($(GtkStyle *,GtkSettings *))")
    (type GtkStyle*,GdkWindow*,GtkStateType,gint,gint,gchar*->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,gint,gint,gchar *))")
    (type GtkWidget*,GdkDrawable*,GdkRectangle*,GdkRectangle*,gboolean,GtkTextDirection,gboolean->void "void ($(GtkWidget *,GdkDrawable *,GdkRectangle *,GdkRectangle *,gboolean,GtkTextDirection,gboolean))")
    (type void->gchar** "gchar **($(void))")
    (type GtkWidget*->GtkStyle* "GtkStyle *($(GtkWidget *))")
    (type GtkSettings*,string,string,GType->GtkStyle* "GtkStyle *($(GtkSettings *,char *,char *,GType))")
    (type GtkSettings*,gboolean->gboolean "gboolean ($(GtkSettings *,gboolean))")
    (type GtkSettings*->void "void ($(GtkSettings *))")
    (type GtkSettings*,GScanner*,gchar*->gchar* "gchar *($(GtkSettings *,GScanner *,gchar *))")
    (type GtkRcStyle*,gchar*->void "void ($(GtkRcStyle *,gchar *))")
    (type void->GtkRcStyle* "GtkRcStyle *($(void))")
    (type GtkRcStyle*->void "void ($(GtkRcStyle *))")
    (type void->GScanner* "GScanner *($(void))")
    (type GScanner*,GdkColor*->guint "guint ($(GScanner *,GdkColor *))")
    (type GtkStateType* (pointer GtkStateType) "GtkStateType *")
    (type GScanner*,GtkStateType*->guint "guint ($(GScanner *,GtkStateType *))")
    (type GtkPathPriorityType* (pointer GtkPathPriorityType) "GtkPathPriorityType *")
    (type GScanner*,GtkPathPriorityType*->guint "guint ($(GScanner *,GtkPathPriorityType *))")
    (type GtkRcStyle*,GQuark,GQuark->GtkRcProperty* "GtkRcProperty *($(GtkRcStyle *,GQuark,GQuark))")
    (type GtkSettings*->gchar* "gchar *($(GtkSettings *))")
    (type void->GtkSettings* "GtkSettings *($(void))")
    (type GdkScreen*->GtkSettings* "GtkSettings *($(GdkScreen *))")
    (type GParamSpec*,GtkRcPropertyParser->void "void ($(GParamSpec *,GtkRcPropertyParser))")
    (type GtkSettings*,gchar*,GtkSettingsValue*->void "void ($(GtkSettings *,gchar *,GtkSettingsValue *))")
    (type GtkSettings*,gchar*,gchar*,gchar*->void "void ($(GtkSettings *,gchar *,gchar *,gchar *))")
    (type GtkSettings*,gchar*,glong,gchar*->void "void ($(GtkSettings *,gchar *,glong,gchar *))")
    (type GtkSettings*,gchar*,gdouble,gchar*->void "void ($(GtkSettings *,gchar *,gdouble,gchar *))")
    (type GdkEventSetting*->void "void ($(GdkEventSetting *))")
    (type GType->GtkRcPropertyParser "GtkRcPropertyParser ($(GType))")
    (type GtkRcPropertyParser,GValue*,GParamSpec*,GValue*->gboolean "gboolean ($(GtkRcPropertyParser,GValue *,GParamSpec *,GValue *))")
    (type gchar*->AtkStateType "AtkStateType ($(gchar *))")
    (type AtkStateType->gchar* "gchar *($(AtkStateType))")
    (type gchar*->AtkRole "AtkRole ($(gchar *))")
    (type AtkObject*,AtkState,gboolean->void "void ($(AtkObject *,AtkState,gboolean))")
    (type AtkRole->gchar* "gchar *($(AtkRole))")
    (type AtkObject*,AtkRelationType,AtkObject*->gboolean "gboolean ($(AtkObject *,AtkRelationType,AtkObject *))")
    (type GType,gchar*,...gchar*->GtkWidget* "GtkWidget *($(GType,gchar *,...))")
    (type GtkWidget*->GtkWidget* "GtkWidget *($(GtkWidget *))")
    (type GtkWidget** (pointer GtkWidget*) "GtkWidget **")
    (type GtkWidget*,GtkWidget**->void "void ($(GtkWidget *,GtkWidget **))")
    (type GtkWidget*,gchar*,...gchar*->void "void ($(GtkWidget *,gchar *,...))")
    (type GtkWidget*,gint,gint,gint,gint->void "void ($(GtkWidget *,gint,gint,gint,gint))")
    (type GtkWidget*,GdkRectangle*->void "void ($(GtkWidget *,GdkRectangle *))")
    (type GtkWidget*,gchar*,GtkAccelGroup*,guint,GdkModifierType,GtkAccelFlags->void "void ($(GtkWidget *,gchar *,GtkAccelGroup *,guint,GdkModifierType,GtkAccelFlags))")
    (type GtkWidget*,GtkAccelGroup*,guint,GdkModifierType->gboolean "gboolean ($(GtkWidget *,GtkAccelGroup *,guint,GdkModifierType))")
    (type GtkWidget*,gchar*,GtkAccelGroup*->void "void ($(GtkWidget *,gchar *,GtkAccelGroup *))")
    (type GtkWidget*,gboolean*->gchar* "gchar *($(GtkWidget *,gboolean *))")
    (type GtkWidget*->GList* "GList *($(GtkWidget *))")
    (type GtkWidget*,GdkEvent*->gint "gint ($(GtkWidget *,GdkEvent *))")
    (type GtkWidget*,GtkAdjustment*,GtkAdjustment*->gboolean "gboolean ($(GtkWidget *,GtkAdjustment *,GtkAdjustment *))")
    (type GtkWidget*,GdkRectangle*,GdkRectangle*->gboolean "gboolean ($(GtkWidget *,GdkRectangle *,GdkRectangle *))")
    (type GtkWidget*,GdkRegion*->GdkRegion* "GdkRegion *($(GtkWidget *,GdkRegion *))")
    (type GtkWidget*,gchar*->void "void ($(GtkWidget *,gchar *))")
    (type GtkWidget*->gchar* "gchar *($(GtkWidget *))")
    (type GtkWidget*,GdkWindow*->void "void ($(GtkWidget *,GdkWindow *))")
    (type GtkWidget*->GdkWindow* "GdkWindow *($(GtkWidget *))")
    (type GtkWidget*,gint,gint->void "void ($(GtkWidget *,gint,gint))")
    (type GtkWidget*,gint*,gint*->void "void ($(GtkWidget *,gint *,gint *))")
    (type GtkWidget*,gint->void "void ($(GtkWidget *,gint))")
    (type GtkWidget*,GdkExtensionMode->void "void ($(GtkWidget *,GdkExtensionMode))")
    (type GtkWidget*->GdkExtensionMode "GdkExtensionMode ($(GtkWidget *))")
    (type GtkWidget*,GType->GtkWidget* "GtkWidget *($(GtkWidget *,GType))")
    (type GtkWidget*->GdkColormap* "GdkColormap *($(GtkWidget *))")
    (type GtkWidget*->GdkVisual* "GdkVisual *($(GtkWidget *))")
    (type GtkWidget*->GdkScreen* "GdkScreen *($(GtkWidget *))")
    (type GtkWidget*->GdkDisplay* "GdkDisplay *($(GtkWidget *))")
    (type GtkWidget*->GtkSettings* "GtkSettings *($(GtkWidget *))")
    (type GtkWidget*,GdkAtom->GtkClipboard* "GtkClipboard *($(GtkWidget *,GdkAtom))")
    (type GtkWidget*,GdkColormap*->void "void ($(GtkWidget *,GdkColormap *))")
    (type GtkWidget*->gint "gint ($(GtkWidget *))")
    (type GtkWidget*,GtkWidget*->gboolean "gboolean ($(GtkWidget *,GtkWidget *))")
    (type GtkWidget*,GtkWidget*,gint,gint,gint*,gint*->gboolean "gboolean ($(GtkWidget *,GtkWidget *,gint,gint,gint *,gint *))")
    (type GtkWidget*,GtkRcStyle*->void "void ($(GtkWidget *,GtkRcStyle *))")
    (type GtkWidget*->GtkRcStyle* "GtkRcStyle *($(GtkWidget *))")
    (type GtkWidget*,GtkStateType,GdkColor*->void "void ($(GtkWidget *,GtkStateType,GdkColor *))")
    (type GtkWidget*,PangoFontDescription*->void "void ($(GtkWidget *,PangoFontDescription *))")
    (type GtkWidget*->PangoContext* "PangoContext *($(GtkWidget *))")
    (type GtkWidget*,gchar*->PangoLayout* "PangoLayout *($(GtkWidget *,gchar *))")
    (type GtkWidget*,gchar*,GtkIconSize,gchar*->GdkPixbuf* "GdkPixbuf *($(GtkWidget *,gchar *,GtkIconSize,gchar *))")
    (type GtkWidgetClass*,GParamSpec*->void "void ($(GtkWidgetClass *,GParamSpec *))")
    (type GtkWidgetClass*,GParamSpec*,GtkRcPropertyParser->void "void ($(GtkWidgetClass *,GParamSpec *,GtkRcPropertyParser))")
    (type GtkWidgetClass*,gchar*->GParamSpec* "GParamSpec *($(GtkWidgetClass *,gchar *))")
    (type GtkWidgetClass*,guint*->GParamSpec** "GParamSpec **($(GtkWidgetClass *,guint *))")
    (type GtkWidget*,gchar*,GValue*->void "void ($(GtkWidget *,gchar *,GValue *))")
    (type GtkWidget*->GtkTextDirection "GtkTextDirection ($(GtkWidget *))")
    (type GtkTextDirection->void "void ($(GtkTextDirection))")
    (type void->GtkTextDirection "GtkTextDirection ($(void))")
    (type GtkWidget*,GdkBitmap*,gint,gint->void "void ($(GtkWidget *,GdkBitmap *,gint,gint))")
    (type GtkWidget*,guint*,gchar**,gchar**->void "void ($(GtkWidget *,guint *,gchar **,gchar **))")
    (type GtkRequisition*->GtkRequisition* "GtkRequisition *($(GtkRequisition *))")
    (type GtkRequisition*->void "void ($(GtkRequisition *))")
    (type GtkWidget*,gboolean->GtkWidgetAuxInfo* "GtkWidgetAuxInfo *($(GtkWidget *,gboolean))")
    (type GtkContainer*,guint->void "void ($(GtkContainer *,guint))")
    (type GtkContainer*->guint "guint ($(GtkContainer *))")
    (type GtkContainer*,GtkResizeMode->void "void ($(GtkContainer *,GtkResizeMode))")
    (type GtkContainer*->GtkResizeMode "GtkResizeMode ($(GtkContainer *))")
    (type GtkContainer*,GtkCallback,gpointer->void "void ($(GtkContainer *,GtkCallback,gpointer))")
    (type GtkContainer*,GtkCallback,GtkCallbackMarshal,gpointer,GtkDestroyNotify->void "void ($(GtkContainer *,GtkCallback,GtkCallbackMarshal,gpointer,GtkDestroyNotify))")
    (type GtkContainer*->GList* "GList *($(GtkContainer *))")
    (type GtkContainer*,GtkWidget*,GdkEventExpose*->void "void ($(GtkContainer *,GtkWidget *,GdkEventExpose *))")
    (type GtkContainer*,GList*->void "void ($(GtkContainer *,GList *))")
    (type GList** (pointer GList*) "GList **")
    (type GtkContainer*,GList**->gboolean "gboolean ($(GtkContainer *,GList **))")
    (type GtkContainer*,gboolean->void "void ($(GtkContainer *,gboolean))")
    (type GtkContainer*,GtkAdjustment*->void "void ($(GtkContainer *,GtkAdjustment *))")
    (type GtkContainer*->GtkAdjustment* "GtkAdjustment *($(GtkContainer *))")
    (type GtkContainerClass*,guint,GParamSpec*->void "void ($(GtkContainerClass *,guint,GParamSpec *))")
    (type GtkContainer*,GtkWidget*,gchar*,...gchar*->void "void ($(GtkContainer *,GtkWidget *,gchar *,...))")
    (type GtkContainer*,GtkWidget*,gchar*,GValue*->void "void ($(GtkContainer *,GtkWidget *,gchar *,GValue *))")
    (type GtkContainer*,GList*,GtkDirectionType,GtkWidget*->GList* "GList *($(GtkContainer *,GList *,GtkDirectionType,GtkWidget *))")
    (type GtkBin*->GtkWidget* "GtkWidget *($(GtkBin *))")
    (type GtkWindowType->GtkWidget* "GtkWidget *($(GtkWindowType))")
    (type GtkWindow*,gchar*->void "void ($(GtkWindow *,gchar *))")
    (type GtkWindow*->gchar* "gchar *($(GtkWindow *))")
    (type GtkWindow*,gchar*,gchar*->void "void ($(GtkWindow *,gchar *,gchar *))")
    (type GtkWindow*,GtkAccelGroup*->void "void ($(GtkWindow *,GtkAccelGroup *))")
    (type GtkWindow*,GtkWindowPosition->void "void ($(GtkWindow *,GtkWindowPosition))")
    (type GtkWindow*->gboolean "gboolean ($(GtkWindow *))")
    (type GtkWindow*->GtkWidget* "GtkWidget *($(GtkWindow *))")
    (type GtkWindow*,GtkWindow*->void "void ($(GtkWindow *,GtkWindow *))")
    (type GtkWindow*->GtkWindow* "GtkWindow *($(GtkWindow *))")
    (type GtkWindow*,GdkWindowTypeHint->void "void ($(GtkWindow *,GdkWindowTypeHint))")
    (type GtkWindow*->GdkWindowTypeHint "GdkWindowTypeHint ($(GtkWindow *))")
    (type GtkWindow*,gboolean->void "void ($(GtkWindow *,gboolean))")
    (type GtkWindow*,GdkGravity->void "void ($(GtkWindow *,GdkGravity))")
    (type GtkWindow*->GdkGravity "GdkGravity ($(GtkWindow *))")
    (type GtkWindow*,GtkWidget*,GdkGeometry*,GdkWindowHints->void "void ($(GtkWindow *,GtkWidget *,GdkGeometry *,GdkWindowHints))")
    (type GtkWindow*,GdkScreen*->void "void ($(GtkWindow *,GdkScreen *))")
    (type GtkWindow*->GdkScreen* "GdkScreen *($(GtkWindow *))")
    (type GtkWindow*,gint,gint,gint,gint->void "void ($(GtkWindow *,gint,gint,gint,gint))")
    (type GtkWindow*,gint*,gint*,gint*,gint*->void "void ($(GtkWindow *,gint *,gint *,gint *,gint *))")
    (type GtkWindow*,GList*->void "void ($(GtkWindow *,GList *))")
    (type GtkWindow*->GList* "GList *($(GtkWindow *))")
    (type GtkWindow*,GdkPixbuf*->void "void ($(GtkWindow *,GdkPixbuf *))")
    (type GtkWindow*,gchar*,GError**->gboolean "gboolean ($(GtkWindow *,gchar *,GError **))")
    (type GtkWindow*->GdkPixbuf* "GdkPixbuf *($(GtkWindow *))")
    (type GtkWindow*,guint,GtkWidget*->void "void ($(GtkWindow *,guint,GtkWidget *))")
    (type GtkWindow*,guint,GdkModifierType->gboolean "gboolean ($(GtkWindow *,guint,GdkModifierType))")
    (type GtkWindow*,GdkModifierType->void "void ($(GtkWindow *,GdkModifierType))")
    (type GtkWindow*->GdkModifierType "GdkModifierType ($(GtkWindow *))")
    (type GtkWindow*,GdkEventKey*->gboolean "gboolean ($(GtkWindow *,GdkEventKey *))")
    (type GtkWindow*,GdkWindowEdge,gint,gint,gint,guint32->void "void ($(GtkWindow *,GdkWindowEdge,gint,gint,gint,guint32))")
    (type GtkWindow*,gint,gint,gint,guint32->void "void ($(GtkWindow *,gint,gint,gint,guint32))")
    (type GtkWindow*,gint,gint,gint->void "void ($(GtkWindow *,gint,gint,gint))")
    (type GtkWindow*,gint,gint->void "void ($(GtkWindow *,gint,gint))")
    (type GtkWindow*,gint*,gint*->void "void ($(GtkWindow *,gint *,gint *))")
    (type GtkWindow*,gchar*->gboolean "gboolean ($(GtkWindow *,gchar *))")
    (type void->GtkWindowGroup* "GtkWindowGroup *($(void))")
    (type GtkWindowGroup*,GtkWindow*->void "void ($(GtkWindowGroup *,GtkWindow *))")
    (type GtkWindow*,guint->void "void ($(GtkWindow *,guint))")
    (type GtkWindow*,gint,gint,gint*,gint*->void "void ($(GtkWindow *,gint,gint,gint *,gint *))")
    (type GtkWindow*->GtkWindowGroup* "GtkWindowGroup *($(GtkWindow *))")
    (type GtkWindow*,GtkWindowKeysForeachFunc,gpointer->void "void ($(GtkWindow *,GtkWindowKeysForeachFunc,gpointer))")
    (type void->GtkWidget* "GtkWidget *($(void))")
    (type gchar*,GtkWindow*,GtkDialogFlags,gchar*,...gchar*->GtkWidget* "GtkWidget *($(gchar *,GtkWindow *,GtkDialogFlags,gchar *,...))")
    (type GtkDialog*,GtkWidget*,gint->void "void ($(GtkDialog *,GtkWidget *,gint))")
    (type GtkDialog*,gchar*,gint->GtkWidget* "GtkWidget *($(GtkDialog *,gchar *,gint))")
    (type GtkDialog*,gchar*,...gchar*->void "void ($(GtkDialog *,gchar *,...))")
    (type GtkDialog*,gint,gboolean->void "void ($(GtkDialog *,gint,gboolean))")
    (type GtkDialog*,gboolean->void "void ($(GtkDialog *,gboolean))")
    (type GtkDialog*->gboolean "gboolean ($(GtkDialog *))")
    (type GdkScreen*->gboolean "gboolean ($(GdkScreen *))")
    (type GtkDialog*,gint,...gint->void "void ($(GtkDialog *,gint,...))")
    (type GtkDialog*,gint,gint*->void "void ($(GtkDialog *,gint,gint *))")
    (type GtkDialog*->gint "gint ($(GtkDialog *))")
    (type GtkDialog*,GtkWidget*->gint "gint ($(GtkDialog *,GtkWidget *))")
    (type GtkWindow*,gchar*,...gchar*->void "void ($(GtkWindow *,gchar *,...))")
    (type GtkAboutDialog*->gchar* "gchar *($(GtkAboutDialog *))")
    (type GtkAboutDialog*,gchar*->void "void ($(GtkAboutDialog *,gchar *))")
    (type GtkAboutDialog*,gchar**->void "void ($(GtkAboutDialog *,gchar **))")
    (type GtkAboutDialog*->GdkPixbuf* "GdkPixbuf *($(GtkAboutDialog *))")
    (type GtkAboutDialog*,GdkPixbuf*->void "void ($(GtkAboutDialog *,GdkPixbuf *))")
    (type GtkAboutDialogActivateLinkFunc,gpointer,GDestroyNotify->GtkAboutDialogActivateLinkFunc "GtkAboutDialogActivateLinkFunc ($(GtkAboutDialogActivateLinkFunc,gpointer,GDestroyNotify))")
    (type GtkMisc*,gfloat,gfloat->void "void ($(GtkMisc *,gfloat,gfloat))")
    (type gfloat* (pointer gfloat) "gfloat *")
    (type GtkMisc*,gfloat*,gfloat*->void "void ($(GtkMisc *,gfloat *,gfloat *))")
    (type GtkMisc*,gint,gint->void "void ($(GtkMisc *,gint,gint))")
    (type GtkMisc*,gint*,gint*->void "void ($(GtkMisc *,gint *,gint *))")
    (type GtkMenuShell*,GtkWidget*,gboolean->void "void ($(GtkMenuShell *,GtkWidget *,gboolean))")
    (type GtkMenuShell*,guint,GtkWidget*->void "void ($(GtkMenuShell *,guint,GtkWidget *))")
    (type GtkMenu*,GtkWidget*,GtkWidget*,GtkMenuPositionFunc,gpointer,guint,guint32->void "void ($(GtkMenu *,GtkWidget *,GtkWidget *,GtkMenuPositionFunc,gpointer,guint,guint32))")
    (type GtkMenu*->void "void ($(GtkMenu *))")
    (type GtkMenu*->GtkWidget* "GtkWidget *($(GtkMenu *))")
    (type GtkMenu*,guint->void "void ($(GtkMenu *,guint))")
    (type GtkMenu*,GtkAccelGroup*->void "void ($(GtkMenu *,GtkAccelGroup *))")
    (type GtkMenu*->GtkAccelGroup* "GtkAccelGroup *($(GtkMenu *))")
    (type GtkMenu*,gchar*->void "void ($(GtkMenu *,gchar *))")
    (type GtkMenu*,GtkWidget*,GtkMenuDetachFunc->void "void ($(GtkMenu *,GtkWidget *,GtkMenuDetachFunc))")
    (type GtkMenu*,gboolean->void "void ($(GtkMenu *,gboolean))")
    (type GtkMenu*->gboolean "gboolean ($(GtkMenu *))")
    (type GtkMenu*->gchar* "gchar *($(GtkMenu *))")
    (type GtkMenu*,GtkWidget*,gint->void "void ($(GtkMenu *,GtkWidget *,gint))")
    (type GtkMenu*,GdkScreen*->void "void ($(GtkMenu *,GdkScreen *))")
    (type GtkMenu*,GtkWidget*,guint,guint,guint,guint->void "void ($(GtkMenu *,GtkWidget *,guint,guint,guint,guint))")
    (type GtkMenu*,gint->void "void ($(GtkMenu *,gint))")
    (type string->GtkWidget* "GtkWidget *($(char *))")
    (type GtkLabel*,string->void "void ($(GtkLabel *,char *))")
    (type GtkLabel*->gchar* "gchar *($(GtkLabel *))")
    (type GtkLabel*,PangoAttrList*->void "void ($(GtkLabel *,PangoAttrList *))")
    (type GtkLabel*->PangoAttrList* "PangoAttrList *($(GtkLabel *))")
    (type GtkLabel*,gchar*->void "void ($(GtkLabel *,gchar *))")
    (type GtkLabel*,gboolean->void "void ($(GtkLabel *,gboolean))")
    (type GtkLabel*->gboolean "gboolean ($(GtkLabel *))")
    (type GtkLabel*->guint "guint ($(GtkLabel *))")
    (type GtkLabel*,GtkWidget*->void "void ($(GtkLabel *,GtkWidget *))")
    (type GtkLabel*->GtkWidget* "GtkWidget *($(GtkLabel *))")
    (type GtkLabel*,GtkJustification->void "void ($(GtkLabel *,GtkJustification))")
    (type GtkLabel*->GtkJustification "GtkJustification ($(GtkLabel *))")
    (type GtkLabel*,PangoEllipsizeMode->void "void ($(GtkLabel *,PangoEllipsizeMode))")
    (type GtkLabel*->PangoEllipsizeMode "PangoEllipsizeMode ($(GtkLabel *))")
    (type GtkLabel*,gint->void "void ($(GtkLabel *,gint))")
    (type GtkLabel*->gint "gint ($(GtkLabel *))")
    (type GtkLabel*,gdouble->void "void ($(GtkLabel *,gdouble))")
    (type GtkLabel*->gdouble "gdouble ($(GtkLabel *))")
    (type GtkLabel*,gint,gint->void "void ($(GtkLabel *,gint,gint))")
    (type GtkLabel*,gint*,gint*->gboolean "gboolean ($(GtkLabel *,gint *,gint *))")
    (type GtkLabel*->PangoLayout* "PangoLayout *($(GtkLabel *))")
    (type GtkLabel*,gint*,gint*->void "void ($(GtkLabel *,gint *,gint *))")
    (type GtkLabel*,string*->void "void ($(GtkLabel *,char **))")
    (type GtkLabel*,gchar*->guint "guint ($(GtkLabel *,gchar *))")
    (type gchar*->GtkWidget* "GtkWidget *($(gchar *))")
    (type GtkAccelLabel*->GtkWidget* "GtkWidget *($(GtkAccelLabel *))")
    (type GtkAccelLabel*->guint "guint ($(GtkAccelLabel *))")
    (type GtkAccelLabel*,GtkWidget*->void "void ($(GtkAccelLabel *,GtkWidget *))")
    (type GtkAccelLabel*,GClosure*->void "void ($(GtkAccelLabel *,GClosure *))")
    (type GtkAccelLabel*->gboolean "gboolean ($(GtkAccelLabel *))")
    (type GtkAccelLabelClass*,guint,GdkModifierType->gchar* "gchar *($(GtkAccelLabelClass *,guint,GdkModifierType))")
    (type gchar*,guint,GdkModifierType->void "void ($(gchar *,guint,GdkModifierType))")
    (type gchar*,GtkAccelKey*->gboolean "gboolean ($(gchar *,GtkAccelKey *))")
    (type gchar*,guint,GdkModifierType,gboolean->gboolean "gboolean ($(gchar *,guint,GdkModifierType,gboolean))")
    (type gpointer,GtkAccelMapForeach->void "void ($(gpointer,GtkAccelMapForeach))")
    (type void->GtkAccelMap* "GtkAccelMap *($(void))")
    (type gchar*,GtkAccelGroup*->void "void ($(gchar *,GtkAccelGroup *))")
    (type AtkEventListener->guint "guint ($(AtkEventListener))")
    (type AtkEventListenerInit->void "void ($(AtkEventListenerInit))")
    (type gchar*->AtkTextAttribute "AtkTextAttribute ($(gchar *))")
    (type AtkTextRange**->void "void ($(AtkTextRange **))")
    (type AtkAttributeSet*->void "void ($(AtkAttributeSet *))")
    (type AtkTextAttribute->gchar* "gchar *($(AtkTextAttribute))")
    (type AtkTextAttribute,gint->gchar* "gchar *($(AtkTextAttribute,gint))")
    (type AtkGObjectAccessible*->GObject* "GObject *($(AtkGObjectAccessible *))")
    (type AtkObjectFactory*,GObject*->AtkObject* "AtkObject *($(AtkObjectFactory *,GObject *))")
    (type AtkObjectFactory*->GType "GType ($(AtkObjectFactory *))")
    (type void->AtkObjectFactory* "AtkObjectFactory *($(void))")
    (type AtkRegistry*,GType,GType->void "void ($(AtkRegistry *,GType,GType))")
    (type AtkRegistry*,GType->GType "GType ($(AtkRegistry *,GType))")
    (type AtkRegistry*,GType->AtkObjectFactory* "AtkObjectFactory *($(AtkRegistry *,GType))")
    (type void->AtkRegistry* "AtkRegistry *($(void))")
    (type gchar*->AtkRelationType "AtkRelationType ($(gchar *))")
    (type AtkRelationType->gchar* "gchar *($(AtkRelationType))")
    (type AtkObject** (pointer AtkObject*) "AtkObject **")
    (type AtkObject**,gint,AtkRelationType->AtkRelation* "AtkRelation *($(AtkObject **,gint,AtkRelationType))")
    (type AtkRelation*->AtkRelationType "AtkRelationType ($(AtkRelation *))")
    (type AtkRelation*->GPtrArray* "GPtrArray *($(AtkRelation *))")
    (type void->AtkRelationSet* "AtkRelationSet *($(void))")
    (type AtkRelationSet*,AtkRelationType->gboolean "gboolean ($(AtkRelationSet *,AtkRelationType))")
    (type AtkRelationSet*,AtkRelation*->void "void ($(AtkRelationSet *,AtkRelation *))")
    (type AtkRelationSet*->gint "gint ($(AtkRelationSet *))")
    (type AtkRelationSet*,gint->AtkRelation* "AtkRelation *($(AtkRelationSet *,gint))")
    (type AtkRelationSet*,AtkRelationType->AtkRelation* "AtkRelation *($(AtkRelationSet *,AtkRelationType))")
    (type void->AtkStateSet* "AtkStateSet *($(void))")
    (type AtkStateSet*->gboolean "gboolean ($(AtkStateSet *))")
    (type AtkStateSet*,AtkStateType->gboolean "gboolean ($(AtkStateSet *,AtkStateType))")
    (type AtkStateType* (pointer AtkStateType) "AtkStateType *")
    (type AtkStateSet*,AtkStateType*,gint->void "void ($(AtkStateSet *,AtkStateType *,gint))")
    (type AtkStateSet*->void "void ($(AtkStateSet *))")
    (type AtkStateSet*,AtkStateType*,gint->gboolean "gboolean ($(AtkStateSet *,AtkStateType *,gint))")
    (type AtkStateSet*,AtkStateSet*->AtkStateSet* "AtkStateSet *($(AtkStateSet *,AtkStateSet *))")
    (type gchar*,gchar*,gchar*,gchar*->GtkAction* "GtkAction *($(gchar *,gchar *,gchar *,gchar *))")
    (type GtkAction*->gchar* "gchar *($(GtkAction *))")
    (type GtkAction*->gboolean "gboolean ($(GtkAction *))")
    (type GtkAction*,gboolean->void "void ($(GtkAction *,gboolean))")
    (type GtkAction*,GtkIconSize->GtkWidget* "GtkWidget *($(GtkAction *,GtkIconSize))")
    (type GtkAction*->GSList* "GSList *($(GtkAction *))")
    (type GtkAction*,gchar*->void "void ($(GtkAction *,gchar *))")
    (type GtkAction*,GtkAccelGroup*->void "void ($(GtkAction *,GtkAccelGroup *))")
    (type GType,gchar*,GtkAccelGroup*->GtkItemFactory* "GtkItemFactory *($(GType,gchar *,GtkAccelGroup *))")
    (type GtkItemFactory*,GType,gchar*,GtkAccelGroup*->void "void ($(GtkItemFactory *,GType,gchar *,GtkAccelGroup *))")
    (type GtkWidget*,gchar*,GtkAccelGroup*,guint,GdkModifierType->void "void ($(GtkWidget *,gchar *,GtkAccelGroup *,guint,GdkModifierType))")
    (type GtkWidget*->GtkItemFactory* "GtkItemFactory *($(GtkWidget *))")
    (type GtkItemFactory*,gchar*->GtkWidget* "GtkWidget *($(GtkItemFactory *,gchar *))")
    (type GtkItemFactory*,guint->GtkWidget* "GtkWidget *($(GtkItemFactory *,guint))")
    (type GtkItemFactory*,GtkItemFactoryEntry*,gpointer,guint->void "void ($(GtkItemFactory *,GtkItemFactoryEntry *,gpointer,guint))")
    (type GtkItemFactory*,guint,GtkItemFactoryEntry*,gpointer->void "void ($(GtkItemFactory *,guint,GtkItemFactoryEntry *,gpointer))")
    (type GtkItemFactory*,gchar*->void "void ($(GtkItemFactory *,gchar *))")
    (type GtkItemFactory*,GtkItemFactoryEntry*->void "void ($(GtkItemFactory *,GtkItemFactoryEntry *))")
    (type GtkItemFactory*,guint,GtkItemFactoryEntry*->void "void ($(GtkItemFactory *,guint,GtkItemFactoryEntry *))")
    (type GtkItemFactory*,guint,guint,guint,guint32->void "void ($(GtkItemFactory *,guint,guint,guint,guint32))")
    (type GtkItemFactory*,gpointer,GtkDestroyNotify,guint,guint,guint,guint32->void "void ($(GtkItemFactory *,gpointer,GtkDestroyNotify,guint,guint,guint,guint32))")
    (type GtkItemFactory*->gpointer "gpointer ($(GtkItemFactory *))")
    (type GtkWidget*->gpointer "gpointer ($(GtkWidget *))")
    (type GtkItemFactory*,GtkTranslateFunc,gpointer,GtkDestroyNotify->void "void ($(GtkItemFactory *,GtkTranslateFunc,gpointer,GtkDestroyNotify))")
    (type GtkItemFactory*,guint,GtkItemFactoryEntry*,gpointer,guint->void "void ($(GtkItemFactory *,guint,GtkItemFactoryEntry *,gpointer,guint))")
    (type gchar*->GtkItemFactory* "GtkItemFactory *($(gchar *))")
    (type guint,GtkMenuEntry*->void "void ($(guint,GtkMenuEntry *))")
    (type gchar*,gchar*->void "void ($(gchar *,gchar *))")
    (type gchar*->GtkActionGroup* "GtkActionGroup *($(gchar *))")
    (type GtkActionGroup*->gchar* "gchar *($(GtkActionGroup *))")
    (type GtkActionGroup*->gboolean "gboolean ($(GtkActionGroup *))")
    (type GtkActionGroup*,gboolean->void "void ($(GtkActionGroup *,gboolean))")
    (type GtkActionGroup*->GList* "GList *($(GtkActionGroup *))")
    (type GtkActionGroup*,GtkAction*->void "void ($(GtkActionGroup *,GtkAction *))")
    (type GtkActionGroup*,GtkAction*,gchar*->void "void ($(GtkActionGroup *,GtkAction *,gchar *))")
    (type GtkActionGroup*,GtkActionEntry*,guint,gpointer->void "void ($(GtkActionGroup *,GtkActionEntry *,guint,gpointer))")
    (type GtkActionGroup*,GtkToggleActionEntry*,guint,gpointer->void "void ($(GtkActionGroup *,GtkToggleActionEntry *,guint,gpointer))")
    (type GtkActionGroup*,GtkRadioActionEntry*,guint,gint,GCallback,gpointer->void "void ($(GtkActionGroup *,GtkRadioActionEntry *,guint,gint,GCallback,gpointer))")
    (type GtkActionGroup*,GtkActionEntry*,guint,gpointer,GDestroyNotify->void "void ($(GtkActionGroup *,GtkActionEntry *,guint,gpointer,GDestroyNotify))")
    (type GtkActionGroup*,GtkToggleActionEntry*,guint,gpointer,GDestroyNotify->void "void ($(GtkActionGroup *,GtkToggleActionEntry *,guint,gpointer,GDestroyNotify))")
    (type GtkActionGroup*,GtkRadioActionEntry*,guint,gint,GCallback,gpointer,GDestroyNotify->void "void ($(GtkActionGroup *,GtkRadioActionEntry *,guint,gint,GCallback,gpointer,GDestroyNotify))")
    (type GtkActionGroup*,GtkTranslateFunc,gpointer,GtkDestroyNotify->void "void ($(GtkActionGroup *,GtkTranslateFunc,gpointer,GtkDestroyNotify))")
    (type GtkActionGroup*,gchar*->void "void ($(GtkActionGroup *,gchar *))")
    (type GtkActionGroup*,gchar*->gchar* "gchar *($(GtkActionGroup *,gchar *))")
    (type GtkActionGroup*,GtkAction*,GtkWidget*->void "void ($(GtkActionGroup *,GtkAction *,GtkWidget *))")
    (type gfloat,gfloat,gfloat,gfloat->GtkWidget* "GtkWidget *($(gfloat,gfloat,gfloat,gfloat))")
    (type GtkAlignment*,gfloat,gfloat,gfloat,gfloat->void "void ($(GtkAlignment *,gfloat,gfloat,gfloat,gfloat))")
    (type GtkAlignment*,guint,guint,guint,guint->void "void ($(GtkAlignment *,guint,guint,guint,guint))")
    (type GtkAlignment*,guint*,guint*,guint*,guint*->void "void ($(GtkAlignment *,guint *,guint *,guint *,guint *))")
    (type GtkArrowType,GtkShadowType->GtkWidget* "GtkWidget *($(GtkArrowType,GtkShadowType))")
    (type GtkArrow*,GtkArrowType,GtkShadowType->void "void ($(GtkArrow *,GtkArrowType,GtkShadowType))")
    (type GtkFrame*,gchar*->void "void ($(GtkFrame *,gchar *))")
    (type GtkFrame*->gchar* "gchar *($(GtkFrame *))")
    (type GtkFrame*,GtkWidget*->void "void ($(GtkFrame *,GtkWidget *))")
    (type GtkFrame*->GtkWidget* "GtkWidget *($(GtkFrame *))")
    (type GtkFrame*,gfloat,gfloat->void "void ($(GtkFrame *,gfloat,gfloat))")
    (type GtkFrame*,gfloat*,gfloat*->void "void ($(GtkFrame *,gfloat *,gfloat *))")
    (type GtkFrame*,GtkShadowType->void "void ($(GtkFrame *,GtkShadowType))")
    (type GtkFrame*->GtkShadowType "GtkShadowType ($(GtkFrame *))")
    (type gchar*,gfloat,gfloat,gfloat,gboolean->GtkWidget* "GtkWidget *($(gchar *,gfloat,gfloat,gfloat,gboolean))")
    (type GtkAspectFrame*,gfloat,gfloat,gfloat,gboolean->void "void ($(GtkAspectFrame *,gfloat,gfloat,gfloat,gboolean))")
    (type GtkBox*,GtkWidget*,gboolean,gboolean,guint->void "void ($(GtkBox *,GtkWidget *,gboolean,gboolean,guint))")
    (type GtkBox*,GtkWidget*->void "void ($(GtkBox *,GtkWidget *))")
    (type GtkBox*,gboolean->void "void ($(GtkBox *,gboolean))")
    (type GtkBox*->gboolean "gboolean ($(GtkBox *))")
    (type GtkBox*,gint->void "void ($(GtkBox *,gint))")
    (type GtkBox*->gint "gint ($(GtkBox *))")
    (type GtkBox*,GtkWidget*,gint->void "void ($(GtkBox *,GtkWidget *,gint))")
    (type GtkPackType* (pointer GtkPackType) "GtkPackType *")
    (type GtkBox*,GtkWidget*,gboolean*,gboolean*,guint*,GtkPackType*->void "void ($(GtkBox *,GtkWidget *,gboolean *,gboolean *,guint *,GtkPackType *))")
    (type GtkBox*,GtkWidget*,gboolean,gboolean,guint,GtkPackType->void "void ($(GtkBox *,GtkWidget *,gboolean,gboolean,guint,GtkPackType))")
    (type GtkButtonBox*->GtkButtonBoxStyle "GtkButtonBoxStyle ($(GtkButtonBox *))")
    (type GtkButtonBox*,GtkButtonBoxStyle->void "void ($(GtkButtonBox *,GtkButtonBoxStyle))")
    (type GtkButtonBox*,GtkWidget*->gboolean "gboolean ($(GtkButtonBox *,GtkWidget *))")
    (type GtkButtonBox*,GtkWidget*,gboolean->void "void ($(GtkButtonBox *,GtkWidget *,gboolean))")
    (type GtkButtonBox*,gint,gint->void "void ($(GtkButtonBox *,gint,gint))")
    (type GtkButtonBox*,gint*,gint*->void "void ($(GtkButtonBox *,gint *,gint *))")
    (type GtkWidget*,int*,int*,int*,int*->void "void ($(GtkWidget *,int *,int *,int *,int *))")
    (type gchar*->GtkBindingSet* "GtkBindingSet *($(gchar *))")
    (type gpointer->GtkBindingSet* "GtkBindingSet *($(gpointer))")
    (type GtkObject*,guint,GdkModifierType->gboolean "gboolean ($(GtkObject *,guint,GdkModifierType))")
    (type GtkObject*,GdkEventKey*->gboolean "gboolean ($(GtkObject *,GdkEventKey *))")
    (type GtkBindingSet*,guint,GdkModifierType,GtkObject*->gboolean "gboolean ($(GtkBindingSet *,guint,GdkModifierType,GtkObject *))")
    (type GtkBindingSet*,guint,GdkModifierType->void "void ($(GtkBindingSet *,guint,GdkModifierType))")
    (type GtkBindingSet*,guint,GdkModifierType,gchar*,guint,...guint->void "void ($(GtkBindingSet *,guint,GdkModifierType,gchar *,guint,...))")
    (type GtkBindingSet*,GtkPathType,gchar*,GtkPathPriorityType->void "void ($(GtkBindingSet *,GtkPathType,gchar *,GtkPathPriorityType))")
    (type GtkBindingSet*,guint,GdkModifierType,gchar*,GSList*->void "void ($(GtkBindingSet *,guint,GdkModifierType,gchar *,GSList *))")
    (type gchar*,GType,GSignalFlags,GCallback,GSignalAccumulator,gpointer,GSignalCMarshaller,GType,guint,...guint->guint "guint ($(gchar *,GType,GSignalFlags,GCallback,GSignalAccumulator,gpointer,GSignalCMarshaller,GType,guint,...))")
    (type GdkPixmap*,GdkBitmap*->GtkWidget* "GtkWidget *($(GdkPixmap *,GdkBitmap *))")
    (type GdkImage*,GdkBitmap*->GtkWidget* "GtkWidget *($(GdkImage *,GdkBitmap *))")
    (type GdkPixbuf*->GtkWidget* "GtkWidget *($(GdkPixbuf *))")
    (type gchar*,GtkIconSize->GtkWidget* "GtkWidget *($(gchar *,GtkIconSize))")
    (type GtkIconSet*,GtkIconSize->GtkWidget* "GtkWidget *($(GtkIconSet *,GtkIconSize))")
    (type GdkPixbufAnimation*->GtkWidget* "GtkWidget *($(GdkPixbufAnimation *))")
    (type GtkImage*,GdkPixmap*,GdkBitmap*->void "void ($(GtkImage *,GdkPixmap *,GdkBitmap *))")
    (type GtkImage*,GdkImage*,GdkBitmap*->void "void ($(GtkImage *,GdkImage *,GdkBitmap *))")
    (type GtkImage*,gchar*->void "void ($(GtkImage *,gchar *))")
    (type GtkImage*,GdkPixbuf*->void "void ($(GtkImage *,GdkPixbuf *))")
    (type GtkImage*,gchar*,GtkIconSize->void "void ($(GtkImage *,gchar *,GtkIconSize))")
    (type GtkImage*,GtkIconSet*,GtkIconSize->void "void ($(GtkImage *,GtkIconSet *,GtkIconSize))")
    (type GtkImage*,GdkPixbufAnimation*->void "void ($(GtkImage *,GdkPixbufAnimation *))")
    (type GtkImage*,gint->void "void ($(GtkImage *,gint))")
    (type GtkImage*->GtkImageType "GtkImageType ($(GtkImage *))")
    (type GtkImage*,GdkPixmap**,GdkBitmap**->void "void ($(GtkImage *,GdkPixmap **,GdkBitmap **))")
    (type GdkImage** (pointer GdkImage*) "GdkImage **")
    (type GtkImage*,GdkImage**,GdkBitmap**->void "void ($(GtkImage *,GdkImage **,GdkBitmap **))")
    (type GtkImage*->GdkPixbuf* "GdkPixbuf *($(GtkImage *))")
    (type GtkIconSize* (pointer GtkIconSize) "GtkIconSize *")
    (type GtkImage*,gchar**,GtkIconSize*->void "void ($(GtkImage *,gchar **,GtkIconSize *))")
    (type GtkIconSet** (pointer GtkIconSet*) "GtkIconSet **")
    (type GtkImage*,GtkIconSet**,GtkIconSize*->void "void ($(GtkImage *,GtkIconSet **,GtkIconSize *))")
    (type GtkImage*->GdkPixbufAnimation* "GdkPixbufAnimation *($(GtkImage *))")
    (type GtkImage*->gint "gint ($(GtkImage *))")
    (type GtkButton*,GtkReliefStyle->void "void ($(GtkButton *,GtkReliefStyle))")
    (type GtkButton*->GtkReliefStyle "GtkReliefStyle ($(GtkButton *))")
    (type GtkButton*,gchar*->void "void ($(GtkButton *,gchar *))")
    (type GtkButton*->gchar* "gchar *($(GtkButton *))")
    (type GtkButton*,gboolean->void "void ($(GtkButton *,gboolean))")
    (type GtkButton*->gboolean "gboolean ($(GtkButton *))")
    (type GtkButton*,gfloat,gfloat->void "void ($(GtkButton *,gfloat,gfloat))")
    (type GtkButton*,gfloat*,gfloat*->void "void ($(GtkButton *,gfloat *,gfloat *))")
    (type GtkButton*,GtkWidget*->void "void ($(GtkButton *,GtkWidget *))")
    (type GtkButton*->GtkWidget* "GtkWidget *($(GtkButton *))")
    (type GtkButton*,GdkRectangle*,GtkStateType,GtkShadowType,gchar*,gchar*->void "void ($(GtkButton *,GdkRectangle *,GtkStateType,GtkShadowType,gchar *,gchar *))")
    (type GtkType* (pointer GtkType) "GtkType *")
    (type gchar*,GtkSignalRunType,GtkType,guint,GtkSignalMarshaller,GtkType,guint,GtkType*->guint "guint ($(gchar *,GtkSignalRunType,GtkType,guint,GtkSignalMarshaller,GtkType,guint,GtkType *))")
    (type gchar*,GtkSignalRunType,GtkType,guint,GtkSignalMarshaller,GtkType,guint,...guint->guint "guint ($(gchar *,GtkSignalRunType,GtkType,guint,GtkSignalMarshaller,GtkType,guint,...))")
    (type GtkObject*,gchar*,GtkSignalFunc,GtkObject*->void "void ($(GtkObject *,gchar *,GtkSignalFunc,GtkObject *))")
    (type GtkObject*,gchar*,GtkSignalFunc,gpointer,GtkObject*->void "void ($(GtkObject *,gchar *,GtkSignalFunc,gpointer,GtkObject *))")
    (type GtkObject*,gchar*,GtkSignalFunc,GtkCallbackMarshal,gpointer,GtkDestroyNotify,gint,gint->gulong "gulong ($(GtkObject *,gchar *,GtkSignalFunc,GtkCallbackMarshal,gpointer,GtkDestroyNotify,gint,gint))")
    (type GtkObject*,guint,GtkArg*->void "void ($(GtkObject *,guint,GtkArg *))")
    (type GtkObject*,guint,...guint->void "void ($(GtkObject *,guint,...))")
    (type GtkObject*,gchar*,GtkArg*->void "void ($(GtkObject *,gchar *,GtkArg *))")
    (type GtkObject*,GtkSignalFunc,gpointer,GSignalMatchType,guint->void "void ($(GtkObject *,GtkSignalFunc,gpointer,GSignalMatchType,guint))")
    (type GtkCalendar*,guint,guint->gboolean "gboolean ($(GtkCalendar *,guint,guint))")
    (type GtkCalendar*,guint->void "void ($(GtkCalendar *,guint))")
    (type GtkCalendar*,guint->gboolean "gboolean ($(GtkCalendar *,guint))")
    (type GtkCalendar*,GtkCalendarDisplayOptions->void "void ($(GtkCalendar *,GtkCalendarDisplayOptions))")
    (type GtkCalendar*->GtkCalendarDisplayOptions "GtkCalendarDisplayOptions ($(GtkCalendar *))")
    (type GtkCalendar*,guint*,guint*,guint*->void "void ($(GtkCalendar *,guint *,guint *,guint *))")
    (type GtkCellRenderer*,GdkWindow*,GtkWidget*,GdkRectangle*,GdkRectangle*,GdkRectangle*,GtkCellRendererState->void "void ($(GtkCellRenderer *,GdkWindow *,GtkWidget *,GdkRectangle *,GdkRectangle *,GdkRectangle *,GtkCellRendererState))")
    (type GtkCellRenderer*,gint,gint->void "void ($(GtkCellRenderer *,gint,gint))")
    (type GtkCellRenderer*,gint*,gint*->void "void ($(GtkCellRenderer *,gint *,gint *))")
    (type GtkCellRenderer*,gboolean->void "void ($(GtkCellRenderer *,gboolean))")
    (type void->GtkTreePath* "GtkTreePath *($(void))")
    (type gchar*->GtkTreePath* "GtkTreePath *($(gchar *))")
    (type gint,...gint->GtkTreePath* "GtkTreePath *($(gint,...))")
    (type GtkTreePath*->gchar* "gchar *($(GtkTreePath *))")
    (type GtkTreePath*,gint->void "void ($(GtkTreePath *,gint))")
    (type GtkTreePath*->gint "gint ($(GtkTreePath *))")
    (type GtkTreePath*->gint* "gint *($(GtkTreePath *))")
    (type GtkTreePath*->void "void ($(GtkTreePath *))")
    (type GtkTreePath*->GtkTreePath* "GtkTreePath *($(GtkTreePath *))")
    (type GtkTreePath*,GtkTreePath*->gint "gint ($(GtkTreePath *,GtkTreePath *))")
    (type GtkTreePath*->gboolean "gboolean ($(GtkTreePath *))")
    (type GtkTreePath*,GtkTreePath*->gboolean "gboolean ($(GtkTreePath *,GtkTreePath *))")
    (type GtkTreeModel*,GtkTreePath*->GtkTreeRowReference* "GtkTreeRowReference *($(GtkTreeModel *,GtkTreePath *))")
    (type GObject*,GtkTreeModel*,GtkTreePath*->GtkTreeRowReference* "GtkTreeRowReference *($(GObject *,GtkTreeModel *,GtkTreePath *))")
    (type GtkTreeRowReference*->GtkTreePath* "GtkTreePath *($(GtkTreeRowReference *))")
    (type GtkTreeRowReference*->gboolean "gboolean ($(GtkTreeRowReference *))")
    (type GtkTreeRowReference*->GtkTreeRowReference* "GtkTreeRowReference *($(GtkTreeRowReference *))")
    (type GtkTreeRowReference*->void "void ($(GtkTreeRowReference *))")
    (type GObject*,GtkTreePath*->void "void ($(GObject *,GtkTreePath *))")
    (type GObject*,GtkTreePath*,GtkTreeIter*,gint*->void "void ($(GObject *,GtkTreePath *,GtkTreeIter *,gint *))")
    (type GtkTreeIter*->GtkTreeIter* "GtkTreeIter *($(GtkTreeIter *))")
    (type GtkTreeIter*->void "void ($(GtkTreeIter *))")
    (type GtkTreeModel*,GtkTreeIter*,gchar*->gboolean "gboolean ($(GtkTreeModel *,GtkTreeIter *,gchar *))")
    (type GtkTreeModel*,GtkTreeIter*->gchar* "gchar *($(GtkTreeModel *,GtkTreeIter *))")
    (type GtkTreeModel*,GtkTreeIter*,...GtkTreeIter*->void "void ($(GtkTreeModel *,GtkTreeIter *,...))")
    (type GtkTreeModel*,GtkTreeModelForeachFunc,gpointer->void "void ($(GtkTreeModel *,GtkTreeModelForeachFunc,gpointer))")
    (type void->GtkTreeViewColumn* "GtkTreeViewColumn *($(void))")
    (type gchar*,GtkCellRenderer*,...GtkCellRenderer*->GtkTreeViewColumn* "GtkTreeViewColumn *($(gchar *,GtkCellRenderer *,...))")
    (type GtkTreeViewColumn*,GtkCellRenderer*,gboolean->void "void ($(GtkTreeViewColumn *,GtkCellRenderer *,gboolean))")
    (type GtkTreeViewColumn*->GList* "GList *($(GtkTreeViewColumn *))")
    (type GtkTreeViewColumn*,GtkCellRenderer*,gchar*,gint->void "void ($(GtkTreeViewColumn *,GtkCellRenderer *,gchar *,gint))")
    (type GtkTreeViewColumn*,GtkCellRenderer*,...GtkCellRenderer*->void "void ($(GtkTreeViewColumn *,GtkCellRenderer *,...))")
    (type GtkTreeViewColumn*,GtkCellRenderer*,GtkTreeCellDataFunc,gpointer,GtkDestroyNotify->void "void ($(GtkTreeViewColumn *,GtkCellRenderer *,GtkTreeCellDataFunc,gpointer,GtkDestroyNotify))")
    (type GtkTreeViewColumn*,GtkCellRenderer*->void "void ($(GtkTreeViewColumn *,GtkCellRenderer *))")
    (type GtkTreeViewColumn*,gint->void "void ($(GtkTreeViewColumn *,gint))")
    (type GtkTreeViewColumn*->gint "gint ($(GtkTreeViewColumn *))")
    (type GtkTreeViewColumn*,gboolean->void "void ($(GtkTreeViewColumn *,gboolean))")
    (type GtkTreeViewColumn*->gboolean "gboolean ($(GtkTreeViewColumn *))")
    (type GtkTreeViewColumn*,GtkTreeViewColumnSizing->void "void ($(GtkTreeViewColumn *,GtkTreeViewColumnSizing))")
    (type GtkTreeViewColumn*->GtkTreeViewColumnSizing "GtkTreeViewColumnSizing ($(GtkTreeViewColumn *))")
    (type GtkTreeViewColumn*,gchar*->void "void ($(GtkTreeViewColumn *,gchar *))")
    (type GtkTreeViewColumn*->gchar* "gchar *($(GtkTreeViewColumn *))")
    (type GtkTreeViewColumn*,GtkWidget*->void "void ($(GtkTreeViewColumn *,GtkWidget *))")
    (type GtkTreeViewColumn*->GtkWidget* "GtkWidget *($(GtkTreeViewColumn *))")
    (type GtkTreeViewColumn*,gfloat->void "void ($(GtkTreeViewColumn *,gfloat))")
    (type GtkTreeViewColumn*->gfloat "gfloat ($(GtkTreeViewColumn *))")
    (type GtkTreeViewColumn*,GtkSortType->void "void ($(GtkTreeViewColumn *,GtkSortType))")
    (type GtkTreeViewColumn*->GtkSortType "GtkSortType ($(GtkTreeViewColumn *))")
    (type GtkTreeViewColumn*,GtkTreeModel*,GtkTreeIter*,gboolean,gboolean->void "void ($(GtkTreeViewColumn *,GtkTreeModel *,GtkTreeIter *,gboolean,gboolean))")
    (type GtkTreeViewColumn*,GdkRectangle*,gint*,gint*,gint*,gint*->void "void ($(GtkTreeViewColumn *,GdkRectangle *,gint *,gint *,gint *,gint *))")
    (type GtkTreeViewColumn*,GtkCellRenderer*,gint*,gint*->gboolean "gboolean ($(GtkTreeViewColumn *,GtkCellRenderer *,gint *,gint *))")
    (type GtkCellLayout*,GtkCellRenderer*,...GtkCellRenderer*->void "void ($(GtkCellLayout *,GtkCellRenderer *,...))")
    (type void->GtkCellRenderer* "GtkCellRenderer *($(void))")
    (type GtkCellRendererText*,gint->void "void ($(GtkCellRendererText *,gint))")
    (type GtkCellRendererToggle*->gboolean "gboolean ($(GtkCellRendererToggle *))")
    (type GtkCellRendererToggle*,gboolean->void "void ($(GtkCellRendererToggle *,gboolean))")
    (type GtkCellView*,GtkTreeModel*->void "void ($(GtkCellView *,GtkTreeModel *))")
    (type GtkCellView*,GtkTreePath*->void "void ($(GtkCellView *,GtkTreePath *))")
    (type GtkCellView*->GtkTreePath* "GtkTreePath *($(GtkCellView *))")
    (type GtkCellView*,GtkTreePath*,GtkRequisition*->gboolean "gboolean ($(GtkCellView *,GtkTreePath *,GtkRequisition *))")
    (type GtkCellView*,GdkColor*->void "void ($(GtkCellView *,GdkColor *))")
    (type GtkCellView*->GList* "GList *($(GtkCellView *))")
    (type GtkToggleButton*,gboolean->void "void ($(GtkToggleButton *,gboolean))")
    (type GtkToggleButton*->gboolean "gboolean ($(GtkToggleButton *))")
    (type GtkCheckButton*,gint*,gint*->void "void ($(GtkCheckButton *,gint *,gint *))")
    (type GtkMenuItem*,GtkWidget*->void "void ($(GtkMenuItem *,GtkWidget *))")
    (type GtkMenuItem*->GtkWidget* "GtkWidget *($(GtkMenuItem *))")
    (type GtkMenuItem*,gboolean->void "void ($(GtkMenuItem *,gboolean))")
    (type GtkMenuItem*->gboolean "gboolean ($(GtkMenuItem *))")
    (type GtkMenuItem*,gchar*->void "void ($(GtkMenuItem *,gchar *))")
    (type GtkMenuItem*,gchar*,GtkAccelGroup*,gboolean->void "void ($(GtkMenuItem *,gchar *,GtkAccelGroup *,gboolean))")
    (type GtkCheckMenuItem*,gboolean->void "void ($(GtkCheckMenuItem *,gboolean))")
    (type GtkCheckMenuItem*->gboolean "gboolean ($(GtkCheckMenuItem *))")
    (type GtkTargetEntry*,guint->GtkTargetList* "GtkTargetList *($(GtkTargetEntry *,guint))")
    (type GtkTargetList*->void "void ($(GtkTargetList *))")
    (type GtkTargetList*,GdkAtom,guint,guint->void "void ($(GtkTargetList *,GdkAtom,guint,guint))")
    (type GtkTargetList*,guint->void "void ($(GtkTargetList *,guint))")
    (type GtkTargetList*,guint,gboolean->void "void ($(GtkTargetList *,guint,gboolean))")
    (type GtkTargetList*,GtkTargetEntry*,guint->void "void ($(GtkTargetList *,GtkTargetEntry *,guint))")
    (type GtkTargetList*,GdkAtom->void "void ($(GtkTargetList *,GdkAtom))")
    (type GtkTargetList*,GdkAtom,guint*->gboolean "gboolean ($(GtkTargetList *,GdkAtom,guint *))")
    (type GtkWidget*,GdkAtom,guint32->gboolean "gboolean ($(GtkWidget *,GdkAtom,guint32))")
    (type GdkDisplay*,GtkWidget*,GdkAtom,guint32->gboolean "gboolean ($(GdkDisplay *,GtkWidget *,GdkAtom,guint32))")
    (type GtkWidget*,GdkAtom,GdkAtom,guint->void "void ($(GtkWidget *,GdkAtom,GdkAtom,guint))")
    (type GtkWidget*,GdkAtom,GtkTargetEntry*,guint->void "void ($(GtkWidget *,GdkAtom,GtkTargetEntry *,guint))")
    (type GtkWidget*,GdkAtom->void "void ($(GtkWidget *,GdkAtom))")
    (type GtkWidget*,GdkAtom,GdkAtom,guint32->gboolean "gboolean ($(GtkWidget *,GdkAtom,GdkAtom,guint32))")
    (type GtkSelectionData*,GdkAtom,gint,guchar*,gint->void "void ($(GtkSelectionData *,GdkAtom,gint,guchar *,gint))")
    (type GtkSelectionData*,gchar*,gint->gboolean "gboolean ($(GtkSelectionData *,gchar *,gint))")
    (type GtkSelectionData*->guchar* "guchar *($(GtkSelectionData *))")
    (type GtkSelectionData*,GdkPixbuf*->gboolean "gboolean ($(GtkSelectionData *,GdkPixbuf *))")
    (type GtkSelectionData*->GdkPixbuf* "GdkPixbuf *($(GtkSelectionData *))")
    (type GtkSelectionData*,gchar**->gboolean "gboolean ($(GtkSelectionData *,gchar **))")
    (type GtkSelectionData*->gchar** "gchar **($(GtkSelectionData *))")
    (type GdkAtom** (pointer GdkAtom*) "GdkAtom **")
    (type GtkSelectionData*,GdkAtom**,gint*->gboolean "gboolean ($(GtkSelectionData *,GdkAtom **,gint *))")
    (type GtkSelectionData*->gboolean "gboolean ($(GtkSelectionData *))")
    (type GtkSelectionData*,gboolean->gboolean "gboolean ($(GtkSelectionData *,gboolean))")
    (type GdkWindow*,GdkEventProperty*->gboolean "gboolean ($(GdkWindow *,GdkEventProperty *))")
    (type GtkSelectionData*->GtkSelectionData* "GtkSelectionData *($(GtkSelectionData *))")
    (type GtkSelectionData*->void "void ($(GtkSelectionData *))")
    (type GdkDisplay*,GdkAtom->GtkClipboard* "GtkClipboard *($(GdkDisplay *,GdkAtom))")
    (type GdkAtom->GtkClipboard* "GtkClipboard *($(GdkAtom))")
    (type GtkClipboard*->GdkDisplay* "GdkDisplay *($(GtkClipboard *))")
    (type GtkClipboard*,GtkTargetEntry*,guint,GtkClipboardGetFunc,GtkClipboardClearFunc,gpointer->gboolean "gboolean ($(GtkClipboard *,GtkTargetEntry *,guint,GtkClipboardGetFunc,GtkClipboardClearFunc,gpointer))")
    (type GtkClipboard*,GtkTargetEntry*,guint,GtkClipboardGetFunc,GtkClipboardClearFunc,GObject*->gboolean "gboolean ($(GtkClipboard *,GtkTargetEntry *,guint,GtkClipboardGetFunc,GtkClipboardClearFunc,GObject *))")
    (type GtkClipboard*->GObject* "GObject *($(GtkClipboard *))")
    (type GtkClipboard*->void "void ($(GtkClipboard *))")
    (type GtkClipboard*,gchar*,gint->void "void ($(GtkClipboard *,gchar *,gint))")
    (type GtkClipboard*,GdkPixbuf*->void "void ($(GtkClipboard *,GdkPixbuf *))")
    (type GtkClipboard*,GdkAtom,GtkClipboardReceivedFunc,gpointer->void "void ($(GtkClipboard *,GdkAtom,GtkClipboardReceivedFunc,gpointer))")
    (type GtkClipboard*,GtkClipboardTextReceivedFunc,gpointer->void "void ($(GtkClipboard *,GtkClipboardTextReceivedFunc,gpointer))")
    (type GtkClipboard*,GtkClipboardImageReceivedFunc,gpointer->void "void ($(GtkClipboard *,GtkClipboardImageReceivedFunc,gpointer))")
    (type GtkClipboard*,GtkClipboardTargetsReceivedFunc,gpointer->void "void ($(GtkClipboard *,GtkClipboardTargetsReceivedFunc,gpointer))")
    (type GtkClipboard*,GdkAtom->GtkSelectionData* "GtkSelectionData *($(GtkClipboard *,GdkAtom))")
    (type GtkClipboard*->gchar* "gchar *($(GtkClipboard *))")
    (type GtkClipboard*->GdkPixbuf* "GdkPixbuf *($(GtkClipboard *))")
    (type GtkClipboard*,GdkAtom**,gint*->gboolean "gboolean ($(GtkClipboard *,GdkAtom **,gint *))")
    (type GtkClipboard*->gboolean "gboolean ($(GtkClipboard *))")
    (type GtkClipboard*,GdkAtom->gboolean "gboolean ($(GtkClipboard *,GdkAtom))")
    (type GtkClipboard*,GtkTargetEntry*,gint->void "void ($(GtkClipboard *,GtkTargetEntry *,gint))")
    (type GdkEventOwnerChange*->void "void ($(GdkEventOwnerChange *))")
    (type GtkRange*,GtkUpdateType->void "void ($(GtkRange *,GtkUpdateType))")
    (type GtkRange*->GtkUpdateType "GtkUpdateType ($(GtkRange *))")
    (type GtkRange*,GtkAdjustment*->void "void ($(GtkRange *,GtkAdjustment *))")
    (type GtkRange*->GtkAdjustment* "GtkAdjustment *($(GtkRange *))")
    (type GtkRange*,gboolean->void "void ($(GtkRange *,gboolean))")
    (type GtkRange*->gboolean "gboolean ($(GtkRange *))")
    (type GtkRange*,gdouble,gdouble->void "void ($(GtkRange *,gdouble,gdouble))")
    (type GtkRange*->gdouble "gdouble ($(GtkRange *))")
    (type GtkRange*,GdkScrollDirection->gdouble "gdouble ($(GtkRange *,GdkScrollDirection))")
    (type GtkAdjustment*->GtkWidget* "GtkWidget *($(GtkAdjustment *))")
    (type gint->GtkWidget* "GtkWidget *($(gint))")
    (type gint,gchar**->GtkWidget* "GtkWidget *($(gint,gchar **))")
    (type GtkCList*,GtkAdjustment*->void "void ($(GtkCList *,GtkAdjustment *))")
    (type GtkCList*->GtkAdjustment* "GtkAdjustment *($(GtkCList *))")
    (type GtkCList*,GtkShadowType->void "void ($(GtkCList *,GtkShadowType))")
    (type GtkCList*,GtkSelectionMode->void "void ($(GtkCList *,GtkSelectionMode))")
    (type GtkCList*,gboolean->void "void ($(GtkCList *,gboolean))")
    (type GtkCList*,guint,guint8->void "void ($(GtkCList *,guint,guint8))")
    (type GtkCList*,gint,gchar*->void "void ($(GtkCList *,gint,gchar *))")
    (type GtkCList*,gint->gchar* "gchar *($(GtkCList *,gint))")
    (type GtkCList*,gint,GtkWidget*->void "void ($(GtkCList *,gint,GtkWidget *))")
    (type GtkCList*,gint->GtkWidget* "GtkWidget *($(GtkCList *,gint))")
    (type GtkCList*,gint,GtkJustification->void "void ($(GtkCList *,gint,GtkJustification))")
    (type GtkCList*,gint,gboolean->void "void ($(GtkCList *,gint,gboolean))")
    (type GtkCList*->gint "gint ($(GtkCList *))")
    (type GtkCList*,gint->gint "gint ($(GtkCList *,gint))")
    (type GtkCList*,guint->void "void ($(GtkCList *,guint))")
    (type GtkCList*,gint,gint,gfloat,gfloat->void "void ($(GtkCList *,gint,gint,gfloat,gfloat))")
    (type GtkCList*,gint->GtkVisibility "GtkVisibility ($(GtkCList *,gint))")
    (type GtkCList*,gint,gint->GtkCellType "GtkCellType ($(GtkCList *,gint,gint))")
    (type GtkCList*,gint,gint,gchar*->void "void ($(GtkCList *,gint,gint,gchar *))")
    (type GtkCList*,gint,gint,gchar**->gint "gint ($(GtkCList *,gint,gint,gchar **))")
    (type GtkCList*,gint,gint,GdkPixmap*,GdkBitmap*->void "void ($(GtkCList *,gint,gint,GdkPixmap *,GdkBitmap *))")
    (type GtkCList*,gint,gint,GdkPixmap**,GdkBitmap**->gint "gint ($(GtkCList *,gint,gint,GdkPixmap **,GdkBitmap **))")
    (type GtkCList*,gint,gint,gchar*,guint8,GdkPixmap*,GdkBitmap*->void "void ($(GtkCList *,gint,gint,gchar *,guint8,GdkPixmap *,GdkBitmap *))")
    (type GtkCList*,gint,gint,gchar**,guint8*,GdkPixmap**,GdkBitmap**->gint "gint ($(GtkCList *,gint,gint,gchar **,guint8 *,GdkPixmap **,GdkBitmap **))")
    (type GtkCList*,gint,GdkColor*->void "void ($(GtkCList *,gint,GdkColor *))")
    (type GtkCList*,gint,gint,GtkStyle*->void "void ($(GtkCList *,gint,gint,GtkStyle *))")
    (type GtkCList*,gint,gint->GtkStyle* "GtkStyle *($(GtkCList *,gint,gint))")
    (type GtkCList*,gint,GtkStyle*->void "void ($(GtkCList *,gint,GtkStyle *))")
    (type GtkCList*,gint->GtkStyle* "GtkStyle *($(GtkCList *,gint))")
    (type GtkCList*,gint,gint,gint,gint->void "void ($(GtkCList *,gint,gint,gint,gint))")
    (type GtkCList*,gint->gboolean "gboolean ($(GtkCList *,gint))")
    (type GtkCList*,gchar**->gint "gint ($(GtkCList *,gchar **))")
    (type GtkCList*,gint,gpointer->void "void ($(GtkCList *,gint,gpointer))")
    (type GtkCList*,gint,gpointer,GtkDestroyNotify->void "void ($(GtkCList *,gint,gpointer,GtkDestroyNotify))")
    (type GtkCList*,gint->gpointer "gpointer ($(GtkCList *,gint))")
    (type GtkCList*,gpointer->gint "gint ($(GtkCList *,gpointer))")
    (type GtkCList*,gint,gint,gint*,gint*->gint "gint ($(GtkCList *,gint,gint,gint *,gint *))")
    (type GtkCList*,GtkCListCompareFunc->void "void ($(GtkCList *,GtkCListCompareFunc))")
    (type GtkCList*,GtkSortType->void "void ($(GtkCList *,GtkSortType))")
    (type GtkCList*,GtkCListRow*,gint->PangoLayout* "PangoLayout *($(GtkCList *,GtkCListRow *,gint))")
    (type GdkColor*->GtkWidget* "GtkWidget *($(GdkColor *))")
    (type GtkColorButton*,GdkColor*->void "void ($(GtkColorButton *,GdkColor *))")
    (type GtkColorButton*,guint16->void "void ($(GtkColorButton *,guint16))")
    (type GtkColorButton*->guint16 "guint16 ($(GtkColorButton *))")
    (type GtkColorButton*,gboolean->void "void ($(GtkColorButton *,gboolean))")
    (type GtkColorButton*->gboolean "gboolean ($(GtkColorButton *))")
    (type GtkColorButton*,gchar*->void "void ($(GtkColorButton *,gchar *))")
    (type GtkColorButton*->gchar* "gchar *($(GtkColorButton *))")
    (type gboolean,gint->GtkWidget* "GtkWidget *($(gboolean,gint))")
    (type GtkColorSelection*->gboolean "gboolean ($(GtkColorSelection *))")
    (type GtkColorSelection*,gboolean->void "void ($(GtkColorSelection *,gboolean))")
    (type GtkColorSelection*,GdkColor*->void "void ($(GtkColorSelection *,GdkColor *))")
    (type GtkColorSelection*,guint16->void "void ($(GtkColorSelection *,guint16))")
    (type GtkColorSelection*->guint16 "guint16 ($(GtkColorSelection *))")
    (type GdkColor** (pointer GdkColor*) "GdkColor **")
    (type gchar*,GdkColor**,gint*->gboolean "gboolean ($(gchar *,GdkColor **,gint *))")
    (type GdkColor*,gint->gchar* "gchar *($(GdkColor *,gint))")
    (type GtkColorSelectionChangePaletteFunc->GtkColorSelectionChangePaletteFunc "GtkColorSelectionChangePaletteFunc ($(GtkColorSelectionChangePaletteFunc))")
    (type GtkColorSelectionChangePaletteWithScreenFunc->GtkColorSelectionChangePaletteWithScreenFunc "GtkColorSelectionChangePaletteWithScreenFunc ($(GtkColorSelectionChangePaletteWithScreenFunc))")
    (type GtkColorSelection*,gdouble*->void "void ($(GtkColorSelection *,gdouble *))")
    (type GtkColorSelection*,GtkUpdateType->void "void ($(GtkColorSelection *,GtkUpdateType))")
    (type GtkCombo*,gboolean,gboolean->void "void ($(GtkCombo *,gboolean,gboolean))")
    (type GtkCombo*,gboolean->void "void ($(GtkCombo *,gboolean))")
    (type GtkCombo*,GtkItem*,gchar*->void "void ($(GtkCombo *,GtkItem *,gchar *))")
    (type GtkCombo*,GList*->void "void ($(GtkCombo *,GList *))")
    (type GtkCombo*->void "void ($(GtkCombo *))")
    (type GtkWidget*,GdkDragContext*,GdkAtom,guint32->void "void ($(GtkWidget *,GdkDragContext *,GdkAtom,guint32))")
    (type GdkDragContext*,gboolean,gboolean,guint32->void "void ($(GdkDragContext *,gboolean,gboolean,guint32))")
    (type GdkDragContext*->GtkWidget* "GtkWidget *($(GdkDragContext *))")
    (type GtkWidget*,GtkDestDefaults,GtkTargetEntry*,gint,GdkDragAction->void "void ($(GtkWidget *,GtkDestDefaults,GtkTargetEntry *,gint,GdkDragAction))")
    (type GtkWidget*,GdkWindow*,GdkDragProtocol,gboolean->void "void ($(GtkWidget *,GdkWindow *,GdkDragProtocol,gboolean))")
    (type GtkWidget*,GdkDragContext*,GtkTargetList*->GdkAtom "GdkAtom ($(GtkWidget *,GdkDragContext *,GtkTargetList *))")
    (type GtkWidget*->GtkTargetList* "GtkTargetList *($(GtkWidget *))")
    (type GtkWidget*,GtkTargetList*->void "void ($(GtkWidget *,GtkTargetList *))")
    (type GtkWidget*,GdkModifierType,GtkTargetEntry*,gint,GdkDragAction->void "void ($(GtkWidget *,GdkModifierType,GtkTargetEntry *,gint,GdkDragAction))")
    (type GtkWidget*,GdkColormap*,GdkPixmap*,GdkBitmap*->void "void ($(GtkWidget *,GdkColormap *,GdkPixmap *,GdkBitmap *))")
    (type GtkWidget*,GdkPixbuf*->void "void ($(GtkWidget *,GdkPixbuf *))")
    (type GtkWidget*,GtkTargetList*,GdkDragAction,gint,GdkEvent*->GdkDragContext* "GdkDragContext *($(GtkWidget *,GtkTargetList *,GdkDragAction,gint,GdkEvent *))")
    (type GdkDragContext*,GtkWidget*,gint,gint->void "void ($(GdkDragContext *,GtkWidget *,gint,gint))")
    (type GdkDragContext*,GdkColormap*,GdkPixmap*,GdkBitmap*,gint,gint->void "void ($(GdkDragContext *,GdkColormap *,GdkPixmap *,GdkBitmap *,gint,gint))")
    (type GdkDragContext*,GdkPixbuf*,gint,gint->void "void ($(GdkDragContext *,GdkPixbuf *,gint,gint))")
    (type GdkDragContext*,gchar*,gint,gint->void "void ($(GdkDragContext *,gchar *,gint,gint))")
    (type GtkWidget*,gint,gint,gint,gint->gboolean "gboolean ($(GtkWidget *,gint,gint,gint,gint))")
    (type GtkWidget*,GdkEvent*->void "void ($(GtkWidget *,GdkEvent *))")
    (type GdkColormap*,GdkPixmap*,GdkBitmap*,gint,gint->void "void ($(GdkColormap *,GdkPixmap *,GdkBitmap *,gint,gint))")
    (type GtkTreeModel*->GtkWidget* "GtkWidget *($(GtkTreeModel *))")
    (type GtkTreeView*->GtkTreeModel* "GtkTreeModel *($(GtkTreeView *))")
    (type GtkTreeView*,GtkTreeModel*->void "void ($(GtkTreeView *,GtkTreeModel *))")
    (type GtkTreeView*->GtkTreeSelection* "GtkTreeSelection *($(GtkTreeView *))")
    (type GtkTreeView*->GtkAdjustment* "GtkAdjustment *($(GtkTreeView *))")
    (type GtkTreeView*,GtkAdjustment*->void "void ($(GtkTreeView *,GtkAdjustment *))")
    (type GtkTreeView*,gboolean->void "void ($(GtkTreeView *,gboolean))")
    (type GtkTreeView*,GtkTreeViewColumn*->gint "gint ($(GtkTreeView *,GtkTreeViewColumn *))")
    (type GtkTreeView*,GtkTreeViewColumn*,gint->gint "gint ($(GtkTreeView *,GtkTreeViewColumn *,gint))")
    (type GtkTreeView*,gint,gchar*,GtkCellRenderer*,...GtkCellRenderer*->gint "gint ($(GtkTreeView *,gint,gchar *,GtkCellRenderer *,...))")
    (type GtkTreeView*,gint,gchar*,GtkCellRenderer*,GtkTreeCellDataFunc,gpointer,GDestroyNotify->gint "gint ($(GtkTreeView *,gint,gchar *,GtkCellRenderer *,GtkTreeCellDataFunc,gpointer,GDestroyNotify))")
    (type GtkTreeView*,gint->GtkTreeViewColumn* "GtkTreeViewColumn *($(GtkTreeView *,gint))")
    (type GtkTreeView*->GList* "GList *($(GtkTreeView *))")
    (type GtkTreeView*,GtkTreeViewColumn*,GtkTreeViewColumn*->void "void ($(GtkTreeView *,GtkTreeViewColumn *,GtkTreeViewColumn *))")
    (type GtkTreeView*,GtkTreeViewColumn*->void "void ($(GtkTreeView *,GtkTreeViewColumn *))")
    (type GtkTreeView*->GtkTreeViewColumn* "GtkTreeViewColumn *($(GtkTreeView *))")
    (type GtkTreeView*,GtkTreeViewColumnDropFunc,gpointer,GtkDestroyNotify->void "void ($(GtkTreeView *,GtkTreeViewColumnDropFunc,gpointer,GtkDestroyNotify))")
    (type GtkTreeView*,gint,gint->void "void ($(GtkTreeView *,gint,gint))")
    (type GtkTreeView*,GtkTreePath*,GtkTreeViewColumn*,gboolean,gfloat,gfloat->void "void ($(GtkTreeView *,GtkTreePath *,GtkTreeViewColumn *,gboolean,gfloat,gfloat))")
    (type GtkTreeView*,GtkTreePath*->void "void ($(GtkTreeView *,GtkTreePath *))")
    (type GtkTreeView*,GtkTreePath*,gboolean->gboolean "gboolean ($(GtkTreeView *,GtkTreePath *,gboolean))")
    (type GtkTreeView*,GtkTreePath*->gboolean "gboolean ($(GtkTreeView *,GtkTreePath *))")
    (type GtkTreeView*,GtkTreeViewMappingFunc,gpointer->void "void ($(GtkTreeView *,GtkTreeViewMappingFunc,gpointer))")
    (type GtkTreeView*,GtkTreePath*,GtkTreeViewColumn*,gboolean->void "void ($(GtkTreeView *,GtkTreePath *,GtkTreeViewColumn *,gboolean))")
    (type GtkTreeView*,GtkTreePath*,GtkTreeViewColumn*,GtkCellRenderer*,gboolean->void "void ($(GtkTreeView *,GtkTreePath *,GtkTreeViewColumn *,GtkCellRenderer *,gboolean))")
    (type GtkTreePath** (pointer GtkTreePath*) "GtkTreePath **")
    (type GtkTreeViewColumn** (pointer GtkTreeViewColumn*) "GtkTreeViewColumn **")
    (type GtkTreeView*,GtkTreePath**,GtkTreeViewColumn**->void "void ($(GtkTreeView *,GtkTreePath **,GtkTreeViewColumn **))")
    (type GtkTreeView*->GdkWindow* "GdkWindow *($(GtkTreeView *))")
    (type GtkTreeView*,gint,gint,GtkTreePath**,GtkTreeViewColumn**,gint*,gint*->gboolean "gboolean ($(GtkTreeView *,gint,gint,GtkTreePath **,GtkTreeViewColumn **,gint *,gint *))")
    (type GtkTreeView*,GtkTreePath*,GtkTreeViewColumn*,GdkRectangle*->void "void ($(GtkTreeView *,GtkTreePath *,GtkTreeViewColumn *,GdkRectangle *))")
    (type GtkTreeView*,GdkRectangle*->void "void ($(GtkTreeView *,GdkRectangle *))")
    (type GtkTreeView*,gint,gint,gint*,gint*->void "void ($(GtkTreeView *,gint,gint,gint *,gint *))")
    (type GtkTreeView*,GdkModifierType,GtkTargetEntry*,gint,GdkDragAction->void "void ($(GtkTreeView *,GdkModifierType,GtkTargetEntry *,gint,GdkDragAction))")
    (type GtkTreeView*,GtkTargetEntry*,gint,GdkDragAction->void "void ($(GtkTreeView *,GtkTargetEntry *,gint,GdkDragAction))")
    (type GtkTreeView*,GtkTreePath*,GtkTreeViewDropPosition->void "void ($(GtkTreeView *,GtkTreePath *,GtkTreeViewDropPosition))")
    (type GtkTreeViewDropPosition* (pointer GtkTreeViewDropPosition) "GtkTreeViewDropPosition *")
    (type GtkTreeView*,GtkTreePath**,GtkTreeViewDropPosition*->void "void ($(GtkTreeView *,GtkTreePath **,GtkTreeViewDropPosition *))")
    (type GtkTreeView*,gint,gint,GtkTreePath**,GtkTreeViewDropPosition*->gboolean "gboolean ($(GtkTreeView *,gint,gint,GtkTreePath **,GtkTreeViewDropPosition *))")
    (type GtkTreeView*,GtkTreePath*->GdkPixmap* "GdkPixmap *($(GtkTreeView *,GtkTreePath *))")
    (type GtkTreeView*->gint "gint ($(GtkTreeView *))")
    (type GtkTreeView*,gint->void "void ($(GtkTreeView *,gint))")
    (type GtkTreeView*->GtkTreeViewSearchEqualFunc "GtkTreeViewSearchEqualFunc ($(GtkTreeView *))")
    (type GtkTreeView*,GtkTreeViewSearchEqualFunc,gpointer,GtkDestroyNotify->void "void ($(GtkTreeView *,GtkTreeViewSearchEqualFunc,gpointer,GtkDestroyNotify))")
    (type GtkTreeView*,GtkTreeDestroyCountFunc,gpointer,GtkDestroyNotify->void "void ($(GtkTreeView *,GtkTreeDestroyCountFunc,gpointer,GtkDestroyNotify))")
    (type GtkTreeView*->GtkTreeViewRowSeparatorFunc "GtkTreeViewRowSeparatorFunc ($(GtkTreeView *))")
    (type GtkTreeView*,GtkTreeViewRowSeparatorFunc,gpointer,GtkDestroyNotify->void "void ($(GtkTreeView *,GtkTreeViewRowSeparatorFunc,gpointer,GtkDestroyNotify))")
    (type GtkComboBox*->gint "gint ($(GtkComboBox *))")
    (type GtkComboBox*,gint->void "void ($(GtkComboBox *,gint))")
    (type GtkComboBox*->gboolean "gboolean ($(GtkComboBox *))")
    (type GtkComboBox*,gboolean->void "void ($(GtkComboBox *,gboolean))")
    (type GtkComboBox*,GtkTreeIter*->gboolean "gboolean ($(GtkComboBox *,GtkTreeIter *))")
    (type GtkComboBox*,GtkTreeIter*->void "void ($(GtkComboBox *,GtkTreeIter *))")
    (type GtkComboBox*,GtkTreeModel*->void "void ($(GtkComboBox *,GtkTreeModel *))")
    (type GtkComboBox*->GtkTreeModel* "GtkTreeModel *($(GtkComboBox *))")
    (type GtkComboBox*->GtkTreeViewRowSeparatorFunc "GtkTreeViewRowSeparatorFunc ($(GtkComboBox *))")
    (type GtkComboBox*,GtkTreeViewRowSeparatorFunc,gpointer,GtkDestroyNotify->void "void ($(GtkComboBox *,GtkTreeViewRowSeparatorFunc,gpointer,GtkDestroyNotify))")
    (type GtkComboBox*,gchar*->void "void ($(GtkComboBox *,gchar *))")
    (type GtkComboBox*,gint,gchar*->void "void ($(GtkComboBox *,gint,gchar *))")
    (type GtkComboBox*->gchar* "gchar *($(GtkComboBox *))")
    (type GtkComboBox*->AtkObject* "AtkObject *($(GtkComboBox *))")
    (type GtkTreeModel*,gint->GtkWidget* "GtkWidget *($(GtkTreeModel *,gint))")
    (type GtkComboBoxEntry*,gint->void "void ($(GtkComboBoxEntry *,gint))")
    (type GtkComboBoxEntry*->gint "gint ($(GtkComboBoxEntry *))")
    (type gint,gint,gchar**->GtkWidget* "GtkWidget *($(gint,gint,gchar **))")
    (type gint,gint->GtkWidget* "GtkWidget *($(gint,gint))")
    (type GtkCTree*,GtkCTreeNode*,GtkCTreeNode*,gchar**,guint8,GdkPixmap*,GdkBitmap*,GdkPixmap*,GdkBitmap*,gboolean,gboolean->GtkCTreeNode* "GtkCTreeNode *($(GtkCTree *,GtkCTreeNode *,GtkCTreeNode *,gchar **,guint8,GdkPixmap *,GdkBitmap *,GdkPixmap *,GdkBitmap *,gboolean,gboolean))")
    (type GtkCTree*,GtkCTreeNode*,GtkCTreeNode*,GNode*,GtkCTreeGNodeFunc,gpointer->GtkCTreeNode* "GtkCTreeNode *($(GtkCTree *,GtkCTreeNode *,GtkCTreeNode *,GNode *,GtkCTreeGNodeFunc,gpointer))")
    (type GtkCTree*,GNode*,GNode*,GtkCTreeNode*,GtkCTreeGNodeFunc,gpointer->GNode* "GNode *($(GtkCTree *,GNode *,GNode *,GtkCTreeNode *,GtkCTreeGNodeFunc,gpointer))")
    (type GtkCTree*,GtkCTreeNode*,GtkCTreeFunc,gpointer->void "void ($(GtkCTree *,GtkCTreeNode *,GtkCTreeFunc,gpointer))")
    (type GtkCTree*,GtkCTreeNode*,gint,GtkCTreeFunc,gpointer->void "void ($(GtkCTree *,GtkCTreeNode *,gint,GtkCTreeFunc,gpointer))")
    (type GtkCTree*,GtkCTreeNode*->gboolean "gboolean ($(GtkCTree *,GtkCTreeNode *))")
    (type GtkCTree*,GtkCTreeNode*->GtkCTreeNode* "GtkCTreeNode *($(GtkCTree *,GtkCTreeNode *))")
    (type GtkCTree*,GtkCTreeRow*->GtkCTreeNode* "GtkCTreeNode *($(GtkCTree *,GtkCTreeRow *))")
    (type GtkCTree*,guint->GtkCTreeNode* "GtkCTreeNode *($(GtkCTree *,guint))")
    (type GtkCTree*,GtkCTreeNode*,GtkCTreeNode*->gboolean "gboolean ($(GtkCTree *,GtkCTreeNode *,GtkCTreeNode *))")
    (type GtkCTree*,GtkCTreeNode*,gpointer->GtkCTreeNode* "GtkCTreeNode *($(GtkCTree *,GtkCTreeNode *,gpointer))")
    (type GtkCTree*,GtkCTreeNode*,gpointer->GList* "GList *($(GtkCTree *,GtkCTreeNode *,gpointer))")
    (type GtkCTree*,GtkCTreeNode*,gpointer,GCompareFunc->GtkCTreeNode* "GtkCTreeNode *($(GtkCTree *,GtkCTreeNode *,gpointer,GCompareFunc))")
    (type GtkCTree*,GtkCTreeNode*,gpointer,GCompareFunc->GList* "GList *($(GtkCTree *,GtkCTreeNode *,gpointer,GCompareFunc))")
    (type GtkCTree*,gint,gint->gboolean "gboolean ($(GtkCTree *,gint,gint))")
    (type GtkCTree*,GtkCTreeNode*,gint,gchar*->void "void ($(GtkCTree *,GtkCTreeNode *,gint,gchar *))")
    (type GtkCTree*,GtkCTreeNode*,gint,GdkPixmap*,GdkBitmap*->void "void ($(GtkCTree *,GtkCTreeNode *,gint,GdkPixmap *,GdkBitmap *))")
    (type GtkCTree*,GtkCTreeNode*,gint,gchar*,guint8,GdkPixmap*,GdkBitmap*->void "void ($(GtkCTree *,GtkCTreeNode *,gint,gchar *,guint8,GdkPixmap *,GdkBitmap *))")
    (type GtkCTree*,GtkCTreeNode*,gchar*,guint8,GdkPixmap*,GdkBitmap*,GdkPixmap*,GdkBitmap*,gboolean,gboolean->void "void ($(GtkCTree *,GtkCTreeNode *,gchar *,guint8,GdkPixmap *,GdkBitmap *,GdkPixmap *,GdkBitmap *,gboolean,gboolean))")
    (type GtkCTree*,GtkCTreeNode*,gint,gint,gint->void "void ($(GtkCTree *,GtkCTreeNode *,gint,gint,gint))")
    (type GtkCTree*,GtkCTreeNode*,gboolean->void "void ($(GtkCTree *,GtkCTreeNode *,gboolean))")
    (type GtkCTree*,GtkCTreeNode*,gint->GtkCellType "GtkCellType ($(GtkCTree *,GtkCTreeNode *,gint))")
    (type GtkCTree*,GtkCTreeNode*,gint,gchar**->gboolean "gboolean ($(GtkCTree *,GtkCTreeNode *,gint,gchar **))")
    (type GtkCTree*,GtkCTreeNode*,gint,GdkPixmap**,GdkBitmap**->gboolean "gboolean ($(GtkCTree *,GtkCTreeNode *,gint,GdkPixmap **,GdkBitmap **))")
    (type GtkCTree*,GtkCTreeNode*,gint,gchar**,guint8*,GdkPixmap**,GdkBitmap**->gboolean "gboolean ($(GtkCTree *,GtkCTreeNode *,gint,gchar **,guint8 *,GdkPixmap **,GdkBitmap **))")
    (type GtkCTree*,GtkCTreeNode*,gchar**,guint8*,GdkPixmap**,GdkBitmap**,GdkPixmap**,GdkBitmap**,gboolean*,gboolean*->gboolean "gboolean ($(GtkCTree *,GtkCTreeNode *,gchar **,guint8 *,GdkPixmap **,GdkBitmap **,GdkPixmap **,GdkBitmap **,gboolean *,gboolean *))")
    (type GtkCTree*,GtkCTreeNode*,GtkStyle*->void "void ($(GtkCTree *,GtkCTreeNode *,GtkStyle *))")
    (type GtkCTree*,GtkCTreeNode*->GtkStyle* "GtkStyle *($(GtkCTree *,GtkCTreeNode *))")
    (type GtkCTree*,GtkCTreeNode*,gint,GtkStyle*->void "void ($(GtkCTree *,GtkCTreeNode *,gint,GtkStyle *))")
    (type GtkCTree*,GtkCTreeNode*,gint->GtkStyle* "GtkStyle *($(GtkCTree *,GtkCTreeNode *,gint))")
    (type GtkCTree*,GtkCTreeNode*,GdkColor*->void "void ($(GtkCTree *,GtkCTreeNode *,GdkColor *))")
    (type GtkCTree*,GtkCTreeNode*,gpointer,GtkDestroyNotify->void "void ($(GtkCTree *,GtkCTreeNode *,gpointer,GtkDestroyNotify))")
    (type GtkCTree*,GtkCTreeNode*->gpointer "gpointer ($(GtkCTree *,GtkCTreeNode *))")
    (type GtkCTree*,GtkCTreeNode*,gint,gfloat,gfloat->void "void ($(GtkCTree *,GtkCTreeNode *,gint,gfloat,gfloat))")
    (type GtkCTree*,GtkCTreeNode*->GtkVisibility "GtkVisibility ($(GtkCTree *,GtkCTreeNode *))")
    (type GtkCTree*,gint->void "void ($(GtkCTree *,gint))")
    (type GtkCTree*,gboolean->void "void ($(GtkCTree *,gboolean))")
    (type GtkCTree*,GtkCTreeLineStyle->void "void ($(GtkCTree *,GtkCTreeLineStyle))")
    (type GtkCTree*,GtkCTreeExpanderStyle->void "void ($(GtkCTree *,GtkCTreeExpanderStyle))")
    (type GtkCTree*,GtkCTreeCompareDragFunc->void "void ($(GtkCTree *,GtkCTreeCompareDragFunc))")
    (type GtkDrawingArea*,gint,gint->void "void ($(GtkDrawingArea *,gint,gint))")
    (type GtkCurve*,gfloat->void "void ($(GtkCurve *,gfloat))")
    (type GtkCurve*,gfloat,gfloat,gfloat,gfloat->void "void ($(GtkCurve *,gfloat,gfloat,gfloat,gfloat))")
    (type gfloat-array (array gfloat) "gfloat $[  ]")
    (type GtkCurve*,int,gfloat*->void "void ($(GtkCurve *,int,gfloat *))")
    (type GtkCurve*,GtkCurveType->void "void ($(GtkCurve *,GtkCurveType))")
    (type GtkEditable*,gboolean->void "void ($(GtkEditable *,gboolean))")
    (type GtkEditable*->gboolean "gboolean ($(GtkEditable *))")
    (type gint,...gint->GtkListStore* "GtkListStore *($(gint,...))")
    (type gint,GType*->GtkListStore* "GtkListStore *($(gint,GType *))")
    (type GtkListStore*,gint,GType*->void "void ($(GtkListStore *,gint,GType *))")
    (type GtkListStore*,GtkTreeIter*,gint,GValue*->void "void ($(GtkListStore *,GtkTreeIter *,gint,GValue *))")
    (type GtkListStore*,GtkTreeIter*,...GtkTreeIter*->void "void ($(GtkListStore *,GtkTreeIter *,...))")
    (type GtkListStore*,GtkTreeIter*->gboolean "gboolean ($(GtkListStore *,GtkTreeIter *))")
    (type GtkListStore*,GtkTreeIter*,gint->void "void ($(GtkListStore *,GtkTreeIter *,gint))")
    (type GtkListStore*,GtkTreeIter*,GtkTreeIter*->void "void ($(GtkListStore *,GtkTreeIter *,GtkTreeIter *))")
    (type GtkListStore*,GtkTreeIter*,gint,...gint->void "void ($(GtkListStore *,GtkTreeIter *,gint,...))")
    (type GtkListStore*,GtkTreeIter*,gint,gint*,GValue*,gint->void "void ($(GtkListStore *,GtkTreeIter *,gint,gint *,GValue *,gint))")
    (type GtkListStore*,GtkTreeIter*->void "void ($(GtkListStore *,GtkTreeIter *))")
    (type GtkListStore*->void "void ($(GtkListStore *))")
    (type GtkListStore*,gint*->void "void ($(GtkListStore *,gint *))")
    (type GtkTreeModel*,GtkTreePath*->GtkTreeModel* "GtkTreeModel *($(GtkTreeModel *,GtkTreePath *))")
    (type GtkTreeModelFilter*,GtkTreeModelFilterVisibleFunc,gpointer,GtkDestroyNotify->void "void ($(GtkTreeModelFilter *,GtkTreeModelFilterVisibleFunc,gpointer,GtkDestroyNotify))")
    (type GtkTreeModelFilter*,gint,GType*,GtkTreeModelFilterModifyFunc,gpointer,GtkDestroyNotify->void "void ($(GtkTreeModelFilter *,gint,GType *,GtkTreeModelFilterModifyFunc,gpointer,GtkDestroyNotify))")
    (type GtkTreeModelFilter*,gint->void "void ($(GtkTreeModelFilter *,gint))")
    (type GtkTreeModelFilter*->GtkTreeModel* "GtkTreeModel *($(GtkTreeModelFilter *))")
    (type GtkTreeModelFilter*,GtkTreeIter*,GtkTreeIter*->void "void ($(GtkTreeModelFilter *,GtkTreeIter *,GtkTreeIter *))")
    (type GtkTreeModelFilter*,GtkTreePath*->GtkTreePath* "GtkTreePath *($(GtkTreeModelFilter *,GtkTreePath *))")
    (type GtkTreeModelFilter*->void "void ($(GtkTreeModelFilter *))")
    (type void->GtkEntryCompletion* "GtkEntryCompletion *($(void))")
    (type GtkEntryCompletion*->GtkWidget* "GtkWidget *($(GtkEntryCompletion *))")
    (type GtkEntryCompletion*,GtkTreeModel*->void "void ($(GtkEntryCompletion *,GtkTreeModel *))")
    (type GtkEntryCompletion*->GtkTreeModel* "GtkTreeModel *($(GtkEntryCompletion *))")
    (type GtkEntryCompletion*,GtkEntryCompletionMatchFunc,gpointer,GDestroyNotify->void "void ($(GtkEntryCompletion *,GtkEntryCompletionMatchFunc,gpointer,GDestroyNotify))")
    (type GtkEntryCompletion*->gint "gint ($(GtkEntryCompletion *))")
    (type GtkEntryCompletion*->void "void ($(GtkEntryCompletion *))")
    (type GtkEntryCompletion*,gint,gchar*->void "void ($(GtkEntryCompletion *,gint,gchar *))")
    (type GtkEntryCompletion*,gboolean->void "void ($(GtkEntryCompletion *,gboolean))")
    (type GtkEntryCompletion*->gboolean "gboolean ($(GtkEntryCompletion *))")
    (type GtkEntry*,gboolean->void "void ($(GtkEntry *,gboolean))")
    (type GtkEntry*->gboolean "gboolean ($(GtkEntry *))")
    (type GtkEntry*,gunichar->void "void ($(GtkEntry *,gunichar))")
    (type GtkEntry*->gunichar "gunichar ($(GtkEntry *))")
    (type GtkEntry*,gint->void "void ($(GtkEntry *,gint))")
    (type GtkEntry*->gint "gint ($(GtkEntry *))")
    (type GtkEntry*->gchar* "gchar *($(GtkEntry *))")
    (type GtkEntry*->PangoLayout* "PangoLayout *($(GtkEntry *))")
    (type GtkEntry*,gint*,gint*->void "void ($(GtkEntry *,gint *,gint *))")
    (type GtkEntry*,gfloat->void "void ($(GtkEntry *,gfloat))")
    (type GtkEntry*->gfloat "gfloat ($(GtkEntry *))")
    (type GtkEntry*,GtkEntryCompletion*->void "void ($(GtkEntry *,GtkEntryCompletion *))")
    (type GtkEntry*->GtkEntryCompletion* "GtkEntryCompletion *($(GtkEntry *))")
    (type GtkEntry*,gint->gint "gint ($(GtkEntry *,gint))")
    (type GtkEntry*,gint,gint->void "void ($(GtkEntry *,gint,gint))")
    (type GtkEventBox*->gboolean "gboolean ($(GtkEventBox *))")
    (type GtkEventBox*,gboolean->void "void ($(GtkEventBox *,gboolean))")
    (type GtkExpander*,gboolean->void "void ($(GtkExpander *,gboolean))")
    (type GtkExpander*->gboolean "gboolean ($(GtkExpander *))")
    (type GtkExpander*,gint->void "void ($(GtkExpander *,gint))")
    (type GtkExpander*->gint "gint ($(GtkExpander *))")
    (type GtkExpander*,gchar*->void "void ($(GtkExpander *,gchar *))")
    (type GtkExpander*->gchar* "gchar *($(GtkExpander *))")
    (type GtkExpander*,GtkWidget*->void "void ($(GtkExpander *,GtkWidget *))")
    (type GtkExpander*->GtkWidget* "GtkWidget *($(GtkExpander *))")
    (type GtkFileSelection*,gchar*->void "void ($(GtkFileSelection *,gchar *))")
    (type GtkFileSelection*->gchar* "gchar *($(GtkFileSelection *))")
    (type GtkFileSelection*->void "void ($(GtkFileSelection *))")
    (type GtkFileSelection*->gchar** "gchar **($(GtkFileSelection *))")
    (type GtkFileSelection*,gboolean->void "void ($(GtkFileSelection *,gboolean))")
    (type GtkFileSelection*->gboolean "gboolean ($(GtkFileSelection *))")
    (type GtkFixed*,GtkWidget*,gint,gint->void "void ($(GtkFixed *,GtkWidget *,gint,gint))")
    (type GtkFixed*,gboolean->void "void ($(GtkFixed *,gboolean))")
    (type GtkFixed*->gboolean "gboolean ($(GtkFixed *))")
    (type void->GtkFileFilter* "GtkFileFilter *($(void))")
    (type GtkFileFilter*,gchar*->void "void ($(GtkFileFilter *,gchar *))")
    (type GtkFileFilter*->gchar* "gchar *($(GtkFileFilter *))")
    (type GtkFileFilter*->void "void ($(GtkFileFilter *))")
    (type GtkFileFilter*,GtkFileFilterFlags,GtkFileFilterFunc,gpointer,GDestroyNotify->void "void ($(GtkFileFilter *,GtkFileFilterFlags,GtkFileFilterFunc,gpointer,GDestroyNotify))")
    (type GtkFileFilter*->GtkFileFilterFlags "GtkFileFilterFlags ($(GtkFileFilter *))")
    (type GtkFileFilter*,GtkFileFilterInfo*->gboolean "gboolean ($(GtkFileFilter *,GtkFileFilterInfo *))")
    (type GtkFileChooser*,GtkFileChooserAction->void "void ($(GtkFileChooser *,GtkFileChooserAction))")
    (type GtkFileChooser*->GtkFileChooserAction "GtkFileChooserAction ($(GtkFileChooser *))")
    (type GtkFileChooser*,gboolean->void "void ($(GtkFileChooser *,gboolean))")
    (type GtkFileChooser*->gboolean "gboolean ($(GtkFileChooser *))")
    (type GtkFileChooser*,gchar*->void "void ($(GtkFileChooser *,gchar *))")
    (type GtkFileChooser*->gchar* "gchar *($(GtkFileChooser *))")
    (type GtkFileChooser*,string->gboolean "gboolean ($(GtkFileChooser *,char *))")
    (type GtkFileChooser*,string->void "void ($(GtkFileChooser *,char *))")
    (type GtkFileChooser*->void "void ($(GtkFileChooser *))")
    (type GtkFileChooser*->GSList* "GSList *($(GtkFileChooser *))")
    (type GtkFileChooser*,gchar*->gboolean "gboolean ($(GtkFileChooser *,gchar *))")
    (type GtkFileChooser*,GtkWidget*->void "void ($(GtkFileChooser *,GtkWidget *))")
    (type GtkFileChooser*->GtkWidget* "GtkWidget *($(GtkFileChooser *))")
    (type GtkFileChooser*->string "char *($(GtkFileChooser *))")
    (type GtkFileChooser*,GtkFileFilter*->void "void ($(GtkFileChooser *,GtkFileFilter *))")
    (type GtkFileChooser*->GtkFileFilter* "GtkFileFilter *($(GtkFileChooser *))")
    (type GtkFileChooser*,string,GError**->gboolean "gboolean ($(GtkFileChooser *,char *,GError **))")
    (type gchar*,GtkFileChooserAction->GtkWidget* "GtkWidget *($(gchar *,GtkFileChooserAction))")
    (type gchar*,GtkFileChooserAction,gchar*->GtkWidget* "GtkWidget *($(gchar *,GtkFileChooserAction,gchar *))")
    (type GtkFileChooserButton*->gchar* "gchar *($(GtkFileChooserButton *))")
    (type GtkFileChooserButton*,gchar*->void "void ($(GtkFileChooserButton *,gchar *))")
    (type GtkFileChooserButton*->gint "gint ($(GtkFileChooserButton *))")
    (type GtkFileChooserButton*,gint->void "void ($(GtkFileChooserButton *,gint))")
    (type gchar*,GtkWindow*,GtkFileChooserAction,gchar*,...gchar*->GtkWidget* "GtkWidget *($(gchar *,GtkWindow *,GtkFileChooserAction,gchar *,...))")
    (type gchar*,GtkWindow*,GtkFileChooserAction,gchar*,gchar*,...gchar*->GtkWidget* "GtkWidget *($(gchar *,GtkWindow *,GtkFileChooserAction,gchar *,gchar *,...))")
    (type GtkFileChooserAction->GtkWidget* "GtkWidget *($(GtkFileChooserAction))")
    (type GtkFileChooserAction,gchar*->GtkWidget* "GtkWidget *($(GtkFileChooserAction,gchar *))")
    (type GtkFontButton*->gchar* "gchar *($(GtkFontButton *))")
    (type GtkFontButton*,gchar*->void "void ($(GtkFontButton *,gchar *))")
    (type GtkFontButton*->gboolean "gboolean ($(GtkFontButton *))")
    (type GtkFontButton*,gboolean->void "void ($(GtkFontButton *,gboolean))")
    (type GtkFontButton*,gchar*->gboolean "gboolean ($(GtkFontButton *,gchar *))")
    (type GtkFontSelection*->gchar* "gchar *($(GtkFontSelection *))")
    (type GtkFontSelection*->GdkFont* "GdkFont *($(GtkFontSelection *))")
    (type GtkFontSelection*,gchar*->gboolean "gboolean ($(GtkFontSelection *,gchar *))")
    (type GtkFontSelection*,gchar*->void "void ($(GtkFontSelection *,gchar *))")
    (type GtkFontSelectionDialog*->gchar* "gchar *($(GtkFontSelectionDialog *))")
    (type GtkFontSelectionDialog*->GdkFont* "GdkFont *($(GtkFontSelectionDialog *))")
    (type GtkFontSelectionDialog*,gchar*->gboolean "gboolean ($(GtkFontSelectionDialog *,gchar *))")
    (type GtkFontSelectionDialog*,gchar*->void "void ($(GtkFontSelectionDialog *,gchar *))")
    (type gint,GdkColormap*,GdkGCValues*,GdkGCValuesMask->GdkGC* "GdkGC *($(gint,GdkColormap *,GdkGCValues *,GdkGCValuesMask))")
    (type GtkHandleBox*,GtkShadowType->void "void ($(GtkHandleBox *,GtkShadowType))")
    (type GtkHandleBox*->GtkShadowType "GtkShadowType ($(GtkHandleBox *))")
    (type GtkHandleBox*,GtkPositionType->void "void ($(GtkHandleBox *,GtkPositionType))")
    (type GtkHandleBox*->GtkPositionType "GtkPositionType ($(GtkHandleBox *))")
    (type void->GtkButtonBoxStyle "GtkButtonBoxStyle ($(void))")
    (type GtkButtonBoxStyle->void "void ($(GtkButtonBoxStyle))")
    (type GtkPaned*,GtkWidget*->void "void ($(GtkPaned *,GtkWidget *))")
    (type GtkPaned*,GtkWidget*,gboolean,gboolean->void "void ($(GtkPaned *,GtkWidget *,gboolean,gboolean))")
    (type GtkPaned*->gint "gint ($(GtkPaned *))")
    (type GtkPaned*,gint->void "void ($(GtkPaned *,gint))")
    (type GtkPaned*->GtkWidget* "GtkWidget *($(GtkPaned *))")
    (type GtkPaned*,gint,gint,gint->void "void ($(GtkPaned *,gint,gint,gint))")
    (type GtkRuler*,GtkMetricType->void "void ($(GtkRuler *,GtkMetricType))")
    (type GtkRuler*,gdouble,gdouble,gdouble,gdouble->void "void ($(GtkRuler *,gdouble,gdouble,gdouble,gdouble))")
    (type GtkRuler*->GtkMetricType "GtkMetricType ($(GtkRuler *))")
    (type GtkRuler*,gdouble*,gdouble*,gdouble*,gdouble*->void "void ($(GtkRuler *,gdouble *,gdouble *,gdouble *,gdouble *))")
    (type GtkScale*,gint->void "void ($(GtkScale *,gint))")
    (type GtkScale*->gint "gint ($(GtkScale *))")
    (type GtkScale*,gboolean->void "void ($(GtkScale *,gboolean))")
    (type GtkScale*->gboolean "gboolean ($(GtkScale *))")
    (type GtkScale*,GtkPositionType->void "void ($(GtkScale *,GtkPositionType))")
    (type GtkScale*->GtkPositionType "GtkPositionType ($(GtkScale *))")
    (type GtkScale*->PangoLayout* "PangoLayout *($(GtkScale *))")
    (type gdouble,gdouble,gdouble->GtkWidget* "GtkWidget *($(gdouble,gdouble,gdouble))")
    (type void->GtkIconFactory* "GtkIconFactory *($(void))")
    (type GtkIconFactory*,gchar*,GtkIconSet*->void "void ($(GtkIconFactory *,gchar *,GtkIconSet *))")
    (type GtkIconFactory*,gchar*->GtkIconSet* "GtkIconSet *($(GtkIconFactory *,gchar *))")
    (type GtkIconFactory*->void "void ($(GtkIconFactory *))")
    (type gchar*->GtkIconSet* "GtkIconSet *($(gchar *))")
    (type GtkIconSize,gint*,gint*->gboolean "gboolean ($(GtkIconSize,gint *,gint *))")
    (type GtkSettings*,GtkIconSize,gint*,gint*->gboolean "gboolean ($(GtkSettings *,GtkIconSize,gint *,gint *))")
    (type gchar*,gint,gint->GtkIconSize "GtkIconSize ($(gchar *,gint,gint))")
    (type gchar*,GtkIconSize->void "void ($(gchar *,GtkIconSize))")
    (type gchar*->GtkIconSize "GtkIconSize ($(gchar *))")
    (type GtkIconSize->gchar* "gchar *($(GtkIconSize))")
    (type void->GtkIconSet* "GtkIconSet *($(void))")
    (type GdkPixbuf*->GtkIconSet* "GtkIconSet *($(GdkPixbuf *))")
    (type GtkIconSet*->GtkIconSet* "GtkIconSet *($(GtkIconSet *))")
    (type GtkIconSet*->void "void ($(GtkIconSet *))")
    (type GtkIconSet*,GtkStyle*,GtkTextDirection,GtkStateType,GtkIconSize,GtkWidget*,string->GdkPixbuf* "GdkPixbuf *($(GtkIconSet *,GtkStyle *,GtkTextDirection,GtkStateType,GtkIconSize,GtkWidget *,char *))")
    (type GtkIconSet*,GtkIconSource*->void "void ($(GtkIconSet *,GtkIconSource *))")
    (type GtkIconSize** (pointer GtkIconSize*) "GtkIconSize **")
    (type GtkIconSet*,GtkIconSize**,gint*->void "void ($(GtkIconSet *,GtkIconSize **,gint *))")
    (type void->GtkIconSource* "GtkIconSource *($(void))")
    (type GtkIconSource*->GtkIconSource* "GtkIconSource *($(GtkIconSource *))")
    (type GtkIconSource*->void "void ($(GtkIconSource *))")
    (type GtkIconSource*,gchar*->void "void ($(GtkIconSource *,gchar *))")
    (type GtkIconSource*,GdkPixbuf*->void "void ($(GtkIconSource *,GdkPixbuf *))")
    (type GtkIconSource*->gchar* "gchar *($(GtkIconSource *))")
    (type GtkIconSource*->GdkPixbuf* "GdkPixbuf *($(GtkIconSource *))")
    (type GtkIconSource*,gboolean->void "void ($(GtkIconSource *,gboolean))")
    (type GtkIconSource*->gboolean "gboolean ($(GtkIconSource *))")
    (type GtkIconSource*,GtkTextDirection->void "void ($(GtkIconSource *,GtkTextDirection))")
    (type GtkIconSource*,GtkStateType->void "void ($(GtkIconSource *,GtkStateType))")
    (type GtkIconSource*,GtkIconSize->void "void ($(GtkIconSource *,GtkIconSize))")
    (type GtkIconSource*->GtkTextDirection "GtkTextDirection ($(GtkIconSource *))")
    (type GtkIconSource*->GtkStateType "GtkStateType ($(GtkIconSource *))")
    (type GtkIconSource*->GtkIconSize "GtkIconSize ($(GtkIconSource *))")
    (type void->GtkIconTheme* "GtkIconTheme *($(void))")
    (type GdkScreen*->GtkIconTheme* "GtkIconTheme *($(GdkScreen *))")
    (type GtkIconTheme*,GdkScreen*->void "void ($(GtkIconTheme *,GdkScreen *))")
    (type GtkIconTheme*,gchar**,gint->void "void ($(GtkIconTheme *,gchar **,gint))")
    (type gchar**-array (array gchar**) "gchar **$[  ]")
    (type GtkIconTheme*,gchar***,gint*->void "void ($(GtkIconTheme *,gchar ***,gint *))")
    (type GtkIconTheme*,gchar*->void "void ($(GtkIconTheme *,gchar *))")
    (type GtkIconTheme*,gchar*->gboolean "gboolean ($(GtkIconTheme *,gchar *))")
    (type GtkIconTheme*,gchar*->gint* "gint *($(GtkIconTheme *,gchar *))")
    (type GtkIconTheme*,gchar*,gint,GtkIconLookupFlags->GtkIconInfo* "GtkIconInfo *($(GtkIconTheme *,gchar *,gint,GtkIconLookupFlags))")
    (type GtkIconTheme*,gchar*,gint,GtkIconLookupFlags,GError**->GdkPixbuf* "GdkPixbuf *($(GtkIconTheme *,gchar *,gint,GtkIconLookupFlags,GError **))")
    (type GtkIconTheme*,gchar*->GList* "GList *($(GtkIconTheme *,gchar *))")
    (type GtkIconTheme*->string "char *($(GtkIconTheme *))")
    (type GtkIconTheme*->gboolean "gboolean ($(GtkIconTheme *))")
    (type gchar*,gint,GdkPixbuf*->void "void ($(gchar *,gint,GdkPixbuf *))")
    (type GtkIconInfo*->GtkIconInfo* "GtkIconInfo *($(GtkIconInfo *))")
    (type GtkIconInfo*->void "void ($(GtkIconInfo *))")
    (type GtkIconInfo*->gint "gint ($(GtkIconInfo *))")
    (type GtkIconInfo*->gchar* "gchar *($(GtkIconInfo *))")
    (type GtkIconInfo*->GdkPixbuf* "GdkPixbuf *($(GtkIconInfo *))")
    (type GtkIconInfo*,GError**->GdkPixbuf* "GdkPixbuf *($(GtkIconInfo *,GError **))")
    (type GtkIconInfo*,gboolean->void "void ($(GtkIconInfo *,gboolean))")
    (type GtkIconInfo*,GdkRectangle*->gboolean "gboolean ($(GtkIconInfo *,GdkRectangle *))")
    (type GdkPoint** (pointer GdkPoint*) "GdkPoint **")
    (type GtkIconInfo*,GdkPoint**,gint*->gboolean "gboolean ($(GtkIconInfo *,GdkPoint **,gint *))")
    (type GtkIconView*,GtkTreeModel*->void "void ($(GtkIconView *,GtkTreeModel *))")
    (type GtkIconView*->GtkTreeModel* "GtkTreeModel *($(GtkIconView *))")
    (type GtkIconView*,gint->void "void ($(GtkIconView *,gint))")
    (type GtkIconView*->gint "gint ($(GtkIconView *))")
    (type GtkIconView*,GtkOrientation->void "void ($(GtkIconView *,GtkOrientation))")
    (type GtkIconView*->GtkOrientation "GtkOrientation ($(GtkIconView *))")
    (type GtkIconView*,gint,gint->GtkTreePath* "GtkTreePath *($(GtkIconView *,gint,gint))")
    (type GtkIconView*,GtkIconViewForeachFunc,gpointer->void "void ($(GtkIconView *,GtkIconViewForeachFunc,gpointer))")
    (type GtkIconView*,GtkSelectionMode->void "void ($(GtkIconView *,GtkSelectionMode))")
    (type GtkIconView*->GtkSelectionMode "GtkSelectionMode ($(GtkIconView *))")
    (type GtkIconView*,GtkTreePath*->gboolean "gboolean ($(GtkIconView *,GtkTreePath *))")
    (type GtkIconView*->GList* "GList *($(GtkIconView *))")
    (type gchar*,GtkAccelGroup*->GtkWidget* "GtkWidget *($(gchar *,GtkAccelGroup *))")
    (type GtkImageMenuItem*,GtkWidget*->void "void ($(GtkImageMenuItem *,GtkWidget *))")
    (type GtkImageMenuItem*->GtkWidget* "GtkWidget *($(GtkImageMenuItem *))")
    (type void->GtkIMContext* "GtkIMContext *($(void))")
    (type GtkIMContextSimple*,guint16*,gint,gint->void "void ($(GtkIMContextSimple *,guint16 *,gint,gint))")
    (type GtkIMMulticontext*,GtkMenuShell*->void "void ($(GtkIMMulticontext *,GtkMenuShell *))")
    (type GdkScreen*->GtkWidget* "GtkWidget *($(GdkScreen *))")
    (type GtkInvisible*,GdkScreen*->void "void ($(GtkInvisible *,GdkScreen *))")
    (type GtkInvisible*->GdkScreen* "GdkScreen *($(GtkInvisible *))")
    (type GtkAdjustment*,GtkAdjustment*->GtkWidget* "GtkWidget *($(GtkAdjustment *,GtkAdjustment *))")
    (type GtkLayout*,GtkWidget*,gint,gint->void "void ($(GtkLayout *,GtkWidget *,gint,gint))")
    (type GtkLayout*,guint,guint->void "void ($(GtkLayout *,guint,guint))")
    (type GtkLayout*,guint*,guint*->void "void ($(GtkLayout *,guint *,guint *))")
    (type GtkLayout*->GtkAdjustment* "GtkAdjustment *($(GtkLayout *))")
    (type GtkLayout*,GtkAdjustment*->void "void ($(GtkLayout *,GtkAdjustment *))")
    (type GtkLayout*->void "void ($(GtkLayout *))")
    (type GtkList*,GList*,gint->void "void ($(GtkList *,GList *,gint))")
    (type GtkList*,GList*->void "void ($(GtkList *,GList *))")
    (type GtkList*,gint,gint->void "void ($(GtkList *,gint,gint))")
    (type GtkList*,gint->void "void ($(GtkList *,gint))")
    (type GtkList*,GtkWidget*->gint "gint ($(GtkList *,GtkWidget *))")
    (type GtkList*,GtkSelectionMode->void "void ($(GtkList *,GtkSelectionMode))")
    (type GtkList*,GtkScrollType,gfloat,gboolean->void "void ($(GtkList *,GtkScrollType,gfloat,gboolean))")
    (type GtkList*,GtkScrollType,gfloat->void "void ($(GtkList *,GtkScrollType,gfloat))")
    (type int*,string**->gboolean "gboolean ($(int *,char ***))")
    (type int*,string**->void "void ($(int *,char ***))")
    (type int*,string**,string,GOptionEntry*,string,GError**->gboolean "gboolean ($(int *,char ***,char *,GOptionEntry *,char *,GError **))")
    (type gboolean->GOptionGroup* "GOptionGroup *($(gboolean))")
    (type void->PangoLanguage* "PangoLanguage *($(void))")
    (type gboolean->gboolean "gboolean ($(gboolean))")
    (type GtkFunction,gpointer->void "void ($(GtkFunction,gpointer))")
    (type guint,GtkObject*->void "void ($(guint,GtkObject *))")
    (type guint,GtkFunction,gpointer->guint "guint ($(guint,GtkFunction,gpointer))")
    (type guint,GtkFunction,GtkCallbackMarshal,gpointer,GtkDestroyNotify->guint "guint ($(guint,GtkFunction,GtkCallbackMarshal,gpointer,GtkDestroyNotify))")
    (type guint32,GtkFunction,gpointer->guint "guint ($(guint32,GtkFunction,gpointer))")
    (type guint32,GtkFunction,GtkCallbackMarshal,gpointer,GtkDestroyNotify->guint "guint ($(guint32,GtkFunction,GtkCallbackMarshal,gpointer,GtkDestroyNotify))")
    (type GtkFunction,gpointer->guint "guint ($(GtkFunction,gpointer))")
    (type gint,GtkFunction,gpointer->guint "guint ($(gint,GtkFunction,gpointer))")
    (type gint,GtkFunction,GtkCallbackMarshal,gpointer,GtkDestroyNotify->guint "guint ($(gint,GtkFunction,GtkCallbackMarshal,gpointer,GtkDestroyNotify))")
    (type gint,GdkInputCondition,GdkInputFunction,GtkCallbackMarshal,gpointer,GtkDestroyNotify->guint "guint ($(gint,GdkInputCondition,GdkInputFunction,GtkCallbackMarshal,gpointer,GtkDestroyNotify))")
    (type GtkKeySnoopFunc,gpointer->guint "guint ($(GtkKeySnoopFunc,gpointer))")
    (type GdkModifierType*->gboolean "gboolean ($(GdkModifierType *))")
    (type GdkEvent*->GtkWidget* "GtkWidget *($(GdkEvent *))")
    (type GtkMenuBar*,GtkDirectionType->void "void ($(GtkMenuBar *,GtkDirectionType))")
    (type void->GtkTooltips* "GtkTooltips *($(void))")
    (type GtkTooltips*->void "void ($(GtkTooltips *))")
    (type GtkTooltips*,guint->void "void ($(GtkTooltips *,guint))")
    (type GtkTooltips*,GtkWidget*,gchar*,gchar*->void "void ($(GtkTooltips *,GtkWidget *,gchar *,gchar *))")
    (type GtkWidget*->GtkTooltipsData* "GtkTooltipsData *($(GtkWidget *))")
    (type GtkTooltips** (pointer GtkTooltips*) "GtkTooltips **")
    (type GtkWindow*,GtkTooltips**,GtkWidget**->gboolean "gboolean ($(GtkWindow *,GtkTooltips **,GtkWidget **))")
    (type void->GtkToolItem* "GtkToolItem *($(void))")
    (type GtkToolItem*,gboolean->void "void ($(GtkToolItem *,gboolean))")
    (type GtkToolItem*,GtkTooltips*,gchar*,gchar*->void "void ($(GtkToolItem *,GtkTooltips *,gchar *,gchar *))")
    (type GtkToolItem*->GtkIconSize "GtkIconSize ($(GtkToolItem *))")
    (type GtkToolItem*->GtkOrientation "GtkOrientation ($(GtkToolItem *))")
    (type GtkToolItem*->GtkToolbarStyle "GtkToolbarStyle ($(GtkToolItem *))")
    (type GtkToolItem*->GtkReliefStyle "GtkReliefStyle ($(GtkToolItem *))")
    (type GtkToolItem*->GtkWidget* "GtkWidget *($(GtkToolItem *))")
    (type GtkToolItem*,gchar*->GtkWidget* "GtkWidget *($(GtkToolItem *,gchar *))")
    (type GtkToolItem*,gchar*,GtkWidget*->void "void ($(GtkToolItem *,gchar *,GtkWidget *))")
    (type GtkWidget*,gchar*->GtkToolItem* "GtkToolItem *($(GtkWidget *,gchar *))")
    (type gchar*->GtkToolItem* "GtkToolItem *($(gchar *))")
    (type GtkToolButton*,gchar*->void "void ($(GtkToolButton *,gchar *))")
    (type GtkToolButton*->gchar* "gchar *($(GtkToolButton *))")
    (type GtkToolButton*,gboolean->void "void ($(GtkToolButton *,gboolean))")
    (type GtkToolButton*->gboolean "gboolean ($(GtkToolButton *))")
    (type GtkToolButton*,GtkWidget*->void "void ($(GtkToolButton *,GtkWidget *))")
    (type GtkToolButton*->GtkWidget* "GtkWidget *($(GtkToolButton *))")
    (type GtkMenuToolButton*,GtkWidget*->void "void ($(GtkMenuToolButton *,GtkWidget *))")
    (type GtkMenuToolButton*->GtkWidget* "GtkWidget *($(GtkMenuToolButton *))")
    (type GtkMenuToolButton*,GtkTooltips*,gchar*,gchar*->void "void ($(GtkMenuToolButton *,GtkTooltips *,gchar *,gchar *))")
    (type GtkWindow*,GtkDialogFlags,GtkMessageType,GtkButtonsType,gchar*,...gchar*->GtkWidget* "GtkWidget *($(GtkWindow *,GtkDialogFlags,GtkMessageType,GtkButtonsType,gchar *,...))")
    (type GtkMessageDialog*,gchar*->void "void ($(GtkMessageDialog *,gchar *))")
    (type GtkMessageDialog*,gchar*,...gchar*->void "void ($(GtkMessageDialog *,gchar *,...))")
    (type gint*,gchar***,gchar*->void "void ($(gint *,gchar ***,gchar *))")
    (type GtkSettings*,gchar*->void "void ($(GtkSettings *,gchar *))")
    (type GtkNotebook*,GtkWidget*,GtkWidget*->gint "gint ($(GtkNotebook *,GtkWidget *,GtkWidget *))")
    (type GtkNotebook*,GtkWidget*,GtkWidget*,GtkWidget*->gint "gint ($(GtkNotebook *,GtkWidget *,GtkWidget *,GtkWidget *))")
    (type GtkNotebook*,GtkWidget*,GtkWidget*,gint->gint "gint ($(GtkNotebook *,GtkWidget *,GtkWidget *,gint))")
    (type GtkNotebook*,GtkWidget*,GtkWidget*,GtkWidget*,gint->gint "gint ($(GtkNotebook *,GtkWidget *,GtkWidget *,GtkWidget *,gint))")
    (type GtkNotebook*->gint "gint ($(GtkNotebook *))")
    (type GtkNotebook*,gint->GtkWidget* "GtkWidget *($(GtkNotebook *,gint))")
    (type GtkNotebook*,GtkWidget*->gint "gint ($(GtkNotebook *,GtkWidget *))")
    (type GtkNotebook*->void "void ($(GtkNotebook *))")
    (type GtkNotebook*,gboolean->void "void ($(GtkNotebook *,gboolean))")
    (type GtkNotebook*->gboolean "gboolean ($(GtkNotebook *))")
    (type GtkNotebook*,GtkPositionType->void "void ($(GtkNotebook *,GtkPositionType))")
    (type GtkNotebook*->GtkPositionType "GtkPositionType ($(GtkNotebook *))")
    (type GtkNotebook*,guint->void "void ($(GtkNotebook *,guint))")
    (type GtkNotebook*,GtkWidget*->GtkWidget* "GtkWidget *($(GtkNotebook *,GtkWidget *))")
    (type GtkNotebook*,GtkWidget*,GtkWidget*->void "void ($(GtkNotebook *,GtkWidget *,GtkWidget *))")
    (type GtkNotebook*,GtkWidget*,gchar*->void "void ($(GtkNotebook *,GtkWidget *,gchar *))")
    (type GtkNotebook*,GtkWidget*->gchar* "gchar *($(GtkNotebook *,GtkWidget *))")
    (type GtkNotebook*,GtkWidget*,gboolean*,gboolean*,GtkPackType*->void "void ($(GtkNotebook *,GtkWidget *,gboolean *,gboolean *,GtkPackType *))")
    (type GtkNotebook*,GtkWidget*,gboolean,gboolean,GtkPackType->void "void ($(GtkNotebook *,GtkWidget *,gboolean,gboolean,GtkPackType))")
    (type GtkNotebook*,GtkWidget*,gint->void "void ($(GtkNotebook *,GtkWidget *,gint))")
    (type GtkOldEditable*,gboolean,guint32->void "void ($(GtkOldEditable *,gboolean,guint32))")
    (type GtkOptionMenu*->GtkWidget* "GtkWidget *($(GtkOptionMenu *))")
    (type GtkOptionMenu*,GtkWidget*->void "void ($(GtkOptionMenu *,GtkWidget *))")
    (type GtkOptionMenu*->gint "gint ($(GtkOptionMenu *))")
    (type GtkOptionMenu*,guint->void "void ($(GtkOptionMenu *,guint))")
    (type GtkPixmap*,GdkPixmap*,GdkBitmap*->void "void ($(GtkPixmap *,GdkPixmap *,GdkBitmap *))")
    (type GtkPixmap*,GdkPixmap**,GdkBitmap**->void "void ($(GtkPixmap *,GdkPixmap **,GdkBitmap **))")
    (type GtkPixmap*,gboolean->void "void ($(GtkPixmap *,gboolean))")
    (type GtkSocket*,GdkNativeWindow->void "void ($(GtkSocket *,GdkNativeWindow))")
    (type GtkSocket*->GdkNativeWindow "GdkNativeWindow ($(GtkSocket *))")
    (type GtkPlug*,GdkNativeWindow->void "void ($(GtkPlug *,GdkNativeWindow))")
    (type GdkNativeWindow->GtkWidget* "GtkWidget *($(GdkNativeWindow))")
    (type GtkPlug*,GdkDisplay*,GdkNativeWindow->void "void ($(GtkPlug *,GdkDisplay *,GdkNativeWindow))")
    (type GdkDisplay*,GdkNativeWindow->GtkWidget* "GtkWidget *($(GdkDisplay *,GdkNativeWindow))")
    (type GtkPlug*->GdkNativeWindow "GdkNativeWindow ($(GtkPlug *))")
    (type GtkPlug*,GtkSocket*->void "void ($(GtkPlug *,GtkSocket *))")
    (type GtkPreviewType->GtkWidget* "GtkWidget *($(GtkPreviewType))")
    (type GtkPreview*,gint,gint->void "void ($(GtkPreview *,gint,gint))")
    (type GtkPreview*,GdkWindow*,GdkGC*,gint,gint,gint,gint,gint,gint->void "void ($(GtkPreview *,GdkWindow *,GdkGC *,gint,gint,gint,gint,gint,gint))")
    (type GtkPreview*,guchar*,gint,gint,gint->void "void ($(GtkPreview *,guchar *,gint,gint,gint))")
    (type GtkPreview*,gboolean->void "void ($(GtkPreview *,gboolean))")
    (type double->void "void ($(double))")
    (type guint,guint,guint,guint->void "void ($(guint,guint,guint,guint))")
    (type GtkPreview*,GdkRgbDither->void "void ($(GtkPreview *,GdkRgbDither))")
    (type void->GtkPreviewInfo* "GtkPreviewInfo *($(void))")
    (type GtkProgress*,gboolean->void "void ($(GtkProgress *,gboolean))")
    (type GtkProgress*,gfloat,gfloat->void "void ($(GtkProgress *,gfloat,gfloat))")
    (type GtkProgress*,gchar*->void "void ($(GtkProgress *,gchar *))")
    (type GtkProgress*,GtkAdjustment*->void "void ($(GtkProgress *,GtkAdjustment *))")
    (type GtkProgress*,gdouble,gdouble,gdouble->void "void ($(GtkProgress *,gdouble,gdouble,gdouble))")
    (type GtkProgress*,gdouble->void "void ($(GtkProgress *,gdouble))")
    (type GtkProgress*->gdouble "gdouble ($(GtkProgress *))")
    (type GtkProgress*->gchar* "gchar *($(GtkProgress *))")
    (type GtkProgress*,gdouble->gchar* "gchar *($(GtkProgress *,gdouble))")
    (type GtkProgress*,gdouble->gdouble "gdouble ($(GtkProgress *,gdouble))")
    (type GtkProgressBar*->void "void ($(GtkProgressBar *))")
    (type GtkProgressBar*,gchar*->void "void ($(GtkProgressBar *,gchar *))")
    (type GtkProgressBar*,gdouble->void "void ($(GtkProgressBar *,gdouble))")
    (type GtkProgressBar*,GtkProgressBarOrientation->void "void ($(GtkProgressBar *,GtkProgressBarOrientation))")
    (type GtkProgressBar*->gchar* "gchar *($(GtkProgressBar *))")
    (type GtkProgressBar*->gdouble "gdouble ($(GtkProgressBar *))")
    (type GtkProgressBar*->GtkProgressBarOrientation "GtkProgressBarOrientation ($(GtkProgressBar *))")
    (type GtkProgressBar*,PangoEllipsizeMode->void "void ($(GtkProgressBar *,PangoEllipsizeMode))")
    (type GtkProgressBar*->PangoEllipsizeMode "PangoEllipsizeMode ($(GtkProgressBar *))")
    (type GtkProgressBar*,GtkProgressBarStyle->void "void ($(GtkProgressBar *,GtkProgressBarStyle))")
    (type GtkProgressBar*,guint->void "void ($(GtkProgressBar *,guint))")
    (type gchar*,gchar*,gchar*,gchar*->GtkToggleAction* "GtkToggleAction *($(gchar *,gchar *,gchar *,gchar *))")
    (type GtkToggleAction*,gboolean->void "void ($(GtkToggleAction *,gboolean))")
    (type GtkToggleAction*->gboolean "gboolean ($(GtkToggleAction *))")
    (type gchar*,gchar*,gchar*,gchar*,gint->GtkRadioAction* "GtkRadioAction *($(gchar *,gchar *,gchar *,gchar *,gint))")
    (type GtkRadioAction*->GSList* "GSList *($(GtkRadioAction *))")
    (type GtkRadioAction*,GSList*->void "void ($(GtkRadioAction *,GSList *))")
    (type GtkRadioAction*->gint "gint ($(GtkRadioAction *))")
    (type GSList*->GtkWidget* "GtkWidget *($(GSList *))")
    (type GtkRadioButton*->GtkWidget* "GtkWidget *($(GtkRadioButton *))")
    (type GSList*,gchar*->GtkWidget* "GtkWidget *($(GSList *,gchar *))")
    (type GtkRadioButton*,gchar*->GtkWidget* "GtkWidget *($(GtkRadioButton *,gchar *))")
    (type GtkRadioButton*->GSList* "GSList *($(GtkRadioButton *))")
    (type GtkRadioButton*,GSList*->void "void ($(GtkRadioButton *,GSList *))")
    (type GtkRadioMenuItem*->GtkWidget* "GtkWidget *($(GtkRadioMenuItem *))")
    (type GtkRadioMenuItem*,gchar*->GtkWidget* "GtkWidget *($(GtkRadioMenuItem *,gchar *))")
    (type GtkRadioMenuItem*->GSList* "GSList *($(GtkRadioMenuItem *))")
    (type GtkRadioMenuItem*,GSList*->void "void ($(GtkRadioMenuItem *,GSList *))")
    (type GtkToggleToolButton*,gboolean->void "void ($(GtkToggleToolButton *,gboolean))")
    (type GtkToggleToolButton*->gboolean "gboolean ($(GtkToggleToolButton *))")
    (type GSList*->GtkToolItem* "GtkToolItem *($(GSList *))")
    (type GSList*,gchar*->GtkToolItem* "GtkToolItem *($(GSList *,gchar *))")
    (type GtkRadioToolButton*->GtkToolItem* "GtkToolItem *($(GtkRadioToolButton *))")
    (type GtkRadioToolButton*,gchar*->GtkToolItem* "GtkToolItem *($(GtkRadioToolButton *,gchar *))")
    (type GtkRadioToolButton*->GSList* "GSList *($(GtkRadioToolButton *))")
    (type GtkRadioToolButton*,GSList*->void "void ($(GtkRadioToolButton *,GSList *))")
    (type GtkViewport*->GtkAdjustment* "GtkAdjustment *($(GtkViewport *))")
    (type GtkViewport*,GtkAdjustment*->void "void ($(GtkViewport *,GtkAdjustment *))")
    (type GtkViewport*,GtkShadowType->void "void ($(GtkViewport *,GtkShadowType))")
    (type GtkViewport*->GtkShadowType "GtkShadowType ($(GtkViewport *))")
    (type GtkScrolledWindow*,GtkAdjustment*->void "void ($(GtkScrolledWindow *,GtkAdjustment *))")
    (type GtkScrolledWindow*->GtkAdjustment* "GtkAdjustment *($(GtkScrolledWindow *))")
    (type GtkScrolledWindow*,GtkPolicyType,GtkPolicyType->void "void ($(GtkScrolledWindow *,GtkPolicyType,GtkPolicyType))")
    (type GtkPolicyType* (pointer GtkPolicyType) "GtkPolicyType *")
    (type GtkScrolledWindow*,GtkPolicyType*,GtkPolicyType*->void "void ($(GtkScrolledWindow *,GtkPolicyType *,GtkPolicyType *))")
    (type GtkScrolledWindow*,GtkCornerType->void "void ($(GtkScrolledWindow *,GtkCornerType))")
    (type GtkScrolledWindow*->GtkCornerType "GtkCornerType ($(GtkScrolledWindow *))")
    (type GtkScrolledWindow*,GtkShadowType->void "void ($(GtkScrolledWindow *,GtkShadowType))")
    (type GtkScrolledWindow*->GtkShadowType "GtkShadowType ($(GtkScrolledWindow *))")
    (type GtkScrolledWindow*,GtkWidget*->void "void ($(GtkScrolledWindow *,GtkWidget *))")
    (type GtkScrolledWindow*->gint "gint ($(GtkScrolledWindow *))")
    (type GtkSeparatorToolItem*->gboolean "gboolean ($(GtkSeparatorToolItem *))")
    (type GtkSeparatorToolItem*,gboolean->void "void ($(GtkSeparatorToolItem *,gboolean))")
    (type GtkSizeGroupMode->GtkSizeGroup* "GtkSizeGroup *($(GtkSizeGroupMode))")
    (type GtkSizeGroup*,GtkSizeGroupMode->void "void ($(GtkSizeGroup *,GtkSizeGroupMode))")
    (type GtkSizeGroup*->GtkSizeGroupMode "GtkSizeGroupMode ($(GtkSizeGroup *))")
    (type GtkSizeGroup*,GtkWidget*->void "void ($(GtkSizeGroup *,GtkWidget *))")
    (type GtkSpinButton*,GtkAdjustment*,gdouble,guint->void "void ($(GtkSpinButton *,GtkAdjustment *,gdouble,guint))")
    (type GtkAdjustment*,gdouble,guint->GtkWidget* "GtkWidget *($(GtkAdjustment *,gdouble,guint))")
    (type GtkSpinButton*,GtkAdjustment*->void "void ($(GtkSpinButton *,GtkAdjustment *))")
    (type GtkSpinButton*->GtkAdjustment* "GtkAdjustment *($(GtkSpinButton *))")
    (type GtkSpinButton*,guint->void "void ($(GtkSpinButton *,guint))")
    (type GtkSpinButton*->guint "guint ($(GtkSpinButton *))")
    (type GtkSpinButton*,gdouble,gdouble->void "void ($(GtkSpinButton *,gdouble,gdouble))")
    (type GtkSpinButton*,gdouble*,gdouble*->void "void ($(GtkSpinButton *,gdouble *,gdouble *))")
    (type GtkSpinButton*->gdouble "gdouble ($(GtkSpinButton *))")
    (type GtkSpinButton*,gdouble->void "void ($(GtkSpinButton *,gdouble))")
    (type GtkSpinButton*,GtkSpinButtonUpdatePolicy->void "void ($(GtkSpinButton *,GtkSpinButtonUpdatePolicy))")
    (type GtkSpinButton*->GtkSpinButtonUpdatePolicy "GtkSpinButtonUpdatePolicy ($(GtkSpinButton *))")
    (type GtkSpinButton*,gboolean->void "void ($(GtkSpinButton *,gboolean))")
    (type GtkSpinButton*->gboolean "gboolean ($(GtkSpinButton *))")
    (type GtkSpinButton*,GtkSpinType,gdouble->void "void ($(GtkSpinButton *,GtkSpinType,gdouble))")
    (type GtkStatusbar*,gchar*->guint "guint ($(GtkStatusbar *,gchar *))")
    (type GtkStatusbar*,guint,gchar*->guint "guint ($(GtkStatusbar *,guint,gchar *))")
    (type GtkStatusbar*,guint->void "void ($(GtkStatusbar *,guint))")
    (type GtkStatusbar*,guint,guint->void "void ($(GtkStatusbar *,guint,guint))")
    (type GtkStatusbar*,gboolean->void "void ($(GtkStatusbar *,gboolean))")
    (type GtkStatusbar*->gboolean "gboolean ($(GtkStatusbar *))")
    (type GtkStockItem*,guint->void "void ($(GtkStockItem *,guint))")
    (type gchar*,GtkStockItem*->gboolean "gboolean ($(gchar *,GtkStockItem *))")
    (type GtkStockItem*->GtkStockItem* "GtkStockItem *($(GtkStockItem *))")
    (type GtkStockItem*->void "void ($(GtkStockItem *))")
    (type guint,guint,gboolean->GtkWidget* "GtkWidget *($(guint,guint,gboolean))")
    (type GtkTable*,guint,guint->void "void ($(GtkTable *,guint,guint))")
    (type GtkTable*,GtkWidget*,guint,guint,guint,guint,GtkAttachOptions,GtkAttachOptions,guint,guint->void "void ($(GtkTable *,GtkWidget *,guint,guint,guint,guint,GtkAttachOptions,GtkAttachOptions,guint,guint))")
    (type GtkTable*,GtkWidget*,guint,guint,guint,guint->void "void ($(GtkTable *,GtkWidget *,guint,guint,guint,guint))")
    (type GtkTable*,guint->guint "guint ($(GtkTable *,guint))")
    (type GtkTable*,guint->void "void ($(GtkTable *,guint))")
    (type GtkTable*->guint "guint ($(GtkTable *))")
    (type GtkTable*,gboolean->void "void ($(GtkTable *,gboolean))")
    (type GtkTable*->gboolean "gboolean ($(GtkTable *))")
    (type gchar*->GtkTextTag* "GtkTextTag *($(gchar *))")
    (type GtkTextTag*->gint "gint ($(GtkTextTag *))")
    (type GtkTextTag*,gint->void "void ($(GtkTextTag *,gint))")
    (type void->GtkTextAttributes* "GtkTextAttributes *($(void))")
    (type GtkTextAttributes*->GtkTextAttributes* "GtkTextAttributes *($(GtkTextAttributes *))")
    (type GtkTextAttributes*,GtkTextAttributes*->void "void ($(GtkTextAttributes *,GtkTextAttributes *))")
    (type GtkTextAttributes*->void "void ($(GtkTextAttributes *))")
    (type void->GtkTextTagTable* "GtkTextTagTable *($(void))")
    (type GtkTextTagTable*,gchar*->GtkTextTag* "GtkTextTag *($(GtkTextTagTable *,gchar *))")
    (type GtkTextTagTable*,GtkTextTagTableForeach,gpointer->void "void ($(GtkTextTagTable *,GtkTextTagTableForeach,gpointer))")
    (type GtkTextTagTable*->gint "gint ($(GtkTextTagTable *))")
    (type GtkTextTagTable*,gpointer->void "void ($(GtkTextTagTable *,gpointer))")
    (type void->GtkTextChildAnchor* "GtkTextChildAnchor *($(void))")
    (type GtkTextChildAnchor*->GList* "GList *($(GtkTextChildAnchor *))")
    (type GtkTextChildAnchor*->gboolean "gboolean ($(GtkTextChildAnchor *))")
    (type GtkTextIter*->GtkTextBuffer* "GtkTextBuffer *($(GtkTextIter *))")
    (type GtkTextIter*->GtkTextIter* "GtkTextIter *($(GtkTextIter *))")
    (type GtkTextIter*->void "void ($(GtkTextIter *))")
    (type GtkTextIter*->gint "gint ($(GtkTextIter *))")
    (type GtkTextIter*->gunichar "gunichar ($(GtkTextIter *))")
    (type GtkTextIter*,GtkTextIter*->gchar* "gchar *($(GtkTextIter *,GtkTextIter *))")
    (type GtkTextIter*->GdkPixbuf* "GdkPixbuf *($(GtkTextIter *))")
    (type GtkTextIter*->GSList* "GSList *($(GtkTextIter *))")
    (type GtkTextIter*->GtkTextChildAnchor* "GtkTextChildAnchor *($(GtkTextIter *))")
    (type GtkTextIter*,gboolean->GSList* "GSList *($(GtkTextIter *,gboolean))")
    (type GtkTextIter*,GtkTextTag*->gboolean "gboolean ($(GtkTextIter *,GtkTextTag *))")
    (type GtkTextIter*,gboolean->gboolean "gboolean ($(GtkTextIter *,gboolean))")
    (type GtkTextIter*->gboolean "gboolean ($(GtkTextIter *))")
    (type GtkTextIter*,GtkTextAttributes*->gboolean "gboolean ($(GtkTextIter *,GtkTextAttributes *))")
    (type GtkTextIter*->PangoLanguage* "PangoLanguage *($(GtkTextIter *))")
    (type GtkTextIter*,gint->gboolean "gboolean ($(GtkTextIter *,gint))")
    (type GtkTextIter*,gint->void "void ($(GtkTextIter *,gint))")
    (type GtkTextIter*,GtkTextCharPredicate,gpointer,GtkTextIter*->gboolean "gboolean ($(GtkTextIter *,GtkTextCharPredicate,gpointer,GtkTextIter *))")
    (type GtkTextIter*,gchar*,GtkTextSearchFlags,GtkTextIter*,GtkTextIter*,GtkTextIter*->gboolean "gboolean ($(GtkTextIter *,gchar *,GtkTextSearchFlags,GtkTextIter *,GtkTextIter *,GtkTextIter *))")
    (type GtkTextIter*,GtkTextIter*->gboolean "gboolean ($(GtkTextIter *,GtkTextIter *))")
    (type GtkTextIter*,GtkTextIter*->gint "gint ($(GtkTextIter *,GtkTextIter *))")
    (type GtkTextIter*,GtkTextIter*,GtkTextIter*->gboolean "gboolean ($(GtkTextIter *,GtkTextIter *,GtkTextIter *))")
    (type GtkTextIter*,GtkTextIter*->void "void ($(GtkTextIter *,GtkTextIter *))")
    (type GtkTextMark*,gboolean->void "void ($(GtkTextMark *,gboolean))")
    (type GtkTextMark*->gboolean "gboolean ($(GtkTextMark *))")
    (type GtkTextMark*->gchar* "gchar *($(GtkTextMark *))")
    (type GtkTextMark*->GtkTextBuffer* "GtkTextBuffer *($(GtkTextMark *))")
    (type GtkTextTagTable*->GtkTextBuffer* "GtkTextBuffer *($(GtkTextTagTable *))")
    (type GtkTextBuffer*->gint "gint ($(GtkTextBuffer *))")
    (type GtkTextBuffer*->GtkTextTagTable* "GtkTextTagTable *($(GtkTextBuffer *))")
    (type GtkTextBuffer*,gchar*,gint->void "void ($(GtkTextBuffer *,gchar *,gint))")
    (type GtkTextBuffer*,GtkTextIter*,gchar*,gint,gboolean->gboolean "gboolean ($(GtkTextBuffer *,GtkTextIter *,gchar *,gint,gboolean))")
    (type GtkTextBuffer*,gchar*,gint,gboolean->gboolean "gboolean ($(GtkTextBuffer *,gchar *,gint,gboolean))")
    (type GtkTextBuffer*,GtkTextIter*,GtkTextIter*,GtkTextIter*->void "void ($(GtkTextBuffer *,GtkTextIter *,GtkTextIter *,GtkTextIter *))")
    (type GtkTextBuffer*,GtkTextIter*,GtkTextIter*,GtkTextIter*,gboolean->gboolean "gboolean ($(GtkTextBuffer *,GtkTextIter *,GtkTextIter *,GtkTextIter *,gboolean))")
    (type GtkTextBuffer*,GtkTextIter*,gchar*,gint,GtkTextTag*,...GtkTextTag*->void "void ($(GtkTextBuffer *,GtkTextIter *,gchar *,gint,GtkTextTag *,...))")
    (type GtkTextBuffer*,GtkTextIter*,gchar*,gint,gchar*,...gchar*->void "void ($(GtkTextBuffer *,GtkTextIter *,gchar *,gint,gchar *,...))")
    (type GtkTextBuffer*,GtkTextIter*,GtkTextIter*,gboolean->gboolean "gboolean ($(GtkTextBuffer *,GtkTextIter *,GtkTextIter *,gboolean))")
    (type GtkTextBuffer*,GtkTextIter*,gboolean,gboolean->gboolean "gboolean ($(GtkTextBuffer *,GtkTextIter *,gboolean,gboolean))")
    (type GtkTextBuffer*,GtkTextIter*,GtkTextIter*,gboolean->gchar* "gchar *($(GtkTextBuffer *,GtkTextIter *,GtkTextIter *,gboolean))")
    (type GtkTextBuffer*,GtkTextIter*->GtkTextChildAnchor* "GtkTextChildAnchor *($(GtkTextBuffer *,GtkTextIter *))")
    (type GtkTextBuffer*,gchar*,GtkTextIter*,gboolean->GtkTextMark* "GtkTextMark *($(GtkTextBuffer *,gchar *,GtkTextIter *,gboolean))")
    (type GtkTextBuffer*,GtkTextMark*,GtkTextIter*->void "void ($(GtkTextBuffer *,GtkTextMark *,GtkTextIter *))")
    (type GtkTextBuffer*,gchar*->GtkTextMark* "GtkTextMark *($(GtkTextBuffer *,gchar *))")
    (type GtkTextBuffer*,gchar*,GtkTextIter*->void "void ($(GtkTextBuffer *,gchar *,GtkTextIter *))")
    (type GtkTextBuffer*,gchar*->void "void ($(GtkTextBuffer *,gchar *))")
    (type GtkTextBuffer*->GtkTextMark* "GtkTextMark *($(GtkTextBuffer *))")
    (type GtkTextBuffer*,GtkTextIter*->void "void ($(GtkTextBuffer *,GtkTextIter *))")
    (type GtkTextBuffer*,gchar*,GtkTextIter*,GtkTextIter*->void "void ($(GtkTextBuffer *,gchar *,GtkTextIter *,GtkTextIter *))")
    (type GtkTextBuffer*,gchar*,gchar*,...gchar*->GtkTextTag* "GtkTextTag *($(GtkTextBuffer *,gchar *,gchar *,...))")
    (type GtkTextBuffer*,GtkTextIter*,gint,gint->void "void ($(GtkTextBuffer *,GtkTextIter *,gint,gint))")
    (type GtkTextBuffer*,GtkTextIter*,gint->void "void ($(GtkTextBuffer *,GtkTextIter *,gint))")
    (type GtkTextBuffer*->gboolean "gboolean ($(GtkTextBuffer *))")
    (type GtkTextBuffer*,gboolean->void "void ($(GtkTextBuffer *,gboolean))")
    (type GtkTextBuffer*,GtkClipboard*->void "void ($(GtkTextBuffer *,GtkClipboard *))")
    (type GtkTextBuffer*,GtkClipboard*,gboolean->void "void ($(GtkTextBuffer *,GtkClipboard *,gboolean))")
    (type GtkTextBuffer*,GtkClipboard*,GtkTextIter*,gboolean->void "void ($(GtkTextBuffer *,GtkClipboard *,GtkTextIter *,gboolean))")
    (type GtkTextBuffer*,GtkTextIter*,GtkTextIter*->gboolean "gboolean ($(GtkTextBuffer *,GtkTextIter *,GtkTextIter *))")
    (type GtkTextBuffer*,gboolean,gboolean->gboolean "gboolean ($(GtkTextBuffer *,gboolean,gboolean))")
    (type GtkTextBuffer*->GtkTextBTree* "GtkTextBTree *($(GtkTextBuffer *))")
    (type GtkTextBuffer*,GtkTextIter*,gint*->PangoLogAttr* "PangoLogAttr *($(GtkTextBuffer *,GtkTextIter *,gint *))")
    (type GtkTextBuffer*,GtkTextTag*->void "void ($(GtkTextBuffer *,GtkTextTag *))")
    (type GtkTextBuffer*->GtkWidget* "GtkWidget *($(GtkTextBuffer *))")
    (type GtkTextView*,GtkTextBuffer*->void "void ($(GtkTextView *,GtkTextBuffer *))")
    (type GtkTextView*->GtkTextBuffer* "GtkTextBuffer *($(GtkTextView *))")
    (type GtkTextView*,GtkTextIter*,gdouble,gboolean,gdouble,gdouble->gboolean "gboolean ($(GtkTextView *,GtkTextIter *,gdouble,gboolean,gdouble,gdouble))")
    (type GtkTextView*,GtkTextMark*,gdouble,gboolean,gdouble,gdouble->void "void ($(GtkTextView *,GtkTextMark *,gdouble,gboolean,gdouble,gdouble))")
    (type GtkTextView*,GtkTextMark*->void "void ($(GtkTextView *,GtkTextMark *))")
    (type GtkTextView*,GtkTextMark*->gboolean "gboolean ($(GtkTextView *,GtkTextMark *))")
    (type GtkTextView*->gboolean "gboolean ($(GtkTextView *))")
    (type GtkTextView*,GdkRectangle*->void "void ($(GtkTextView *,GdkRectangle *))")
    (type GtkTextView*,gboolean->void "void ($(GtkTextView *,gboolean))")
    (type GtkTextView*,GtkTextIter*,GdkRectangle*->void "void ($(GtkTextView *,GtkTextIter *,GdkRectangle *))")
    (type GtkTextView*,GtkTextIter*,gint,gint->void "void ($(GtkTextView *,GtkTextIter *,gint,gint))")
    (type GtkTextView*,GtkTextIter*,gint*,gint,gint->void "void ($(GtkTextView *,GtkTextIter *,gint *,gint,gint))")
    (type GtkTextView*,GtkTextIter*,gint*,gint*->void "void ($(GtkTextView *,GtkTextIter *,gint *,gint *))")
    (type GtkTextView*,GtkTextIter*,gint,gint*->void "void ($(GtkTextView *,GtkTextIter *,gint,gint *))")
    (type GtkTextView*,GtkTextWindowType,gint,gint,gint*,gint*->void "void ($(GtkTextView *,GtkTextWindowType,gint,gint,gint *,gint *))")
    (type GtkTextView*,GtkTextWindowType->GdkWindow* "GdkWindow *($(GtkTextView *,GtkTextWindowType))")
    (type GtkTextView*,GdkWindow*->GtkTextWindowType "GtkTextWindowType ($(GtkTextView *,GdkWindow *))")
    (type GtkTextView*,GtkTextWindowType,gint->void "void ($(GtkTextView *,GtkTextWindowType,gint))")
    (type GtkTextView*,GtkTextWindowType->gint "gint ($(GtkTextView *,GtkTextWindowType))")
    (type GtkTextView*,GtkTextIter*->gboolean "gboolean ($(GtkTextView *,GtkTextIter *))")
    (type GtkTextView*,GtkTextIter*,gint->gboolean "gboolean ($(GtkTextView *,GtkTextIter *,gint))")
    (type GtkTextView*,GtkWidget*,GtkTextChildAnchor*->void "void ($(GtkTextView *,GtkWidget *,GtkTextChildAnchor *))")
    (type GtkTextView*,GtkWidget*,GtkTextWindowType,gint,gint->void "void ($(GtkTextView *,GtkWidget *,GtkTextWindowType,gint,gint))")
    (type GtkTextView*,GtkWidget*,gint,gint->void "void ($(GtkTextView *,GtkWidget *,gint,gint))")
    (type GtkTextView*,GtkWrapMode->void "void ($(GtkTextView *,GtkWrapMode))")
    (type GtkTextView*->GtkWrapMode "GtkWrapMode ($(GtkTextView *))")
    (type GtkTextView*,gint->void "void ($(GtkTextView *,gint))")
    (type GtkTextView*->gint "gint ($(GtkTextView *))")
    (type GtkTextView*,GtkJustification->void "void ($(GtkTextView *,GtkJustification))")
    (type GtkTextView*->GtkJustification "GtkJustification ($(GtkTextView *))")
    (type GtkTextView*,PangoTabArray*->void "void ($(GtkTextView *,PangoTabArray *))")
    (type GtkTextView*->PangoTabArray* "PangoTabArray *($(GtkTextView *))")
    (type GtkTextView*->GtkTextAttributes* "GtkTextAttributes *($(GtkTextView *))")
    (type GtkTipsQuery*,GtkWidget*->void "void ($(GtkTipsQuery *,GtkWidget *))")
    (type GtkTipsQuery*,gchar*,gchar*->void "void ($(GtkTipsQuery *,gchar *,gchar *))")
    (type GtkToolbar*,GtkToolItem*,gint->void "void ($(GtkToolbar *,GtkToolItem *,gint))")
    (type GtkToolbar*,GtkToolItem*->gint "gint ($(GtkToolbar *,GtkToolItem *))")
    (type GtkToolbar*->gint "gint ($(GtkToolbar *))")
    (type GtkToolbar*,gint->GtkToolItem* "GtkToolItem *($(GtkToolbar *,gint))")
    (type GtkToolbar*->gboolean "gboolean ($(GtkToolbar *))")
    (type GtkToolbar*,gboolean->void "void ($(GtkToolbar *,gboolean))")
    (type GtkToolbar*->GtkOrientation "GtkOrientation ($(GtkToolbar *))")
    (type GtkToolbar*->GtkToolbarStyle "GtkToolbarStyle ($(GtkToolbar *))")
    (type GtkToolbar*->void "void ($(GtkToolbar *))")
    (type GtkToolbar*->GtkIconSize "GtkIconSize ($(GtkToolbar *))")
    (type GtkToolbar*->GtkReliefStyle "GtkReliefStyle ($(GtkToolbar *))")
    (type GtkToolbar*,gint,gint->gint "gint ($(GtkToolbar *,gint,gint))")
    (type GtkWidget*,GtkToolbar*,GdkRectangle*,GtkAllocation*->void "void ($(GtkWidget *,GtkToolbar *,GdkRectangle *,GtkAllocation *))")
    (type GtkToolbar*,GtkIconSize->void "void ($(GtkToolbar *,GtkIconSize))")
    (type GtkToolbar*,string,string,string,GtkWidget*,GtkSignalFunc,gpointer->GtkWidget* "GtkWidget *($(GtkToolbar *,char *,char *,char *,GtkWidget *,GtkSignalFunc,gpointer))")
    (type GtkToolbar*,string,string,string,GtkWidget*,GtkSignalFunc,gpointer,gint->GtkWidget* "GtkWidget *($(GtkToolbar *,char *,char *,char *,GtkWidget *,GtkSignalFunc,gpointer,gint))")
    (type GtkToolbar*,gchar*,string,string,GtkSignalFunc,gpointer,gint->GtkWidget* "GtkWidget *($(GtkToolbar *,gchar *,char *,char *,GtkSignalFunc,gpointer,gint))")
    (type GtkToolbar*,gint->void "void ($(GtkToolbar *,gint))")
    (type GtkToolbar*,GtkToolbarChildType,GtkWidget*,string,string,string,GtkWidget*,GtkSignalFunc,gpointer->GtkWidget* "GtkWidget *($(GtkToolbar *,GtkToolbarChildType,GtkWidget *,char *,char *,char *,GtkWidget *,GtkSignalFunc,gpointer))")
    (type GtkToolbar*,GtkToolbarChildType,GtkWidget*,string,string,string,GtkWidget*,GtkSignalFunc,gpointer,gint->GtkWidget* "GtkWidget *($(GtkToolbar *,GtkToolbarChildType,GtkWidget *,char *,char *,char *,GtkWidget *,GtkSignalFunc,gpointer,gint))")
    (type GtkToolbar*,GtkWidget*,string,string->void "void ($(GtkToolbar *,GtkWidget *,char *,char *))")
    (type GtkToolbar*,GtkWidget*,string,string,gint->void "void ($(GtkToolbar *,GtkWidget *,char *,char *,gint))")
    (type GtkSelectionData*,GtkTreeModel*,GtkTreePath*->gboolean "gboolean ($(GtkSelectionData *,GtkTreeModel *,GtkTreePath *))")
    (type GtkTreeModel** (pointer GtkTreeModel*) "GtkTreeModel **")
    (type GtkSelectionData*,GtkTreeModel**,GtkTreePath**->gboolean "gboolean ($(GtkSelectionData *,GtkTreeModel **,GtkTreePath **))")
    (type GtkTreeModel*->GtkTreeModel* "GtkTreeModel *($(GtkTreeModel *))")
    (type GtkTreeModelSort*->GtkTreeModel* "GtkTreeModel *($(GtkTreeModelSort *))")
    (type GtkTreeModelSort*,GtkTreePath*->GtkTreePath* "GtkTreePath *($(GtkTreeModelSort *,GtkTreePath *))")
    (type GtkTreeModelSort*,GtkTreeIter*,GtkTreeIter*->void "void ($(GtkTreeModelSort *,GtkTreeIter *,GtkTreeIter *))")
    (type GtkTreeModelSort*->void "void ($(GtkTreeModelSort *))")
    (type GtkTreeModelSort*,GtkTreeIter*->gboolean "gboolean ($(GtkTreeModelSort *,GtkTreeIter *))")
    (type GtkTreeSelection*,GtkSelectionMode->void "void ($(GtkTreeSelection *,GtkSelectionMode))")
    (type GtkTreeSelection*->GtkSelectionMode "GtkSelectionMode ($(GtkTreeSelection *))")
    (type GtkTreeSelection*,GtkTreeSelectionFunc,gpointer,GtkDestroyNotify->void "void ($(GtkTreeSelection *,GtkTreeSelectionFunc,gpointer,GtkDestroyNotify))")
    (type GtkTreeSelection*->gpointer "gpointer ($(GtkTreeSelection *))")
    (type GtkTreeSelection*->GtkTreeView* "GtkTreeView *($(GtkTreeSelection *))")
    (type GtkTreeSelection*,GtkTreeModel**,GtkTreeIter*->gboolean "gboolean ($(GtkTreeSelection *,GtkTreeModel **,GtkTreeIter *))")
    (type GtkTreeSelection*,GtkTreeModel**->GList* "GList *($(GtkTreeSelection *,GtkTreeModel **))")
    (type GtkTreeSelection*->gint "gint ($(GtkTreeSelection *))")
    (type GtkTreeSelection*,GtkTreeSelectionForeachFunc,gpointer->void "void ($(GtkTreeSelection *,GtkTreeSelectionForeachFunc,gpointer))")
    (type GtkTreeSelection*,GtkTreePath*->void "void ($(GtkTreeSelection *,GtkTreePath *))")
    (type GtkTreeSelection*,GtkTreeIter*->void "void ($(GtkTreeSelection *,GtkTreeIter *))")
    (type GtkTreeSelection*,GtkTreePath*->gboolean "gboolean ($(GtkTreeSelection *,GtkTreePath *))")
    (type GtkTreeSelection*,GtkTreeIter*->gboolean "gboolean ($(GtkTreeSelection *,GtkTreeIter *))")
    (type GtkTreeSelection*,GtkTreePath*,GtkTreePath*->void "void ($(GtkTreeSelection *,GtkTreePath *,GtkTreePath *))")
    (type gint,...gint->GtkTreeStore* "GtkTreeStore *($(gint,...))")
    (type gint,GType*->GtkTreeStore* "GtkTreeStore *($(gint,GType *))")
    (type GtkTreeStore*,gint,GType*->void "void ($(GtkTreeStore *,gint,GType *))")
    (type GtkTreeStore*,GtkTreeIter*,gint,GValue*->void "void ($(GtkTreeStore *,GtkTreeIter *,gint,GValue *))")
    (type GtkTreeStore*,GtkTreeIter*,...GtkTreeIter*->void "void ($(GtkTreeStore *,GtkTreeIter *,...))")
    (type GtkTreeStore*,GtkTreeIter*->gboolean "gboolean ($(GtkTreeStore *,GtkTreeIter *))")
    (type GtkTreeStore*,GtkTreeIter*,GtkTreeIter*,gint->void "void ($(GtkTreeStore *,GtkTreeIter *,GtkTreeIter *,gint))")
    (type GtkTreeStore*,GtkTreeIter*,GtkTreeIter*,GtkTreeIter*->void "void ($(GtkTreeStore *,GtkTreeIter *,GtkTreeIter *,GtkTreeIter *))")
    (type GtkTreeStore*,GtkTreeIter*,GtkTreeIter*->void "void ($(GtkTreeStore *,GtkTreeIter *,GtkTreeIter *))")
    (type GtkTreeStore*,GtkTreeIter*,GtkTreeIter*->gboolean "gboolean ($(GtkTreeStore *,GtkTreeIter *,GtkTreeIter *))")
    (type GtkTreeStore*,GtkTreeIter*->gint "gint ($(GtkTreeStore *,GtkTreeIter *))")
    (type GtkTreeStore*->void "void ($(GtkTreeStore *))")
    (type GtkTreeStore*,GtkTreeIter*,gint*->void "void ($(GtkTreeStore *,GtkTreeIter *,gint *))")
    (type void->GtkUIManager* "GtkUIManager *($(void))")
    (type GtkUIManager*,gboolean->void "void ($(GtkUIManager *,gboolean))")
    (type GtkUIManager*->gboolean "gboolean ($(GtkUIManager *))")
    (type GtkUIManager*,GtkActionGroup*,gint->void "void ($(GtkUIManager *,GtkActionGroup *,gint))")
    (type GtkUIManager*,GtkActionGroup*->void "void ($(GtkUIManager *,GtkActionGroup *))")
    (type GtkUIManager*->GList* "GList *($(GtkUIManager *))")
    (type GtkUIManager*->GtkAccelGroup* "GtkAccelGroup *($(GtkUIManager *))")
    (type GtkUIManager*,GtkUIManagerItemType->GSList* "GSList *($(GtkUIManager *,GtkUIManagerItemType))")
    (type GtkUIManager*,gchar*,gssize,GError**->guint "guint ($(GtkUIManager *,gchar *,gssize,GError **))")
    (type GtkUIManager*,gchar*,GError**->guint "guint ($(GtkUIManager *,gchar *,GError **))")
    (type GtkUIManager*,guint,gchar*,gchar*,gchar*,GtkUIManagerItemType,gboolean->void "void ($(GtkUIManager *,guint,gchar *,gchar *,gchar *,GtkUIManagerItemType,gboolean))")
    (type GtkUIManager*,guint->void "void ($(GtkUIManager *,guint))")
    (type GtkUIManager*->gchar* "gchar *($(GtkUIManager *))")
    (type GtkUIManager*->guint "guint ($(GtkUIManager *))")
    ;; end of monster.h
    ))


(define *new-argv* '())

(define (gtk-init)
  (if (pair? *new-argv*)
      *new-argv*
      (let*((argv (command-line))
	    (argc::int 0 ;; (length argv)
                       ))
;	    (cargv::string* (string-list->string* argv)))
;	 (gtk_set_locale)
         ;; XXX use gtk_init_check() instead, because it returns false
         ;; instead of exiting the program.
;         (debug-trace 0 "argc is " argc "argv is " argv)
;         (pragma "$1[$2] = NULL" cargv argc)
;;          (let loop ((i::int 0))
;;             (when (< i argc)
;;                (pragma "printf(\"%d: \\n\", $1)" i)
;;                (pragma "fflush(stdout)")
;;                (pragma "printf(\"%s\\n\", $1[$2])" cargv i)
;;                (pragma "fflush(stdout)")
;;                (loop (+ i 1))))
;	 (pragma "gtk_init_check(&$1, &$2)" argc cargv)
         (pragma "gtk_init(NULL, NULL)") 
;         (debug-trace 0 "wee!!!!")
	 (set! *new-argv* argv);(string*->string-list cargv))
	 *new-argv*)))
;;call it once
(gtk-init)



(define (gdk-color-new::GdkColor*
         red::uint
         green::uint
         blue::uint)
  (let ((color (pragma::GdkColor*
                 #"(GdkColor*)GC_malloc_atomic(sizeof(GdkColor))")))
    (pragma #"$1->red = $2" color red)
    (pragma #"$1->green = $2" color green)
    (pragma #"$1->blue = $2" color blue)
    color))

(define (gtk-ctree-new::GtkCTree*
         tree-column::uint
         arg
         .
         titles)
   (if (integer? arg)
       (pragma::GtkCTree*
	#"(GtkCTree*)gtk_ctree_new($1, $2)"
	(bint->int arg)
	tree-column)
       (let ((titles (cons arg titles)))
	  (pragma::GtkCTree*
	   #"(GtkCTree*)gtk_ctree_new_with_titles($1, $2, $3)"
	   (bint->int (length titles))
	   tree-column
	   (string-list->string* titles)))))

(define (glist-data type::symbol lyst)
   (if (foreign-null? lyst)
       '()
       (and lyst
	    (let ((data
		   (cond ((GList*? lyst) (GList*-data lyst))
			 ((GSList*? lyst) (GSList*-data lyst))
			 (else
			  (error "glist-data" "invalid argument type" lyst)))))
	       (my-coerce type data)))))


(define (my-coerce type::symbol data)
;   (fprint (current-error-port) "in my-coerce: " data)
   (case type
      ((string)
       (pragma::string "(char*)FOREIGN_TO_COBJ($1)" data))
      
      ((int)
       (pragma::int "(int)FOREIGN_TO_COBJ($1)" data))
      
      ((uint)
       (pragma::uint "(unsigned)FOREIGN_TO_COBJ($1)" data))

;       ((putz)
;        (pragma::GtkBoxChild* "$1" data))
      (else
       (let ((data::void* data))
	  (pragma::obj "cobj_to_foreign($1, $2)" type data)))))

(define (glist-next lyst)
   (and (not (foreign-null? lyst))
	(cond ((GList*? lyst) (GList*-next lyst))
	      ((GSList*? lyst) (GSList*-next lyst))
	      (else
	       (error "glist-next" "invalid argument type" lyst)))))

(define (glist-prev lyst)
   (and (not (foreign-null? lyst))
	(cond ((GList*? lyst) (GList*-prev lyst))
	      (else
	       (error "glist-prev" "invalid argument type"lyst)))))

(define (glist-find lyst type what #!optional backward?)
   (let ((proc (cond ((procedure? what) what)
		     ((foreign? what) (lambda (o) (foreign-eq? what o)))
		     (else
		      (lambda (o) (eq? what o))))))
      (let loop ((lyst lyst))
	 (and lyst
	      (if (proc (glist-data type lyst))
		  lyst
		  (loop (if backward?
			    (glist-prev lyst)
			    (glist-next lyst))))))))

(define (glist-foreach lyst type::symbol proc #!optional backward?)
   (let loop ((lyst lyst))
      (when (not (foreign-null? lyst))
	 (proc (glist-data type lyst))
	 (loop (if backward?
		   (glist-prev lyst)
		   (glist-next lyst))))))

(define (glist-map lyst type::symbol proc #!optional backward?)
   (let loop ((lyst lyst)
	      (accu '()))
      (if (not (foreign-null? lyst))
	  (loop (if backward?
		    (glist-prev lyst)
		    (glist-next lyst))
		(cons (proc (glist-data type lyst))
		      accu))
	  (reverse accu))))

(define (glist->list lyst type::symbol #!optional backward?)
  (glist-map lyst type values backward?))



(define (gtk-ctree-node-set-row-data ctree::GtkCTree* node::GtkCTreeNode* o #!optional destroy)
  (let ((old (gtk-ctree-node-get-row-data ctree node)))
    (object-unref old)
    (object-ref o destroy)
    (pragma
      #"gtk_ctree_node_set_row_data_full($1, $2, $3,\n   (GtkDestroyNotify)object_unref)"
      ctree
      node
      o)
    old))


(define (gtk-ctree-node-get-row-data ctree::GtkCTree* node::GtkCTreeNode*)
  (let ((data (pragma::void*
                #"gtk_ctree_node_get_row_data($1, $2)"
                ctree
                node)))
    (if (void*-null? data)
;      #unspecified
	NULL
      (pragma::obj #"$1" data))))



;;; g_convert shows up in 24 places
;;; they are all overridden functions:

;;; ;gtk_button_new
;;; ;gtk_check_button_new
;;; ;gtk_check_menu_item_new
;;; ;gtk_clist_new
;;; ;gtk_clist_append
;;; ;gtk_clist_prepend
;;; ;gtk_clist_insert
;;; ;gtk_clist_get_text **
;;; ;gtk_combo_set_popdown_strings
;;; ;gtk_ctree_new_with_titles
;;; ;gtk_ctree_insert_node
;;; ;gtk_ctree_node_get_text **
;;; ;gtk_list_item_new
;;; ;gtk_menu_item_new
;;; ;gtk_radio_button_new
;;; ;gtk_radio_menu_item_new
;;; ;gtk_toggle_button_new
;;; gtk_toolbar_item_impl (3x)
;;; gtk_toolbar_element_impl (3x)
;;; ;gtk_tree_item_new

;;; ** these two go the other way around (convert from utf-8 to codepage)


;;; XXX the codepage should be an ini entry like is in php-gtk
;;; hardcoding it for now.
(define (convert-to-utf8::bstring string)
   (set! string (mkstr string))
   (cond-expand
      (PCC_MINGW
       (let* ((string::string string)
	      ;; use gpointer type to keep the string opaque to bigloo.
	      ;; we'll convert to a bstring ourselves.
	      (utf8-string::gpointer
	       (pragma::gpointer "g_convert($1, strlen($1), \"UTF-8\", \"CP1252\", NULL, NULL, NULL)" string))
	      ;; string_to_bstring will copy the string into GC'd memory
	      (converted-string
	       (pragma::bstring "string_to_bstring((char*)$1)" utf8-string)))
	  ;; free the memory that we got back from g_convert
	  (g_free utf8-string)
	  ;; finally return the converted string
	  converted-string))
      (else string)))

(define (convert-to-codepage::bstring string)
   (set! string (mkstr string))
   (cond-expand
      (PCC_MINGW
       (let* ((string::string string)
	      ;; use gpointer type to keep the string opaque to bigloo.
	      ;; we'll convert to a bstring ourselves.
	      (cp-string::gpointer
	       (pragma::gpointer "g_convert($1, strlen($1), \"CP1252\", \"UTF-8\", NULL, NULL, NULL)" string))
	      ;; string_to_bstring will copy the string into GC'd memory
	      (converted-string
	       (pragma::bstring "string_to_bstring((char*)$1)" cp-string)))
	  ;; free the memory that we got back from g_convert
	  (g_free cp-string)
	  ;; finally return the converted string
	  converted-string))
      (else string)))

