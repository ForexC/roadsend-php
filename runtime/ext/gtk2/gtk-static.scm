;; ***** BEGIN LICENSE BLOCK *****
;; Roadsend PHP Compiler Runtime Libraries
;; Copyright (C) 2007 Roadsend, Inc.
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU Lesser General Public License
;; as published by the Free Software Foundation; either version 2.1
;; of the License, or (at your option) any later version.
;; 
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Lesser General Public License for more details.
;; 
;; You should have received a copy of the GNU Lesser General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
;; ***** END LICENSE BLOCK *****
(module php-gtk-static-lib
;   (include "../phpoo-extension.sch")
   (load (php-macros "../../../php-macros.scm"))
   (load (php-gtk-macros "php-gtk-macros.sch"))
;   (library "common")
;   (library "bgtk")
   (import
    (gtk-binding "cigloo/gtk.scm")
    (gtk-signals "cigloo/signals.scm"))
   (library "php-runtime")
   (import (php-gtk-common-lib "php-gtk-common.scm"))
;   (import (gtk-foreign-types "gtk-foreign-types.scm"))
   (export
    (init-php-gtk-static-lib)
    )
   )

(define (init-php-gtk-static-lib)
   1)

;;
;; GTK static methods
;; ==================

(def-static-method Gtk (quit_add main-level function #!optional data)
   (let* ((main-level (mkfixnum main-level))
	  (function (mkstr function))
	  (callback (if data
			(lambda () (php-funcall function data))
			(lambda () (php-funcall function)))))
      (convert-to-integer (gtk-quit-add main-level callback))))

(def-static-method Gtk (idle_add function #!optional (data #f))
   (let* ((function (mkstr function))
	  (callback (if data
			(lambda () (php-funcall function data))
			(lambda () (php-funcall function)))))
      (convert-to-integer (gtk-idle-add callback))))

(def-static-method Gtk (timeout_add interval function #!optional (data #f))
   (let* ((interval (mkfixnum interval))
	  (function (mkstr function))
	  (callback (if data
			(lambda () (php-funcall function data))
			(lambda () (php-funcall function)))))
      ;; XXX note, php-gtk uses gtk_timeout_add_full with php_gtk_destroy_notify as the last argument
      (convert-to-integer (gtk-timeout-add interval callback))))

(def-static-methods Gtk gtk
;    ((gtk_accelerator_valid :return-type gboolean :c-name gtk_accelerator_valid) (keyval :gtk-type guint) (modifiers :gtk-type GdkModifierType))
;    ((gtk_accelerator_parse :c-name gtk_accelerator_parse) (accelerator :gtk-type const-gchar*) (accelerator_key :gtk-type guint*) (accelerator_mods :gtk-type GdkModifierType*))
;    ((gtk_accelerator_name :return-type gchar* :c-name gtk_accelerator_name) (accelerator_key :gtk-type guint) (accelerator_mods :gtk-type GdkModifierType))
;    ((gtk_accelerator_set_default_mod_mask :c-name gtk_accelerator_set_default_mod_mask) (default_mod_mask :gtk-type GdkModifierType))
;    ((gtk_accelerator_get_default_mod_mask :return-type guint :c-name gtk_accelerator_get_default_mod_mask))
   ((accel_group_get_default :return-type GtkAccelGroup*))
;   ((gtk_accel_groups_activate :return-type gboolean :c-name gtk_accel_groups_activate) (object :gtk-type GtkObject*) (accel_key :gtk-type guint) (accel_mods :gtk-type GdkModifierType))
;   ((gtk_accel_group_handle_add :c-name gtk_accel_group_handle_add) (object :gtk-type GtkObject*) (accel_signal_id :gtk-type guint) (accel_group :gtk-type GtkAccelGroup*) (accel_key :gtk-type guint) (accel_mods :gtk-type GdkModifierType) (accel_flags :gtk-type GtkAccelFlags))
;   ((gtk_accel_group_handle_remove :c-name gtk_accel_group_handle_remove) (object :gtk-type GtkObject*) (accel_group :gtk-type GtkAccelGroup*) (accel_key :gtk-type guint) (accel_mods :gtk-type GdkModifierType))
;   ((gtk_accel_group_create_add :return-type guint :c-name gtk_accel_group_create_add) (class_type :gtk-type GtkType) (signal_flags :gtk-type GtkSignalRunType) (handler_offset :gtk-type guint))
;   ((gtk_accel_group_create_remove :return-type guint :c-name gtk_accel_group_create_remove) (class_type :gtk-type GtkType) (signal_flags :gtk-type GtkSignalRunType) (handler_offset :gtk-type guint))
;   ((gtk_accel_groups_from_object :return-type GSList* :c-name gtk_accel_groups_from_object) (object :gtk-type GtkObject*))
;   ((gtk_accel_group_entries_from_object :return-type GSList* :c-name gtk_accel_group_entries_from_object) (object :gtk-type GtkObject*))
   (button_box_get_child_size_default (min_width :gtk-type gint*) (min_height :gtk-type gint*))
   (button_box_get_child_ipadding_default (ipad_x :gtk-type gint*) (ipad_y :gtk-type gint*))
   (button_box_set_child_size_default (min_width :gtk-type gint) (min_height :gtk-type gint))
   (button_box_set_child_ipadding_default (ipad_x :gtk-type gint) (ipad_y :gtk-type gint))
   ((gtk_button_box_child_requisition :c-name gtk_button_box_child_requisition) (widget :gtk-type GtkWidget*) (nvis_children :gtk-type int*) (width :gtk-type int*) (height :gtk-type int*))
;   ((gtk_container_get_toplevels :return-type GList* :c-name gtk_container_get_toplevels))
;   ((gtk_container_add_child_arg_type :c-name gtk_container_add_child_arg_type) (arg_name :gtk-type const-gchar*) (arg_type :gtk-type GtkType) (arg_flags :gtk-type guint) (arg_id :gtk-type guint))
;   ((gtk_container_query_child_args :return-type GtkArg* :c-name gtk_container_query_child_args) (class_type :gtk-type GtkType) (arg_flags :gtk-type guint32**) (nargs :gtk-type guint*))
;   ((gtk_container_child_args_collect :return-type gchar* :c-name gtk_container_child_args_collect) (object_type :gtk-type GtkType) (arg_list_p :gtk-type GSList**) (info_list_p :gtk-type GSList**) (first_arg_name :gtk-type const-gchar*) (args :gtk-type va_list))
;   ((gtk_container_child_arg_get_info :return-type gchar* :c-name gtk_container_child_arg_get_info) (object_type :gtk-type GtkType) (arg_name :gtk-type const-gchar*) (info_p :gtk-type GtkArgInfo**))
   ((gtk_drag_finish :c-name gtk_drag_finish) (context :gtk-type GdkDragContext*) (success :gtk-type gboolean) (del :gtk-type gboolean) (time :gtk-type guint32))
   ((gtk_drag_get_source_widget :return-type GtkWidget* :c-name gtk_drag_get_source_widget) (context :gtk-type GdkDragContext*))
   ((gtk_drag_set_icon_widget :c-name gtk_drag_set_icon_widget) (context :gtk-type GdkDragContext*) (widget :gtk-type GtkWidget*) (hot_x :gtk-type gint) (hot_y :gtk-type gint))
   ((gtk_drag_set_icon_pixmap :c-name gtk_drag_set_icon_pixmap) (context :gtk-type GdkDragContext*) (colormap :gtk-type GdkColormap*) (pixmap :gtk-type GdkPixmap*) (mask :gtk-type GdkBitmap*) (hot_x :gtk-type gint) (hot_y :gtk-type gint))
   ((gtk_drag_set_icon_default :c-name gtk_drag_set_icon_default) (context :gtk-type GdkDragContext*))
   ((gtk_drag_set_default_icon :c-name gtk_drag_set_default_icon) (colormap :gtk-type GdkColormap*) (pixmap :gtk-type GdkPixmap*) (mask :gtk-type GdkBitmap*) (hot_x :gtk-type gint) (hot_y :gtk-type gint))
;   ((gtk_drag_source_handle_event :c-name gtk_drag_source_handle_event) (widget :gtk-type GtkWidget*) (event :gtk-type GdkEvent*))
;   ((gtk_drag_dest_handle_event :c-name gtk_drag_dest_handle_event) (toplevel :gtk-type GtkWidget*) (event :gtk-type GdkEvent*))
   ((hbutton_box_get_spacing_default :return-type gint))
   ((hbutton_box_get_layout_default :return-type GtkButtonBoxStyle))
   (hbutton_box_set_spacing_default (spacing :gtk-type gint))
   (hbutton_box_set_layout_default (layout :gtk-type GtkButtonBoxStyle))
   ((gtk_item_factory_parse_rc :c-name gtk_item_factory_parse_rc) (file_name :gtk-type const-gchar*))
   ((gtk_item_factory_parse_rc_string :c-name gtk_item_factory_parse_rc_string) (rc_string :gtk-type const-gchar*))
   ((gtk_item_factory_parse_rc_scanner :c-name gtk_item_factory_parse_rc_scanner) (scanner :gtk-type GScanner*))
   ((gtk_item_factory_add_foreign :c-name gtk_item_factory_add_foreign) (accel_widget :gtk-type GtkWidget*) (full_path :gtk-type const-gchar*) (accel_group :gtk-type GtkAccelGroup*) (keyval :gtk-type guint) (modifiers :gtk-type GdkModifierType))
   ((gtk_item_factory_from_widget :return-type GtkItemFactory* :c-name gtk_item_factory_from_widget) (widget :gtk-type GtkWidget*))
   ((gtk_item_factory_path_from_widget :return-type gchar* :c-name gtk_item_factory_path_from_widget) (widget :gtk-type GtkWidget*))
   ((gtk_item_factory_dump_items :c-name gtk_item_factory_dump_items) (path_pspec :gtk-type GtkPatternSpec*) (modified_only :gtk-type gboolean) (print_func :gtk-type GtkPrintFunc) (func_data :gtk-type gpointer))
   ((gtk_item_factory_dump_rc :c-name gtk_item_factory_dump_rc) (file_name :gtk-type const-gchar*) (path_pspec :gtk-type GtkPatternSpec*) (modified_only :gtk-type gboolean))
   ((gtk_item_factory_print_func :c-name gtk_item_factory_print_func) (FILE_pointer :gtk-type gpointer) (string :gtk-type gchar*))
   ((gtk_item_factory_popup_data_from_widget :return-type gpointer :c-name gtk_item_factory_popup_data_from_widget) (widget :gtk-type GtkWidget*))
   ((gtk_item_factory_from_path :return-type GtkItemFactory* :c-name gtk_item_factory_from_path) (path :gtk-type const-gchar*))
   ((gtk_item_factory_create_menu_entries :c-name gtk_item_factory_create_menu_entries) (n_entries :gtk-type guint) (entries :gtk-type GtkMenuEntry*))
   ((gtk_item_factories_path_delete :c-name gtk_item_factories_path_delete) (ifactory_path :gtk-type const-gchar*) (path :gtk-type const-gchar*))
   ((check_version :return-type gchar*) (required_major :gtk-type guint) (required_minor :gtk-type guint) (required_micro :gtk-type guint))
;    (init (argc :gtk-type int*) (argv :gtk-type char***))
;   ((init_check :return-type gboolean) (argc :gtk-type int*) (argv :gtk-type char***))
;   (exit (error_code :gtk-type gint))
;   ((set_locale :return-type gchar*))
   ((events_pending :return-type gint))
   (main_do_event (event :gtk-type GdkEvent*))
   (main)
   ((main_level :return-type guint))
   (main_quit)
   ((main_iteration :return-type gint))
   ((main_iteration_do :return-type gint) (blocking :gtk-type gboolean :default TRUE))
;   ((gtk_true :return-type gint :c-name gtk_true))
;   ((gtk_false :return-type gint :c-name gtk_false))
   (grab_add (widget :gtk-type GtkWidget*))
   ((grab_get_current :return-type GtkWidget*))
   (grab_remove (widget :gtk-type GtkWidget*))
;   (init_add (function :gtk-type GtkFunction) (data :gtk-type gpointer))
   (quit_add_destroy (main_level :gtk-type guint) (object :gtk-type GtkObject*))
;   ((quit_add :return-type guint) (main_level :gtk-type guint) (function :gtk-type GtkFunction) (data :gtk-type gpointer))
;   ((quit_add_full :return-type guint) (main_level :gtk-type guint) (function :gtk-type GtkFunction) (marshal :gtk-type GtkCallbackMarshal) (data :gtk-type gpointer) (destroy :gtk-type GtkDestroyNotify))
   (quit_remove (quit_handler_id :gtk-type guint))
;   (quit_remove_by_data (data :gtk-type gpointer))
;   ((timeout_add :return-type guint) (interval :gtk-type guint32) (function :gtk-type GtkFunction) (data :gtk-type gpointer))
;   ((timeout_add_full :return-type guint) (interval :gtk-type guint32) (function :gtk-type GtkFunction) (marshal :gtk-type GtkCallbackMarshal) (data :gtk-type gpointer) (destroy :gtk-type GtkDestroyNotify))
   (timeout_remove (timeout_handler_id :gtk-type guint))
;   ((idle_add :return-type guint) (function :gtk-type GtkFunction) (data :gtk-type gpointer))
;   ((idle_add_priority :return-type guint) (priority :gtk-type gint) (function :gtk-type GtkFunction) (data :gtk-type gpointer))
;   ((idle_add_full :return-type guint) (priority :gtk-type gint) (function :gtk-type GtkFunction) (marshal :gtk-type GtkCallbackMarshal) (data :gtk-type gpointer) (destroy :gtk-type GtkDestroyNotify))
   (idle_remove (idle_handler_id :gtk-type guint))
;   (idle_remove_by_data (data :gtk-type gpointer))
   ((input_add :return-type guint :c-name gtk_input_add_full) (source :gtk-type gint) (condition :gtk-type GdkInputCondition) (function :gtk-type GdkInputFunction) (marshal :gtk-type GtkCallbackMarshal) (data :gtk-type gpointer) (destroy :gtk-type GtkDestroyNotify))
   (input_remove (input_handler_id :gtk-type guint))
;   ((key_snooper_install :return-type guint) (snooper :gtk-type GtkKeySnoopFunc) (func_data :gtk-type gpointer))
;   (key_snooper_remove (snooper_handler_id :gtk-type guint))
;   ((get_current_event :return-type GdkEvent*))
;   ((get_event_widget :return-type GtkWidget*) (event :gtk-type GdkEvent*))
;   (propagate_event (widget :gtk-type GtkWidget*) (event :gtk-type GdkEvent*))
;   ((gtk_object_query_args :return-type GtkArg* :c-name gtk_object_query_args) (class_type :gtk-type GtkType) (arg_flags :gtk-type guint32**) (n_args :gtk-type guint*))
;   ((gtk_object_add_arg_type :c-name gtk_object_add_arg_type) (arg_name :gtk-type const-gchar*) (arg_type :gtk-type GtkType) (arg_flags :gtk-type guint) (arg_id :gtk-type guint))
;   ((gtk_object_args_collect :return-type gchar* :c-name gtk_object_args_collect) (object_type :gtk-type GtkType) (arg_list_p :gtk-type GSList**) (info_list_p :gtk-type GSList**) (first_arg_name :gtk-type const-gchar*) (var_args :gtk-type va_list))
;   ((gtk_object_arg_get_info :return-type gchar* :c-name gtk_object_arg_get_info) (object_type :gtk-type GtkType) (arg_name :gtk-type const-gchar*) (info_p :gtk-type GtkArgInfo**))
;   ((gtk_trace_referencing :c-name gtk_trace_referencing) (object :gtk-type GtkObject*) (func :gtk-type const-gchar*) (dummy :gtk-type guint) (line :gtk-type guint) (do_ref :gtk-type gboolean))
;   ((gtk_preview_uninit :c-name gtk_preview_uninit))
   (preview_set_gamma (gamma :gtk-type double))
   (preview_set_color_cube (nred_shades :gtk-type guint) (ngreen_shades :gtk-type guint) (nblue_shades :gtk-type guint) (ngray_shades :gtk-type guint))
   (preview_set_install_cmap (install_cmap :gtk-type gint))
   (preview_set_reserved (nreserved :gtk-type gint))
   ((preview_get_visual :return-type GdkVisual*))
   ((preview_get_cmap :return-type GdkColormap*))
   ((preview_get_info :return-type GtkPreviewInfo*))
   (preview_reset)
   (rc_add_default_file (filename :gtk-type const-gchar*))
   (rc_set_default_files (filenames :gtk-type gchar**))
   ((rc_get_default_files :return-type gchar**))
   (rc_parse (filename :gtk-type const-gchar*))
   (rc_parse_string (rc_string :gtk-type const-gchar*))
   ((rc_reparse_all :return-type gboolean))
   ((rc_get_style :return-type GtkStyle*) (widget :gtk-type GtkWidget*))
   (rc_add_widget_name_style (rc_style :gtk-type GtkRcStyle*) (pattern :gtk-type const-gchar*))
   (rc_add_widget_class_style (rc_style :gtk-type GtkRcStyle*) (pattern :gtk-type const-gchar*))
   (rc_add_class_style (rc_style :gtk-type GtkRcStyle*) (pattern :gtk-type const-gchar*))
   (rc_set_image_loader (loader :gtk-type GtkImageLoader))
   ((rc_load_image :return-type GdkPixmap*) (colormap :gtk-type GdkColormap*) (transparent_color :gtk-type GdkColor*) (filename :gtk-type const-gchar*))
   ((rc_find_pixmap_in_path :return-type gchar*) (scanner :gtk-type GScanner*) (pixmap_file :gtk-type const-gchar*))
   ((rc_find_module_in_path :return-type gchar*) (module_file :gtk-type const-gchar*))
   ((rc_get_theme_dir :return-type gchar*))
   ((rc_get_module_dir :return-type gchar*))
   ((rc_parse_color :return-type guint) (scanner :gtk-type GScanner*) (color :gtk-type GdkColor*))
   ((rc_parse_state :return-type guint) (scanner :gtk-type GScanner*) (state :gtk-type GtkStateType*))
   ((rc_parse_priority :return-type guint) (scanner :gtk-type GScanner*) (priority :gtk-type GtkPathPriorityType*))
;   ((gtk_selection_incr_event :return-type gint :c-name gtk_selection_incr_event) (window :gtk-type GdkWindow*) (event :gtk-type GdkEventProperty*))
   ((gtk_signal_lookup :return-type guint :c-name gtk_signal_lookup) (name :gtk-type const-gchar*) (object_type :gtk-type GtkType))
   ((gtk_signal_name :return-type gchar* :c-name gtk_signal_name) (signal_id :gtk-type guint))
;   ((gtk_signal_n_emissions :return-type guint :c-name gtk_signal_n_emissions) (object :gtk-type GtkObject*) (signal_id :gtk-type guint))
;   ((gtk_signal_n_emissions_by_name :return-type guint :c-name gtk_signal_n_emissions_by_name) (object :gtk-type GtkObject*) (name :gtk-type const-gchar*))
;   ((gtk_signal_connect_full :return-type guint :c-name gtk_signal_connect_full) (object :gtk-type GtkObject*) (name :gtk-type const-gchar*) (func :gtk-type GtkSignalFunc) (marshal :gtk-type GtkCallbackMarshal) (data :gtk-type gpointer) (destroy_func :gtk-type GtkDestroyNotify) (object_signal :gtk-type gint) (after :gtk-type gint))
;   ((gtk_signal_connect_object_while_alive :c-name gtk_signal_connect_object_while_alive) (object :gtk-type GtkObject*) (signal :gtk-type const-gchar*) (func :gtk-type GtkSignalFunc) (alive_object :gtk-type GtkObject*))
;   ((gtk_signal_connect_while_alive :c-name gtk_signal_connect_while_alive) (object :gtk-type GtkObject*) (signal :gtk-type const-gchar*) (func :gtk-type GtkSignalFunc) (func_data :gtk-type gpointer) (alive_object :gtk-type GtkObject*))
;   ((gtk_signal_disconnect_by_func :c-name gtk_signal_disconnect_by_func) (object :gtk-type GtkObject*) (func :gtk-type GtkSignalFunc) (data :gtk-type gpointer))
;   ((gtk_signal_disconnect_by_data :c-name gtk_signal_disconnect_by_data) (object :gtk-type GtkObject*) (data :gtk-type gpointer))
;   ((gtk_signal_handler_block_by_func :c-name gtk_signal_handler_block_by_func) (object :gtk-type GtkObject*) (func :gtk-type GtkSignalFunc) (data :gtk-type gpointer))
;   ((gtk_signal_handler_block_by_data :c-name gtk_signal_handler_block_by_data) (object :gtk-type GtkObject*) (data :gtk-type gpointer))
;   ((gtk_signal_handler_unblock_by_func :c-name gtk_signal_handler_unblock_by_func) (object :gtk-type GtkObject*) (func :gtk-type GtkSignalFunc) (data :gtk-type gpointer))
;   ((gtk_signal_handler_unblock_by_data :c-name gtk_signal_handler_unblock_by_data) (object :gtk-type GtkObject*) (data :gtk-type gpointer))
;   ((gtk_signal_handler_pending_by_func :return-type guint :c-name gtk_signal_handler_pending_by_func) (object :gtk-type GtkObject*) (signal_id :gtk-type guint) (may_be_blocked :gtk-type gboolean) (func :gtk-type GtkSignalFunc) (data :gtk-type gpointer))
;   ((gtk_signal_add_emission_hook :return-type guint :c-name gtk_signal_add_emission_hook) (signal_id :gtk-type guint) (hook_func :gtk-type GtkEmissionHook) (data :gtk-type gpointer))
   ((gtk_signal_add_emission_hook_full :return-type guint :c-name gtk_signal_add_emission_hook_full) (signal_id :gtk-type guint) (hook_func :gtk-type GtkEmissionHook) (data :gtk-type gpointer) (destroy :gtk-type GDestroyNotify))
   ((gtk_signal_remove_emission_hook :c-name gtk_signal_remove_emission_hook) (signal_id :gtk-type guint) (hook_id :gtk-type guint))
;   ((gtk_signal_query :return-type GtkSignalQuery* :c-name gtk_signal_query) (signal_id :gtk-type guint))
;   ((gtk_signal_emit_by_name :c-name gtk_signal_emit_by_name) (object :gtk-type GtkObject*) (name :gtk-type const-gchar*))
;   ((gtk_signal_emitv :c-name gtk_signal_emitv) (object :gtk-type GtkObject*) (signal_id :gtk-type guint) (params :gtk-type GtkArg*))
;   ((gtk_signal_emitv_by_name :c-name gtk_signal_emitv_by_name) (object :gtk-type GtkObject*) (name :gtk-type const-gchar*) (params :gtk-type GtkArg*))
;   ((gtk_signal_set_funcs :c-name gtk_signal_set_funcs) (marshal_func :gtk-type GtkSignalMarshal) (destroy_func :gtk-type GtkSignalDestroy))
   ((gtk_draw_hline :c-name gtk_draw_hline) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (x1 :gtk-type gint) (x2 :gtk-type gint) (y :gtk-type gint))
   ((gtk_draw_vline :c-name gtk_draw_vline) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (y1 :gtk-type gint) (y2 :gtk-type gint) (x :gtk-type gint))
   ((gtk_draw_shadow :c-name gtk_draw_shadow) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
   ((gtk_draw_polygon :c-name gtk_draw_polygon) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (points :gtk-type GdkPoint*) (npoints :gtk-type gint) (fill :gtk-type gboolean))
   ((gtk_draw_arrow :c-name gtk_draw_arrow) (style :gtk-type GtkStyle*) (window :gtk-type GdkDrawable*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (arrow_type :gtk-type GtkArrowType) (fill :gtk-type gboolean) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
   ((gtk_draw_diamond :c-name gtk_draw_diamond) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
   ((gtk_draw_oval :c-name gtk_draw_oval) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
   ((gtk_draw_string :c-name gtk_draw_string) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (x :gtk-type gint) (y :gtk-type gint) (string :gtk-type const-gchar*))
   ((gtk_draw_box :c-name gtk_draw_box) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
;   ((gtk_draw_flat_box :c-name gtk_draw_flat_box) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
;   ((gtk_draw_check :c-name gtk_draw_check) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
;   ((gtk_draw_option :c-name gtk_draw_option) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
;   ((gtk_draw_cross :c-name gtk_draw_cross) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
;   ((gtk_draw_ramp :c-name gtk_draw_ramp) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (arrow_type :gtk-type GtkArrowType) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
;   ((gtk_draw_tab :c-name gtk_draw_tab) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
;   ((gtk_draw_shadow_gap :c-name gtk_draw_shadow_gap) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint) (gap_side :gtk-type GtkPositionType) (gap_x :gtk-type gint) (gap_width :gtk-type gint))
;   ((gtk_draw_box_gap :c-name gtk_draw_box_gap) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint) (gap_side :gtk-type GtkPositionType) (gap_x :gtk-type gint) (gap_width :gtk-type gint))
;   ((gtk_draw_extension :c-name gtk_draw_extension) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint) (gap_side :gtk-type GtkPositionType))
;   ((gtk_draw_focus :c-name gtk_draw_focus) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
;   ((gtk_draw_slider :c-name gtk_draw_slider) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint) (orientation :gtk-type GtkOrientation))
;   ((gtk_draw_handle :c-name gtk_draw_handle) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint) (orientation :gtk-type GtkOrientation))
   ((gtk_paint_hline :c-name gtk_paint_hline) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (x1 :gtk-type gint) (x2 :gtk-type gint) (y :gtk-type gint))
   ((gtk_paint_vline :c-name gtk_paint_vline) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (y1 :gtk-type gint) (y2 :gtk-type gint) (x :gtk-type gint))
   ((gtk_paint_shadow :c-name gtk_paint_shadow) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
   ((gtk_paint_polygon :c-name gtk_paint_polygon) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (points :gtk-type GdkPoint*) (npoints :gtk-type gint) (fill :gtk-type gboolean))
   ((gtk_paint_arrow :c-name gtk_paint_arrow) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (arrow_type :gtk-type GtkArrowType) (fill :gtk-type gboolean) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
   ((gtk_paint_diamond :c-name gtk_paint_diamond) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
   ((gtk_paint_oval :c-name gtk_paint_oval) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
   ((gtk_paint_string :c-name gtk_paint_string) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (x :gtk-type gint) (y :gtk-type gint) (string :gtk-type const-gchar*))
   ((gtk_paint_box :c-name gtk_paint_box) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
   ((gtk_paint_flat_box :c-name gtk_paint_flat_box) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
   ((gtk_paint_check :c-name gtk_paint_check) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
   ((gtk_paint_option :c-name gtk_paint_option) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
   ((gtk_paint_cross :c-name gtk_paint_cross) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
   ((gtk_paint_ramp :c-name gtk_paint_ramp) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (arrow_type :gtk-type GtkArrowType) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
   ((gtk_paint_tab :c-name gtk_paint_tab) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
   ((gtk_paint_shadow_gap :c-name gtk_paint_shadow_gap) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint) (gap_side :gtk-type GtkPositionType) (gap_x :gtk-type gint) (gap_width :gtk-type gint))
   ((gtk_paint_box_gap :c-name gtk_paint_box_gap) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint) (gap_side :gtk-type GtkPositionType) (gap_x :gtk-type gint) (gap_width :gtk-type gint))
   ((gtk_paint_extension :c-name gtk_paint_extension) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint) (gap_side :gtk-type GtkPositionType))
   ((gtk_paint_focus :c-name gtk_paint_focus) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint))
   ((gtk_paint_slider :c-name gtk_paint_slider) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint) (orientation :gtk-type GtkOrientation))
   ((gtk_paint_handle :c-name gtk_paint_handle) (style :gtk-type GtkStyle*) (window :gtk-type GdkWindow*) (state_type :gtk-type GtkStateType) (shadow_type :gtk-type GtkShadowType) (area :gtk-type GdkRectangle*) (widget :gtk-type GtkWidget*) (detail :gtk-type gchar*) (x :gtk-type gint) (y :gtk-type gint) (width :gtk-type gint) (height :gtk-type gint) (orientation :gtk-type GtkOrientation))
;   ((gtk_tooltips_data_get :return-type GtkTooltipsData* :c-name gtk_tooltips_data_get) (widget :gtk-type GtkWidget*))
   ((gtk_type_name :return-type gchar* :c-name gtk_type_name) (type :gtk-type guint))
   ((gtk_type_from_name :return-type GtkType :c-name gtk_type_from_name) (name :gtk-type const-gchar*))
;   ((gtk_type_check_object_cast :return-type GtkTypeObject* :c-name gtk_type_check_object_cast) (type_object :gtk-type GtkTypeObject*) (cast_type :gtk-type GtkType))
;   ((gtk_type_check_class_cast :return-type GtkTypeClass* :c-name gtk_type_check_class_cast) (klass :gtk-type GtkTypeClass*) (cast_type :gtk-type GtkType))
;   ((gtk_type_register_enum :return-type GtkType :c-name gtk_type_register_enum) (type_name :gtk-type const-gchar*) (values :gtk-type GtkEnumValue*))
;   ((gtk_type_register_flags :return-type GtkType :c-name gtk_type_register_flags) (type_name :gtk-type const-gchar*) (values :gtk-type GtkFlagValue*))
   ((vbutton_box_get_spacing_default :return-type gint))
   (vbutton_box_set_spacing_default (spacing :gtk-type gint))
   ((vbutton_box_get_layout_default :return-type GtkButtonBoxStyle))
   (vbutton_box_set_layout_default (layout :gtk-type GtkButtonBoxStyle))
   (widget_push_style (style :gtk-type GtkStyle*))
   (widget_push_colormap (cmap :gtk-type GdkColormap*))
   (widget_push_visual (visual :gtk-type GdkVisual*))
   (widget_push_composite_child)
   (widget_pop_composite_child)
   (widget_pop_style)
   (widget_pop_colormap)
   (widget_pop_visual)
   (widget_set_default_style (style :gtk-type GtkStyle*))
   (widget_set_default_colormap (colormap :gtk-type GdkColormap*))
   (widget_set_default_visual (visual :gtk-type GdkVisual*))
   ((widget_get_default_style :return-type GtkStyle*))
   ((widget_get_default_colormap :return-type GdkColormap*))
   ((widget_get_default_visual :return-type GdkVisual*))
   )

;;; casts

;;we can't use any of the foreign types defined in bgtk in our
;;export clauses, or else this would be in php-gtk-common.scm

(define (php-hash->string*::string* ar)
   (string-list->string*
    (map mkstr (php-hash->list (maybe-unbox ar)))))

(define (string*->php-hash ar)
   (list->php-hash
    (string*->string-list (maybe-unbox ar))))




