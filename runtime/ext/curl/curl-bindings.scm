;; ***** BEGIN LICENSE BLOCK *****
;; Roadsend PHP Compiler Runtime Libraries
;; Copyright (C) 2007 Roadsend, Inc.
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU Lesser General Public License
;; as published by the Free Software Foundation; either version 2.1
;; of the License, or (at your option) any later version.
;; 
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Lesser General Public License for more details.
;; 
;; You should have received a copy of the GNU Lesser General Public License
;; along with this program; if not, write to the Free Software
;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA
;; ***** END LICENSE BLOCK *****

;; basic recreation with cigloo:
;; 1) run curl.h through cpp
;; 2) remove all the non curl related defs
;; 3) cigloo -type off_t -type size_t -type time_t -type fd_set curl-bindings.h > curl-bindings.scm
;; 4) cleanup: CURL* &c to void* type, macro functions, remove unused 
(module curl-bindings
   (extern
    (include "curl-headers.h")
    (include "curl/curl.h")

;    (type fd_set* (opaque) "fd_set *")
    (type size_t (opaque) "size_t")
    (type time_t elong "time_t")


    (ccurl_strequal::string,string->int "curl_strequal")
    (ccurl_strnequal::string,string,size_t->int "curl_strnequal")
    (ccurl_formadd::CURLFORMcode (s-curl_httppost** s-curl_httppost** . s-curl_httppost**) "curl_formadd")
    (ccurl_formfree::void (s-curl_httppost*) "curl_formfree")
    (ccurl_getenv::string (string) "curl_getenv")
    (ccurl_version::string () "curl_version")
    (ccurl_escape::string (string int) "curl_escape")
    (ccurl_unescape::string (string int) "curl_unescape")
    (ccurl_free::void (void*) "curl_free")
    (ccurl_global_init::CURLcode (long) "curl_global_init")
;    (ccurl_global_init_mem::CURLcode (long
;				      curl_malloc_callback
;				      curl_free_callback
;				      curl_realloc_callback
;				      curl_strdup_callback
;				      curl_calloc_callback) "curl_global_init_mem")
    (ccurl_global_cleanup::void () "curl_global_cleanup")
    (ccurl_slist_append::s-curl_slist* (s-curl_slist* string) "curl_slist_append")
    (ccurl_slist_free_all::void (s-curl_slist*) "curl_slist_free_all")
    (ccurl_getdate::time_t (string time_t*) "curl_getdate")
    (ccurl_share_init::CURLSH* () "curl_share_init")
    (ccurl_share_setopt::CURLSHcode (CURLSH* CURLSHoption . CURLSHoption) "curl_share_setopt")
    (ccurl_share_cleanup::CURLSHcode (CURLSH*) "curl_share_cleanup")
    (ccurl_version_info::curl_version_info_data* (CURLversion) "curl_version_info")
    (ccurl_easy_strerror::string (CURLcode) "curl_easy_strerror")
    (ccurl_share_strerror::string (CURLSHcode) "curl_share_strerror")
    (ccurl_easy_init::CURL* () "curl_easy_init")
    (macro ccurl_easy_setopt::CURLcode (CURL* CURLoption void*) "curl_easy_setopt")
    (ccurl_easy_perform::CURLcode (CURL*) "curl_easy_perform")
    (ccurl_easy_cleanup::void (CURL*) "curl_easy_cleanup")
    (ccurl_easy_getinfo::CURLcode (CURL* CURLINFO . CURLINFO) "curl_easy_getinfo")
    (ccurl_easy_duphandle::CURL* (CURL*) "curl_easy_duphandle")
    (ccurl_easy_reset::void (CURL*) "curl_easy_reset")
    (ccurl_multi_init::CURLM* () "curl_multi_init")
    (ccurl_multi_add_handle::CURLMcode (CURLM* CURL*) "curl_multi_add_handle")
    (ccurl_multi_remove_handle::CURLMcode (CURLM* CURL*) "curl_multi_remove_handle")
    (ccurl_multi_fdset::CURLMcode (CURLM* fd-set fd-set fd-set int*) "curl_multi_fdset")
    (ccurl_multi_perform::CURLMcode (CURLM* int*) "curl_multi_perform")
    (ccurl_multi_cleanup::CURLMcode (CURLM*) "curl_multi_cleanup")
    ;(ccurl_multi_info_read::CURLMsg* (CURLM* int*) "curl_multi_info_read")
    (ccurl_multi_strerror::string (CURLMcode) "curl_multi_strerror")

;    (type CURL opaque "CURL")
    ;(type curl_off_t off_t "curl_off_t")
    (type s-curl_httppost (struct
			   (next::s-curl_httppost* "next")
			   (name::string "name")
			   (namelength::long "namelength")
			   (contents::string "contents")
			   (contentslength::long "contentslength")
			   (buffer::string "buffer")
			   (bufferlength::long "bufferlength")
			   (contenttype::string "contenttype")
			   (contentheader::s-curl_slist* "contentheader")
			   (more::s-curl_httppost* "more")
			   (flags::long "flags")
			   (showfilename::string "showfilename"))
	  "struct curl_httppost")
    (type s-curl_slist (struct (data::string "data") (next::s-curl_slist* "next")) "struct curl_slist")
    ;(type void* (pointer void) "void *")
    (type void*,double,double,double,double->int "int ($(void *,double,double,double,double))")
    (type *void*,double,double,double,double->int (function int (void* double double double double)) "int ((*$)(void *,double,double,double,double))")
    (type curl_progress_callback *void*,double,double,double,double->int "curl_progress_callback")
    (type string,size_t,size_t,void*->size_t "size_t ($(char *,size_t,size_t,void *))")
    (type *string,size_t,size_t,void*->size_t (function size_t (string size_t size_t void*)) "size_t ((*$)(char *,size_t,size_t,void *))")
    (type curl_write_callback *string,size_t,size_t,void*->size_t "curl_write_callback")
    (type curl_read_callback *string,size_t,size_t,void*->size_t "curl_read_callback")
    (type void*,string,string,int->int "int ($(void *,char *,char *,int))")
    (type *void*,string,string,int->int (function int (void* string string int)) "int ((*$)(void *,char *,char *,int))")
    (type curl_passwd_callback *void*,string,string,int->int "curl_passwd_callback")
    (type curlioerr (enum
		     (CURLIOE_OK "CURLIOE_OK")
		     (CURLIOE_UNKNOWNCMD "CURLIOE_UNKNOWNCMD")
		     (CURLIOE_FAILRESTART "CURLIOE_FAILRESTART")
		     (CURLIOE_LAST "CURLIOE_LAST")) "curlioerr")
    ;(type curlioerr curl-bindings__e1003 "curlioerr")
    (type curliocmd (enum
		     (CURLIOCMD_NOP "CURLIOCMD_NOP")
		     (CURLIOCMD_RESTARTREAD "CURLIOCMD_RESTARTREAD")
		     (CURLIOCMD_LAST "CURLIOCMD_LAST")) "curliocmd")
    ;(type curliocmd curl-bindings__e1004 "curliocmd")
    (type CURL* void* "CURL *")    
;    (type CURL* (pointer CURL) "CURL *")
    ;(type CURL*,int,void*->curlioerr "curlioerr ($(CURL *,int,void *))")
    ;(type *CURL*,int,void*->curlioerr (function curlioerr (CURL* int void*)) "curlioerr ((*$)(CURL *,int,void *))")
    ;(type curl_ioctl_callback *CURL*,int,void*->curlioerr "curl_ioctl_callback")
    ;(type size_t->void* "void *($(size_t))")
    ;(type *size_t->void* (function void* (size_t)) "void *((*$)(size_t))")
    ;(type curl_malloc_callback *size_t->void* "curl_malloc_callback")
    ;(type void*->void "void ($(void *))")
    ;(type *void*->void (function void (void*)) "void ((*$)(void *))")
    ;(type curl_free_callback *void*->void "curl_free_callback")
    ;(type void*,size_t->void* "void *($(void *,size_t))")
    ;(type *void*,size_t->void* (function void* (void* size_t)) "void *((*$)(void *,size_t))")
    ;(type curl_realloc_callback *void*,size_t->void* "curl_realloc_callback")
    ;(type string->string "char *($(char *))")
    ;(type *string->string (function string (string)) "char *((*$)(char *))")
    ;(type curl_strdup_callback *string->string "curl_strdup_callback")
    ;(type size_t,size_t->void* "void *($(size_t,size_t))")
    ;(type *size_t,size_t->void* (function void* (size_t size_t)) "void *((*$)(size_t,size_t))")
    ;(type curl_calloc_callback *size_t,size_t->void* "curl_calloc_callback")
    (type curl_infotype (enum
			 (CURLINFO_TEXT "CURLINFO_TEXT")
			 (CURLINFO_HEADER_IN "CURLINFO_HEADER_IN")
			 (CURLINFO_HEADER_OUT "CURLINFO_HEADER_OUT")
			 (CURLINFO_DATA_IN "CURLINFO_DATA_IN")
			 (CURLINFO_DATA_OUT "CURLINFO_DATA_OUT")
			 (CURLINFO_SSL_DATA_IN "CURLINFO_SSL_DATA_IN")
			 (CURLINFO_SSL_DATA_OUT "CURLINFO_SSL_DATA_OUT")
			 (CURLINFO_END "CURLINFO_END")) "curl_infotype")
    ;(type curl_infotype curl-bindings__e1005 "curl_infotype")
    (type CURL*,curl_infotype,string,size_t,void*->int "int ($(CURL *,curl_infotype,char *,size_t,void *))")
    (type *CURL*,curl_infotype,string,size_t,void*->int (function int (CURL* curl_infotype string size_t void*)) "int ((*$)(CURL *,curl_infotype,char *,size_t,void *))")
    (type curl_debug_callback *CURL*,curl_infotype,string,size_t,void*->int "curl_debug_callback")
    (type CURLcode (enum
				(CURLE_OK "CURLE_OK")
				(CURLE_UNSUPPORTED_PROTOCOL "CURLE_UNSUPPORTED_PROTOCOL")
				(CURLE_FAILED_INIT "CURLE_FAILED_INIT")
				(CURLE_URL_MALFORMAT "CURLE_URL_MALFORMAT")
				(CURLE_URL_MALFORMAT_USER "CURLE_URL_MALFORMAT_USER")
				(CURLE_COULDNT_RESOLVE_PROXY "CURLE_COULDNT_RESOLVE_PROXY")
				(CURLE_COULDNT_RESOLVE_HOST "CURLE_COULDNT_RESOLVE_HOST")
				(CURLE_COULDNT_CONNECT "CURLE_COULDNT_CONNECT")
				(CURLE_FTP_WEIRD_SERVER_REPLY "CURLE_FTP_WEIRD_SERVER_REPLY")
				(CURLE_FTP_ACCESS_DENIED "CURLE_FTP_ACCESS_DENIED")
				(CURLE_FTP_USER_PASSWORD_INCORRECT "CURLE_FTP_USER_PASSWORD_INCORRECT")
				(CURLE_FTP_WEIRD_PASS_REPLY "CURLE_FTP_WEIRD_PASS_REPLY")
				(CURLE_FTP_WEIRD_USER_REPLY "CURLE_FTP_WEIRD_USER_REPLY")
				(CURLE_FTP_WEIRD_PASV_REPLY "CURLE_FTP_WEIRD_PASV_REPLY")
				(CURLE_FTP_WEIRD_227_FORMAT "CURLE_FTP_WEIRD_227_FORMAT")
				(CURLE_FTP_CANT_GET_HOST "CURLE_FTP_CANT_GET_HOST")
				(CURLE_FTP_CANT_RECONNECT "CURLE_FTP_CANT_RECONNECT")
				(CURLE_FTP_COULDNT_SET_BINARY "CURLE_FTP_COULDNT_SET_BINARY")
				(CURLE_PARTIAL_FILE "CURLE_PARTIAL_FILE")
				(CURLE_FTP_COULDNT_RETR_FILE "CURLE_FTP_COULDNT_RETR_FILE")
				(CURLE_FTP_WRITE_ERROR "CURLE_FTP_WRITE_ERROR")
				(CURLE_FTP_QUOTE_ERROR "CURLE_FTP_QUOTE_ERROR")
				(CURLE_HTTP_RETURNED_ERROR "CURLE_HTTP_RETURNED_ERROR")
				(CURLE_WRITE_ERROR "CURLE_WRITE_ERROR")
				(CURLE_MALFORMAT_USER "CURLE_MALFORMAT_USER")
				(CURLE_FTP_COULDNT_STOR_FILE "CURLE_FTP_COULDNT_STOR_FILE")
				(CURLE_READ_ERROR "CURLE_READ_ERROR")
				(CURLE_OUT_OF_MEMORY "CURLE_OUT_OF_MEMORY")
				(CURLE_OPERATION_TIMEOUTED "CURLE_OPERATION_TIMEOUTED")
				(CURLE_FTP_COULDNT_SET_ASCII "CURLE_FTP_COULDNT_SET_ASCII")
				(CURLE_FTP_PORT_FAILED "CURLE_FTP_PORT_FAILED")
				(CURLE_FTP_COULDNT_USE_REST "CURLE_FTP_COULDNT_USE_REST")
				(CURLE_FTP_COULDNT_GET_SIZE "CURLE_FTP_COULDNT_GET_SIZE")
				(CURLE_HTTP_RANGE_ERROR "CURLE_HTTP_RANGE_ERROR")
				(CURLE_HTTP_POST_ERROR "CURLE_HTTP_POST_ERROR")
				(CURLE_SSL_CONNECT_ERROR "CURLE_SSL_CONNECT_ERROR")
				(CURLE_BAD_DOWNLOAD_RESUME "CURLE_BAD_DOWNLOAD_RESUME")
				(CURLE_FILE_COULDNT_READ_FILE "CURLE_FILE_COULDNT_READ_FILE")
				(CURLE_LDAP_CANNOT_BIND "CURLE_LDAP_CANNOT_BIND")
				(CURLE_LDAP_SEARCH_FAILED "CURLE_LDAP_SEARCH_FAILED")
				(CURLE_LIBRARY_NOT_FOUND "CURLE_LIBRARY_NOT_FOUND")
				(CURLE_FUNCTION_NOT_FOUND "CURLE_FUNCTION_NOT_FOUND")
				(CURLE_ABORTED_BY_CALLBACK "CURLE_ABORTED_BY_CALLBACK")
				(CURLE_BAD_FUNCTION_ARGUMENT "CURLE_BAD_FUNCTION_ARGUMENT")
				(CURLE_BAD_CALLING_ORDER "CURLE_BAD_CALLING_ORDER")
				(CURLE_INTERFACE_FAILED "CURLE_INTERFACE_FAILED")
				(CURLE_BAD_PASSWORD_ENTERED "CURLE_BAD_PASSWORD_ENTERED")
				(CURLE_TOO_MANY_REDIRECTS "CURLE_TOO_MANY_REDIRECTS")
				(CURLE_UNKNOWN_TELNET_OPTION "CURLE_UNKNOWN_TELNET_OPTION")
				(CURLE_TELNET_OPTION_SYNTAX "CURLE_TELNET_OPTION_SYNTAX")
				(CURLE_OBSOLETE "CURLE_OBSOLETE")
				(CURLE_SSL_PEER_CERTIFICATE "CURLE_SSL_PEER_CERTIFICATE")
				(CURLE_GOT_NOTHING "CURLE_GOT_NOTHING")
				(CURLE_SSL_ENGINE_NOTFOUND "CURLE_SSL_ENGINE_NOTFOUND")
				(CURLE_SSL_ENGINE_SETFAILED "CURLE_SSL_ENGINE_SETFAILED")
				(CURLE_SEND_ERROR "CURLE_SEND_ERROR")
				(CURLE_RECV_ERROR "CURLE_RECV_ERROR")
				(CURLE_SHARE_IN_USE "CURLE_SHARE_IN_USE")
				(CURLE_SSL_CERTPROBLEM "CURLE_SSL_CERTPROBLEM")
				(CURLE_SSL_CIPHER "CURLE_SSL_CIPHER")
				(CURLE_SSL_CACERT "CURLE_SSL_CACERT")
				(CURLE_BAD_CONTENT_ENCODING "CURLE_BAD_CONTENT_ENCODING")
				(CURLE_LDAP_INVALID_URL "CURLE_LDAP_INVALID_URL")
				(CURLE_FILESIZE_EXCEEDED "CURLE_FILESIZE_EXCEEDED")
				(CURLE_FTP_SSL_FAILED "CURLE_FTP_SSL_FAILED")
				(CURLE_SEND_FAIL_REWIND "CURLE_SEND_FAIL_REWIND")
				(CURLE_SSL_ENGINE_INITFAILED "CURLE_SSL_ENGINE_INITFAILED")
				(CURLE_LOGIN_DENIED "CURLE_LOGIN_DENIED")
				(CURLE_TFTP_NOTFOUND "CURLE_TFTP_NOTFOUND")
				(CURLE_TFTP_PERM "CURLE_TFTP_PERM")
				(CURLE_TFTP_DISKFULL "CURLE_TFTP_DISKFULL")
				(CURLE_TFTP_ILLEGAL "CURLE_TFTP_ILLEGAL")
				(CURLE_TFTP_UNKNOWNID "CURLE_TFTP_UNKNOWNID")
				(CURLE_TFTP_EXISTS "CURLE_TFTP_EXISTS")
				(CURLE_TFTP_NOSUCHUSER "CURLE_TFTP_NOSUCHUSER")
				(CURL_LAST "CURL_LAST")) "CURLcode")
;    (type CURLcode curl-bindings__e1006 "CURLcode")
    (type CURL*,void*,void*->CURLcode "CURLcode ($(CURL *,void *,void *))")
    (type *CURL*,void*,void*->CURLcode (function CURLcode (CURL* void* void*)) "CURLcode ((*$)(CURL *,void *,void *))")
    (type curl_ssl_ctx_callback *CURL*,void*,void*->CURLcode "curl_ssl_ctx_callback")
    (type curl_proxytype (enum
			  (CURLPROXY_HTTP "CURLPROXY_HTTP")
			  (CURLPROXY_SOCKS4 "CURLPROXY_SOCKS4")
			  (CURLPROXY_SOCKS5 "CURLPROXY_SOCKS5")) "curl_proxytype")
    ;(type curl_proxytype curl-bindings__e1007 "curl_proxytype")
    (type curl_ftpssl (enum
		       (CURLFTPSSL_NONE "CURLFTPSSL_NONE")
		       (CURLFTPSSL_TRY "CURLFTPSSL_TRY")
		       (CURLFTPSSL_CONTROL "CURLFTPSSL_CONTROL")
		       (CURLFTPSSL_ALL "CURLFTPSSL_ALL")
		       (CURLFTPSSL_LAST "CURLFTPSSL_LAST")) "curl_ftpssl")
    ;(type curl_ftpssl curl-bindings__e1008 "curl_ftpssl")
    (type curl_ftpauth (enum
			(CURLFTPAUTH_DEFAULT "CURLFTPAUTH_DEFAULT")
			(CURLFTPAUTH_SSL "CURLFTPAUTH_SSL")
			(CURLFTPAUTH_TLS "CURLFTPAUTH_TLS")
			(CURLFTPAUTH_LAST "CURLFTPAUTH_LAST")) "curl_ftpauth")
    ;(type curl_ftpauth curl-bindings__e1009 "curl_ftpauth")
    (type CURLoption (enum
		      (CURLOPT_FILE "CURLOPT_FILE")
		      (CURLOPT_URL "CURLOPT_URL")
		      (CURLOPT_PORT "CURLOPT_PORT")
		      (CURLOPT_PROXY "CURLOPT_PROXY")
		      (CURLOPT_USERPWD "CURLOPT_USERPWD")
		      (CURLOPT_PROXYUSERPWD "CURLOPT_PROXYUSERPWD")
		      (CURLOPT_RANGE "CURLOPT_RANGE")
		      (CURLOPT_INFILE "CURLOPT_INFILE")
		      (CURLOPT_ERRORBUFFER "CURLOPT_ERRORBUFFER")
		      (CURLOPT_WRITEFUNCTION "CURLOPT_WRITEFUNCTION")
		      (CURLOPT_READFUNCTION "CURLOPT_READFUNCTION")
		      (CURLOPT_TIMEOUT "CURLOPT_TIMEOUT")
		      (CURLOPT_INFILESIZE "CURLOPT_INFILESIZE")
		      (CURLOPT_POSTFIELDS "CURLOPT_POSTFIELDS")
		      (CURLOPT_REFERER "CURLOPT_REFERER")
		      (CURLOPT_FTPPORT "CURLOPT_FTPPORT")
		      (CURLOPT_USERAGENT "CURLOPT_USERAGENT")
		      (CURLOPT_LOW_SPEED_LIMIT "CURLOPT_LOW_SPEED_LIMIT")
		      (CURLOPT_LOW_SPEED_TIME "CURLOPT_LOW_SPEED_TIME")
		      (CURLOPT_RESUME_FROM "CURLOPT_RESUME_FROM")
		      (CURLOPT_COOKIE "CURLOPT_COOKIE")
		      (CURLOPT_HTTPHEADER "CURLOPT_HTTPHEADER")
		      (CURLOPT_HTTPPOST "CURLOPT_HTTPPOST")
		      (CURLOPT_SSLCERT "CURLOPT_SSLCERT")
		      (CURLOPT_SSLCERTPASSWD "CURLOPT_SSLCERTPASSWD")
		      (CURLOPT_SSLKEYPASSWD "CURLOPT_SSLKEYPASSWD")
		      (CURLOPT_CRLF "CURLOPT_CRLF")
		      (CURLOPT_QUOTE "CURLOPT_QUOTE")
		      (CURLOPT_WRITEHEADER "CURLOPT_WRITEHEADER")
		      (CURLOPT_COOKIEFILE "CURLOPT_COOKIEFILE")
		      (CURLOPT_SSLVERSION "CURLOPT_SSLVERSION")
		      (CURLOPT_TIMECONDITION "CURLOPT_TIMECONDITION")
		      (CURLOPT_TIMEVALUE "CURLOPT_TIMEVALUE")
		      (CURLOPT_CUSTOMREQUEST "CURLOPT_CUSTOMREQUEST")
		      (CURLOPT_STDERR "CURLOPT_STDERR")
		      (CURLOPT_POSTQUOTE "CURLOPT_POSTQUOTE")
		      (CURLOPT_WRITEINFO "CURLOPT_WRITEINFO")
		      (CURLOPT_VERBOSE "CURLOPT_VERBOSE")
		      (CURLOPT_HEADER "CURLOPT_HEADER")
		      (CURLOPT_NOPROGRESS "CURLOPT_NOPROGRESS")
		      (CURLOPT_NOBODY "CURLOPT_NOBODY")
		      (CURLOPT_FAILONERROR "CURLOPT_FAILONERROR")
		      (CURLOPT_UPLOAD "CURLOPT_UPLOAD")
		      (CURLOPT_POST "CURLOPT_POST")
		      (CURLOPT_FTPLISTONLY "CURLOPT_FTPLISTONLY")
		      (CURLOPT_FTPAPPEND "CURLOPT_FTPAPPEND")
		      (CURLOPT_NETRC "CURLOPT_NETRC")
		      (CURLOPT_FOLLOWLOCATION "CURLOPT_FOLLOWLOCATION")
		      (CURLOPT_TRANSFERTEXT "CURLOPT_TRANSFERTEXT")
		      (CURLOPT_PUT "CURLOPT_PUT")
		      (CURLOPT_PROGRESSFUNCTION "CURLOPT_PROGRESSFUNCTION")
		      (CURLOPT_PROGRESSDATA "CURLOPT_PROGRESSDATA")
		      (CURLOPT_AUTOREFERER "CURLOPT_AUTOREFERER")
		      (CURLOPT_PROXYPORT "CURLOPT_PROXYPORT")
		      (CURLOPT_POSTFIELDSIZE "CURLOPT_POSTFIELDSIZE")
		      (CURLOPT_HTTPPROXYTUNNEL "CURLOPT_HTTPPROXYTUNNEL")
		      (CURLOPT_INTERFACE "CURLOPT_INTERFACE")
		      (CURLOPT_KRB4LEVEL "CURLOPT_KRB4LEVEL")
		      (CURLOPT_SSL_VERIFYPEER "CURLOPT_SSL_VERIFYPEER")
		      (CURLOPT_CAINFO "CURLOPT_CAINFO")
		      (CURLOPT_MAXREDIRS "CURLOPT_MAXREDIRS")
		      (CURLOPT_FILETIME "CURLOPT_FILETIME")
		      (CURLOPT_TELNETOPTIONS "CURLOPT_TELNETOPTIONS")
		      (CURLOPT_MAXCONNECTS "CURLOPT_MAXCONNECTS")
		      (CURLOPT_CLOSEPOLICY "CURLOPT_CLOSEPOLICY")
		      (CURLOPT_FRESH_CONNECT "CURLOPT_FRESH_CONNECT")
		      (CURLOPT_FORBID_REUSE "CURLOPT_FORBID_REUSE")
		      (CURLOPT_RANDOM_FILE "CURLOPT_RANDOM_FILE")
		      (CURLOPT_EGDSOCKET "CURLOPT_EGDSOCKET")
		      (CURLOPT_CONNECTTIMEOUT "CURLOPT_CONNECTTIMEOUT")
		      (CURLOPT_HEADERFUNCTION "CURLOPT_HEADERFUNCTION")
		      (CURLOPT_HTTPGET "CURLOPT_HTTPGET")
		      (CURLOPT_SSL_VERIFYHOST "CURLOPT_SSL_VERIFYHOST")
		      (CURLOPT_COOKIEJAR "CURLOPT_COOKIEJAR")
		      (CURLOPT_SSL_CIPHER_LIST "CURLOPT_SSL_CIPHER_LIST")
		      (CURLOPT_HTTP_VERSION "CURLOPT_HTTP_VERSION")
		      (CURLOPT_FTP_USE_EPSV "CURLOPT_FTP_USE_EPSV")
		      (CURLOPT_SSLCERTTYPE "CURLOPT_SSLCERTTYPE")
		      (CURLOPT_SSLKEY "CURLOPT_SSLKEY")
		      (CURLOPT_SSLKEYTYPE "CURLOPT_SSLKEYTYPE")
		      (CURLOPT_SSLENGINE "CURLOPT_SSLENGINE")
		      (CURLOPT_SSLENGINE_DEFAULT "CURLOPT_SSLENGINE_DEFAULT")
		      (CURLOPT_DNS_USE_GLOBAL_CACHE "CURLOPT_DNS_USE_GLOBAL_CACHE")
		      (CURLOPT_DNS_CACHE_TIMEOUT "CURLOPT_DNS_CACHE_TIMEOUT")
		      (CURLOPT_PREQUOTE "CURLOPT_PREQUOTE")
		      (CURLOPT_DEBUGFUNCTION "CURLOPT_DEBUGFUNCTION")
		      (CURLOPT_DEBUGDATA "CURLOPT_DEBUGDATA")
		      (CURLOPT_COOKIESESSION "CURLOPT_COOKIESESSION")
		      (CURLOPT_CAPATH "CURLOPT_CAPATH")
		      (CURLOPT_BUFFERSIZE "CURLOPT_BUFFERSIZE")
		      (CURLOPT_NOSIGNAL "CURLOPT_NOSIGNAL")
		      (CURLOPT_SHARE "CURLOPT_SHARE")
		      (CURLOPT_PROXYTYPE "CURLOPT_PROXYTYPE")
		      (CURLOPT_ENCODING "CURLOPT_ENCODING")
		      (CURLOPT_PRIVATE "CURLOPT_PRIVATE")
		      (CURLOPT_HTTP200ALIASES "CURLOPT_HTTP200ALIASES")
		      (CURLOPT_UNRESTRICTED_AUTH "CURLOPT_UNRESTRICTED_AUTH")
		      (CURLOPT_FTP_USE_EPRT "CURLOPT_FTP_USE_EPRT")
		      (CURLOPT_HTTPAUTH "CURLOPT_HTTPAUTH")
		      (CURLOPT_SSL_CTX_FUNCTION "CURLOPT_SSL_CTX_FUNCTION")
		      (CURLOPT_SSL_CTX_DATA "CURLOPT_SSL_CTX_DATA")
		      (CURLOPT_FTP_CREATE_MISSING_DIRS "CURLOPT_FTP_CREATE_MISSING_DIRS")
		      (CURLOPT_PROXYAUTH "CURLOPT_PROXYAUTH")
		      (CURLOPT_FTP_RESPONSE_TIMEOUT "CURLOPT_FTP_RESPONSE_TIMEOUT")
		      (CURLOPT_IPRESOLVE "CURLOPT_IPRESOLVE")
		      (CURLOPT_MAXFILESIZE "CURLOPT_MAXFILESIZE")
		      (CURLOPT_INFILESIZE_LARGE "CURLOPT_INFILESIZE_LARGE")
		      (CURLOPT_RESUME_FROM_LARGE "CURLOPT_RESUME_FROM_LARGE")
		      (CURLOPT_MAXFILESIZE_LARGE "CURLOPT_MAXFILESIZE_LARGE")
		      (CURLOPT_NETRC_FILE "CURLOPT_NETRC_FILE")
		      (CURLOPT_FTP_SSL "CURLOPT_FTP_SSL")
		      (CURLOPT_POSTFIELDSIZE_LARGE "CURLOPT_POSTFIELDSIZE_LARGE")
		      (CURLOPT_TCP_NODELAY "CURLOPT_TCP_NODELAY")
		      ;(CURLOPT_SOURCE_USERPWD "CURLOPT_SOURCE_USERPWD")
		      ;(CURLOPT_SOURCE_PREQUOTE "CURLOPT_SOURCE_PREQUOTE")
		      ;(CURLOPT_SOURCE_POSTQUOTE "CURLOPT_SOURCE_POSTQUOTE")
		      (CURLOPT_FTPSSLAUTH "CURLOPT_FTPSSLAUTH")
		      (CURLOPT_IOCTLFUNCTION "CURLOPT_IOCTLFUNCTION")
		      (CURLOPT_IOCTLDATA "CURLOPT_IOCTLDATA")
		      ;(CURLOPT_SOURCE_URL "CURLOPT_SOURCE_URL")
		      ;(CURLOPT_SOURCE_QUOTE "CURLOPT_SOURCE_QUOTE")
		      (CURLOPT_FTP_ACCOUNT "CURLOPT_FTP_ACCOUNT")
		      (CURLOPT_COOKIELIST "CURLOPT_COOKIELIST")
		      (CURLOPT_IGNORE_CONTENT_LENGTH "CURLOPT_IGNORE_CONTENT_LENGTH")
		      (CURLOPT_FTP_SKIP_PASV_IP "CURLOPT_FTP_SKIP_PASV_IP")
		      (CURLOPT_FTP_FILEMETHOD "CURLOPT_FTP_FILEMETHOD")
		      (CURLOPT_LASTENTRY "CURLOPT_LASTENTRY")) "CURLoption")
    ;(type CURLoption curl-bindings__e1010 "CURLoption")
    (type curl-bindings__e1011 (enum
				(CURL_HTTP_VERSION_NONE "CURL_HTTP_VERSION_NONE")
				(CURL_HTTP_VERSION_1_0 "CURL_HTTP_VERSION_1_0")
				(CURL_HTTP_VERSION_1_1 "CURL_HTTP_VERSION_1_1")
				(CURL_HTTP_VERSION_LAST "CURL_HTTP_VERSION_LAST")) "long")
    (type CURL_NETRC_OPTION (enum
			     (CURL_NETRC_IGNORED "CURL_NETRC_IGNORED")
			     (CURL_NETRC_OPTIONAL "CURL_NETRC_OPTIONAL")
			     (CURL_NETRC_REQUIRED "CURL_NETRC_REQUIRED")
			     (CURL_NETRC_LAST "CURL_NETRC_LAST")) "enum CURL_NETRC_OPTION")
    (type curl-bindings__e1012 (enum
				(CURL_SSLVERSION_DEFAULT "CURL_SSLVERSION_DEFAULT")
				(CURL_SSLVERSION_TLSv1 "CURL_SSLVERSION_TLSv1")
				(CURL_SSLVERSION_SSLv2 "CURL_SSLVERSION_SSLv2")
				(CURL_SSLVERSION_SSLv3 "CURL_SSLVERSION_SSLv3")
				(CURL_SSLVERSION_LAST "CURL_SSLVERSION_LAST")) "long")
    (type curl-bindings__e1013 (enum
				(CURL_TIMECOND_NONE "CURL_TIMECOND_NONE")
				(CURL_TIMECOND_IFMODSINCE "CURL_TIMECOND_IFMODSINCE")
				(CURL_TIMECOND_IFUNMODSINCE "CURL_TIMECOND_IFUNMODSINCE")
				(CURL_TIMECOND_LASTMOD "CURL_TIMECOND_LASTMOD")
				(CURL_TIMECOND_LAST "CURL_TIMECOND_LAST")) "long")
    (type curl_TimeCond curl-bindings__e1013 "curl_TimeCond")
    (type string,string->int "int ($(char *,char *))")
    (type string,string,size_t->int "int ($(char *,char *,size_t))")
    (type curl-bindings__e1014 (enum
				(CURLFORM_NOTHING "CURLFORM_NOTHING")
				(CURLFORM_COPYNAME "CURLFORM_COPYNAME")
				(CURLFORM_PTRNAME "CURLFORM_PTRNAME")
				(CURLFORM_NAMELENGTH "CURLFORM_NAMELENGTH")
				(CURLFORM_COPYCONTENTS "CURLFORM_COPYCONTENTS")
				(CURLFORM_PTRCONTENTS "CURLFORM_PTRCONTENTS")
				(CURLFORM_CONTENTSLENGTH "CURLFORM_CONTENTSLENGTH")
				(CURLFORM_FILECONTENT "CURLFORM_FILECONTENT")
				(CURLFORM_ARRAY "CURLFORM_ARRAY")
				(CURLFORM_OBSOLETE "CURLFORM_OBSOLETE")
				(CURLFORM_FILE "CURLFORM_FILE")
				(CURLFORM_BUFFER "CURLFORM_BUFFER")
				(CURLFORM_BUFFERPTR "CURLFORM_BUFFERPTR")
				(CURLFORM_BUFFERLENGTH "CURLFORM_BUFFERLENGTH")
				(CURLFORM_CONTENTTYPE "CURLFORM_CONTENTTYPE")
				(CURLFORM_CONTENTHEADER "CURLFORM_CONTENTHEADER")
				(CURLFORM_FILENAME "CURLFORM_FILENAME")
				(CURLFORM_END "CURLFORM_END")
				(CURLFORM_OBSOLETE2 "CURLFORM_OBSOLETE2")
				(CURLFORM_LASTENTRY "CURLFORM_LASTENTRY")) "long")
    (type CURLformoption curl-bindings__e1014 "CURLformoption")
    (type s-curl_forms (struct (option::CURLformoption "option") (value::string "value")) "struct curl_forms")
    (type curl-bindings__e1015 (enum
				(CURL_FORMADD_OK "CURL_FORMADD_OK")
				(CURL_FORMADD_MEMORY "CURL_FORMADD_MEMORY")
				(CURL_FORMADD_OPTION_TWICE "CURL_FORMADD_OPTION_TWICE")
				(CURL_FORMADD_NULL "CURL_FORMADD_NULL")
				(CURL_FORMADD_UNKNOWN_OPTION "CURL_FORMADD_UNKNOWN_OPTION")
				(CURL_FORMADD_INCOMPLETE "CURL_FORMADD_INCOMPLETE")
				(CURL_FORMADD_ILLEGAL_ARRAY "CURL_FORMADD_ILLEGAL_ARRAY")
				(CURL_FORMADD_DISABLED "CURL_FORMADD_DISABLED")
				(CURL_FORMADD_LAST "CURL_FORMADD_LAST")) "long")
    (type CURLFORMcode curl-bindings__e1015 "CURLFORMcode")
    (type CURLINFO (enum
		    (CURLINFO_NONE "CURLINFO_NONE")
		    (CURLINFO_EFFECTIVE_URL "CURLINFO_EFFECTIVE_URL")
		    (CURLINFO_RESPONSE_CODE "CURLINFO_RESPONSE_CODE")
		    (CURLINFO_TOTAL_TIME "CURLINFO_TOTAL_TIME")
		    (CURLINFO_NAMELOOKUP_TIME "CURLINFO_NAMELOOKUP_TIME")
		    (CURLINFO_CONNECT_TIME "CURLINFO_CONNECT_TIME")
		    (CURLINFO_PRETRANSFER_TIME "CURLINFO_PRETRANSFER_TIME")
		    (CURLINFO_SIZE_UPLOAD "CURLINFO_SIZE_UPLOAD")
		    (CURLINFO_SIZE_DOWNLOAD "CURLINFO_SIZE_DOWNLOAD")
		    (CURLINFO_SPEED_DOWNLOAD "CURLINFO_SPEED_DOWNLOAD")
		    (CURLINFO_SPEED_UPLOAD "CURLINFO_SPEED_UPLOAD")
		    (CURLINFO_HEADER_SIZE "CURLINFO_HEADER_SIZE")
		    (CURLINFO_REQUEST_SIZE "CURLINFO_REQUEST_SIZE")
		    (CURLINFO_SSL_VERIFYRESULT "CURLINFO_SSL_VERIFYRESULT")
		    (CURLINFO_FILETIME "CURLINFO_FILETIME")
		    (CURLINFO_CONTENT_LENGTH_DOWNLOAD "CURLINFO_CONTENT_LENGTH_DOWNLOAD")
		    (CURLINFO_CONTENT_LENGTH_UPLOAD "CURLINFO_CONTENT_LENGTH_UPLOAD")
		    (CURLINFO_STARTTRANSFER_TIME "CURLINFO_STARTTRANSFER_TIME")
		    (CURLINFO_CONTENT_TYPE "CURLINFO_CONTENT_TYPE")
		    (CURLINFO_REDIRECT_TIME "CURLINFO_REDIRECT_TIME")
		    (CURLINFO_REDIRECT_COUNT "CURLINFO_REDIRECT_COUNT")
		    (CURLINFO_PRIVATE "CURLINFO_PRIVATE")
		    (CURLINFO_HTTP_CONNECTCODE "CURLINFO_HTTP_CONNECTCODE")
		    (CURLINFO_HTTPAUTH_AVAIL "CURLINFO_HTTPAUTH_AVAIL")
		    (CURLINFO_PROXYAUTH_AVAIL "CURLINFO_PROXYAUTH_AVAIL")
		    (CURLINFO_OS_ERRNO "CURLINFO_OS_ERRNO")
		    (CURLINFO_NUM_CONNECTS "CURLINFO_NUM_CONNECTS")
		    (CURLINFO_SSL_ENGINES "CURLINFO_SSL_ENGINES")
		    (CURLINFO_COOKIELIST "CURLINFO_COOKIELIST")
		    (CURLINFO_LASTONE "CURLINFO_LASTONE")) "CURLINFO")
    ;(type CURLINFO curl-bindings__e1016 "CURLINFO")
    (type curl-bindings__e1017 (enum
				(CURLCLOSEPOLICY_NONE "CURLCLOSEPOLICY_NONE")
				(CURLCLOSEPOLICY_OLDEST "CURLCLOSEPOLICY_OLDEST")
				(CURLCLOSEPOLICY_LEAST_RECENTLY_USED "CURLCLOSEPOLICY_LEAST_RECENTLY_USED")
				(CURLCLOSEPOLICY_LEAST_TRAFFIC "CURLCLOSEPOLICY_LEAST_TRAFFIC")
				(CURLCLOSEPOLICY_SLOWEST "CURLCLOSEPOLICY_SLOWEST")
				(CURLCLOSEPOLICY_CALLBACK "CURLCLOSEPOLICY_CALLBACK")
				(CURLCLOSEPOLICY_LAST "CURLCLOSEPOLICY_LAST")) "long")
    (type curl_closepolicy curl-bindings__e1017 "curl_closepolicy")
    (type curl-bindings__e1018 (enum
				(CURL_LOCK_DATA_NONE "CURL_LOCK_DATA_NONE")
				(CURL_LOCK_DATA_SHARE "CURL_LOCK_DATA_SHARE")
				(CURL_LOCK_DATA_COOKIE "CURL_LOCK_DATA_COOKIE")
				(CURL_LOCK_DATA_DNS "CURL_LOCK_DATA_DNS")
				(CURL_LOCK_DATA_SSL_SESSION "CURL_LOCK_DATA_SSL_SESSION")
				(CURL_LOCK_DATA_CONNECT "CURL_LOCK_DATA_CONNECT")
				(CURL_LOCK_DATA_LAST "CURL_LOCK_DATA_LAST")) "long")
    (type curl_lock_data curl-bindings__e1018 "curl_lock_data")
    (type curl-bindings__e1019 (enum
				(CURL_LOCK_ACCESS_NONE "CURL_LOCK_ACCESS_NONE")
				(CURL_LOCK_ACCESS_SHARED "CURL_LOCK_ACCESS_SHARED")
				(CURL_LOCK_ACCESS_SINGLE "CURL_LOCK_ACCESS_SINGLE")
				(CURL_LOCK_ACCESS_LAST "CURL_LOCK_ACCESS_LAST")) "long")
    ;(type curl_lock_access curl-bindings__e1019 "curl_lock_access")
    ;(type CURL*,curl_lock_data,curl_lock_access,void*->void "void ($(CURL *,curl_lock_data,curl_lock_access,void *))")
    ;(type *CURL*,curl_lock_data,curl_lock_access,void*->void (function void (CURL* curl_lock_data curl_lock_access void*)) "void ((*$)(CURL *,curl_lock_data,curl_lock_access,void *))")
    ;(type curl_lock_function *CURL*,curl_lock_data,curl_lock_access,void*->void "curl_lock_function")
    ;(type CURL*,curl_lock_data,void*->void "void ($(CURL *,curl_lock_data,void *))")
    ;(type *CURL*,curl_lock_data,void*->void (function void (CURL* curl_lock_data void*)) "void ((*$)(CURL *,curl_lock_data,void *))")
    ;(type curl_unlock_function *CURL*,curl_lock_data,void*->void "curl_unlock_function")
;    (type CURLSH opaque "CURLSH")
    (type curl-bindings__e1020 (enum
				(CURLSHE_OK "CURLSHE_OK")
				(CURLSHE_BAD_OPTION "CURLSHE_BAD_OPTION")
				(CURLSHE_IN_USE "CURLSHE_IN_USE")
				(CURLSHE_INVALID "CURLSHE_INVALID")
				(CURLSHE_NOMEM "CURLSHE_NOMEM")
				(CURLSHE_LAST "CURLSHE_LAST")) "long")
    (type CURLSHcode curl-bindings__e1020 "CURLSHcode")
    (type curl-bindings__e1021 (enum
				(CURLSHOPT_NONE "CURLSHOPT_NONE")
				(CURLSHOPT_SHARE "CURLSHOPT_SHARE")
				(CURLSHOPT_UNSHARE "CURLSHOPT_UNSHARE")
				(CURLSHOPT_LOCKFUNC "CURLSHOPT_LOCKFUNC")
				(CURLSHOPT_UNLOCKFUNC "CURLSHOPT_UNLOCKFUNC")
				(CURLSHOPT_USERDATA "CURLSHOPT_USERDATA")
				(CURLSHOPT_LAST "CURLSHOPT_LAST")) "long")
    (type CURLSHoption curl-bindings__e1021 "CURLSHoption")
    (type curl-bindings__e1022 (enum
				(CURLVERSION_FIRST "CURLVERSION_FIRST")
				(CURLVERSION_SECOND "CURLVERSION_SECOND")
				(CURLVERSION_THIRD "CURLVERSION_THIRD")
				(CURLVERSION_LAST "CURLVERSION_LAST")
				(CURLVERSION_NOW "CURLVERSION_NOW")) "long")
    (type CURLversion curl-bindings__e1022 "CURLversion")
    (type s-curl-bindings__s1001 (struct
				  (age::CURLversion "age")
				  (version::string "version")
				  (version_num::uint "version_num")
				  (host::string "host")
				  (features::int "features")
				  (ssl_version::string "ssl_version")
				  (ssl_version_num::long "ssl_version_num")
				  (libz_version::string "libz_version")
				  (protocols::string* "protocols")
				  (ares::string "ares")
				  (ares_num::int "ares_num")
				  (libidn::string "libidn")) "curl_version_info_data")
    ;(type string* (pointer string) "char **")
    (type curl_version_info_data s-curl-bindings__s1001 "curl_version_info_data")
;    (type CURLM opaque "CURLM")
    (type CURLMcode (enum
				(CURLM_CALL_MULTI_PERFORM "CURLM_CALL_MULTI_PERFORM")
				(CURLM_OK "CURLM_OK")
				(CURLM_BAD_HANDLE "CURLM_BAD_HANDLE")
				(CURLM_BAD_EASY_HANDLE "CURLM_BAD_EASY_HANDLE")
				(CURLM_OUT_OF_MEMORY "CURLM_OUT_OF_MEMORY")
				(CURLM_INTERNAL_ERROR "CURLM_INTERNAL_ERROR")
				(CURLM_LAST "CURLM_LAST")) "CURLMcode")
;     (type curl-bindings__e1023 (enum
; 				(CURLM_CALL_MULTI_PERFORM "CURLM_CALL_MULTI_PERFORM")
; 				(CURLM_OK "CURLM_OK")
; 				(CURLM_BAD_HANDLE "CURLM_BAD_HANDLE")
; 				(CURLM_BAD_EASY_HANDLE "CURLM_BAD_EASY_HANDLE")
; 				(CURLM_OUT_OF_MEMORY "CURLM_OUT_OF_MEMORY")
; 				(CURLM_INTERNAL_ERROR "CURLM_INTERNAL_ERROR")
; 				(CURLM_LAST "CURLM_LAST")) "long")
;     (type CURLMcode curl-bindings__e1023 "CURLMcode")
    (type curl-bindings__e1024 (enum
				(CURLMSG_NONE "CURLMSG_NONE")
				(CURLMSG_DONE "CURLMSG_DONE")
				(CURLMSG_LAST "CURLMSG_LAST")) "long")
    (type CURLMSG curl-bindings__e1024 "CURLMSG")
    ;(type s-CURLMsg (struct (msg::CURLMSG "msg") (easy_handle::CURL* "easy_handle") (data::s-curl-bindings__s1002 "data")) "struct CURLMsg")
    ;(type s-curl-bindings__s1002 (union (whatever::void* "whatever") (result::CURLcode "result")) "void")
    ;(type CURLMsg s-CURLMsg "CURLMsg")
    (type s-curl_httppost** (pointer s-curl_httppost*) "struct curl_httppost **")
;    (type s-curl_httppost**,s-curl_httppost**,...s-curl_httppost**->CURLFORMcode "CURLFORMcode ($(struct curl_httppost **,struct curl_httppost **,...))")
;    (type s-curl_httppost*->void "void ($(struct curl_httppost *))")
;    (type void->string "char *($(void))")
;    (type string,int->string "char *($(char *,int))")
;    (type long->CURLcode "CURLcode ($(long))")
;    (type long,curl_malloc_callback,curl_free_callback,curl_realloc_callback,curl_strdup_callback,curl_calloc_callback->CURLcode "CURLcode ($(long,curl_malloc_callback,curl_free_callback,curl_realloc_callback,curl_strdup_callback,curl_calloc_callback))")
;    (type void->void "void ($(void))")
;    (type s-curl_slist*,string->s-curl_slist* "struct curl_slist *($(struct curl_slist *,char *))")
;    (type s-curl_slist*->void "void ($(struct curl_slist *))")
    (type time_t* (pointer time_t) "time_t *")
;    (type string,time_t*->time_t "time_t ($(char *,time_t *))")
    (type CURLSH* void* "CURLSH *")    
;    (type CURLSH* (pointer CURLSH) "CURLSH *")
;    (type void->CURLSH* "CURLSH *($(void))")
;    (type CURLSH*,CURLSHoption,...CURLSHoption->CURLSHcode "CURLSHcode ($(CURLSH *,CURLSHoption,...))")
;    (type CURLSH*->CURLSHcode "CURLSHcode ($(CURLSH *))")
;    (type CURLversion->curl_version_info_data* "curl_version_info_data *($(CURLversion))")
;    (type CURLcode->string "char *($(CURLcode))")
;    (type CURLSHcode->string "char *($(CURLSHcode))")
;    (type void->CURL* "CURL *($(void))")
;    (type CURL*,CURLoption,...CURLoption->CURLcode "CURLcode ($(CURL *,CURLoption,...))")
;    (type CURL*->CURLcode "CURLcode ($(CURL *))")
;    (type CURL*->void "void ($(CURL *))")
;    (type CURL*,CURLINFO,...CURLINFO->CURLcode "CURLcode ($(CURL *,CURLINFO,...))")
;    (type CURL*->CURL* "CURL *($(CURL *))")
    (type CURLM* void* "CURLM *")
;    (type CURLM* (pointer CURLM) "CURLM *")
;    (type void->CURLM* "CURLM *($(void))")
;    (type CURLM*,CURL*->CURLMcode "CURLMcode ($(CURLM *,CURL *))")
    (type int* (pointer int) "int *")
;    (type CURLM*,fd_set*,fd_set*,fd_set*,int*->CURLMcode "CURLMcode ($(CURLM *,fd_set *,fd_set *,fd_set *,int *))")
;    (type CURLM*,int*->CURLMcode "CURLMcode ($(CURLM *,int *))")
;    (type CURLM*->CURLMcode "CURLMcode ($(CURLM *))")
;    (type CURLM*,int*->CURLMsg* "CURLMsg *($(CURLM *,int *))")
;    (type CURLMcode->string "char *($(CURLMcode))")

    ))