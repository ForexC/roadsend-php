(module gtk-binding
;   (library common)
   (export
    (gtk-init)
    (gdk-color-new::GdkColor* red::uint green::uint blue::uint)
    (gtk-ctree-new::GtkCTree* tree-column::uint arg . titles)
    (gtk-ctree-node-get-row-data ctree::GtkCTree* node::GtkCTreeNode*)
    (gtk-ctree-node-set-row-data ctree::GtkCTree* node::GtkCTreeNode* o #!optional destroy)
    (glist-data type::symbol lyst)
    (glist-next lyst)
    (glist-prev lyst)
    (glist-find lyst type what #!optional backward?)
    (glist-foreach lyst type::symbol proc #!optional backward?)
    (glist-map lyst type::symbol proc #!optional backward?)
    (glist->list lyst type::symbol #!optional backward?)
    (my-coerce type::symbol data)
    (convert-to-utf8::bstring string)
    (convert-to-codepage::bstring string))
   
   (extern
    (macro GTK_ADJUSTMENT::s-_GtkAdjustment* (obj::cobj) "GTK_ADJUSTMENT")
    (macro GTK_OBJECT::s-_GtkObject* (obj::cobj) "GTK_OBJECT")
    (macro GTK_WIDGET::s-_GtkWidget* (obj::cobj) "GTK_WIDGET")
    (macro GTK_MISC::s-_GtkMisc* (obj::cobj) "GTK_MISC")
    (macro GTK_ARROW::s-_GtkArrow* (obj::cobj) "GTK_ARROW")
    (macro GTK_EDITABLE::s-_GtkEditable* (obj::cobj) "GTK_EDITABLE")
    (macro GTK_TEXT::s-_GtkText* (obj::cobj) "GTK_TEXT")
    (macro GTK_TOOLBAR::s-_GtkToolbar* (obj::cobj) "GTK_TOOLBAR")
    (macro GTK_TABLE::s-_GtkTable* (obj::cobj) "GTK_TABLE")
    (macro GTK_PANED::s-_GtkPaned* (obj::cobj) "GTK_PANED")
    (macro GTK_NOTEBOOK::s-_GtkNotebook* (obj::cobj) "GTK_NOTEBOOK")
    (macro GTK_LIST::s-_GtkList* (obj::cobj) "GTK_LIST")
    (macro GTK_LAYOUT::s-_GtkLayout* (obj::cobj) "GTK_LAYOUT")
    (macro GTK_FIXED::s-_GtkFixed* (obj::cobj) "GTK_FIXED")
    (macro GTK_BIN::s-_GtkBin* (obj::cobj) "GTK_BIN")
    (macro GTK_TREE_ITEM::s-_GtkTreeItem* (obj::cobj) "GTK_TREE_ITEM")
    (macro GTK_CHECK_MENU_ITEM::s-_GtkCheckMenuItem* (obj::cobj) "GTK_CHECK_MENU_ITEM")
    (macro GTK_HANDLE_BOX::s-_GtkHandleBox* (obj::cobj) "GTK_HANDLE_BOX")
    (macro GTK_TOGGLE_BUTTON::s-_GtkToggleButton* (obj::cobj) "GTK_TOGGLE_BUTTON")
    (macro GTK_BOX::s-_GtkBox* (obj::cobj) "GTK_BOX")
    (macro GTK_GAMMA_CURVE::s-_GtkGammaCurve* (obj::cobj) "GTK_GAMMA_CURVE")
    (macro GTK_COMBO::s-_GtkCombo* (obj::cobj) "GTK_COMBO")
    (macro GTK_CLIST::s-_GtkCList* (obj::cobj) "GTK_CLIST")
    (macro GTK_CTREE::s-_GtkCTree* (obj::cobj) "GTK_CTREE")
    (macro GTK_CALENDAR::s-_GtkCalendar* (obj::cobj) "GTK_CALENDAR")
    (macro GTK_FONT_SELECTION_DIALOG::s-_GtkFontSelectionDialog* (obj::cobj) "GTK_FONT_SELECTION_DIALOG")
    (macro GTK_COLOR_SELECTION_DIALOG::s-_GtkColorSelectionDialog* (obj::cobj) "GTK_COLOR_SELECTION_DIALOG")
    (macro GTK_FILE_SELECTION::s-_GtkFileSelection* (obj::cobj) "GTK_FILE_SELECTION")
    (macro GTK_DIALOG::s-_GtkDialog* (obj::cobj) "GTK_DIALOG")
    (macro GTK_INPUT_DIALOG::s-_GtkInputDialog* (obj::cobj) "GTK_INPUT_DIALOG")
    (macro GTK_WINDOW::s-_GtkWindow* (obj::cobj) "GTK_WINDOW")
    (macro GTK_ITEM_FACTORY::s-_GtkItemFactory* (obj::cobj) "GTK_ITEM_FACTORY")
    (macro GTK_BUTTON::s-_GtkButton* (obj::cobj) "GTK_BUTTON")
    (macro GTK_CONTAINER::s-_GtkContainer* (obj::cobj) "GTK_CONTAINER")
    (macro GTK_DRAWING_AREA::s-_GtkDrawingArea* (obj::cobj) "GTK_DRAWING_AREA")
    (macro GTK_PIXMAP::s-_GtkPixmap* (obj::cobj) "GTK_PIXMAP")
    (macro GTK_PREVIEW::s-_GtkPreview* (obj::cobj) "GTK_PREVIEW")
    (macro GTK_PROGRESS::s-_GtkProgress* (obj::cobj) "GTK_PROGRESS")
    (macro GTK_RANGE::s-_GtkRange* (obj::cobj) "GTK_RANGE")
    (macro GTK_RULER::s-_GtkRuler* (obj::cobj) "GTK_RULER")
    (macro GTK_STATUSBAR::s-_GtkStatusbar* (obj::cobj) "GTK_STATUSBAR")
    (macro GTK_LABEL::s-_GtkLabel* (obj::cobj) "GTK_LABEL")
    (macro GTK_MENU_SHELL::s-_GtkMenuShell* (obj::cobj) "GTK_MENU_SHELL")
    (macro GTK_PACKER::s-_GtkPacker* (obj::cobj) "GTK_PACKER")
    (macro GTK_SOCKET::s-_GtkSocket* (obj::cobj) "GTK_SOCKET")
    (macro GTK_TREE::s-_GtkTree* (obj::cobj) "GTK_TREE")
    (macro GTK_ALIGNMENT::s-_GtkAlignment* (obj::cobj) "GTK_ALIGNMENT")
    (macro GTK_FRAME::s-_GtkFrame* (obj::cobj) "GTK_FRAME")
    (macro GTK_ITEM::s-_GtkItem* (obj::cobj) "GTK_ITEM")
    (macro GTK_SCROLLED_WINDOW::s-_GtkScrolledWindow* (obj::cobj) "GTK_SCROLLED_WINDOW")
    (macro GTK_VIEWPORT::s-_GtkViewport* (obj::cobj) "GTK_VIEWPORT")
    (macro GTK_TOOLTIPS::s-_GtkTooltips* (obj::cobj) "GTK_TOOLTIPS")
    (macro GTK_BUTTON_BOX::s-_GtkButtonBox* (obj::cobj) "GTK_BUTTON_BOX")
    (macro GTK_LIST_ITEM::s-_GtkListItem* (obj::cobj) "GTK_LIST_ITEM")
    (macro GTK_MENU_ITEM::s-_GtkMenuItem* (obj::cobj) "GTK_MENU_ITEM")
    (macro GTK_PLUG::s-_GtkPlug* (obj::cobj) "GTK_PLUG")
    (macro GTK_ASPECT_FRAME::s-_GtkAspectFrame* (obj::cobj) "GTK_ASPECT_FRAME")
    (macro GTK_ACCEL_LABEL::s-_GtkAccelLabel* (obj::cobj) "GTK_ACCEL_LABEL")
    (macro GTK_TIPS_QUERY::s-_GtkTipsQuery* (obj::cobj) "GTK_TIPS_QUERY")
    (macro GTK_ENTRY::s-_GtkEntry* (obj::cobj) "GTK_ENTRY")
    (macro GTK_OPTION_MENU::s-_GtkOptionMenu* (obj::cobj) "GTK_OPTION_MENU")
    (macro GTK_SCALE::s-_GtkScale* (obj::cobj) "GTK_SCALE")
    (macro GTK_COLOR_SELECTION::s-_GtkColorSelection* (obj::cobj) "GTK_COLOR_SELECTION")
    (macro GTK_CURVE::s-_GtkCurve* (obj::cobj) "GTK_CURVE")
    (macro GTK_FONT_SELECTION::s-_GtkFontSelection* (obj::cobj) "GTK_FONT_SELECTION")
    (macro GTK_MENU::s-_GtkMenu* (obj::cobj) "GTK_MENU")
    (macro GTK_MENU_BAR::s-_GtkMenuBar* (obj::cobj) "GTK_MENU_BAR")
    (macro GTK_PROGRESS_BAR::s-_GtkProgressBar* (obj::cobj) "GTK_PROGRESS_BAR")
    (macro GTK_SPIN_BUTTON::s-_GtkSpinButton* (obj::cobj) "GTK_SPIN_BUTTON")
    (macro GTK_RADIO_BUTTON::s-_GtkRadioButton* (obj::cobj) "GTK_RADIO_BUTTON")
    (macro GTK_RADIO_MENU_ITEM::s-_GtkRadioMenuItem* (obj::cobj) "GTK_RADIO_MENU_ITEM")
    
    (include "gtk/gtk.h")
    
    ;; beginning of woot.h
    (macro glib_major_version::guint "glib_major_version")
    (macro glib_minor_version::guint "glib_minor_version")
    (macro glib_micro_version::guint "glib_micro_version")
    (macro glib_interface_age::guint "glib_interface_age")
    (macro glib_binary_age::guint "glib_binary_age")
    (macro g_log_domain_glib::gchar* "g_log_domain_glib")
    (macro g_thread_functions_for_glib_use::GThreadFunctions "g_thread_functions_for_glib_use")
    (macro g_thread_use_default_impl::gboolean "g_thread_use_default_impl")
    (macro g_threads_got_initialized::gboolean "g_threads_got_initialized")
    (macro gdk_threads_mutex::GMutex* "gdk_threads_mutex")
    (macro GTK_TYPE_ACCEL_FLAGS::GtkType "GTK_TYPE_ACCEL_FLAGS")
    (macro GTK_TYPE_CALENDAR_DISPLAY_OPTIONS::GtkType "GTK_TYPE_CALENDAR_DISPLAY_OPTIONS")
    (macro GTK_TYPE_CELL_TYPE::GtkType "GTK_TYPE_CELL_TYPE")
    (macro GTK_TYPE_CLIST_DRAG_POS::GtkType "GTK_TYPE_CLIST_DRAG_POS")
    (macro GTK_TYPE_BUTTON_ACTION::GtkType "GTK_TYPE_BUTTON_ACTION")
    (macro GTK_TYPE_CTREE_POS::GtkType "GTK_TYPE_CTREE_POS")
    (macro GTK_TYPE_CTREE_LINE_STYLE::GtkType "GTK_TYPE_CTREE_LINE_STYLE")
    (macro GTK_TYPE_CTREE_EXPANDER_STYLE::GtkType "GTK_TYPE_CTREE_EXPANDER_STYLE")
    (macro GTK_TYPE_CTREE_EXPANSION_TYPE::GtkType "GTK_TYPE_CTREE_EXPANSION_TYPE")
    (macro GTK_TYPE_DEBUG_FLAG::GtkType "GTK_TYPE_DEBUG_FLAG")
    (macro GTK_TYPE_DEST_DEFAULTS::GtkType "GTK_TYPE_DEST_DEFAULTS")
    (macro GTK_TYPE_TARGET_FLAGS::GtkType "GTK_TYPE_TARGET_FLAGS")
    (macro GTK_TYPE_ARROW_TYPE::GtkType "GTK_TYPE_ARROW_TYPE")
    (macro GTK_TYPE_ATTACH_OPTIONS::GtkType "GTK_TYPE_ATTACH_OPTIONS")
    (macro GTK_TYPE_BUTTON_BOX_STYLE::GtkType "GTK_TYPE_BUTTON_BOX_STYLE")
    (macro GTK_TYPE_CURVE_TYPE::GtkType "GTK_TYPE_CURVE_TYPE")
    (macro GTK_TYPE_DIRECTION_TYPE::GtkType "GTK_TYPE_DIRECTION_TYPE")
    (macro GTK_TYPE_JUSTIFICATION::GtkType "GTK_TYPE_JUSTIFICATION")
    (macro GTK_TYPE_MATCH_TYPE::GtkType "GTK_TYPE_MATCH_TYPE")
    (macro GTK_TYPE_MENU_DIRECTION_TYPE::GtkType "GTK_TYPE_MENU_DIRECTION_TYPE")
    (macro GTK_TYPE_MENU_FACTORY_TYPE::GtkType "GTK_TYPE_MENU_FACTORY_TYPE")
    (macro GTK_TYPE_METRIC_TYPE::GtkType "GTK_TYPE_METRIC_TYPE")
    (macro GTK_TYPE_ORIENTATION::GtkType "GTK_TYPE_ORIENTATION")
    (macro GTK_TYPE_CORNER_TYPE::GtkType "GTK_TYPE_CORNER_TYPE")
    (macro GTK_TYPE_PACK_TYPE::GtkType "GTK_TYPE_PACK_TYPE")
    (macro GTK_TYPE_PATH_PRIORITY_TYPE::GtkType "GTK_TYPE_PATH_PRIORITY_TYPE")
    (macro GTK_TYPE_PATH_TYPE::GtkType "GTK_TYPE_PATH_TYPE")
    (macro GTK_TYPE_POLICY_TYPE::GtkType "GTK_TYPE_POLICY_TYPE")
    (macro GTK_TYPE_POSITION_TYPE::GtkType "GTK_TYPE_POSITION_TYPE")
    (macro GTK_TYPE_PREVIEW_TYPE::GtkType "GTK_TYPE_PREVIEW_TYPE")
    (macro GTK_TYPE_RELIEF_STYLE::GtkType "GTK_TYPE_RELIEF_STYLE")
    (macro GTK_TYPE_RESIZE_MODE::GtkType "GTK_TYPE_RESIZE_MODE")
    (macro GTK_TYPE_SIGNAL_RUN_TYPE::GtkType "GTK_TYPE_SIGNAL_RUN_TYPE")
    (macro GTK_TYPE_SCROLL_TYPE::GtkType "GTK_TYPE_SCROLL_TYPE")
    (macro GTK_TYPE_SELECTION_MODE::GtkType "GTK_TYPE_SELECTION_MODE")
    (macro GTK_TYPE_SHADOW_TYPE::GtkType "GTK_TYPE_SHADOW_TYPE")
    (macro GTK_TYPE_STATE_TYPE::GtkType "GTK_TYPE_STATE_TYPE")
    (macro GTK_TYPE_SUBMENU_DIRECTION::GtkType "GTK_TYPE_SUBMENU_DIRECTION")
    (macro GTK_TYPE_SUBMENU_PLACEMENT::GtkType "GTK_TYPE_SUBMENU_PLACEMENT")
    (macro GTK_TYPE_TOOLBAR_STYLE::GtkType "GTK_TYPE_TOOLBAR_STYLE")
    (macro GTK_TYPE_TROUGH_TYPE::GtkType "GTK_TYPE_TROUGH_TYPE")
    (macro GTK_TYPE_UPDATE_TYPE::GtkType "GTK_TYPE_UPDATE_TYPE")
    (macro GTK_TYPE_VISIBILITY::GtkType "GTK_TYPE_VISIBILITY")
    (macro GTK_TYPE_WINDOW_POSITION::GtkType "GTK_TYPE_WINDOW_POSITION")
    (macro GTK_TYPE_WINDOW_TYPE::GtkType "GTK_TYPE_WINDOW_TYPE")
    (macro GTK_TYPE_SORT_TYPE::GtkType "GTK_TYPE_SORT_TYPE")
    (macro GTK_TYPE_FONT_METRIC_TYPE::GtkType "GTK_TYPE_FONT_METRIC_TYPE")
    (macro GTK_TYPE_FONT_TYPE::GtkType "GTK_TYPE_FONT_TYPE")
    (macro GTK_TYPE_FONT_FILTER_TYPE::GtkType "GTK_TYPE_FONT_FILTER_TYPE")
    (macro GTK_TYPE_OBJECT_FLAGS::GtkType "GTK_TYPE_OBJECT_FLAGS")
    (macro GTK_TYPE_ARG_FLAGS::GtkType "GTK_TYPE_ARG_FLAGS")
    (macro GTK_TYPE_PACKER_OPTIONS::GtkType "GTK_TYPE_PACKER_OPTIONS")
    (macro GTK_TYPE_SIDE_TYPE::GtkType "GTK_TYPE_SIDE_TYPE")
    (macro GTK_TYPE_ANCHOR_TYPE::GtkType "GTK_TYPE_ANCHOR_TYPE")
    (macro GTK_TYPE_PRIVATE_FLAGS::GtkType "GTK_TYPE_PRIVATE_FLAGS")
    (macro GTK_TYPE_PROGRESS_BAR_STYLE::GtkType "GTK_TYPE_PROGRESS_BAR_STYLE")
    (macro GTK_TYPE_PROGRESS_BAR_ORIENTATION::GtkType "GTK_TYPE_PROGRESS_BAR_ORIENTATION")
    (macro GTK_TYPE_RC_FLAGS::GtkType "GTK_TYPE_RC_FLAGS")
    (macro GTK_TYPE_RC_TOKEN_TYPE::GtkType "GTK_TYPE_RC_TOKEN_TYPE")
    (macro GTK_TYPE_SPIN_BUTTON_UPDATE_POLICY::GtkType "GTK_TYPE_SPIN_BUTTON_UPDATE_POLICY")
    (macro GTK_TYPE_SPIN_TYPE::GtkType "GTK_TYPE_SPIN_TYPE")
    (macro GTK_TYPE_TOOLBAR_CHILD_TYPE::GtkType "GTK_TYPE_TOOLBAR_CHILD_TYPE")
    (macro GTK_TYPE_TOOLBAR_SPACE_STYLE::GtkType "GTK_TYPE_TOOLBAR_SPACE_STYLE")
    (macro GTK_TYPE_TREE_VIEW_MODE::GtkType "GTK_TYPE_TREE_VIEW_MODE")
    (macro GTK_TYPE_FUNDAMENTAL_TYPE::GtkType "GTK_TYPE_FUNDAMENTAL_TYPE")
    (macro GTK_TYPE_WIDGET_FLAGS::GtkType "GTK_TYPE_WIDGET_FLAGS")
    (macro GTK_TYPE_GDK_WINDOW_TYPE::GtkType "GTK_TYPE_GDK_WINDOW_TYPE")
    (macro GTK_TYPE_GDK_WINDOW_CLASS::GtkType "GTK_TYPE_GDK_WINDOW_CLASS")
    (macro GTK_TYPE_GDK_IMAGE_TYPE::GtkType "GTK_TYPE_GDK_IMAGE_TYPE")
    (macro GTK_TYPE_GDK_VISUAL_TYPE::GtkType "GTK_TYPE_GDK_VISUAL_TYPE")
    (macro GTK_TYPE_GDK_FONT_TYPE::GtkType "GTK_TYPE_GDK_FONT_TYPE")
    (macro GTK_TYPE_GDK_WINDOW_ATTRIBUTES_TYPE::GtkType "GTK_TYPE_GDK_WINDOW_ATTRIBUTES_TYPE")
    (macro GTK_TYPE_GDK_WINDOW_HINTS::GtkType "GTK_TYPE_GDK_WINDOW_HINTS")
    (macro GTK_TYPE_GDK_FUNCTION::GtkType "GTK_TYPE_GDK_FUNCTION")
    (macro GTK_TYPE_GDK_FILL::GtkType "GTK_TYPE_GDK_FILL")
    (macro GTK_TYPE_GDK_FILL_RULE::GtkType "GTK_TYPE_GDK_FILL_RULE")
    (macro GTK_TYPE_GDK_LINE_STYLE::GtkType "GTK_TYPE_GDK_LINE_STYLE")
    (macro GTK_TYPE_GDK_CAP_STYLE::GtkType "GTK_TYPE_GDK_CAP_STYLE")
    (macro GTK_TYPE_GDK_JOIN_STYLE::GtkType "GTK_TYPE_GDK_JOIN_STYLE")
    (macro GTK_TYPE_GDK_CURSOR_TYPE::GtkType "GTK_TYPE_GDK_CURSOR_TYPE")
    (macro GTK_TYPE_GDK_FILTER_RETURN::GtkType "GTK_TYPE_GDK_FILTER_RETURN")
    (macro GTK_TYPE_GDK_VISIBILITY_STATE::GtkType "GTK_TYPE_GDK_VISIBILITY_STATE")
    (macro GTK_TYPE_GDK_EVENT_TYPE::GtkType "GTK_TYPE_GDK_EVENT_TYPE")
    (macro GTK_TYPE_GDK_EVENT_MASK::GtkType "GTK_TYPE_GDK_EVENT_MASK")
    (macro GTK_TYPE_GDK_NOTIFY_TYPE::GtkType "GTK_TYPE_GDK_NOTIFY_TYPE")
    (macro GTK_TYPE_GDK_CROSSING_MODE::GtkType "GTK_TYPE_GDK_CROSSING_MODE")
    (macro GTK_TYPE_GDK_MODIFIER_TYPE::GtkType "GTK_TYPE_GDK_MODIFIER_TYPE")
    (macro GTK_TYPE_GDK_SUBWINDOW_MODE::GtkType "GTK_TYPE_GDK_SUBWINDOW_MODE")
    (macro GTK_TYPE_GDK_INPUT_CONDITION::GtkType "GTK_TYPE_GDK_INPUT_CONDITION")
    (macro GTK_TYPE_GDK_STATUS::GtkType "GTK_TYPE_GDK_STATUS")
    (macro GTK_TYPE_GDK_BYTE_ORDER::GtkType "GTK_TYPE_GDK_BYTE_ORDER")
    (macro GTK_TYPE_GDK_GC_VALUES_MASK::GtkType "GTK_TYPE_GDK_GC_VALUES_MASK")
    (macro GTK_TYPE_GDK_SELECTION::GtkType "GTK_TYPE_GDK_SELECTION")
    (macro GTK_TYPE_GDK_PROPERTY_STATE::GtkType "GTK_TYPE_GDK_PROPERTY_STATE")
    (macro GTK_TYPE_GDK_PROP_MODE::GtkType "GTK_TYPE_GDK_PROP_MODE")
    (macro GTK_TYPE_GDK_INPUT_SOURCE::GtkType "GTK_TYPE_GDK_INPUT_SOURCE")
    (macro GTK_TYPE_GDK_INPUT_MODE::GtkType "GTK_TYPE_GDK_INPUT_MODE")
    (macro GTK_TYPE_GDK_AXIS_USE::GtkType "GTK_TYPE_GDK_AXIS_USE")
    (macro GTK_TYPE_GDK_TARGET::GtkType "GTK_TYPE_GDK_TARGET")
    (macro GTK_TYPE_GDK_SELECTION_TYPE::GtkType "GTK_TYPE_GDK_SELECTION_TYPE")
    (macro GTK_TYPE_GDK_EXTENSION_MODE::GtkType "GTK_TYPE_GDK_EXTENSION_MODE")
    (macro GTK_TYPE_GDK_IM_STYLE::GtkType "GTK_TYPE_GDK_IM_STYLE")
    (macro GTK_TYPE_GDK_IC_ATTRIBUTES_TYPE::GtkType "GTK_TYPE_GDK_IC_ATTRIBUTES_TYPE")
    (macro GTK_TYPE_GDK_WM_DECORATION::GtkType "GTK_TYPE_GDK_WM_DECORATION")
    (macro GTK_TYPE_GDK_WM_FUNCTION::GtkType "GTK_TYPE_GDK_WM_FUNCTION")
    (macro GTK_TYPE_GDK_COLOR_CONTEXT_MODE::GtkType "GTK_TYPE_GDK_COLOR_CONTEXT_MODE")
    (macro GTK_TYPE_GDK_OVERLAP_TYPE::GtkType "GTK_TYPE_GDK_OVERLAP_TYPE")
    (macro GTK_TYPE_GDK_DRAG_ACTION::GtkType "GTK_TYPE_GDK_DRAG_ACTION")
    (macro GTK_TYPE_GDK_DRAG_PROTOCOL::GtkType "GTK_TYPE_GDK_DRAG_PROTOCOL")
    (macro GTK_TYPE_GDK_RGB_DITHER::GtkType "GTK_TYPE_GDK_RGB_DITHER")
    (macro GTK_TYPE_ACCEL_GROUP::GtkType "GTK_TYPE_ACCEL_GROUP")
    (macro GTK_TYPE_SELECTION_DATA::GtkType "GTK_TYPE_SELECTION_DATA")
    (macro GTK_TYPE_STYLE::GtkType "GTK_TYPE_STYLE")
    (macro GTK_TYPE_CTREE_NODE::GtkType "GTK_TYPE_CTREE_NODE")
    (macro GTK_TYPE_GDK_COLORMAP::GtkType "GTK_TYPE_GDK_COLORMAP")
    (macro GTK_TYPE_GDK_VISUAL::GtkType "GTK_TYPE_GDK_VISUAL")
    (macro GTK_TYPE_GDK_FONT::GtkType "GTK_TYPE_GDK_FONT")
    (macro GTK_TYPE_GDK_WINDOW::GtkType "GTK_TYPE_GDK_WINDOW")
    (macro GTK_TYPE_GDK_DRAG_CONTEXT::GtkType "GTK_TYPE_GDK_DRAG_CONTEXT")
    (macro GTK_TYPE_GDK_EVENT::GtkType "GTK_TYPE_GDK_EVENT")
    (macro GTK_TYPE_GDK_COLOR::GtkType "GTK_TYPE_GDK_COLOR")
    (macro gtk_debug_flags::guint "gtk_debug_flags")
    (macro gtk_major_version::guint "gtk_major_version")
    (macro gtk_minor_version::guint "gtk_minor_version")
    (macro gtk_micro_version::guint "gtk_micro_version")
    (macro gtk_binary_age::guint "gtk_binary_age")
    (macro gtk_interface_age::guint "gtk_interface_age")
    (macro g_list_push_allocator::void (GAllocator*) "g_list_push_allocator")
    (macro g_list_pop_allocator::void () "g_list_pop_allocator")
    (macro g_list_alloc::GList* () "g_list_alloc")
    (macro g_list_free::void (GList*) "g_list_free")
    (macro g_list_free_1::void (GList*) "g_list_free_1")
    (macro g_list_append::GList* (GList* gpointer) "g_list_append")
    (macro g_list_prepend::GList* (GList* gpointer) "g_list_prepend")
    (macro g_list_insert::GList* (GList* gpointer gint) "g_list_insert")
    (macro g_list_insert_sorted::GList* (GList* gpointer GCompareFunc) "g_list_insert_sorted")
    (macro g_list_concat::GList* (GList* GList*) "g_list_concat")
    (macro g_list_remove::GList* (GList* gpointer) "g_list_remove")
    (macro g_list_remove_link::GList* (GList* GList*) "g_list_remove_link")
    (macro g_list_reverse::GList* (GList*) "g_list_reverse")
    (macro g_list_copy::GList* (GList*) "g_list_copy")
    (macro g_list_nth::GList* (GList* guint) "g_list_nth")
    (macro g_list_find::GList* (GList* gpointer) "g_list_find")
    (macro g_list_find_custom::GList* (GList* gpointer GCompareFunc) "g_list_find_custom")
    (macro g_list_position::gint (GList* GList*) "g_list_position")
    (macro g_list_index::gint (GList* gpointer) "g_list_index")
    (macro g_list_last::GList* (GList*) "g_list_last")
    (macro g_list_first::GList* (GList*) "g_list_first")
    (macro g_list_length::guint (GList*) "g_list_length")
    (macro g_list_foreach::void (GList* GFunc gpointer) "g_list_foreach")
    (macro g_list_sort::GList* (GList* GCompareFunc) "g_list_sort")
    (macro g_list_nth_data::gpointer (GList* guint) "g_list_nth_data")
    (macro g_slist_push_allocator::void (GAllocator*) "g_slist_push_allocator")
    (macro g_slist_pop_allocator::void () "g_slist_pop_allocator")
    (macro g_slist_alloc::GSList* () "g_slist_alloc")
    (macro g_slist_free::void (GSList*) "g_slist_free")
    (macro g_slist_free_1::void (GSList*) "g_slist_free_1")
    (macro g_slist_append::GSList* (GSList* gpointer) "g_slist_append")
    (macro g_slist_prepend::GSList* (GSList* gpointer) "g_slist_prepend")
    (macro g_slist_insert::GSList* (GSList* gpointer gint) "g_slist_insert")
    (macro g_slist_insert_sorted::GSList* (GSList* gpointer GCompareFunc) "g_slist_insert_sorted")
    (macro g_slist_concat::GSList* (GSList* GSList*) "g_slist_concat")
    (macro g_slist_remove::GSList* (GSList* gpointer) "g_slist_remove")
    (macro g_slist_remove_link::GSList* (GSList* GSList*) "g_slist_remove_link")
    (macro g_slist_reverse::GSList* (GSList*) "g_slist_reverse")
    (macro g_slist_copy::GSList* (GSList*) "g_slist_copy")
    (macro g_slist_nth::GSList* (GSList* guint) "g_slist_nth")
    (macro g_slist_find::GSList* (GSList* gpointer) "g_slist_find")
    (macro g_slist_find_custom::GSList* (GSList* gpointer GCompareFunc) "g_slist_find_custom")
    (macro g_slist_position::gint (GSList* GSList*) "g_slist_position")
    (macro g_slist_index::gint (GSList* gpointer) "g_slist_index")
    (macro g_slist_last::GSList* (GSList*) "g_slist_last")
    (macro g_slist_length::guint (GSList*) "g_slist_length")
    (macro g_slist_foreach::void (GSList* GFunc gpointer) "g_slist_foreach")
    (macro g_slist_sort::GSList* (GSList* GCompareFunc) "g_slist_sort")
    (macro g_slist_nth_data::gpointer (GSList* guint) "g_slist_nth_data")
    (macro g_hash_table_new::GHashTable* (GHashFunc GCompareFunc) "g_hash_table_new")
    (macro g_hash_table_destroy::void (GHashTable*) "g_hash_table_destroy")
    (macro g_hash_table_insert::void (GHashTable* gpointer gpointer) "g_hash_table_insert")
    (macro g_hash_table_remove::void (GHashTable* gconstpointer) "g_hash_table_remove")
    (macro g_hash_table_lookup::gpointer (GHashTable* gconstpointer) "g_hash_table_lookup")
    (macro g_hash_table_lookup_extended::gboolean (GHashTable* gconstpointer gpointer* gpointer*) "g_hash_table_lookup_extended")
    (macro g_hash_table_freeze::void (GHashTable*) "g_hash_table_freeze")
    (macro g_hash_table_thaw::void (GHashTable*) "g_hash_table_thaw")
    (macro g_hash_table_foreach::void (GHashTable* GHFunc gpointer) "g_hash_table_foreach")
    (macro g_hash_table_foreach_remove::guint (GHashTable* GHRFunc gpointer) "g_hash_table_foreach_remove")
    (macro g_hash_table_size::guint (GHashTable*) "g_hash_table_size")
    (macro g_cache_new::GCache* (GCacheNewFunc GCacheDestroyFunc GCacheDupFunc GCacheDestroyFunc GHashFunc GHashFunc GCompareFunc) "g_cache_new")
    (macro g_cache_destroy::void (GCache*) "g_cache_destroy")
    (macro g_cache_insert::gpointer (GCache* gpointer) "g_cache_insert")
    (macro g_cache_remove::void (GCache* gpointer) "g_cache_remove")
    (macro g_cache_key_foreach::void (GCache* GHFunc gpointer) "g_cache_key_foreach")
    (macro g_cache_value_foreach::void (GCache* GHFunc gpointer) "g_cache_value_foreach")
    (macro g_tree_new::GTree* (GCompareFunc) "g_tree_new")
    (macro g_tree_destroy::void (GTree*) "g_tree_destroy")
    (macro g_tree_insert::void (GTree* gpointer gpointer) "g_tree_insert")
    (macro g_tree_remove::void (GTree* gpointer) "g_tree_remove")
    (macro g_tree_lookup::gpointer (GTree* gpointer) "g_tree_lookup")
    (macro g_tree_traverse::void (GTree* GTraverseFunc GTraverseType gpointer) "g_tree_traverse")
    (macro g_tree_search::gpointer (GTree* GSearchFunc gpointer) "g_tree_search")
    (macro g_tree_height::gint (GTree*) "g_tree_height")
    (macro g_tree_nnodes::gint (GTree*) "g_tree_nnodes")
    (macro g_node_push_allocator::void (GAllocator*) "g_node_push_allocator")
    (macro g_node_pop_allocator::void () "g_node_pop_allocator")
    (macro g_node_new::GNode* (gpointer) "g_node_new")
    (macro g_node_destroy::void (GNode*) "g_node_destroy")
    (macro g_node_unlink::void (GNode*) "g_node_unlink")
    (macro g_node_insert::GNode* (GNode* gint GNode*) "g_node_insert")
    (macro g_node_insert_before::GNode* (GNode* GNode* GNode*) "g_node_insert_before")
    (macro g_node_prepend::GNode* (GNode* GNode*) "g_node_prepend")
    (macro g_node_n_nodes::guint (GNode* GTraverseFlags) "g_node_n_nodes")
    (macro g_node_get_root::GNode* (GNode*) "g_node_get_root")
    (macro g_node_is_ancestor::gboolean (GNode* GNode*) "g_node_is_ancestor")
    (macro g_node_depth::guint (GNode*) "g_node_depth")
    (macro g_node_find::GNode* (GNode* GTraverseType GTraverseFlags gpointer) "g_node_find")
    (macro g_node_traverse::void (GNode* GTraverseType GTraverseFlags gint GNodeTraverseFunc gpointer) "g_node_traverse")
    (macro g_node_max_height::guint (GNode*) "g_node_max_height")
    (macro g_node_children_foreach::void (GNode* GTraverseFlags GNodeForeachFunc gpointer) "g_node_children_foreach")
    (macro g_node_reverse_children::void (GNode*) "g_node_reverse_children")
    (macro g_node_n_children::guint (GNode*) "g_node_n_children")
    (macro g_node_nth_child::GNode* (GNode* guint) "g_node_nth_child")
    (macro g_node_last_child::GNode* (GNode*) "g_node_last_child")
    (macro g_node_find_child::GNode* (GNode* GTraverseFlags gpointer) "g_node_find_child")
    (macro g_node_child_position::gint (GNode* GNode*) "g_node_child_position")
    (macro g_node_child_index::gint (GNode* gpointer) "g_node_child_index")
    (macro g_node_first_sibling::GNode* (GNode*) "g_node_first_sibling")
    (macro g_node_last_sibling::GNode* (GNode*) "g_node_last_sibling")
    (macro g_hook_list_init::void (GHookList* guint) "g_hook_list_init")
    (macro g_hook_list_clear::void (GHookList*) "g_hook_list_clear")
    (macro g_hook_alloc::GHook* (GHookList*) "g_hook_alloc")
    (macro g_hook_free::void (GHookList* GHook*) "g_hook_free")
    (macro g_hook_ref::void (GHookList* GHook*) "g_hook_ref")
    (macro g_hook_unref::void (GHookList* GHook*) "g_hook_unref")
    (macro g_hook_destroy::gboolean (GHookList* guint) "g_hook_destroy")
    (macro g_hook_destroy_link::void (GHookList* GHook*) "g_hook_destroy_link")
    (macro g_hook_prepend::void (GHookList* GHook*) "g_hook_prepend")
    (macro g_hook_insert_before::void (GHookList* GHook* GHook*) "g_hook_insert_before")
    (macro g_hook_insert_sorted::void (GHookList* GHook* GHookCompareFunc) "g_hook_insert_sorted")
    (macro g_hook_get::GHook* (GHookList* guint) "g_hook_get")
    (macro g_hook_find::GHook* (GHookList* gboolean GHookFindFunc gpointer) "g_hook_find")
    (macro g_hook_find_data::GHook* (GHookList* gboolean gpointer) "g_hook_find_data")
    (macro g_hook_find_func::GHook* (GHookList* gboolean gpointer) "g_hook_find_func")
    (macro g_hook_find_func_data::GHook* (GHookList* gboolean gpointer gpointer) "g_hook_find_func_data")
    (macro g_hook_first_valid::GHook* (GHookList* gboolean) "g_hook_first_valid")
    (macro g_hook_next_valid::GHook* (GHookList* GHook* gboolean) "g_hook_next_valid")
    (macro g_hook_compare_ids::gint (GHook* GHook*) "g_hook_compare_ids")
    (macro g_hook_list_invoke::void (GHookList* gboolean) "g_hook_list_invoke")
    (macro g_hook_list_invoke_check::void (GHookList* gboolean) "g_hook_list_invoke_check")
    (macro g_hook_list_marshal::void (GHookList* gboolean GHookMarshaller gpointer) "g_hook_list_marshal")
    (macro g_hook_list_marshal_check::void (GHookList* gboolean GHookCheckMarshaller gpointer) "g_hook_list_marshal_check")
    (macro g_on_error_query::void (gchar*) "g_on_error_query")
    (macro g_on_error_stack_trace::void (gchar*) "g_on_error_stack_trace")
    (macro g_log_set_handler::guint (gchar* GLogLevelFlags GLogFunc gpointer) "g_log_set_handler")
    (macro g_log_remove_handler::void (gchar* guint) "g_log_remove_handler")
    (macro g_log_default_handler::void (gchar* GLogLevelFlags gchar* gpointer) "g_log_default_handler")
    (macro g_log::void (gchar* GLogLevelFlags gchar* . gchar*) "g_log")
    (macro g_logv::void (gchar* GLogLevelFlags gchar* va_list) "g_logv")
    (macro g_log_set_fatal_mask::GLogLevelFlags (gchar* GLogLevelFlags) "g_log_set_fatal_mask")
    (macro g_log_set_always_fatal::GLogLevelFlags (GLogLevelFlags) "g_log_set_always_fatal")
    (macro g_print::void (gchar* . gchar*) "g_print")
    (macro g_set_print_handler::GPrintFunc (GPrintFunc) "g_set_print_handler")
    (macro g_printerr::void (gchar* . gchar*) "g_printerr")
    (macro g_set_printerr_handler::GPrintFunc (GPrintFunc) "g_set_printerr_handler")
    (macro g_set_error_handler::GErrorFunc (GErrorFunc) "g_set_error_handler")
    (macro g_set_warning_handler::GWarningFunc (GWarningFunc) "g_set_warning_handler")
    (macro g_set_message_handler::GPrintFunc (GPrintFunc) "g_set_message_handler")
    (macro g_malloc::gpointer (gulong) "g_malloc")
    (macro g_malloc0::gpointer (gulong) "g_malloc0")
    (macro g_realloc::gpointer (gpointer gulong) "g_realloc")
    (macro g_free::void (gpointer) "g_free")
    (macro g_mem_profile::void () "g_mem_profile")
    (macro g_mem_check::void (gpointer) "g_mem_check")
    (macro g_allocator_new::GAllocator* (gchar* guint) "g_allocator_new")
    (macro g_allocator_free::void (GAllocator*) "g_allocator_free")
    (macro g_mem_chunk_new::GMemChunk* (gchar* gint gulong gint) "g_mem_chunk_new")
    (macro g_mem_chunk_destroy::void (GMemChunk*) "g_mem_chunk_destroy")
    (macro g_mem_chunk_alloc::gpointer (GMemChunk*) "g_mem_chunk_alloc")
    (macro g_mem_chunk_alloc0::gpointer (GMemChunk*) "g_mem_chunk_alloc0")
    (macro g_mem_chunk_free::void (GMemChunk* gpointer) "g_mem_chunk_free")
    (macro g_mem_chunk_clean::void (GMemChunk*) "g_mem_chunk_clean")
    (macro g_mem_chunk_reset::void (GMemChunk*) "g_mem_chunk_reset")
    (macro g_mem_chunk_print::void (GMemChunk*) "g_mem_chunk_print")
    (macro g_mem_chunk_info::void () "g_mem_chunk_info")
    (macro g_blow_chunks::void () "g_blow_chunks")
    (macro g_timer_new::GTimer* () "g_timer_new")
    (macro g_timer_destroy::void (GTimer*) "g_timer_destroy")
    (macro g_timer_start::void (GTimer*) "g_timer_start")
    (macro g_timer_stop::void (GTimer*) "g_timer_stop")
    (macro g_timer_reset::void (GTimer*) "g_timer_reset")
    (macro g_timer_elapsed::gdouble (GTimer* gulong*) "g_timer_elapsed")
    (macro g_strdelimit::gchar* (gchar* gchar* gchar) "g_strdelimit")
    (macro g_strtod::gdouble (gchar* gchar**) "g_strtod")
    (macro g_strerror::gchar* (gint) "g_strerror")
    (macro g_strsignal::gchar* (gint) "g_strsignal")
    (macro g_strcasecmp::gint (gchar* gchar*) "g_strcasecmp")
    (macro g_strncasecmp::gint (gchar* gchar* guint) "g_strncasecmp")
    (macro g_strdown::void (gchar*) "g_strdown")
    (macro g_strup::void (gchar*) "g_strup")
    (macro g_strreverse::void (gchar*) "g_strreverse")
    (macro g_strchug::gchar* (gchar*) "g_strchug")
    (macro g_strchomp::gchar* (gchar*) "g_strchomp")
    (macro g_strdup::gchar* (gchar*) "g_strdup")
    (macro g_strdup_printf::gchar* (gchar* . gchar*) "g_strdup_printf")
    (macro g_strdup_vprintf::gchar* (gchar* va_list) "g_strdup_vprintf")
    (macro g_strndup::gchar* (gchar* guint) "g_strndup")
    (macro g_strnfill::gchar* (guint gchar) "g_strnfill")
    (macro g_strconcat::gchar* (gchar* . gchar*) "g_strconcat")
    (macro g_strjoin::gchar* (gchar* . gchar*) "g_strjoin")
    (macro g_strescape::gchar* (gchar*) "g_strescape")
    (macro g_memdup::gpointer (gconstpointer guint) "g_memdup")
    (macro g_strsplit::gchar** (gchar* gchar* gint) "g_strsplit")
    (macro g_strjoinv::gchar* (gchar* gchar**) "g_strjoinv")
    (macro g_strfreev::void (gchar**) "g_strfreev")
    (macro g_printf_string_upper_bound::guint (gchar* va_list) "g_printf_string_upper_bound")
    (macro g_get_user_name::gchar* () "g_get_user_name")
    (macro g_get_real_name::gchar* () "g_get_real_name")
    (macro g_get_home_dir::gchar* () "g_get_home_dir")
    (macro g_get_tmp_dir::gchar* () "g_get_tmp_dir")
    (macro g_get_prgname::gchar* () "g_get_prgname")
    (macro g_set_prgname::void (gchar*) "g_set_prgname")
    (macro g_parse_debug_string::guint (gchar* GDebugKey* guint) "g_parse_debug_string")
    (macro g_snprintf::gint (gchar* gulong gchar* . gchar*) "g_snprintf")
    (macro g_vsnprintf::gint (gchar* gulong gchar* va_list) "g_vsnprintf")
    (macro g_basename::gchar* (gchar*) "g_basename")
    (macro g_path_is_absolute::gboolean (gchar*) "g_path_is_absolute")
    (macro g_path_skip_root::gchar* (gchar*) "g_path_skip_root")
    (macro g_dirname::gchar* (gchar*) "g_dirname")
    (macro g_get_current_dir::gchar* () "g_get_current_dir")
    (macro g_getenv::gchar* (gchar*) "g_getenv")
    (macro g_atexit::void (GVoidFunc) "g_atexit")
    (macro g_bit_nth_lsf::gint (guint32 gint) "g_bit_nth_lsf")
    (macro g_bit_nth_msf::gint (guint32 gint) "g_bit_nth_msf")
    (macro g_bit_storage::guint (guint) "g_bit_storage")
    (macro g_string_chunk_new::GStringChunk* (gint) "g_string_chunk_new")
    (macro g_string_chunk_free::void (GStringChunk*) "g_string_chunk_free")
    (macro g_string_chunk_insert::gchar* (GStringChunk* gchar*) "g_string_chunk_insert")
    (macro g_string_chunk_insert_const::gchar* (GStringChunk* gchar*) "g_string_chunk_insert_const")
    (macro g_string_new::GString* (gchar*) "g_string_new")
    (macro g_string_sized_new::GString* (guint) "g_string_sized_new")
    (macro g_string_free::void (GString* gint) "g_string_free")
    (macro g_string_assign::GString* (GString* gchar*) "g_string_assign")
    (macro g_string_truncate::GString* (GString* gint) "g_string_truncate")
    (macro g_string_append::GString* (GString* gchar*) "g_string_append")
    (macro g_string_append_c::GString* (GString* gchar) "g_string_append_c")
    (macro g_string_prepend::GString* (GString* gchar*) "g_string_prepend")
    (macro g_string_prepend_c::GString* (GString* gchar) "g_string_prepend_c")
    (macro g_string_insert::GString* (GString* gint gchar*) "g_string_insert")
    (macro g_string_insert_c::GString* (GString* gint gchar) "g_string_insert_c")
    (macro g_string_erase::GString* (GString* gint gint) "g_string_erase")
    (macro g_string_down::GString* (GString*) "g_string_down")
    (macro g_string_up::GString* (GString*) "g_string_up")
    (macro g_string_sprintf::void (GString* gchar* . gchar*) "g_string_sprintf")
    (macro g_string_sprintfa::void (GString* gchar* . gchar*) "g_string_sprintfa")
    (macro g_array_new::GArray* (gboolean gboolean guint) "g_array_new")
    (macro g_array_free::void (GArray* gboolean) "g_array_free")
    (macro g_array_append_vals::GArray* (GArray* gconstpointer guint) "g_array_append_vals")
    (macro g_array_prepend_vals::GArray* (GArray* gconstpointer guint) "g_array_prepend_vals")
    (macro g_array_insert_vals::GArray* (GArray* guint gconstpointer guint) "g_array_insert_vals")
    (macro g_array_set_size::GArray* (GArray* guint) "g_array_set_size")
    (macro g_array_remove_index::GArray* (GArray* guint) "g_array_remove_index")
    (macro g_array_remove_index_fast::GArray* (GArray* guint) "g_array_remove_index_fast")
    (macro g_ptr_array_new::GPtrArray* () "g_ptr_array_new")
    (macro g_ptr_array_free::void (GPtrArray* gboolean) "g_ptr_array_free")
    (macro g_ptr_array_set_size::void (GPtrArray* gint) "g_ptr_array_set_size")
    (macro g_ptr_array_remove_index::gpointer (GPtrArray* guint) "g_ptr_array_remove_index")
    (macro g_ptr_array_remove_index_fast::gpointer (GPtrArray* guint) "g_ptr_array_remove_index_fast")
    (macro g_ptr_array_remove::gboolean (GPtrArray* gpointer) "g_ptr_array_remove")
    (macro g_ptr_array_remove_fast::gboolean (GPtrArray* gpointer) "g_ptr_array_remove_fast")
    (macro g_ptr_array_add::void (GPtrArray* gpointer) "g_ptr_array_add")
    (macro g_byte_array_new::GByteArray* () "g_byte_array_new")
    (macro g_byte_array_free::void (GByteArray* gboolean) "g_byte_array_free")
    (macro g_byte_array_append::GByteArray* (GByteArray* guint8* guint) "g_byte_array_append")
    (macro g_byte_array_prepend::GByteArray* (GByteArray* guint8* guint) "g_byte_array_prepend")
    (macro g_byte_array_set_size::GByteArray* (GByteArray* guint) "g_byte_array_set_size")
    (macro g_byte_array_remove_index::GByteArray* (GByteArray* guint) "g_byte_array_remove_index")
    (macro g_byte_array_remove_index_fast::GByteArray* (GByteArray* guint) "g_byte_array_remove_index_fast")
    (macro g_str_equal::gint (gconstpointer gconstpointer) "g_str_equal")
    (macro g_str_hash::guint (gconstpointer) "g_str_hash")
    (macro g_int_equal::gint (gconstpointer gconstpointer) "g_int_equal")
    (macro g_int_hash::guint (gconstpointer) "g_int_hash")
    (macro g_direct_hash::guint (gconstpointer) "g_direct_hash")
    (macro g_direct_equal::gint (gconstpointer gconstpointer) "g_direct_equal")
    (macro g_quark_try_string::GQuark (gchar*) "g_quark_try_string")
    (macro g_quark_from_static_string::GQuark (gchar*) "g_quark_from_static_string")
    (macro g_quark_from_string::GQuark (gchar*) "g_quark_from_string")
    (macro g_quark_to_string::gchar* (GQuark) "g_quark_to_string")
    (macro g_datalist_init::void (GData**) "g_datalist_init")
    (macro g_datalist_clear::void (GData**) "g_datalist_clear")
    (macro g_datalist_id_get_data::gpointer (GData** GQuark) "g_datalist_id_get_data")
    (macro g_datalist_id_set_data_full::void (GData** GQuark gpointer GDestroyNotify) "g_datalist_id_set_data_full")
    (macro g_datalist_id_remove_no_notify::void (GData** GQuark) "g_datalist_id_remove_no_notify")
    (macro g_datalist_foreach::void (GData** GDataForeachFunc gpointer) "g_datalist_foreach")
    (macro g_dataset_destroy::void (gconstpointer) "g_dataset_destroy")
    (macro g_dataset_id_get_data::gpointer (gconstpointer GQuark) "g_dataset_id_get_data")
    (macro g_dataset_id_set_data_full::void (gconstpointer GQuark gpointer GDestroyNotify) "g_dataset_id_set_data_full")
    (macro g_dataset_id_remove_no_notify::void (gconstpointer GQuark) "g_dataset_id_remove_no_notify")
    (macro g_dataset_foreach::void (gconstpointer GDataForeachFunc gpointer) "g_dataset_foreach")
    (macro g_scanner_new::GScanner* (GScannerConfig*) "g_scanner_new")
    (macro g_scanner_destroy::void (GScanner*) "g_scanner_destroy")
    (macro g_scanner_input_file::void (GScanner* gint) "g_scanner_input_file")
    (macro g_scanner_sync_file_offset::void (GScanner*) "g_scanner_sync_file_offset")
    (macro g_scanner_input_text::void (GScanner* gchar* guint) "g_scanner_input_text")
    (macro g_scanner_get_next_token::GTokenType (GScanner*) "g_scanner_get_next_token")
    (macro g_scanner_peek_next_token::GTokenType (GScanner*) "g_scanner_peek_next_token")
    (macro g_scanner_cur_token::GTokenType (GScanner*) "g_scanner_cur_token")
    (macro g_scanner_cur_value::GTokenValue (GScanner*) "g_scanner_cur_value")
    (macro g_scanner_cur_line::guint (GScanner*) "g_scanner_cur_line")
    (macro g_scanner_cur_position::guint (GScanner*) "g_scanner_cur_position")
    (macro g_scanner_eof::gboolean (GScanner*) "g_scanner_eof")
    (macro g_scanner_set_scope::guint (GScanner* guint) "g_scanner_set_scope")
    (macro g_scanner_scope_add_symbol::void (GScanner* guint gchar* gpointer) "g_scanner_scope_add_symbol")
    (macro g_scanner_scope_remove_symbol::void (GScanner* guint gchar*) "g_scanner_scope_remove_symbol")
    (macro g_scanner_scope_lookup_symbol::gpointer (GScanner* guint gchar*) "g_scanner_scope_lookup_symbol")
    (macro g_scanner_scope_foreach_symbol::void (GScanner* guint GHFunc gpointer) "g_scanner_scope_foreach_symbol")
    (macro g_scanner_lookup_symbol::gpointer (GScanner* gchar*) "g_scanner_lookup_symbol")
    (macro g_scanner_freeze_symbol_table::void (GScanner*) "g_scanner_freeze_symbol_table")
    (macro g_scanner_thaw_symbol_table::void (GScanner*) "g_scanner_thaw_symbol_table")
    (macro g_scanner_unexp_token::void (GScanner* GTokenType gchar* gchar* gchar* gchar* gint) "g_scanner_unexp_token")
    (macro g_scanner_error::void (GScanner* gchar* . gchar*) "g_scanner_error")
    (macro g_scanner_warn::void (GScanner* gchar* . gchar*) "g_scanner_warn")
    (macro g_scanner_stat_mode::gint (gchar*) "g_scanner_stat_mode")
    (macro g_completion_new::GCompletion* (GCompletionFunc) "g_completion_new")
    (macro g_completion_add_items::void (GCompletion* GList*) "g_completion_add_items")
    (macro g_completion_remove_items::void (GCompletion* GList*) "g_completion_remove_items")
    (macro g_completion_clear_items::void (GCompletion*) "g_completion_clear_items")
    (macro g_completion_complete::GList* (GCompletion* gchar* gchar**) "g_completion_complete")
    (macro g_completion_free::void (GCompletion*) "g_completion_free")
    (macro g_date_new::GDate* () "g_date_new")
    (macro g_date_new_dmy::GDate* (GDateDay GDateMonth GDateYear) "g_date_new_dmy")
    (macro g_date_new_julian::GDate* (guint32) "g_date_new_julian")
    (macro g_date_free::void (GDate*) "g_date_free")
    (macro g_date_valid::gboolean (GDate*) "g_date_valid")
    (macro g_date_valid_day::gboolean (GDateDay) "g_date_valid_day")
    (macro g_date_valid_month::gboolean (GDateMonth) "g_date_valid_month")
    (macro g_date_valid_year::gboolean (GDateYear) "g_date_valid_year")
    (macro g_date_valid_weekday::gboolean (GDateWeekday) "g_date_valid_weekday")
    (macro g_date_valid_julian::gboolean (guint32) "g_date_valid_julian")
    (macro g_date_valid_dmy::gboolean (GDateDay GDateMonth GDateYear) "g_date_valid_dmy")
    (macro g_date_weekday::GDateWeekday (GDate*) "g_date_weekday")
    (macro g_date_month::GDateMonth (GDate*) "g_date_month")
    (macro g_date_year::GDateYear (GDate*) "g_date_year")
    (macro g_date_day::GDateDay (GDate*) "g_date_day")
    (macro g_date_julian::guint32 (GDate*) "g_date_julian")
    (macro g_date_day_of_year::guint (GDate*) "g_date_day_of_year")
    (macro g_date_monday_week_of_year::guint (GDate*) "g_date_monday_week_of_year")
    (macro g_date_sunday_week_of_year::guint (GDate*) "g_date_sunday_week_of_year")
    (macro g_date_clear::void (GDate* guint) "g_date_clear")
    (macro g_date_set_parse::void (GDate* gchar*) "g_date_set_parse")
    (macro g_date_set_time::void (GDate* GTime) "g_date_set_time")
    (macro g_date_set_month::void (GDate* GDateMonth) "g_date_set_month")
    (macro g_date_set_day::void (GDate* GDateDay) "g_date_set_day")
    (macro g_date_set_year::void (GDate* GDateYear) "g_date_set_year")
    (macro g_date_set_dmy::void (GDate* GDateDay GDateMonth GDateYear) "g_date_set_dmy")
    (macro g_date_set_julian::void (GDate* guint32) "g_date_set_julian")
    (macro g_date_is_first_of_month::gboolean (GDate*) "g_date_is_first_of_month")
    (macro g_date_is_last_of_month::gboolean (GDate*) "g_date_is_last_of_month")
    (macro g_date_add_days::void (GDate* guint) "g_date_add_days")
    (macro g_date_subtract_days::void (GDate* guint) "g_date_subtract_days")
    (macro g_date_add_months::void (GDate* guint) "g_date_add_months")
    (macro g_date_subtract_months::void (GDate* guint) "g_date_subtract_months")
    (macro g_date_add_years::void (GDate* guint) "g_date_add_years")
    (macro g_date_subtract_years::void (GDate* guint) "g_date_subtract_years")
    (macro g_date_is_leap_year::gboolean (GDateYear) "g_date_is_leap_year")
    (macro g_date_days_in_month::guint8 (GDateMonth GDateYear) "g_date_days_in_month")
    (macro g_date_monday_weeks_in_year::guint8 (GDateYear) "g_date_monday_weeks_in_year")
    (macro g_date_sunday_weeks_in_year::guint8 (GDateYear) "g_date_sunday_weeks_in_year")
    (macro g_date_compare::gint (GDate* GDate*) "g_date_compare")
    (macro g_date_to_struct_tm::void (GDate* s-tm*) "g_date_to_struct_tm")
    (macro g_date_strftime::gsize (gchar* gsize gchar* GDate*) "g_date_strftime")
    (macro g_relation_new::GRelation* (gint) "g_relation_new")
    (macro g_relation_destroy::void (GRelation*) "g_relation_destroy")
    (macro g_relation_index::void (GRelation* gint GHashFunc GCompareFunc) "g_relation_index")
    (macro g_relation_insert::void (GRelation* . GRelation*) "g_relation_insert")
    (macro g_relation_delete::gint (GRelation* gconstpointer gint) "g_relation_delete")
    (macro g_relation_select::GTuples* (GRelation* gconstpointer gint) "g_relation_select")
    (macro g_relation_count::gint (GRelation* gconstpointer gint) "g_relation_count")
    (macro g_relation_exists::gboolean (GRelation* . GRelation*) "g_relation_exists")
    (macro g_relation_print::void (GRelation*) "g_relation_print")
    (macro g_tuples_destroy::void (GTuples*) "g_tuples_destroy")
    (macro g_tuples_index::gpointer (GTuples* gint gint) "g_tuples_index")
    (macro g_spaced_primes_closest::guint (guint) "g_spaced_primes_closest")
    (macro g_io_channel_init::void (GIOChannel*) "g_io_channel_init")
    (macro g_io_channel_ref::void (GIOChannel*) "g_io_channel_ref")
    (macro g_io_channel_unref::void (GIOChannel*) "g_io_channel_unref")
    (macro g_io_channel_read::GIOError (GIOChannel* gchar* guint guint*) "g_io_channel_read")
    (macro g_io_channel_write::GIOError (GIOChannel* gchar* guint guint*) "g_io_channel_write")
    (macro g_io_channel_seek::GIOError (GIOChannel* gint GSeekType) "g_io_channel_seek")
    (macro g_io_channel_close::void (GIOChannel*) "g_io_channel_close")
    (macro g_io_add_watch_full::guint (GIOChannel* gint GIOCondition GIOFunc gpointer GDestroyNotify) "g_io_add_watch_full")
    (macro g_io_add_watch::guint (GIOChannel* GIOCondition GIOFunc gpointer) "g_io_add_watch")
    (macro g_source_add::guint (gint gboolean GSourceFuncs* gpointer gpointer GDestroyNotify) "g_source_add")
    (macro g_source_remove::gboolean (guint) "g_source_remove")
    (macro g_source_remove_by_user_data::gboolean (gpointer) "g_source_remove_by_user_data")
    (macro g_source_remove_by_source_data::gboolean (gpointer) "g_source_remove_by_source_data")
    (macro g_source_remove_by_funcs_user_data::gboolean (GSourceFuncs* gpointer) "g_source_remove_by_funcs_user_data")
    (macro g_get_current_time::void (GTimeVal*) "g_get_current_time")
    (macro g_main_new::GMainLoop* (gboolean) "g_main_new")
    (macro g_main_run::void (GMainLoop*) "g_main_run")
    (macro g_main_quit::void (GMainLoop*) "g_main_quit")
    (macro g_main_destroy::void (GMainLoop*) "g_main_destroy")
    (macro g_main_is_running::gboolean (GMainLoop*) "g_main_is_running")
    (macro g_main_iteration::gboolean (gboolean) "g_main_iteration")
    (macro g_main_pending::gboolean () "g_main_pending")
    (macro g_timeout_add_full::guint (gint guint GSourceFunc gpointer GDestroyNotify) "g_timeout_add_full")
    (macro g_timeout_add::guint (guint GSourceFunc gpointer) "g_timeout_add")
    (macro g_idle_add::guint (GSourceFunc gpointer) "g_idle_add")
    (macro g_idle_add_full::guint (gint GSourceFunc gpointer GDestroyNotify) "g_idle_add_full")
    (macro g_idle_remove_by_data::gboolean (gpointer) "g_idle_remove_by_data")
    (macro g_main_add_poll::void (GPollFD* gint) "g_main_add_poll")
    (macro g_main_remove_poll::void (GPollFD*) "g_main_remove_poll")
    (macro g_main_set_poll_func::void (GPollFunc) "g_main_set_poll_func")
    (macro g_io_channel_unix_new::GIOChannel* (int) "g_io_channel_unix_new")
    (macro g_io_channel_unix_get_fd::gint (GIOChannel*) "g_io_channel_unix_get_fd")
    (macro g_thread_init::void (GThreadFunctions*) "g_thread_init")
    (macro g_static_mutex_get_mutex_impl::GMutex* (GMutex**) "g_static_mutex_get_mutex_impl")
    (macro g_static_private_get::gpointer (GStaticPrivate*) "g_static_private_get")
    (macro g_static_private_set::void (GStaticPrivate* gpointer GDestroyNotify) "g_static_private_set")
    (macro glib_dummy_decl::void () "glib_dummy_decl")
    (macro gdk_init::void (gint* gchar***) "gdk_init")
    (macro gdk_init_check::gboolean (gint* gchar***) "gdk_init_check")
    (macro gdk_exit::void (gint) "gdk_exit")
    (macro gdk_set_locale::gchar* () "gdk_set_locale")
    (macro gdk_error_trap_push::void () "gdk_error_trap_push")
    (macro gdk_error_trap_pop::gint () "gdk_error_trap_pop")
    (macro gdk_events_pending::gboolean () "gdk_events_pending")
    (macro gdk_event_get::GdkEvent* () "gdk_event_get")
    (macro gdk_event_peek::GdkEvent* () "gdk_event_peek")
    (macro gdk_event_get_graphics_expose::GdkEvent* (GdkWindow*) "gdk_event_get_graphics_expose")
    (macro gdk_event_put::void (GdkEvent*) "gdk_event_put")
    (macro gdk_event_copy::GdkEvent* (GdkEvent*) "gdk_event_copy")
    (macro gdk_event_free::void (GdkEvent*) "gdk_event_free")
    (macro gdk_event_get_time::guint32 (GdkEvent*) "gdk_event_get_time")
    (macro gdk_event_handler_set::void (GdkEventFunc gpointer GDestroyNotify) "gdk_event_handler_set")
    (macro gdk_set_show_events::void (gboolean) "gdk_set_show_events")
    (macro gdk_set_use_xshm::void (gboolean) "gdk_set_use_xshm")
    (macro gdk_get_show_events::gboolean () "gdk_get_show_events")
    (macro gdk_get_use_xshm::gboolean () "gdk_get_use_xshm")
    (macro gdk_get_display::gchar* () "gdk_get_display")
    (macro gdk_time_get::guint32 () "gdk_time_get")
    (macro gdk_timer_get::guint32 () "gdk_timer_get")
    (macro gdk_timer_set::void (guint32) "gdk_timer_set")
    (macro gdk_timer_enable::void () "gdk_timer_enable")
    (macro gdk_timer_disable::void () "gdk_timer_disable")
    (macro gdk_input_add_full::gint (gint GdkInputCondition GdkInputFunction gpointer GdkDestroyNotify) "gdk_input_add_full")
    (macro gdk_input_add::gint (gint GdkInputCondition GdkInputFunction gpointer) "gdk_input_add")
    (macro gdk_input_remove::void (gint) "gdk_input_remove")
    (macro gdk_pointer_grab::gint (GdkWindow* gint GdkEventMask GdkWindow* GdkCursor* guint32) "gdk_pointer_grab")
    (macro gdk_pointer_ungrab::void (guint32) "gdk_pointer_ungrab")
    (macro gdk_keyboard_grab::gint (GdkWindow* gboolean guint32) "gdk_keyboard_grab")
    (macro gdk_keyboard_ungrab::void (guint32) "gdk_keyboard_ungrab")
    (macro gdk_pointer_is_grabbed::gboolean () "gdk_pointer_is_grabbed")
    (macro gdk_screen_width::gint () "gdk_screen_width")
    (macro gdk_screen_height::gint () "gdk_screen_height")
    (macro gdk_screen_width_mm::gint () "gdk_screen_width_mm")
    (macro gdk_screen_height_mm::gint () "gdk_screen_height_mm")
    (macro gdk_flush::void () "gdk_flush")
    (macro gdk_beep::void () "gdk_beep")
    (macro gdk_key_repeat_disable::void () "gdk_key_repeat_disable")
    (macro gdk_key_repeat_restore::void () "gdk_key_repeat_restore")
    (macro gdk_visual_get_best_depth::gint () "gdk_visual_get_best_depth")
    (macro gdk_visual_get_best_type::GdkVisualType () "gdk_visual_get_best_type")
    (macro gdk_visual_get_system::GdkVisual* () "gdk_visual_get_system")
    (macro gdk_visual_get_best::GdkVisual* () "gdk_visual_get_best")
    (macro gdk_visual_get_best_with_depth::GdkVisual* (gint) "gdk_visual_get_best_with_depth")
    (macro gdk_visual_get_best_with_type::GdkVisual* (GdkVisualType) "gdk_visual_get_best_with_type")
    (macro gdk_visual_get_best_with_both::GdkVisual* (gint GdkVisualType) "gdk_visual_get_best_with_both")
    (macro gdk_visual_ref::GdkVisual* (GdkVisual*) "gdk_visual_ref")
    (macro gdk_visual_unref::void (GdkVisual*) "gdk_visual_unref")
    (macro gdk_query_depths::void (gint** gint*) "gdk_query_depths")
    (macro gdk_query_visual_types::void (GdkVisualType** gint*) "gdk_query_visual_types")
    (macro gdk_list_visuals::GList* () "gdk_list_visuals")
    (macro gdk_window_new::GdkWindow* (GdkWindow* GdkWindowAttr* gint) "gdk_window_new")
    (macro gdk_window_destroy::void (GdkWindow*) "gdk_window_destroy")
    (macro gdk_window_ref::GdkWindow* (GdkWindow*) "gdk_window_ref")
    (macro gdk_window_unref::void (GdkWindow*) "gdk_window_unref")
    (macro gdk_window_at_pointer::GdkWindow* (gint* gint*) "gdk_window_at_pointer")
    (macro gdk_window_show::void (GdkWindow*) "gdk_window_show")
    (macro gdk_window_hide::void (GdkWindow*) "gdk_window_hide")
    (macro gdk_window_withdraw::void (GdkWindow*) "gdk_window_withdraw")
    (macro gdk_window_move::void (GdkWindow* gint gint) "gdk_window_move")
    (macro gdk_window_resize::void (GdkWindow* gint gint) "gdk_window_resize")
    (macro gdk_window_move_resize::void (GdkWindow* gint gint gint gint) "gdk_window_move_resize")
    (macro gdk_window_reparent::void (GdkWindow* GdkWindow* gint gint) "gdk_window_reparent")
    (macro gdk_window_clear::void (GdkWindow*) "gdk_window_clear")
    (macro gdk_window_clear_area::void (GdkWindow* gint gint gint gint) "gdk_window_clear_area")
    (macro gdk_window_clear_area_e::void (GdkWindow* gint gint gint gint) "gdk_window_clear_area_e")
    (macro gdk_window_copy_area::void (GdkWindow* GdkGC* gint gint GdkWindow* gint gint gint gint) "gdk_window_copy_area")
    (macro gdk_window_raise::void (GdkWindow*) "gdk_window_raise")
    (macro gdk_window_lower::void (GdkWindow*) "gdk_window_lower")
    (macro gdk_window_set_user_data::void (GdkWindow* gpointer) "gdk_window_set_user_data")
    (macro gdk_window_set_override_redirect::void (GdkWindow* gboolean) "gdk_window_set_override_redirect")
    (macro gdk_window_add_filter::void (GdkWindow* GdkFilterFunc gpointer) "gdk_window_add_filter")
    (macro gdk_window_remove_filter::void (GdkWindow* GdkFilterFunc gpointer) "gdk_window_remove_filter")
    (macro gdk_window_shape_combine_mask::void (GdkWindow* GdkBitmap* gint gint) "gdk_window_shape_combine_mask")
    (macro gdk_window_set_child_shapes::void (GdkWindow*) "gdk_window_set_child_shapes")
    (macro gdk_window_merge_child_shapes::void (GdkWindow*) "gdk_window_merge_child_shapes")
    (macro gdk_window_is_visible::gboolean (GdkWindow*) "gdk_window_is_visible")
    (macro gdk_window_is_viewable::gboolean (GdkWindow*) "gdk_window_is_viewable")
    (macro gdk_window_set_static_gravities::gboolean (GdkWindow* gboolean) "gdk_window_set_static_gravities")
    (macro gdk_add_client_message_filter::void (GdkAtom GdkFilterFunc gpointer) "gdk_add_client_message_filter")
    (macro gdk_drag_context_new::GdkDragContext* () "gdk_drag_context_new")
    (macro gdk_drag_context_ref::void (GdkDragContext*) "gdk_drag_context_ref")
    (macro gdk_drag_context_unref::void (GdkDragContext*) "gdk_drag_context_unref")
    (macro gdk_drag_status::void (GdkDragContext* GdkDragAction guint32) "gdk_drag_status")
    (macro gdk_drop_reply::void (GdkDragContext* gboolean guint32) "gdk_drop_reply")
    (macro gdk_drop_finish::void (GdkDragContext* gboolean guint32) "gdk_drop_finish")
    (macro gdk_drag_get_selection::GdkAtom (GdkDragContext*) "gdk_drag_get_selection")
    (macro gdk_drag_begin::GdkDragContext* (GdkWindow* GList*) "gdk_drag_begin")
    (macro gdk_drag_get_protocol::guint32 (guint32 GdkDragProtocol*) "gdk_drag_get_protocol")
    (macro gdk_drag_find_window::void (GdkDragContext* GdkWindow* gint gint GdkWindow** GdkDragProtocol*) "gdk_drag_find_window")
    (macro gdk_drag_motion::gboolean (GdkDragContext* GdkWindow* GdkDragProtocol gint gint GdkDragAction GdkDragAction guint32) "gdk_drag_motion")
    (macro gdk_drag_drop::void (GdkDragContext* guint32) "gdk_drag_drop")
    (macro gdk_drag_abort::void (GdkDragContext* guint32) "gdk_drag_abort")
    (macro gdk_window_set_hints::void (GdkWindow* gint gint gint gint gint gint gint) "gdk_window_set_hints")
    (macro gdk_window_set_geometry_hints::void (GdkWindow* GdkGeometry* GdkWindowHints) "gdk_window_set_geometry_hints")
    (macro gdk_set_sm_client_id::void (gchar*) "gdk_set_sm_client_id")
    (macro gdk_window_set_title::void (GdkWindow* gchar*) "gdk_window_set_title")
    (macro gdk_window_set_role::void (GdkWindow* gchar*) "gdk_window_set_role")
    (macro gdk_window_set_transient_for::void (GdkWindow* GdkWindow*) "gdk_window_set_transient_for")
    (macro gdk_window_set_background::void (GdkWindow* GdkColor*) "gdk_window_set_background")
    (macro gdk_window_set_back_pixmap::void (GdkWindow* GdkPixmap* gboolean) "gdk_window_set_back_pixmap")
    (macro gdk_window_set_cursor::void (GdkWindow* GdkCursor*) "gdk_window_set_cursor")
    (macro gdk_window_set_colormap::void (GdkWindow* GdkColormap*) "gdk_window_set_colormap")
    (macro gdk_window_get_user_data::void (GdkWindow* gpointer*) "gdk_window_get_user_data")
    (macro gdk_window_get_geometry::void (GdkWindow* gint* gint* gint* gint* gint*) "gdk_window_get_geometry")
    (macro gdk_window_get_position::void (GdkWindow* gint* gint*) "gdk_window_get_position")
    (macro gdk_window_get_size::void (GdkWindow* gint* gint*) "gdk_window_get_size")
    (macro gdk_window_get_visual::GdkVisual* (GdkWindow*) "gdk_window_get_visual")
    (macro gdk_window_get_colormap::GdkColormap* (GdkWindow*) "gdk_window_get_colormap")
    (macro gdk_window_get_type::GdkWindowType (GdkWindow*) "gdk_window_get_type")
    (macro gdk_window_get_origin::gint (GdkWindow* gint* gint*) "gdk_window_get_origin")
    (macro gdk_window_get_deskrelative_origin::gboolean (GdkWindow* gint* gint*) "gdk_window_get_deskrelative_origin")
    (macro gdk_window_get_root_origin::void (GdkWindow* gint* gint*) "gdk_window_get_root_origin")
    (macro gdk_window_get_pointer::GdkWindow* (GdkWindow* gint* gint* GdkModifierType*) "gdk_window_get_pointer")
    (macro gdk_window_get_parent::GdkWindow* (GdkWindow*) "gdk_window_get_parent")
    (macro gdk_window_get_toplevel::GdkWindow* (GdkWindow*) "gdk_window_get_toplevel")
    (macro gdk_window_get_children::GList* (GdkWindow*) "gdk_window_get_children")
    (macro gdk_window_get_events::GdkEventMask (GdkWindow*) "gdk_window_get_events")
    (macro gdk_window_set_events::void (GdkWindow* GdkEventMask) "gdk_window_set_events")
    (macro gdk_window_set_icon::void (GdkWindow* GdkWindow* GdkPixmap* GdkBitmap*) "gdk_window_set_icon")
    (macro gdk_window_set_icon_name::void (GdkWindow* gchar*) "gdk_window_set_icon_name")
    (macro gdk_window_set_group::void (GdkWindow* GdkWindow*) "gdk_window_set_group")
    (macro gdk_window_set_decorations::void (GdkWindow* GdkWMDecoration) "gdk_window_set_decorations")
    (macro gdk_window_set_functions::void (GdkWindow* GdkWMFunction) "gdk_window_set_functions")
    (macro gdk_window_get_toplevels::GList* () "gdk_window_get_toplevels")
    (macro gdk_window_register_dnd::void (GdkWindow*) "gdk_window_register_dnd")
    (macro gdk_drawable_set_data::void (GdkDrawable* gchar* gpointer GDestroyNotify) "gdk_drawable_set_data")
    (macro gdk_cursor_new::GdkCursor* (GdkCursorType) "gdk_cursor_new")
    (macro gdk_cursor_new_from_pixmap::GdkCursor* (GdkPixmap* GdkPixmap* GdkColor* GdkColor* gint gint) "gdk_cursor_new_from_pixmap")
    (macro gdk_cursor_destroy::void (GdkCursor*) "gdk_cursor_destroy")
    (macro gdk_gc_new::GdkGC* (GdkWindow*) "gdk_gc_new")
    (macro gdk_gc_new_with_values::GdkGC* (GdkWindow* GdkGCValues* GdkGCValuesMask) "gdk_gc_new_with_values")
    (macro gdk_gc_ref::GdkGC* (GdkGC*) "gdk_gc_ref")
    (macro gdk_gc_unref::void (GdkGC*) "gdk_gc_unref")
    (macro gdk_gc_destroy::void (GdkGC*) "gdk_gc_destroy")
    (macro gdk_gc_get_values::void (GdkGC* GdkGCValues*) "gdk_gc_get_values")
    (macro gdk_gc_set_foreground::void (GdkGC* GdkColor*) "gdk_gc_set_foreground")
    (macro gdk_gc_set_background::void (GdkGC* GdkColor*) "gdk_gc_set_background")
    (macro gdk_gc_set_font::void (GdkGC* GdkFont*) "gdk_gc_set_font")
    (macro gdk_gc_set_function::void (GdkGC* GdkFunction) "gdk_gc_set_function")
    (macro gdk_gc_set_fill::void (GdkGC* GdkFill) "gdk_gc_set_fill")
    (macro gdk_gc_set_tile::void (GdkGC* GdkPixmap*) "gdk_gc_set_tile")
    (macro gdk_gc_set_stipple::void (GdkGC* GdkPixmap*) "gdk_gc_set_stipple")
    (macro gdk_gc_set_ts_origin::void (GdkGC* gint gint) "gdk_gc_set_ts_origin")
    (macro gdk_gc_set_clip_origin::void (GdkGC* gint gint) "gdk_gc_set_clip_origin")
    (macro gdk_gc_set_clip_mask::void (GdkGC* GdkBitmap*) "gdk_gc_set_clip_mask")
    (macro gdk_gc_set_clip_rectangle::void (GdkGC* GdkRectangle*) "gdk_gc_set_clip_rectangle")
    (macro gdk_gc_set_clip_region::void (GdkGC* GdkRegion*) "gdk_gc_set_clip_region")
    (macro gdk_gc_set_subwindow::void (GdkGC* GdkSubwindowMode) "gdk_gc_set_subwindow")
    (macro gdk_gc_set_exposures::void (GdkGC* gboolean) "gdk_gc_set_exposures")
    (macro gdk_gc_set_line_attributes::void (GdkGC* gint GdkLineStyle GdkCapStyle GdkJoinStyle) "gdk_gc_set_line_attributes")
    (macro gdk_gc_set_dashes::void (GdkGC* gint gint8* gint) "gdk_gc_set_dashes")
    (macro gdk_gc_copy::void (GdkGC* GdkGC*) "gdk_gc_copy")
    (macro gdk_pixmap_new::GdkPixmap* (GdkWindow* gint gint gint) "gdk_pixmap_new")
    (macro gdk_bitmap_create_from_data::GdkBitmap* (GdkWindow* gchar* gint gint) "gdk_bitmap_create_from_data")
    (macro gdk_pixmap_create_from_data::GdkPixmap* (GdkWindow* gchar* gint gint gint GdkColor* GdkColor*) "gdk_pixmap_create_from_data")
    (macro gdk_pixmap_create_from_xpm::GdkPixmap* (GdkWindow* GdkBitmap** GdkColor* gchar*) "gdk_pixmap_create_from_xpm")
    (macro gdk_pixmap_colormap_create_from_xpm::GdkPixmap* (GdkWindow* GdkColormap* GdkBitmap** GdkColor* gchar*) "gdk_pixmap_colormap_create_from_xpm")
    (macro gdk_pixmap_create_from_xpm_d::GdkPixmap* (GdkWindow* GdkBitmap** GdkColor* gchar**) "gdk_pixmap_create_from_xpm_d")
    (macro gdk_pixmap_colormap_create_from_xpm_d::GdkPixmap* (GdkWindow* GdkColormap* GdkBitmap** GdkColor* gchar**) "gdk_pixmap_colormap_create_from_xpm_d")
    (macro gdk_pixmap_ref::GdkPixmap* (GdkPixmap*) "gdk_pixmap_ref")
    (macro gdk_pixmap_unref::void (GdkPixmap*) "gdk_pixmap_unref")
    (macro gdk_bitmap_ref::GdkBitmap* (GdkBitmap*) "gdk_bitmap_ref")
    (macro gdk_bitmap_unref::void (GdkBitmap*) "gdk_bitmap_unref")
    (macro gdk_image_new_bitmap::GdkImage* (GdkVisual* gpointer gint gint) "gdk_image_new_bitmap")
    (macro gdk_image_new::GdkImage* (GdkImageType GdkVisual* gint gint) "gdk_image_new")
    (macro gdk_image_get::GdkImage* (GdkWindow* gint gint gint gint) "gdk_image_get")
    (macro gdk_image_put_pixel::void (GdkImage* gint gint guint32) "gdk_image_put_pixel")
    (macro gdk_image_get_pixel::guint32 (GdkImage* gint gint) "gdk_image_get_pixel")
    (macro gdk_image_destroy::void (GdkImage*) "gdk_image_destroy")
    (macro gdk_colormap_new::GdkColormap* (GdkVisual* gboolean) "gdk_colormap_new")
    (macro gdk_colormap_ref::GdkColormap* (GdkColormap*) "gdk_colormap_ref")
    (macro gdk_colormap_unref::void (GdkColormap*) "gdk_colormap_unref")
    (macro gdk_colormap_get_system::GdkColormap* () "gdk_colormap_get_system")
    (macro gdk_colormap_get_system_size::gint () "gdk_colormap_get_system_size")
    (macro gdk_colormap_change::void (GdkColormap* gint) "gdk_colormap_change")
    (macro gdk_colormap_sync::void (GdkColormap* gboolean) "gdk_colormap_sync")
    (macro gdk_colormap_alloc_colors::gint (GdkColormap* GdkColor* gint gboolean gboolean gboolean*) "gdk_colormap_alloc_colors")
    (macro gdk_colormap_alloc_color::gboolean (GdkColormap* GdkColor* gboolean gboolean) "gdk_colormap_alloc_color")
    (macro gdk_colormap_free_colors::void (GdkColormap* GdkColor* gint) "gdk_colormap_free_colors")
    (macro gdk_colormap_get_visual::GdkVisual* (GdkColormap*) "gdk_colormap_get_visual")
    (macro gdk_color_copy::GdkColor* (GdkColor*) "gdk_color_copy")
    (macro gdk_color_free::void (GdkColor*) "gdk_color_free")
    (macro gdk_color_parse::gboolean (gchar* GdkColor*) "gdk_color_parse")
    (macro gdk_color_hash::guint (GdkColor* GdkColor*) "gdk_color_hash")
    (macro gdk_color_equal::gboolean (GdkColor* GdkColor*) "gdk_color_equal")
    (macro gdk_colors_store::void (GdkColormap* GdkColor* gint) "gdk_colors_store")
    (macro gdk_colors_alloc::gboolean (GdkColormap* gboolean gulong* gint gulong* gint) "gdk_colors_alloc")
    (macro gdk_colors_free::void (GdkColormap* gulong* gint gulong) "gdk_colors_free")
    (macro gdk_color_white::gboolean (GdkColormap* GdkColor*) "gdk_color_white")
    (macro gdk_color_black::gboolean (GdkColormap* GdkColor*) "gdk_color_black")
    (macro gdk_color_alloc::gboolean (GdkColormap* GdkColor*) "gdk_color_alloc")
    (macro gdk_color_change::gboolean (GdkColormap* GdkColor*) "gdk_color_change")
    (macro gdk_font_load::GdkFont* (gchar*) "gdk_font_load")
    (macro gdk_fontset_load::GdkFont* (gchar*) "gdk_fontset_load")
    (macro gdk_font_ref::GdkFont* (GdkFont*) "gdk_font_ref")
    (macro gdk_font_unref::void (GdkFont*) "gdk_font_unref")
    (macro gdk_font_id::gint (GdkFont*) "gdk_font_id")
    (macro gdk_font_equal::gboolean (GdkFont* GdkFont*) "gdk_font_equal")
    (macro gdk_string_width::gint (GdkFont* gchar*) "gdk_string_width")
    (macro gdk_text_width::gint (GdkFont* gchar* gint) "gdk_text_width")
    (macro gdk_text_width_wc::gint (GdkFont* GdkWChar* gint) "gdk_text_width_wc")
    (macro gdk_char_width::gint (GdkFont* gchar) "gdk_char_width")
    (macro gdk_char_width_wc::gint (GdkFont* GdkWChar) "gdk_char_width_wc")
    (macro gdk_string_measure::gint (GdkFont* gchar*) "gdk_string_measure")
    (macro gdk_text_measure::gint (GdkFont* gchar* gint) "gdk_text_measure")
    (macro gdk_char_measure::gint (GdkFont* gchar) "gdk_char_measure")
    (macro gdk_string_height::gint (GdkFont* gchar*) "gdk_string_height")
    (macro gdk_text_height::gint (GdkFont* gchar* gint) "gdk_text_height")
    (macro gdk_char_height::gint (GdkFont* gchar) "gdk_char_height")
    (macro gdk_text_extents::void (GdkFont* gchar* gint gint* gint* gint* gint* gint*) "gdk_text_extents")
    (macro gdk_text_extents_wc::void (GdkFont* GdkWChar* gint gint* gint* gint* gint* gint*) "gdk_text_extents_wc")
    (macro gdk_string_extents::void (GdkFont* gchar* gint* gint* gint* gint* gint*) "gdk_string_extents")
    (macro gdk_draw_point::void (GdkDrawable* GdkGC* gint gint) "gdk_draw_point")
    (macro gdk_draw_line::void (GdkDrawable* GdkGC* gint gint gint gint) "gdk_draw_line")
    (macro gdk_draw_rectangle::void (GdkDrawable* GdkGC* gint gint gint gint gint) "gdk_draw_rectangle")
    (macro gdk_draw_arc::void (GdkDrawable* GdkGC* gint gint gint gint gint gint gint) "gdk_draw_arc")
    (macro gdk_draw_polygon::void (GdkDrawable* GdkGC* gint GdkPoint* gint) "gdk_draw_polygon")
    (macro gdk_draw_string::void (GdkDrawable* GdkFont* GdkGC* gint gint gchar*) "gdk_draw_string")
    (macro gdk_draw_text::void (GdkDrawable* GdkFont* GdkGC* gint gint gchar* gint) "gdk_draw_text")
    (macro gdk_draw_text_wc::void (GdkDrawable* GdkFont* GdkGC* gint gint GdkWChar* gint) "gdk_draw_text_wc")
    (macro gdk_draw_pixmap::void (GdkDrawable* GdkGC* GdkDrawable* gint gint gint gint gint gint) "gdk_draw_pixmap")
    (macro gdk_draw_image::void (GdkDrawable* GdkGC* GdkImage* gint gint gint gint gint gint) "gdk_draw_image")
    (macro gdk_draw_points::void (GdkDrawable* GdkGC* GdkPoint* gint) "gdk_draw_points")
    (macro gdk_draw_segments::void (GdkDrawable* GdkGC* GdkSegment* gint) "gdk_draw_segments")
    (macro gdk_draw_lines::void (GdkDrawable* GdkGC* GdkPoint* gint) "gdk_draw_lines")
    (macro gdk_selection_owner_set::gboolean (GdkWindow* GdkAtom guint32 gint) "gdk_selection_owner_set")
    (macro gdk_selection_owner_get::GdkWindow* (GdkAtom) "gdk_selection_owner_get")
    (macro gdk_selection_convert::void (GdkWindow* GdkAtom GdkAtom guint32) "gdk_selection_convert")
    (macro gdk_selection_property_get::gboolean (GdkWindow* guchar** GdkAtom* gint*) "gdk_selection_property_get")
    (macro gdk_selection_send_notify::void (guint32 GdkAtom GdkAtom GdkAtom guint32) "gdk_selection_send_notify")
    (macro gdk_text_property_to_text_list::gint (GdkAtom gint guchar* gint gchar***) "gdk_text_property_to_text_list")
    (macro gdk_free_text_list::void (gchar**) "gdk_free_text_list")
    (macro gdk_string_to_compound_text::gint (gchar* GdkAtom* gint* guchar** gint*) "gdk_string_to_compound_text")
    (macro gdk_free_compound_text::void (guchar*) "gdk_free_compound_text")
    (macro gdk_atom_intern::GdkAtom (gchar* gint) "gdk_atom_intern")
    (macro gdk_atom_name::gchar* (GdkAtom) "gdk_atom_name")
    (macro gdk_property_get::gboolean (GdkWindow* GdkAtom GdkAtom gulong gulong gint GdkAtom* gint* gint* guchar**) "gdk_property_get")
    (macro gdk_property_change::void (GdkWindow* GdkAtom GdkAtom gint GdkPropMode guchar* gint) "gdk_property_change")
    (macro gdk_property_delete::void (GdkWindow* GdkAtom) "gdk_property_delete")
    (macro gdk_rectangle_intersect::gboolean (GdkRectangle* GdkRectangle* GdkRectangle*) "gdk_rectangle_intersect")
    (macro gdk_rectangle_union::void (GdkRectangle* GdkRectangle* GdkRectangle*) "gdk_rectangle_union")
    (macro gdk_input_init::void () "gdk_input_init")
    (macro gdk_input_exit::void () "gdk_input_exit")
    (macro gdk_input_list_devices::GList* () "gdk_input_list_devices")
    (macro gdk_input_set_extension_events::void (GdkWindow* gint GdkExtensionMode) "gdk_input_set_extension_events")
    (macro gdk_input_set_source::void (guint32 GdkInputSource) "gdk_input_set_source")
    (macro gdk_input_set_mode::gboolean (guint32 GdkInputMode) "gdk_input_set_mode")
    (macro gdk_input_set_axes::void (guint32 GdkAxisUse*) "gdk_input_set_axes")
    (macro gdk_input_set_key::void (guint32 guint guint GdkModifierType) "gdk_input_set_key")
    (macro gdk_input_window_get_pointer::void (GdkWindow* guint32 gdouble* gdouble* gdouble* gdouble* gdouble* GdkModifierType*) "gdk_input_window_get_pointer")
    (macro gdk_input_motion_events::GdkTimeCoord* (GdkWindow* guint32 guint32 guint32 gint*) "gdk_input_motion_events")
    (macro gdk_im_ready::gboolean () "gdk_im_ready")
    (macro gdk_im_begin::void (GdkIC* GdkWindow*) "gdk_im_begin")
    (macro gdk_im_end::void () "gdk_im_end")
    (macro gdk_im_decide_style::GdkIMStyle (GdkIMStyle) "gdk_im_decide_style")
    (macro gdk_im_set_best_style::GdkIMStyle (GdkIMStyle) "gdk_im_set_best_style")
    (macro gdk_ic_new::GdkIC* (GdkICAttr* GdkICAttributesType) "gdk_ic_new")
    (macro gdk_ic_destroy::void (GdkIC*) "gdk_ic_destroy")
    (macro gdk_ic_get_style::GdkIMStyle (GdkIC*) "gdk_ic_get_style")
    (macro gdk_ic_get_events::GdkEventMask (GdkIC*) "gdk_ic_get_events")
    (macro gdk_ic_attr_new::GdkICAttr* () "gdk_ic_attr_new")
    (macro gdk_ic_attr_destroy::void (GdkICAttr*) "gdk_ic_attr_destroy")
    (macro gdk_ic_set_attr::GdkICAttributesType (GdkIC* GdkICAttr* GdkICAttributesType) "gdk_ic_set_attr")
    (macro gdk_ic_get_attr::GdkICAttributesType (GdkIC* GdkICAttr* GdkICAttributesType) "gdk_ic_get_attr")
    (macro gdk_wcstombs::gchar* (GdkWChar*) "gdk_wcstombs")
    (macro gdk_mbstowcs::gint (GdkWChar* gchar* gint) "gdk_mbstowcs")
    (macro gdk_color_context_new::GdkColorContext* (GdkVisual* GdkColormap*) "gdk_color_context_new")
    (macro gdk_color_context_new_mono::GdkColorContext* (GdkVisual* GdkColormap*) "gdk_color_context_new_mono")
    (macro gdk_color_context_free::void (GdkColorContext*) "gdk_color_context_free")
    (macro gdk_color_context_get_pixel::gulong (GdkColorContext* gushort gushort gushort gint*) "gdk_color_context_get_pixel")
    (macro gdk_color_context_get_pixels::void (GdkColorContext* gushort* gushort* gushort* gint gulong* gint*) "gdk_color_context_get_pixels")
    (macro gdk_color_context_get_pixels_incremental::void (GdkColorContext* gushort* gushort* gushort* gint gint* gulong* gint*) "gdk_color_context_get_pixels_incremental")
    (macro gdk_color_context_query_color::gint (GdkColorContext* GdkColor*) "gdk_color_context_query_color")
    (macro gdk_color_context_query_colors::gint (GdkColorContext* GdkColor* gint) "gdk_color_context_query_colors")
    (macro gdk_color_context_add_palette::gint (GdkColorContext* GdkColor* gint) "gdk_color_context_add_palette")
    (macro gdk_color_context_init_dither::void (GdkColorContext*) "gdk_color_context_init_dither")
    (macro gdk_color_context_free_dither::void (GdkColorContext*) "gdk_color_context_free_dither")
    (macro gdk_color_context_get_pixel_from_palette::gulong (GdkColorContext* gushort* gushort* gushort* gint*) "gdk_color_context_get_pixel_from_palette")
    (macro gdk_color_context_get_index_from_palette::guchar (GdkColorContext* gint* gint* gint* gint*) "gdk_color_context_get_index_from_palette")
    (macro gdk_region_new::GdkRegion* () "gdk_region_new")
    (macro gdk_region_destroy::void (GdkRegion*) "gdk_region_destroy")
    (macro gdk_region_get_clipbox::void (GdkRegion* GdkRectangle*) "gdk_region_get_clipbox")
    (macro gdk_region_empty::gboolean (GdkRegion*) "gdk_region_empty")
    (macro gdk_region_equal::gboolean (GdkRegion* GdkRegion*) "gdk_region_equal")
    (macro gdk_region_point_in::gboolean (GdkRegion* int int) "gdk_region_point_in")
    (macro gdk_region_rect_in::GdkOverlapType (GdkRegion* GdkRectangle*) "gdk_region_rect_in")
    (macro gdk_region_polygon::GdkRegion* (GdkPoint* gint GdkFillRule) "gdk_region_polygon")
    (macro gdk_region_offset::void (GdkRegion* gint gint) "gdk_region_offset")
    (macro gdk_region_shrink::void (GdkRegion* gint gint) "gdk_region_shrink")
    (macro gdk_region_union_with_rect::GdkRegion* (GdkRegion* GdkRectangle*) "gdk_region_union_with_rect")
    (macro gdk_regions_intersect::GdkRegion* (GdkRegion* GdkRegion*) "gdk_regions_intersect")
    (macro gdk_regions_union::GdkRegion* (GdkRegion* GdkRegion*) "gdk_regions_union")
    (macro gdk_regions_subtract::GdkRegion* (GdkRegion* GdkRegion*) "gdk_regions_subtract")
    (macro gdk_regions_xor::GdkRegion* (GdkRegion* GdkRegion*) "gdk_regions_xor")
    (macro gdk_event_send_clientmessage_toall::void (GdkEvent*) "gdk_event_send_clientmessage_toall")
    (macro gdk_event_send_client_message::gboolean (GdkEvent* guint32) "gdk_event_send_client_message")
    (macro gdk_keyval_name::gchar* (guint) "gdk_keyval_name")
    (macro gdk_keyval_from_name::guint (gchar*) "gdk_keyval_from_name")
    (macro gdk_keyval_to_upper::guint (guint) "gdk_keyval_to_upper")
    (macro gdk_keyval_to_lower::guint (guint) "gdk_keyval_to_lower")
    (macro gdk_keyval_is_upper::gboolean (guint) "gdk_keyval_is_upper")
    (macro gdk_keyval_is_lower::gboolean (guint) "gdk_keyval_is_lower")
    (macro gdk_threads_enter::void () "gdk_threads_enter")
    (macro gdk_threads_leave::void () "gdk_threads_leave")
    (macro gdk_rgb_init::void () "gdk_rgb_init")
    (macro gdk_rgb_xpixel_from_rgb::gulong (guint32) "gdk_rgb_xpixel_from_rgb")
    (macro gdk_rgb_gc_set_foreground::void (GdkGC* guint32) "gdk_rgb_gc_set_foreground")
    (macro gdk_rgb_gc_set_background::void (GdkGC* guint32) "gdk_rgb_gc_set_background")
    (macro gdk_draw_rgb_image::void (GdkDrawable* GdkGC* gint gint gint gint GdkRgbDither guchar* gint) "gdk_draw_rgb_image")
    (macro gdk_draw_rgb_image_dithalign::void (GdkDrawable* GdkGC* gint gint gint gint GdkRgbDither guchar* gint gint gint) "gdk_draw_rgb_image_dithalign")
    (macro gdk_draw_rgb_32_image::void (GdkDrawable* GdkGC* gint gint gint gint GdkRgbDither guchar* gint) "gdk_draw_rgb_32_image")
    (macro gdk_draw_gray_image::void (GdkDrawable* GdkGC* gint gint gint gint GdkRgbDither guchar* gint) "gdk_draw_gray_image")
    (macro gdk_rgb_cmap_new::GdkRgbCmap* (guint32* gint) "gdk_rgb_cmap_new")
    (macro gdk_rgb_cmap_free::void (GdkRgbCmap*) "gdk_rgb_cmap_free")
    (macro gdk_draw_indexed_image::void (GdkDrawable* GdkGC* gint gint gint gint GdkRgbDither guchar* gint GdkRgbCmap*) "gdk_draw_indexed_image")
    (macro gdk_rgb_ditherable::gboolean () "gdk_rgb_ditherable")
    (macro gdk_rgb_set_verbose::void (gboolean) "gdk_rgb_set_verbose")
    (macro gdk_rgb_set_install::void (gboolean) "gdk_rgb_set_install")
    (macro gdk_rgb_set_min_colors::void (gint) "gdk_rgb_set_min_colors")
    (macro gdk_rgb_get_cmap::GdkColormap* () "gdk_rgb_get_cmap")
    (macro gdk_rgb_get_visual::GdkVisual* () "gdk_rgb_get_visual")
    (macro gtk_identifier_get_type::GtkType () "gtk_identifier_get_type")
    (macro gtk_type_init::void () "gtk_type_init")
    (macro gtk_type_unique::GtkType (GtkType GtkTypeInfo*) "gtk_type_unique")
    (macro gtk_type_set_chunk_alloc::void (GtkType guint) "gtk_type_set_chunk_alloc")
    (macro gtk_type_name::gchar* (guint) "gtk_type_name")
    (macro gtk_type_from_name::GtkType (gchar*) "gtk_type_from_name")
    (macro gtk_type_parent::GtkType (GtkType) "gtk_type_parent")
    (macro gtk_type_class::gpointer (GtkType) "gtk_type_class")
    (macro gtk_type_parent_class::gpointer (GtkType) "gtk_type_parent_class")
    (macro gtk_type_children_types::GList* (GtkType) "gtk_type_children_types")
    (macro gtk_type_new::gpointer (GtkType) "gtk_type_new")
    (macro gtk_type_free::void (GtkType gpointer) "gtk_type_free")
    (macro gtk_type_describe_heritage::void (GtkType) "gtk_type_describe_heritage")
    (macro gtk_type_describe_tree::void (GtkType gboolean) "gtk_type_describe_tree")
    (macro gtk_type_is_a::gboolean (GtkType GtkType) "gtk_type_is_a")
    (macro gtk_type_check_object_cast::GtkTypeObject* (GtkTypeObject* GtkType) "gtk_type_check_object_cast")
    (macro gtk_type_check_class_cast::GtkTypeClass* (GtkTypeClass* GtkType) "gtk_type_check_class_cast")
    (macro gtk_type_register_enum::GtkType (gchar* GtkEnumValue*) "gtk_type_register_enum")
    (macro gtk_type_register_flags::GtkType (gchar* GtkFlagValue*) "gtk_type_register_flags")
    (macro gtk_type_enum_get_values::GtkEnumValue* (GtkType) "gtk_type_enum_get_values")
    (macro gtk_type_flags_get_values::GtkFlagValue* (GtkType) "gtk_type_flags_get_values")
    (macro gtk_type_enum_find_value::GtkEnumValue* (GtkType gchar*) "gtk_type_enum_find_value")
    (macro gtk_type_flags_find_value::GtkFlagValue* (GtkType gchar*) "gtk_type_flags_find_value")
    (macro gtk_type_set_varargs_type::void (GtkType GtkType) "gtk_type_set_varargs_type")
    (macro gtk_type_get_varargs_type::GtkType (GtkType) "gtk_type_get_varargs_type")
    (macro gtk_type_query::GtkTypeQuery* (GtkType) "gtk_type_query")
    (macro gtk_arg_new::GtkArg* (GtkType) "gtk_arg_new")
    (macro gtk_arg_copy::GtkArg* (GtkArg* GtkArg*) "gtk_arg_copy")
    (macro gtk_arg_free::void (GtkArg* gboolean) "gtk_arg_free")
    (macro gtk_arg_reset::void (GtkArg*) "gtk_arg_reset")
    (macro gtk_arg_values_equal::gboolean (GtkArg* GtkArg*) "gtk_arg_values_equal")
    (macro gtk_args_collect::gchar* (GtkType GHashTable* GSList** GSList** gchar* va_list) "gtk_args_collect")
    (macro gtk_args_collect_cleanup::void (GSList* GSList*) "gtk_args_collect_cleanup")
    (macro gtk_arg_get_info::gchar* (GtkType GHashTable* gchar* GtkArgInfo**) "gtk_arg_get_info")
    (macro gtk_arg_type_new_static::GtkArgInfo* (GtkType gchar* guint GHashTable* GtkType guint guint) "gtk_arg_type_new_static")
    (macro gtk_args_query::GtkArg* (GtkType GHashTable* guint32** guint*) "gtk_args_query")
    (macro gtk_arg_name_strip_type::gchar* (gchar*) "gtk_arg_name_strip_type")
    (macro gtk_arg_info_equal::gint (gconstpointer gconstpointer) "gtk_arg_info_equal")
    (macro gtk_arg_info_hash::guint (gconstpointer) "gtk_arg_info_hash")
    (macro gtk_arg_to_valueloc::void (GtkArg* gpointer) "gtk_arg_to_valueloc")
    (macro gtk_object_get_type::GtkType () "gtk_object_get_type")
    (macro gtk_object_class_user_signal_new::guint (GtkObjectClass* gchar* GtkSignalRunType GtkSignalMarshaller GtkType guint . guint) "gtk_object_class_user_signal_new")
    (macro gtk_object_class_user_signal_newv::guint (GtkObjectClass* gchar* GtkSignalRunType GtkSignalMarshaller GtkType guint GtkType*) "gtk_object_class_user_signal_newv")
    (macro gtk_object_new::GtkObject* (GtkType gchar* . gchar*) "gtk_object_new")
    (macro gtk_object_newv::GtkObject* (GtkType guint GtkArg*) "gtk_object_newv")
    (macro gtk_object_default_construct::void (GtkObject*) "gtk_object_default_construct")
    (macro gtk_object_constructed::void (GtkObject*) "gtk_object_constructed")
    (macro gtk_object_sink::void (GtkObject*) "gtk_object_sink")
    (macro gtk_object_ref::void (GtkObject*) "gtk_object_ref")
    (macro gtk_object_unref::void (GtkObject*) "gtk_object_unref")
    (macro gtk_object_weakref::void (GtkObject* GtkDestroyNotify gpointer) "gtk_object_weakref")
    (macro gtk_object_weakunref::void (GtkObject* GtkDestroyNotify gpointer) "gtk_object_weakunref")
    (macro gtk_object_destroy::void (GtkObject*) "gtk_object_destroy")
    (macro gtk_object_getv::void (GtkObject* guint GtkArg*) "gtk_object_getv")
    (macro gtk_object_get::void (GtkObject* gchar* . gchar*) "gtk_object_get")
    (macro gtk_object_set::void (GtkObject* gchar* . gchar*) "gtk_object_set")
    (macro gtk_object_setv::void (GtkObject* guint GtkArg*) "gtk_object_setv")
    (macro gtk_object_query_args::GtkArg* (GtkType guint32** guint*) "gtk_object_query_args")
    (macro gtk_object_set_data::void (GtkObject* gchar* gpointer) "gtk_object_set_data")
    (macro gtk_object_set_data_full::void (GtkObject* gchar* gpointer GtkDestroyNotify) "gtk_object_set_data_full")
    (macro gtk_object_remove_data::void (GtkObject* gchar*) "gtk_object_remove_data")
    (macro gtk_object_get_data::gpointer (GtkObject* gchar*) "gtk_object_get_data")
    (macro gtk_object_remove_no_notify::void (GtkObject* gchar*) "gtk_object_remove_no_notify")
    (macro gtk_object_set_user_data::void (GtkObject* gpointer) "gtk_object_set_user_data")
    (macro gtk_object_get_user_data::gpointer (GtkObject*) "gtk_object_get_user_data")
    (macro gtk_object_class_add_signals::void (GtkObjectClass* guint* guint) "gtk_object_class_add_signals")
    (macro gtk_object_add_arg_type::void (gchar* GtkType guint guint) "gtk_object_add_arg_type")
    (macro gtk_object_set_data_by_id::void (GtkObject* GQuark gpointer) "gtk_object_set_data_by_id")
    (macro gtk_object_set_data_by_id_full::void (GtkObject* GQuark gpointer GtkDestroyNotify) "gtk_object_set_data_by_id_full")
    (macro gtk_object_get_data_by_id::gpointer (GtkObject* GQuark) "gtk_object_get_data_by_id")
    (macro gtk_object_remove_data_by_id::void (GtkObject* GQuark) "gtk_object_remove_data_by_id")
    (macro gtk_object_remove_no_notify_by_id::void (GtkObject* GQuark) "gtk_object_remove_no_notify_by_id")
    (macro gtk_object_arg_set::void (GtkObject* GtkArg* GtkArgInfo*) "gtk_object_arg_set")
    (macro gtk_object_arg_get::void (GtkObject* GtkArg* GtkArgInfo*) "gtk_object_arg_get")
    (macro gtk_object_args_collect::gchar* (GtkType GSList** GSList** gchar* va_list) "gtk_object_args_collect")
    (macro gtk_object_arg_get_info::gchar* (GtkType gchar* GtkArgInfo**) "gtk_object_arg_get_info")
    (macro gtk_trace_referencing::void (GtkObject* gchar* guint guint gboolean) "gtk_trace_referencing")
    (macro gtk_accelerator_valid::gboolean (guint GdkModifierType) "gtk_accelerator_valid")
    (macro gtk_accelerator_parse::void (gchar* guint* GdkModifierType*) "gtk_accelerator_parse")
    (macro gtk_accelerator_name::gchar* (guint GdkModifierType) "gtk_accelerator_name")
    (macro gtk_accelerator_set_default_mod_mask::void (GdkModifierType) "gtk_accelerator_set_default_mod_mask")
    (macro gtk_accelerator_get_default_mod_mask::guint () "gtk_accelerator_get_default_mod_mask")
    (macro gtk_accel_group_new::GtkAccelGroup* () "gtk_accel_group_new")
    (macro gtk_accel_group_get_default::GtkAccelGroup* () "gtk_accel_group_get_default")
    (macro gtk_accel_group_ref::GtkAccelGroup* (GtkAccelGroup*) "gtk_accel_group_ref")
    (macro gtk_accel_group_unref::void (GtkAccelGroup*) "gtk_accel_group_unref")
    (macro gtk_accel_group_lock::void (GtkAccelGroup*) "gtk_accel_group_lock")
    (macro gtk_accel_group_unlock::void (GtkAccelGroup*) "gtk_accel_group_unlock")
    (macro gtk_accel_groups_activate::gboolean (GtkObject* guint GdkModifierType) "gtk_accel_groups_activate")
    (macro gtk_accel_group_activate::gboolean (GtkAccelGroup* guint GdkModifierType) "gtk_accel_group_activate")
    (macro gtk_accel_group_attach::void (GtkAccelGroup* GtkObject*) "gtk_accel_group_attach")
    (macro gtk_accel_group_detach::void (GtkAccelGroup* GtkObject*) "gtk_accel_group_detach")
    (macro gtk_accel_group_get_entry::GtkAccelEntry* (GtkAccelGroup* guint GdkModifierType) "gtk_accel_group_get_entry")
    (macro gtk_accel_group_lock_entry::void (GtkAccelGroup* guint GdkModifierType) "gtk_accel_group_lock_entry")
    (macro gtk_accel_group_unlock_entry::void (GtkAccelGroup* guint GdkModifierType) "gtk_accel_group_unlock_entry")
    (macro gtk_accel_group_add::void (GtkAccelGroup* guint GdkModifierType GtkAccelFlags GtkObject* gchar*) "gtk_accel_group_add")
    (macro gtk_accel_group_remove::void (GtkAccelGroup* guint GdkModifierType GtkObject*) "gtk_accel_group_remove")
    (macro gtk_accel_group_handle_add::void (GtkObject* guint GtkAccelGroup* guint GdkModifierType GtkAccelFlags) "gtk_accel_group_handle_add")
    (macro gtk_accel_group_handle_remove::void (GtkObject* GtkAccelGroup* guint GdkModifierType) "gtk_accel_group_handle_remove")
    (macro gtk_accel_group_create_add::guint (GtkType GtkSignalRunType guint) "gtk_accel_group_create_add")
    (macro gtk_accel_group_create_remove::guint (GtkType GtkSignalRunType guint) "gtk_accel_group_create_remove")
    (macro gtk_accel_groups_from_object::GSList* (GtkObject*) "gtk_accel_groups_from_object")
    (macro gtk_accel_group_entries_from_object::GSList* (GtkObject*) "gtk_accel_group_entries_from_object")
    (macro gtk_data_get_type::GtkType () "gtk_data_get_type")
    (macro gtk_adjustment_get_type::GtkType () "gtk_adjustment_get_type")
    (macro gtk_adjustment_new::GtkObject* (gfloat gfloat gfloat gfloat gfloat gfloat) "gtk_adjustment_new")
    (macro gtk_adjustment_changed::void (GtkAdjustment*) "gtk_adjustment_changed")
    (macro gtk_adjustment_value_changed::void (GtkAdjustment*) "gtk_adjustment_value_changed")
    (macro gtk_adjustment_clamp_page::void (GtkAdjustment* gfloat gfloat) "gtk_adjustment_clamp_page")
    (macro gtk_adjustment_set_value::void (GtkAdjustment* gfloat) "gtk_adjustment_set_value")
    (macro gtk_style_new::GtkStyle* () "gtk_style_new")
    (macro gtk_style_copy::GtkStyle* (GtkStyle*) "gtk_style_copy")
    (macro gtk_style_attach::GtkStyle* (GtkStyle* GdkWindow*) "gtk_style_attach")
    (macro gtk_style_detach::void (GtkStyle*) "gtk_style_detach")
    (macro gtk_style_ref::GtkStyle* (GtkStyle*) "gtk_style_ref")
    (macro gtk_style_unref::void (GtkStyle*) "gtk_style_unref")
    (macro gtk_style_set_background::void (GtkStyle* GdkWindow* GtkStateType) "gtk_style_set_background")
    (macro gtk_style_apply_default_background::void (GtkStyle* GdkWindow* gboolean GtkStateType GdkRectangle* gint gint gint gint) "gtk_style_apply_default_background")
    (macro gtk_draw_hline::void (GtkStyle* GdkWindow* GtkStateType gint gint gint) "gtk_draw_hline")
    (macro gtk_draw_vline::void (GtkStyle* GdkWindow* GtkStateType gint gint gint) "gtk_draw_vline")
    (macro gtk_draw_shadow::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint) "gtk_draw_shadow")
    (macro gtk_draw_polygon::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkPoint* gint gboolean) "gtk_draw_polygon")
    (macro gtk_draw_arrow::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GtkArrowType gboolean gint gint gint gint) "gtk_draw_arrow")
    (macro gtk_draw_diamond::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint) "gtk_draw_diamond")
    (macro gtk_draw_oval::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint) "gtk_draw_oval")
    (macro gtk_draw_string::void (GtkStyle* GdkWindow* GtkStateType gint gint gchar*) "gtk_draw_string")
    (macro gtk_draw_box::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint) "gtk_draw_box")
    (macro gtk_draw_flat_box::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint) "gtk_draw_flat_box")
    (macro gtk_draw_check::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint) "gtk_draw_check")
    (macro gtk_draw_option::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint) "gtk_draw_option")
    (macro gtk_draw_cross::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint) "gtk_draw_cross")
    (macro gtk_draw_ramp::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GtkArrowType gint gint gint gint) "gtk_draw_ramp")
    (macro gtk_draw_tab::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint) "gtk_draw_tab")
    (macro gtk_draw_shadow_gap::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint GtkPositionType gint gint) "gtk_draw_shadow_gap")
    (macro gtk_draw_box_gap::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint GtkPositionType gint gint) "gtk_draw_box_gap")
    (macro gtk_draw_extension::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint GtkPositionType) "gtk_draw_extension")
    (macro gtk_draw_focus::void (GtkStyle* GdkWindow* gint gint gint gint) "gtk_draw_focus")
    (macro gtk_draw_slider::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint GtkOrientation) "gtk_draw_slider")
    (macro gtk_draw_handle::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType gint gint gint gint GtkOrientation) "gtk_draw_handle")
    (macro gtk_paint_hline::void (GtkStyle* GdkWindow* GtkStateType GdkRectangle* GtkWidget* gchar* gint gint gint) "gtk_paint_hline")
    (macro gtk_paint_vline::void (GtkStyle* GdkWindow* GtkStateType GdkRectangle* GtkWidget* gchar* gint gint gint) "gtk_paint_vline")
    (macro gtk_paint_shadow::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint) "gtk_paint_shadow")
    (macro gtk_paint_polygon::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* GdkPoint* gint gboolean) "gtk_paint_polygon")
    (macro gtk_paint_arrow::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* GtkArrowType gboolean gint gint gint gint) "gtk_paint_arrow")
    (macro gtk_paint_diamond::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint) "gtk_paint_diamond")
    (macro gtk_paint_oval::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint) "gtk_paint_oval")
    (macro gtk_paint_string::void (GtkStyle* GdkWindow* GtkStateType GdkRectangle* GtkWidget* gchar* gint gint gchar*) "gtk_paint_string")
    (macro gtk_paint_box::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint) "gtk_paint_box")
    (macro gtk_paint_flat_box::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint) "gtk_paint_flat_box")
    (macro gtk_paint_check::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint) "gtk_paint_check")
    (macro gtk_paint_option::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint) "gtk_paint_option")
    (macro gtk_paint_cross::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint) "gtk_paint_cross")
    (macro gtk_paint_ramp::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* GtkArrowType gint gint gint gint) "gtk_paint_ramp")
    (macro gtk_paint_tab::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint) "gtk_paint_tab")
    (macro gtk_paint_shadow_gap::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint GtkPositionType gint gint) "gtk_paint_shadow_gap")
    (macro gtk_paint_box_gap::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint GtkPositionType gint gint) "gtk_paint_box_gap")
    (macro gtk_paint_extension::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint GtkPositionType) "gtk_paint_extension")
    (macro gtk_paint_focus::void (GtkStyle* GdkWindow* GdkRectangle* GtkWidget* gchar* gint gint gint gint) "gtk_paint_focus")
    (macro gtk_paint_slider::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint GtkOrientation) "gtk_paint_slider")
    (macro gtk_paint_handle::void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint GtkOrientation) "gtk_paint_handle")
    (macro gtk_style_set_prop_experimental::void (GtkStyle* gchar* gint) "gtk_style_set_prop_experimental")
    (macro gtk_style_get_prop_experimental::gint (GtkStyle* gchar* gint) "gtk_style_get_prop_experimental")
    (macro gtk_widget_get_type::GtkType () "gtk_widget_get_type")
    (macro gtk_widget_new::GtkWidget* (GtkType gchar* . gchar*) "gtk_widget_new")
    (macro gtk_widget_newv::GtkWidget* (GtkType guint GtkArg*) "gtk_widget_newv")
    (macro gtk_widget_ref::void (GtkWidget*) "gtk_widget_ref")
    (macro gtk_widget_unref::void (GtkWidget*) "gtk_widget_unref")
    (macro gtk_widget_destroy::void (GtkWidget*) "gtk_widget_destroy")
    (macro gtk_widget_destroyed::void (GtkWidget* GtkWidget**) "gtk_widget_destroyed")
    (macro gtk_widget_get::void (GtkWidget* GtkArg*) "gtk_widget_get")
    (macro gtk_widget_getv::void (GtkWidget* guint GtkArg*) "gtk_widget_getv")
    (macro gtk_widget_set::void (GtkWidget* gchar* . gchar*) "gtk_widget_set")
    (macro gtk_widget_setv::void (GtkWidget* guint GtkArg*) "gtk_widget_setv")
    (macro gtk_widget_unparent::void (GtkWidget*) "gtk_widget_unparent")
    (macro gtk_widget_show::void (GtkWidget*) "gtk_widget_show")
    (macro gtk_widget_show_now::void (GtkWidget*) "gtk_widget_show_now")
    (macro gtk_widget_hide::void (GtkWidget*) "gtk_widget_hide")
    (macro gtk_widget_show_all::void (GtkWidget*) "gtk_widget_show_all")
    (macro gtk_widget_hide_all::void (GtkWidget*) "gtk_widget_hide_all")
    (macro gtk_widget_map::void (GtkWidget*) "gtk_widget_map")
    (macro gtk_widget_unmap::void (GtkWidget*) "gtk_widget_unmap")
    (macro gtk_widget_realize::void (GtkWidget*) "gtk_widget_realize")
    (macro gtk_widget_unrealize::void (GtkWidget*) "gtk_widget_unrealize")
    (macro gtk_widget_queue_draw::void (GtkWidget*) "gtk_widget_queue_draw")
    (macro gtk_widget_queue_draw_area::void (GtkWidget* gint gint gint gint) "gtk_widget_queue_draw_area")
    (macro gtk_widget_queue_clear::void (GtkWidget*) "gtk_widget_queue_clear")
    (macro gtk_widget_queue_clear_area::void (GtkWidget* gint gint gint gint) "gtk_widget_queue_clear_area")
    (macro gtk_widget_queue_resize::void (GtkWidget*) "gtk_widget_queue_resize")
    (macro gtk_widget_draw::void (GtkWidget* GdkRectangle*) "gtk_widget_draw")
    (macro gtk_widget_draw_focus::void (GtkWidget*) "gtk_widget_draw_focus")
    (macro gtk_widget_draw_default::void (GtkWidget*) "gtk_widget_draw_default")
    (macro gtk_widget_size_request::void (GtkWidget* GtkRequisition*) "gtk_widget_size_request")
    (macro gtk_widget_size_allocate::void (GtkWidget* GtkAllocation*) "gtk_widget_size_allocate")
    (macro gtk_widget_get_child_requisition::void (GtkWidget* GtkRequisition*) "gtk_widget_get_child_requisition")
    (macro gtk_widget_add_accelerator::void (GtkWidget* gchar* GtkAccelGroup* guint guint GtkAccelFlags) "gtk_widget_add_accelerator")
    (macro gtk_widget_remove_accelerator::void (GtkWidget* GtkAccelGroup* guint guint) "gtk_widget_remove_accelerator")
    (macro gtk_widget_remove_accelerators::void (GtkWidget* gchar* gboolean) "gtk_widget_remove_accelerators")
    (macro gtk_widget_accelerator_signal::guint (GtkWidget* GtkAccelGroup* guint guint) "gtk_widget_accelerator_signal")
    (macro gtk_widget_lock_accelerators::void (GtkWidget*) "gtk_widget_lock_accelerators")
    (macro gtk_widget_unlock_accelerators::void (GtkWidget*) "gtk_widget_unlock_accelerators")
    (macro gtk_widget_accelerators_locked::gboolean (GtkWidget*) "gtk_widget_accelerators_locked")
    (macro gtk_widget_event::gint (GtkWidget* GdkEvent*) "gtk_widget_event")
    (macro gtk_widget_activate::gboolean (GtkWidget*) "gtk_widget_activate")
    (macro gtk_widget_set_scroll_adjustments::gboolean (GtkWidget* GtkAdjustment* GtkAdjustment*) "gtk_widget_set_scroll_adjustments")
    (macro gtk_widget_reparent::void (GtkWidget* GtkWidget*) "gtk_widget_reparent")
    (macro gtk_widget_popup::void (GtkWidget* gint gint) "gtk_widget_popup")
    (macro gtk_widget_intersect::gint (GtkWidget* GdkRectangle* GdkRectangle*) "gtk_widget_intersect")
    (macro gtk_widget_grab_focus::void (GtkWidget*) "gtk_widget_grab_focus")
    (macro gtk_widget_grab_default::void (GtkWidget*) "gtk_widget_grab_default")
    (macro gtk_widget_set_name::void (GtkWidget* gchar*) "gtk_widget_set_name")
    (macro gtk_widget_get_name::gchar* (GtkWidget*) "gtk_widget_get_name")
    (macro gtk_widget_set_state::void (GtkWidget* GtkStateType) "gtk_widget_set_state")
    (macro gtk_widget_set_sensitive::void (GtkWidget* gboolean) "gtk_widget_set_sensitive")
    (macro gtk_widget_set_app_paintable::void (GtkWidget* gboolean) "gtk_widget_set_app_paintable")
    (macro gtk_widget_set_parent::void (GtkWidget* GtkWidget*) "gtk_widget_set_parent")
    (macro gtk_widget_set_parent_window::void (GtkWidget* GdkWindow*) "gtk_widget_set_parent_window")
    (macro gtk_widget_get_parent_window::GdkWindow* (GtkWidget*) "gtk_widget_get_parent_window")
    (macro gtk_widget_set_uposition::void (GtkWidget* gint gint) "gtk_widget_set_uposition")
    (macro gtk_widget_set_usize::void (GtkWidget* gint gint) "gtk_widget_set_usize")
    (macro gtk_widget_set_events::void (GtkWidget* gint) "gtk_widget_set_events")
    (macro gtk_widget_add_events::void (GtkWidget* gint) "gtk_widget_add_events")
    (macro gtk_widget_set_extension_events::void (GtkWidget* GdkExtensionMode) "gtk_widget_set_extension_events")
    (macro gtk_widget_get_extension_events::GdkExtensionMode (GtkWidget*) "gtk_widget_get_extension_events")
    (macro gtk_widget_get_toplevel::GtkWidget* (GtkWidget*) "gtk_widget_get_toplevel")
    (macro gtk_widget_get_ancestor::GtkWidget* (GtkWidget* GtkType) "gtk_widget_get_ancestor")
    (macro gtk_widget_get_colormap::GdkColormap* (GtkWidget*) "gtk_widget_get_colormap")
    (macro gtk_widget_get_visual::GdkVisual* (GtkWidget*) "gtk_widget_get_visual")
    (macro gtk_widget_set_colormap::void (GtkWidget* GdkColormap*) "gtk_widget_set_colormap")
    (macro gtk_widget_set_visual::void (GtkWidget* GdkVisual*) "gtk_widget_set_visual")
    (macro gtk_widget_get_events::gint (GtkWidget*) "gtk_widget_get_events")
    (macro gtk_widget_get_pointer::void (GtkWidget* gint* gint*) "gtk_widget_get_pointer")
    (macro gtk_widget_is_ancestor::gboolean (GtkWidget* GtkWidget*) "gtk_widget_is_ancestor")
    (macro gtk_widget_hide_on_delete::gint (GtkWidget*) "gtk_widget_hide_on_delete")
    (macro gtk_widget_set_style::void (GtkWidget* GtkStyle*) "gtk_widget_set_style")
    (macro gtk_widget_set_rc_style::void (GtkWidget*) "gtk_widget_set_rc_style")
    (macro gtk_widget_ensure_style::void (GtkWidget*) "gtk_widget_ensure_style")
    (macro gtk_widget_get_style::GtkStyle* (GtkWidget*) "gtk_widget_get_style")
    (macro gtk_widget_restore_default_style::void (GtkWidget*) "gtk_widget_restore_default_style")
    (macro gtk_widget_modify_style::void (GtkWidget* GtkRcStyle*) "gtk_widget_modify_style")
    (macro gtk_widget_set_composite_name::void (GtkWidget* gchar*) "gtk_widget_set_composite_name")
    (macro gtk_widget_get_composite_name::gchar* (GtkWidget*) "gtk_widget_get_composite_name")
    (macro gtk_widget_reset_rc_styles::void (GtkWidget*) "gtk_widget_reset_rc_styles")
    (macro gtk_widget_push_style::void (GtkStyle*) "gtk_widget_push_style")
    (macro gtk_widget_push_colormap::void (GdkColormap*) "gtk_widget_push_colormap")
    (macro gtk_widget_push_visual::void (GdkVisual*) "gtk_widget_push_visual")
    (macro gtk_widget_push_composite_child::void () "gtk_widget_push_composite_child")
    (macro gtk_widget_pop_composite_child::void () "gtk_widget_pop_composite_child")
    (macro gtk_widget_pop_style::void () "gtk_widget_pop_style")
    (macro gtk_widget_pop_colormap::void () "gtk_widget_pop_colormap")
    (macro gtk_widget_pop_visual::void () "gtk_widget_pop_visual")
    (macro gtk_widget_set_default_style::void (GtkStyle*) "gtk_widget_set_default_style")
    (macro gtk_widget_set_default_colormap::void (GdkColormap*) "gtk_widget_set_default_colormap")
    (macro gtk_widget_set_default_visual::void (GdkVisual*) "gtk_widget_set_default_visual")
    (macro gtk_widget_get_default_style::GtkStyle* () "gtk_widget_get_default_style")
    (macro gtk_widget_get_default_colormap::GdkColormap* () "gtk_widget_get_default_colormap")
    (macro gtk_widget_get_default_visual::GdkVisual* () "gtk_widget_get_default_visual")
    (macro gtk_widget_shape_combine_mask::void (GtkWidget* GdkBitmap* gint gint) "gtk_widget_shape_combine_mask")
    (macro gtk_widget_reset_shapes::void (GtkWidget*) "gtk_widget_reset_shapes")
    (macro gtk_widget_path::void (GtkWidget* guint* gchar** gchar**) "gtk_widget_path")
    (macro gtk_widget_class_path::void (GtkWidget* guint* gchar** gchar**) "gtk_widget_class_path")
    (macro gtk_misc_get_type::GtkType () "gtk_misc_get_type")
    (macro gtk_misc_set_alignment::void (GtkMisc* gfloat gfloat) "gtk_misc_set_alignment")
    (macro gtk_misc_set_padding::void (GtkMisc* gint gint) "gtk_misc_set_padding")
    (macro gtk_label_get_type::GtkType () "gtk_label_get_type")
    (macro gtk_label_new::GtkWidget* (gchar*) "gtk_label_new")
    (macro gtk_label_set_text::void (GtkLabel* gchar*) "gtk_label_set_text")
    (macro gtk_label_set_justify::void (GtkLabel* GtkJustification) "gtk_label_set_justify")
    (macro gtk_label_set_pattern::void (GtkLabel* gchar*) "gtk_label_set_pattern")
    (macro gtk_label_set_line_wrap::void (GtkLabel* gboolean) "gtk_label_set_line_wrap")
    (macro gtk_label_get::void (GtkLabel* gchar**) "gtk_label_get")
    (macro gtk_label_parse_uline::guint (GtkLabel* gchar*) "gtk_label_parse_uline")
    (macro gtk_accel_label_get_type::GtkType () "gtk_accel_label_get_type")
    (macro gtk_accel_label_new::GtkWidget* (gchar*) "gtk_accel_label_new")
    (macro gtk_accel_label_get_accel_width::guint (GtkAccelLabel*) "gtk_accel_label_get_accel_width")
    (macro gtk_accel_label_set_accel_widget::void (GtkAccelLabel* GtkWidget*) "gtk_accel_label_set_accel_widget")
    (macro gtk_accel_label_refetch::gboolean (GtkAccelLabel*) "gtk_accel_label_refetch")
    (macro gtk_container_get_type::GtkType () "gtk_container_get_type")
    (macro gtk_container_set_border_width::void (GtkContainer* guint) "gtk_container_set_border_width")
    (macro gtk_container_add::void (GtkContainer* GtkWidget*) "gtk_container_add")
    (macro gtk_container_remove::void (GtkContainer* GtkWidget*) "gtk_container_remove")
    (macro gtk_container_set_resize_mode::void (GtkContainer* GtkResizeMode) "gtk_container_set_resize_mode")
    (macro gtk_container_check_resize::void (GtkContainer*) "gtk_container_check_resize")
    (macro gtk_container_foreach::void (GtkContainer* GtkCallback gpointer) "gtk_container_foreach")
    (macro gtk_container_foreach_full::void (GtkContainer* GtkCallback GtkCallbackMarshal gpointer GtkDestroyNotify) "gtk_container_foreach_full")
    (macro gtk_container_children::GList* (GtkContainer*) "gtk_container_children")
    (macro gtk_container_focus::gint (GtkContainer* GtkDirectionType) "gtk_container_focus")
    (macro gtk_container_set_reallocate_redraws::void (GtkContainer* gboolean) "gtk_container_set_reallocate_redraws")
    (macro gtk_container_set_focus_child::void (GtkContainer* GtkWidget*) "gtk_container_set_focus_child")
    (macro gtk_container_set_focus_vadjustment::void (GtkContainer* GtkAdjustment*) "gtk_container_set_focus_vadjustment")
    (macro gtk_container_set_focus_hadjustment::void (GtkContainer* GtkAdjustment*) "gtk_container_set_focus_hadjustment")
    (macro gtk_container_register_toplevel::void (GtkContainer*) "gtk_container_register_toplevel")
    (macro gtk_container_unregister_toplevel::void (GtkContainer*) "gtk_container_unregister_toplevel")
    (macro gtk_container_get_toplevels::GList* () "gtk_container_get_toplevels")
    (macro gtk_container_resize_children::void (GtkContainer*) "gtk_container_resize_children")
    (macro gtk_container_child_type::GtkType (GtkContainer*) "gtk_container_child_type")
    (macro gtk_container_add_child_arg_type::void (gchar* GtkType guint guint) "gtk_container_add_child_arg_type")
    (macro gtk_container_query_child_args::GtkArg* (GtkType guint32** guint*) "gtk_container_query_child_args")
    (macro gtk_container_child_getv::void (GtkContainer* GtkWidget* guint GtkArg*) "gtk_container_child_getv")
    (macro gtk_container_child_setv::void (GtkContainer* GtkWidget* guint GtkArg*) "gtk_container_child_setv")
    (macro gtk_container_add_with_args::void (GtkContainer* GtkWidget* gchar* . gchar*) "gtk_container_add_with_args")
    (macro gtk_container_addv::void (GtkContainer* GtkWidget* guint GtkArg*) "gtk_container_addv")
    (macro gtk_container_child_set::void (GtkContainer* GtkWidget* gchar* . gchar*) "gtk_container_child_set")
    (macro gtk_container_queue_resize::void (GtkContainer*) "gtk_container_queue_resize")
    (macro gtk_container_clear_resize_widgets::void (GtkContainer*) "gtk_container_clear_resize_widgets")
    (macro gtk_container_arg_set::void (GtkContainer* GtkWidget* GtkArg* GtkArgInfo*) "gtk_container_arg_set")
    (macro gtk_container_arg_get::void (GtkContainer* GtkWidget* GtkArg* GtkArgInfo*) "gtk_container_arg_get")
    (macro gtk_container_child_args_collect::gchar* (GtkType GSList** GSList** gchar* va_list) "gtk_container_child_args_collect")
    (macro gtk_container_child_arg_get_info::gchar* (GtkType gchar* GtkArgInfo**) "gtk_container_child_arg_get_info")
    (macro gtk_container_forall::void (GtkContainer* GtkCallback gpointer) "gtk_container_forall")
    (macro gtk_container_child_composite_name::gchar* (GtkContainer* GtkWidget*) "gtk_container_child_composite_name")
    (macro gtk_container_dequeue_resize_handler::void (GtkContainer*) "gtk_container_dequeue_resize_handler")
    (macro gtk_bin_get_type::GtkType () "gtk_bin_get_type")
    (macro gtk_alignment_get_type::GtkType () "gtk_alignment_get_type")
    (macro gtk_alignment_new::GtkWidget* (gfloat gfloat gfloat gfloat) "gtk_alignment_new")
    (macro gtk_alignment_set::void (GtkAlignment* gfloat gfloat gfloat gfloat) "gtk_alignment_set")
    (macro gtk_frame_get_type::GtkType () "gtk_frame_get_type")
    (macro gtk_frame_new::GtkWidget* (gchar*) "gtk_frame_new")
    (macro gtk_frame_set_label::void (GtkFrame* gchar*) "gtk_frame_set_label")
    (macro gtk_frame_set_label_align::void (GtkFrame* gfloat gfloat) "gtk_frame_set_label_align")
    (macro gtk_frame_set_shadow_type::void (GtkFrame* GtkShadowType) "gtk_frame_set_shadow_type")
    (macro gtk_aspect_frame_get_type::GtkType () "gtk_aspect_frame_get_type")
    (macro gtk_aspect_frame_new::GtkWidget* (gchar* gfloat gfloat gfloat gboolean) "gtk_aspect_frame_new")
    (macro gtk_aspect_frame_set::void (GtkAspectFrame* gfloat gfloat gfloat gboolean) "gtk_aspect_frame_set")
    (macro gtk_arrow_get_type::GtkType () "gtk_arrow_get_type")
    (macro gtk_arrow_new::GtkWidget* (GtkArrowType GtkShadowType) "gtk_arrow_new")
    (macro gtk_arrow_set::void (GtkArrow* GtkArrowType GtkShadowType) "gtk_arrow_set")
    (macro gtk_pattern_spec_init::void (GtkPatternSpec* gchar*) "gtk_pattern_spec_init")
    (macro gtk_pattern_spec_free_segs::void (GtkPatternSpec*) "gtk_pattern_spec_free_segs")
    (macro gtk_pattern_match::gboolean (GtkPatternSpec* guint gchar* gchar*) "gtk_pattern_match")
    (macro gtk_pattern_match_string::gboolean (GtkPatternSpec* gchar*) "gtk_pattern_match_string")
    (macro gtk_pattern_match_simple::gboolean (gchar* gchar*) "gtk_pattern_match_simple")
    (macro gtk_binding_set_new::GtkBindingSet* (gchar*) "gtk_binding_set_new")
    (macro gtk_binding_set_by_class::GtkBindingSet* (gpointer) "gtk_binding_set_by_class")
    (macro gtk_binding_set_find::GtkBindingSet* (gchar*) "gtk_binding_set_find")
    (macro gtk_bindings_activate::gboolean (GtkObject* guint guint) "gtk_bindings_activate")
    (macro gtk_binding_set_activate::gboolean (GtkBindingSet* guint guint GtkObject*) "gtk_binding_set_activate")
    (macro gtk_binding_entry_clear::void (GtkBindingSet* guint guint) "gtk_binding_entry_clear")
    (macro gtk_binding_entry_add_signal::void (GtkBindingSet* guint guint gchar* guint . guint) "gtk_binding_entry_add_signal")
    (macro gtk_binding_set_add_path::void (GtkBindingSet* GtkPathType gchar* GtkPathPriorityType) "gtk_binding_set_add_path")
    (macro gtk_binding_entry_remove::void (GtkBindingSet* guint guint) "gtk_binding_entry_remove")
    (macro gtk_binding_entry_add_signall::void (GtkBindingSet* guint guint gchar* GSList*) "gtk_binding_entry_add_signall")
    (macro gtk_binding_parse_binding::guint (GScanner*) "gtk_binding_parse_binding")
    (macro gtk_box_get_type::GtkType () "gtk_box_get_type")
    (macro gtk_box_pack_start::void (GtkBox* GtkWidget* gboolean gboolean guint) "gtk_box_pack_start")
    (macro gtk_box_pack_end::void (GtkBox* GtkWidget* gboolean gboolean guint) "gtk_box_pack_end")
    (macro gtk_box_pack_start_defaults::void (GtkBox* GtkWidget*) "gtk_box_pack_start_defaults")
    (macro gtk_box_pack_end_defaults::void (GtkBox* GtkWidget*) "gtk_box_pack_end_defaults")
    (macro gtk_box_set_homogeneous::void (GtkBox* gboolean) "gtk_box_set_homogeneous")
    (macro gtk_box_set_spacing::void (GtkBox* gint) "gtk_box_set_spacing")
    (macro gtk_box_reorder_child::void (GtkBox* GtkWidget* gint) "gtk_box_reorder_child")
    (macro gtk_box_query_child_packing::void (GtkBox* GtkWidget* gboolean* gboolean* guint* GtkPackType*) "gtk_box_query_child_packing")
    (macro gtk_box_set_child_packing::void (GtkBox* GtkWidget* gboolean gboolean guint GtkPackType) "gtk_box_set_child_packing")
    (macro gtk_button_box_get_type::GtkType () "gtk_button_box_get_type")
    (macro gtk_button_box_get_child_size_default::void (gint* gint*) "gtk_button_box_get_child_size_default")
    (macro gtk_button_box_get_child_ipadding_default::void (gint* gint*) "gtk_button_box_get_child_ipadding_default")
    (macro gtk_button_box_set_child_size_default::void (gint gint) "gtk_button_box_set_child_size_default")
    (macro gtk_button_box_set_child_ipadding_default::void (gint gint) "gtk_button_box_set_child_ipadding_default")
    (macro gtk_button_box_get_spacing::gint (GtkButtonBox*) "gtk_button_box_get_spacing")
    (macro gtk_button_box_get_layout::GtkButtonBoxStyle (GtkButtonBox*) "gtk_button_box_get_layout")
    (macro gtk_button_box_get_child_size::void (GtkButtonBox* gint* gint*) "gtk_button_box_get_child_size")
    (macro gtk_button_box_get_child_ipadding::void (GtkButtonBox* gint* gint*) "gtk_button_box_get_child_ipadding")
    (macro gtk_button_box_set_spacing::void (GtkButtonBox* gint) "gtk_button_box_set_spacing")
    (macro gtk_button_box_set_layout::void (GtkButtonBox* GtkButtonBoxStyle) "gtk_button_box_set_layout")
    (macro gtk_button_box_set_child_size::void (GtkButtonBox* gint gint) "gtk_button_box_set_child_size")
    (macro gtk_button_box_set_child_ipadding::void (GtkButtonBox* gint gint) "gtk_button_box_set_child_ipadding")
    (macro gtk_button_box_child_requisition::void (GtkWidget* int* int* int*) "gtk_button_box_child_requisition")
    (macro gtk_button_get_type::GtkType () "gtk_button_get_type")
    (macro gtk_button_new::GtkWidget* () "gtk_button_new")
    (macro gtk_button_new_with_label::GtkWidget* (gchar*) "gtk_button_new_with_label")
    (macro gtk_button_pressed::void (GtkButton*) "gtk_button_pressed")
    (macro gtk_button_released::void (GtkButton*) "gtk_button_released")
    (macro gtk_button_clicked::void (GtkButton*) "gtk_button_clicked")
    (macro gtk_button_enter::void (GtkButton*) "gtk_button_enter")
    (macro gtk_button_leave::void (GtkButton*) "gtk_button_leave")
    (macro gtk_button_set_relief::void (GtkButton* GtkReliefStyle) "gtk_button_set_relief")
    (macro gtk_button_get_relief::GtkReliefStyle (GtkButton*) "gtk_button_get_relief")
    (macro gtk_marshal_BOOL__NONE::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_BOOL__NONE")
    (macro gtk_marshal_BOOL__POINTER::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_BOOL__POINTER")
    (macro gtk_marshal_BOOL__POINTER_POINTER_INT_INT::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_BOOL__POINTER_POINTER_INT_INT")
    (macro gtk_marshal_BOOL__POINTER_INT_INT::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_BOOL__POINTER_INT_INT")
    (macro gtk_marshal_BOOL__POINTER_INT_INT_INT::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_BOOL__POINTER_INT_INT_INT")
    (macro gtk_marshal_BOOL__POINTER_POINTER_POINTER_POINTER::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_BOOL__POINTER_POINTER_POINTER_POINTER")
    (macro gtk_marshal_INT__INT::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_INT__INT")
    (macro gtk_marshal_INT__POINTER::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_INT__POINTER")
    (macro gtk_marshal_INT__POINTER_CHAR_CHAR::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_INT__POINTER_CHAR_CHAR")
    (macro gtk_marshal_NONE__BOOL::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__BOOL")
    (macro gtk_marshal_NONE__POINTER::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__POINTER")
    (macro gtk_marshal_NONE__C_CALLBACK::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__C_CALLBACK")
    (macro gtk_marshal_NONE__C_CALLBACK_C_CALLBACK::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__C_CALLBACK_C_CALLBACK")
    (macro gtk_marshal_NONE__INT::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__INT")
    (macro gtk_marshal_NONE__INT_FLOAT::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__INT_FLOAT")
    (macro gtk_marshal_NONE__INT_FLOAT_BOOL::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__INT_FLOAT_BOOL")
    (macro gtk_marshal_NONE__INT_INT::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__INT_INT")
    (macro gtk_marshal_NONE__INT_INT_POINTER::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__INT_INT_POINTER")
    (macro gtk_marshal_NONE__NONE::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__NONE")
    (macro gtk_marshal_NONE__POINTER_INT::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__POINTER_INT")
    (macro gtk_marshal_NONE__POINTER_POINTER::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__POINTER_POINTER")
    (macro gtk_marshal_NONE__POINTER_POINTER_POINTER::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__POINTER_POINTER_POINTER")
    (macro gtk_marshal_NONE__POINTER_INT_INT::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__POINTER_INT_INT")
    (macro gtk_marshal_NONE__POINTER_POINTER_INT_INT::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__POINTER_POINTER_INT_INT")
    (macro gtk_marshal_NONE__POINTER_INT_INT_POINTER_INT_INT::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__POINTER_INT_INT_POINTER_INT_INT")
    (macro gtk_marshal_NONE__POINTER_INT_POINTER::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__POINTER_INT_POINTER")
    (macro gtk_marshal_NONE__INT_POINTER_INT_INT_INT_POINTER::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__INT_POINTER_INT_INT_INT_POINTER")
    (macro gtk_marshal_NONE__INT_POINTER_INT_INT_INT::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__INT_POINTER_INT_INT_INT")
    (macro gtk_marshal_NONE__INT_POINTER::void (GtkObject* GtkSignalFunc gpointer GtkArg*) "gtk_marshal_NONE__INT_POINTER")
    (macro gtk_signal_lookup::guint (gchar* GtkType) "gtk_signal_lookup")
    (macro gtk_signal_name::gchar* (guint) "gtk_signal_name")
    (macro gtk_signal_n_emissions::guint (GtkObject* guint) "gtk_signal_n_emissions")
    (macro gtk_signal_n_emissions_by_name::guint (GtkObject* gchar*) "gtk_signal_n_emissions_by_name")
    (macro gtk_signal_emit_stop::void (GtkObject* guint) "gtk_signal_emit_stop")
    (macro gtk_signal_emit_stop_by_name::void (GtkObject* gchar*) "gtk_signal_emit_stop_by_name")
    (macro gtk_signal_connect::guint (GtkObject* gchar* GtkSignalFunc gpointer) "gtk_signal_connect")
    (macro gtk_signal_connect_after::guint (GtkObject* gchar* GtkSignalFunc gpointer) "gtk_signal_connect_after")
    (macro gtk_signal_connect_object::guint (GtkObject* gchar* GtkSignalFunc GtkObject*) "gtk_signal_connect_object")
    (macro gtk_signal_connect_object_after::guint (GtkObject* gchar* GtkSignalFunc GtkObject*) "gtk_signal_connect_object_after")
    (macro gtk_signal_connect_full::guint (GtkObject* gchar* GtkSignalFunc GtkCallbackMarshal gpointer GtkDestroyNotify gint gint) "gtk_signal_connect_full")
    (macro gtk_signal_connect_object_while_alive::void (GtkObject* gchar* GtkSignalFunc GtkObject*) "gtk_signal_connect_object_while_alive")
    (macro gtk_signal_connect_while_alive::void (GtkObject* gchar* GtkSignalFunc gpointer GtkObject*) "gtk_signal_connect_while_alive")
    (macro gtk_signal_disconnect::void (GtkObject* guint) "gtk_signal_disconnect")
    (macro gtk_signal_disconnect_by_func::void (GtkObject* GtkSignalFunc gpointer) "gtk_signal_disconnect_by_func")
    (macro gtk_signal_disconnect_by_data::void (GtkObject* gpointer) "gtk_signal_disconnect_by_data")
    (macro gtk_signal_handler_block::void (GtkObject* guint) "gtk_signal_handler_block")
    (macro gtk_signal_handler_block_by_func::void (GtkObject* GtkSignalFunc gpointer) "gtk_signal_handler_block_by_func")
    (macro gtk_signal_handler_block_by_data::void (GtkObject* gpointer) "gtk_signal_handler_block_by_data")
    (macro gtk_signal_handler_unblock::void (GtkObject* guint) "gtk_signal_handler_unblock")
    (macro gtk_signal_handler_unblock_by_func::void (GtkObject* GtkSignalFunc gpointer) "gtk_signal_handler_unblock_by_func")
    (macro gtk_signal_handler_unblock_by_data::void (GtkObject* gpointer) "gtk_signal_handler_unblock_by_data")
    (macro gtk_signal_handler_pending::guint (GtkObject* guint gboolean) "gtk_signal_handler_pending")
    (macro gtk_signal_handler_pending_by_func::guint (GtkObject* guint gboolean GtkSignalFunc gpointer) "gtk_signal_handler_pending_by_func")
    (macro gtk_signal_handler_pending_by_id::gint (GtkObject* guint gboolean) "gtk_signal_handler_pending_by_id")
    (macro gtk_signal_add_emission_hook::guint (guint GtkEmissionHook gpointer) "gtk_signal_add_emission_hook")
    (macro gtk_signal_add_emission_hook_full::guint (guint GtkEmissionHook gpointer GDestroyNotify) "gtk_signal_add_emission_hook_full")
    (macro gtk_signal_remove_emission_hook::void (guint guint) "gtk_signal_remove_emission_hook")
    (macro gtk_signal_query::GtkSignalQuery* (guint) "gtk_signal_query")
    (macro gtk_signal_init::void () "gtk_signal_init")
    (macro gtk_signal_new::guint (gchar* GtkSignalRunType GtkType guint GtkSignalMarshaller GtkType guint . guint) "gtk_signal_new")
    (macro gtk_signal_newv::guint (gchar* GtkSignalRunType GtkType guint GtkSignalMarshaller GtkType guint GtkType*) "gtk_signal_newv")
    (macro gtk_signal_emit::void (GtkObject* guint . guint) "gtk_signal_emit")
    (macro gtk_signal_emit_by_name::void (GtkObject* gchar* . gchar*) "gtk_signal_emit_by_name")
    (macro gtk_signal_emitv::void (GtkObject* guint GtkArg*) "gtk_signal_emitv")
    (macro gtk_signal_emitv_by_name::void (GtkObject* gchar* GtkArg*) "gtk_signal_emitv_by_name")
    (macro gtk_signal_handlers_destroy::void (GtkObject*) "gtk_signal_handlers_destroy")
    (macro gtk_signal_set_funcs::void (GtkSignalMarshal GtkSignalDestroy) "gtk_signal_set_funcs")
    (macro gtk_calendar_get_type::GtkType () "gtk_calendar_get_type")
    (macro gtk_calendar_new::GtkWidget* () "gtk_calendar_new")
    (macro gtk_calendar_select_month::gint (GtkCalendar* guint guint) "gtk_calendar_select_month")
    (macro gtk_calendar_select_day::void (GtkCalendar* guint) "gtk_calendar_select_day")
    (macro gtk_calendar_mark_day::gint (GtkCalendar* guint) "gtk_calendar_mark_day")
    (macro gtk_calendar_unmark_day::gint (GtkCalendar* guint) "gtk_calendar_unmark_day")
    (macro gtk_calendar_clear_marks::void (GtkCalendar*) "gtk_calendar_clear_marks")
    (macro gtk_calendar_display_options::void (GtkCalendar* GtkCalendarDisplayOptions) "gtk_calendar_display_options")
    (macro gtk_calendar_get_date::void (GtkCalendar* guint* guint* guint*) "gtk_calendar_get_date")
    (macro gtk_calendar_freeze::void (GtkCalendar*) "gtk_calendar_freeze")
    (macro gtk_calendar_thaw::void (GtkCalendar*) "gtk_calendar_thaw")
    (macro gtk_toggle_button_get_type::GtkType () "gtk_toggle_button_get_type")
    (macro gtk_toggle_button_new::GtkWidget* () "gtk_toggle_button_new")
    (macro gtk_toggle_button_new_with_label::GtkWidget* (gchar*) "gtk_toggle_button_new_with_label")
    (macro gtk_toggle_button_set_mode::void (GtkToggleButton* gboolean) "gtk_toggle_button_set_mode")
    (macro gtk_toggle_button_set_active::void (GtkToggleButton* gboolean) "gtk_toggle_button_set_active")
    (macro gtk_toggle_button_get_active::gboolean (GtkToggleButton*) "gtk_toggle_button_get_active")
    (macro gtk_toggle_button_toggled::void (GtkToggleButton*) "gtk_toggle_button_toggled")
    (macro gtk_check_button_get_type::GtkType () "gtk_check_button_get_type")
    (macro gtk_check_button_new::GtkWidget* () "gtk_check_button_new")
    (macro gtk_check_button_new_with_label::GtkWidget* (gchar*) "gtk_check_button_new_with_label")
    (macro _gtk_check_button_get_props::void (GtkCheckButton* gint* gint*) "_gtk_check_button_get_props")
    (macro gtk_item_get_type::GtkType () "gtk_item_get_type")
    (macro gtk_item_select::void (GtkItem*) "gtk_item_select")
    (macro gtk_item_deselect::void (GtkItem*) "gtk_item_deselect")
    (macro gtk_item_toggle::void (GtkItem*) "gtk_item_toggle")
    (macro gtk_menu_item_get_type::GtkType () "gtk_menu_item_get_type")
    (macro gtk_menu_item_new::GtkWidget* () "gtk_menu_item_new")
    (macro gtk_menu_item_new_with_label::GtkWidget* (gchar*) "gtk_menu_item_new_with_label")
    (macro gtk_menu_item_set_submenu::void (GtkMenuItem* GtkWidget*) "gtk_menu_item_set_submenu")
    (macro gtk_menu_item_remove_submenu::void (GtkMenuItem*) "gtk_menu_item_remove_submenu")
    (macro gtk_menu_item_set_placement::void (GtkMenuItem* GtkSubmenuPlacement) "gtk_menu_item_set_placement")
    (macro gtk_menu_item_configure::void (GtkMenuItem* gint gint) "gtk_menu_item_configure")
    (macro gtk_menu_item_select::void (GtkMenuItem*) "gtk_menu_item_select")
    (macro gtk_menu_item_deselect::void (GtkMenuItem*) "gtk_menu_item_deselect")
    (macro gtk_menu_item_activate::void (GtkMenuItem*) "gtk_menu_item_activate")
    (macro gtk_menu_item_right_justify::void (GtkMenuItem*) "gtk_menu_item_right_justify")
    (macro gtk_check_menu_item_get_type::GtkType () "gtk_check_menu_item_get_type")
    (macro gtk_check_menu_item_new::GtkWidget* () "gtk_check_menu_item_new")
    (macro gtk_check_menu_item_new_with_label::GtkWidget* (gchar*) "gtk_check_menu_item_new_with_label")
    (macro gtk_check_menu_item_set_active::void (GtkCheckMenuItem* gboolean) "gtk_check_menu_item_set_active")
    (macro gtk_check_menu_item_set_show_toggle::void (GtkCheckMenuItem* gboolean) "gtk_check_menu_item_set_show_toggle")
    (macro gtk_check_menu_item_toggled::void (GtkCheckMenuItem*) "gtk_check_menu_item_toggled")
    (macro gtk_range_get_type::GtkType () "gtk_range_get_type")
    (macro gtk_range_get_adjustment::GtkAdjustment* (GtkRange*) "gtk_range_get_adjustment")
    (macro gtk_range_set_update_policy::void (GtkRange* GtkUpdateType) "gtk_range_set_update_policy")
    (macro gtk_range_set_adjustment::void (GtkRange* GtkAdjustment*) "gtk_range_set_adjustment")
    (macro gtk_range_draw_background::void (GtkRange*) "gtk_range_draw_background")
    (macro gtk_range_clear_background::void (GtkRange*) "gtk_range_clear_background")
    (macro gtk_range_draw_trough::void (GtkRange*) "gtk_range_draw_trough")
    (macro gtk_range_draw_slider::void (GtkRange*) "gtk_range_draw_slider")
    (macro gtk_range_draw_step_forw::void (GtkRange*) "gtk_range_draw_step_forw")
    (macro gtk_range_draw_step_back::void (GtkRange*) "gtk_range_draw_step_back")
    (macro gtk_range_slider_update::void (GtkRange*) "gtk_range_slider_update")
    (macro gtk_range_trough_click::gint (GtkRange* gint gint gfloat*) "gtk_range_trough_click")
    (macro gtk_range_default_hslider_update::void (GtkRange*) "gtk_range_default_hslider_update")
    (macro gtk_range_default_vslider_update::void (GtkRange*) "gtk_range_default_vslider_update")
    (macro gtk_range_default_htrough_click::gint (GtkRange* gint gint gfloat*) "gtk_range_default_htrough_click")
    (macro gtk_range_default_vtrough_click::gint (GtkRange* gint gint gfloat*) "gtk_range_default_vtrough_click")
    (macro gtk_range_default_hmotion::void (GtkRange* gint gint) "gtk_range_default_hmotion")
    (macro gtk_range_default_vmotion::void (GtkRange* gint gint) "gtk_range_default_vmotion")
    (macro _gtk_range_get_props::void (GtkRange* gint* gint* gint* gint*) "_gtk_range_get_props")
    (macro gtk_scrollbar_get_type::GtkType () "gtk_scrollbar_get_type")
    (macro gtk_hscrollbar_get_type::GtkType () "gtk_hscrollbar_get_type")
    (macro gtk_hscrollbar_new::GtkWidget* (GtkAdjustment*) "gtk_hscrollbar_new")
    (macro gtk_vscrollbar_get_type::GtkType () "gtk_vscrollbar_get_type")
    (macro gtk_vscrollbar_new::GtkWidget* (GtkAdjustment*) "gtk_vscrollbar_new")
    (macro gtk_clist_get_type::GtkType () "gtk_clist_get_type")
    (macro gtk_clist_construct::void (GtkCList* gint gchar**) "gtk_clist_construct")
    (macro gtk_clist_new::GtkWidget* (gint) "gtk_clist_new")
    (macro gtk_clist_new_with_titles::GtkWidget* (gint gchar**) "gtk_clist_new_with_titles")
    (macro gtk_clist_set_hadjustment::void (GtkCList* GtkAdjustment*) "gtk_clist_set_hadjustment")
    (macro gtk_clist_set_vadjustment::void (GtkCList* GtkAdjustment*) "gtk_clist_set_vadjustment")
    (macro gtk_clist_get_hadjustment::GtkAdjustment* (GtkCList*) "gtk_clist_get_hadjustment")
    (macro gtk_clist_get_vadjustment::GtkAdjustment* (GtkCList*) "gtk_clist_get_vadjustment")
    (macro gtk_clist_set_shadow_type::void (GtkCList* GtkShadowType) "gtk_clist_set_shadow_type")
    (macro gtk_clist_set_selection_mode::void (GtkCList* GtkSelectionMode) "gtk_clist_set_selection_mode")
    (macro gtk_clist_set_reorderable::void (GtkCList* gboolean) "gtk_clist_set_reorderable")
    (macro gtk_clist_set_use_drag_icons::void (GtkCList* gboolean) "gtk_clist_set_use_drag_icons")
    (macro gtk_clist_set_button_actions::void (GtkCList* guint guint8) "gtk_clist_set_button_actions")
    (macro gtk_clist_freeze::void (GtkCList*) "gtk_clist_freeze")
    (macro gtk_clist_thaw::void (GtkCList*) "gtk_clist_thaw")
    (macro gtk_clist_column_titles_show::void (GtkCList*) "gtk_clist_column_titles_show")
    (macro gtk_clist_column_titles_hide::void (GtkCList*) "gtk_clist_column_titles_hide")
    (macro gtk_clist_column_title_active::void (GtkCList* gint) "gtk_clist_column_title_active")
    (macro gtk_clist_column_title_passive::void (GtkCList* gint) "gtk_clist_column_title_passive")
    (macro gtk_clist_column_titles_active::void (GtkCList*) "gtk_clist_column_titles_active")
    (macro gtk_clist_column_titles_passive::void (GtkCList*) "gtk_clist_column_titles_passive")
    (macro gtk_clist_set_column_title::void (GtkCList* gint gchar*) "gtk_clist_set_column_title")
    (macro gtk_clist_get_column_title::gchar* (GtkCList* gint) "gtk_clist_get_column_title")
    (macro gtk_clist_set_column_widget::void (GtkCList* gint GtkWidget*) "gtk_clist_set_column_widget")
    (macro gtk_clist_get_column_widget::GtkWidget* (GtkCList* gint) "gtk_clist_get_column_widget")
    (macro gtk_clist_set_column_justification::void (GtkCList* gint GtkJustification) "gtk_clist_set_column_justification")
    (macro gtk_clist_set_column_visibility::void (GtkCList* gint gboolean) "gtk_clist_set_column_visibility")
    (macro gtk_clist_set_column_resizeable::void (GtkCList* gint gboolean) "gtk_clist_set_column_resizeable")
    (macro gtk_clist_set_column_auto_resize::void (GtkCList* gint gboolean) "gtk_clist_set_column_auto_resize")
    (macro gtk_clist_columns_autosize::gint (GtkCList*) "gtk_clist_columns_autosize")
    (macro gtk_clist_optimal_column_width::gint (GtkCList* gint) "gtk_clist_optimal_column_width")
    (macro gtk_clist_set_column_width::void (GtkCList* gint gint) "gtk_clist_set_column_width")
    (macro gtk_clist_set_column_min_width::void (GtkCList* gint gint) "gtk_clist_set_column_min_width")
    (macro gtk_clist_set_column_max_width::void (GtkCList* gint gint) "gtk_clist_set_column_max_width")
    (macro gtk_clist_set_row_height::void (GtkCList* guint) "gtk_clist_set_row_height")
    (macro gtk_clist_moveto::void (GtkCList* gint gint gfloat gfloat) "gtk_clist_moveto")
    (macro gtk_clist_row_is_visible::GtkVisibility (GtkCList* gint) "gtk_clist_row_is_visible")
    (macro gtk_clist_get_cell_type::GtkCellType (GtkCList* gint gint) "gtk_clist_get_cell_type")
    (macro gtk_clist_set_text::void (GtkCList* gint gint gchar*) "gtk_clist_set_text")
    (macro gtk_clist_get_text::gint (GtkCList* gint gint gchar**) "gtk_clist_get_text")
    (macro gtk_clist_set_pixmap::void (GtkCList* gint gint GdkPixmap* GdkBitmap*) "gtk_clist_set_pixmap")
    (macro gtk_clist_get_pixmap::gint (GtkCList* gint gint GdkPixmap** GdkBitmap**) "gtk_clist_get_pixmap")
    (macro gtk_clist_set_pixtext::void (GtkCList* gint gint gchar* guint8 GdkPixmap* GdkBitmap*) "gtk_clist_set_pixtext")
    (macro gtk_clist_get_pixtext::gint (GtkCList* gint gint gchar** guint8* GdkPixmap** GdkBitmap**) "gtk_clist_get_pixtext")
    (macro gtk_clist_set_foreground::void (GtkCList* gint GdkColor*) "gtk_clist_set_foreground")
    (macro gtk_clist_set_background::void (GtkCList* gint GdkColor*) "gtk_clist_set_background")
    (macro gtk_clist_set_cell_style::void (GtkCList* gint gint GtkStyle*) "gtk_clist_set_cell_style")
    (macro gtk_clist_get_cell_style::GtkStyle* (GtkCList* gint gint) "gtk_clist_get_cell_style")
    (macro gtk_clist_set_row_style::void (GtkCList* gint GtkStyle*) "gtk_clist_set_row_style")
    (macro gtk_clist_get_row_style::GtkStyle* (GtkCList* gint) "gtk_clist_get_row_style")
    (macro gtk_clist_set_shift::void (GtkCList* gint gint gint gint) "gtk_clist_set_shift")
    (macro gtk_clist_set_selectable::void (GtkCList* gint gboolean) "gtk_clist_set_selectable")
    (macro gtk_clist_get_selectable::gboolean (GtkCList* gint) "gtk_clist_get_selectable")
    (macro gtk_clist_prepend::gint (GtkCList* gchar**) "gtk_clist_prepend")
    (macro gtk_clist_append::gint (GtkCList* gchar**) "gtk_clist_append")
    (macro gtk_clist_insert::gint (GtkCList* gint gchar**) "gtk_clist_insert")
    (macro gtk_clist_remove::void (GtkCList* gint) "gtk_clist_remove")
    (macro gtk_clist_set_row_data::void (GtkCList* gint gpointer) "gtk_clist_set_row_data")
    (macro gtk_clist_set_row_data_full::void (GtkCList* gint gpointer GtkDestroyNotify) "gtk_clist_set_row_data_full")
    (macro gtk_clist_get_row_data::gpointer (GtkCList* gint) "gtk_clist_get_row_data")
    (macro gtk_clist_find_row_from_data::gint (GtkCList* gpointer) "gtk_clist_find_row_from_data")
    (macro gtk_clist_select_row::void (GtkCList* gint gint) "gtk_clist_select_row")
    (macro gtk_clist_unselect_row::void (GtkCList* gint gint) "gtk_clist_unselect_row")
    (macro gtk_clist_undo_selection::void (GtkCList*) "gtk_clist_undo_selection")
    (macro gtk_clist_clear::void (GtkCList*) "gtk_clist_clear")
    (macro gtk_clist_get_selection_info::gint (GtkCList* gint gint gint* gint*) "gtk_clist_get_selection_info")
    (macro gtk_clist_select_all::void (GtkCList*) "gtk_clist_select_all")
    (macro gtk_clist_unselect_all::void (GtkCList*) "gtk_clist_unselect_all")
    (macro gtk_clist_swap_rows::void (GtkCList* gint gint) "gtk_clist_swap_rows")
    (macro gtk_clist_row_move::void (GtkCList* gint gint) "gtk_clist_row_move")
    (macro gtk_clist_set_compare_func::void (GtkCList* GtkCListCompareFunc) "gtk_clist_set_compare_func")
    (macro gtk_clist_set_sort_column::void (GtkCList* gint) "gtk_clist_set_sort_column")
    (macro gtk_clist_set_sort_type::void (GtkCList* GtkSortType) "gtk_clist_set_sort_type")
    (macro gtk_clist_sort::void (GtkCList*) "gtk_clist_sort")
    (macro gtk_clist_set_auto_sort::void (GtkCList* gboolean) "gtk_clist_set_auto_sort")
    (macro gtk_window_get_type::GtkType () "gtk_window_get_type")
    (macro gtk_window_new::GtkWidget* (GtkWindowType) "gtk_window_new")
    (macro gtk_window_set_title::void (GtkWindow* gchar*) "gtk_window_set_title")
    (macro gtk_window_set_wmclass::void (GtkWindow* gchar* gchar*) "gtk_window_set_wmclass")
    (macro gtk_window_set_policy::void (GtkWindow* gint gint gint) "gtk_window_set_policy")
    (macro gtk_window_add_accel_group::void (GtkWindow* GtkAccelGroup*) "gtk_window_add_accel_group")
    (macro gtk_window_remove_accel_group::void (GtkWindow* GtkAccelGroup*) "gtk_window_remove_accel_group")
    (macro gtk_window_set_position::void (GtkWindow* GtkWindowPosition) "gtk_window_set_position")
    (macro gtk_window_activate_focus::gint (GtkWindow*) "gtk_window_activate_focus")
    (macro gtk_window_activate_default::gint (GtkWindow*) "gtk_window_activate_default")
    (macro gtk_window_set_transient_for::void (GtkWindow* GtkWindow*) "gtk_window_set_transient_for")
    (macro gtk_window_set_geometry_hints::void (GtkWindow* GtkWidget* GdkGeometry* GdkWindowHints) "gtk_window_set_geometry_hints")
    (macro gtk_window_set_default_size::void (GtkWindow* gint gint) "gtk_window_set_default_size")
    (macro gtk_window_set_modal::void (GtkWindow* gboolean) "gtk_window_set_modal")
    (macro gtk_window_set_focus::void (GtkWindow* GtkWidget*) "gtk_window_set_focus")
    (macro gtk_window_set_default::void (GtkWindow* GtkWidget*) "gtk_window_set_default")
    (macro gtk_window_remove_embedded_xid::void (GtkWindow* guint) "gtk_window_remove_embedded_xid")
    (macro gtk_window_add_embedded_xid::void (GtkWindow* guint) "gtk_window_add_embedded_xid")
    (macro gtk_window_reposition::void (GtkWindow* gint gint) "gtk_window_reposition")
    (macro gtk_vbox_get_type::GtkType () "gtk_vbox_get_type")
    (macro gtk_vbox_new::GtkWidget* (gboolean gint) "gtk_vbox_new")
    (macro gtk_preview_get_type::GtkType () "gtk_preview_get_type")
    (macro gtk_preview_uninit::void () "gtk_preview_uninit")
    (macro gtk_preview_new::GtkWidget* (GtkPreviewType) "gtk_preview_new")
    (macro gtk_preview_size::void (GtkPreview* gint gint) "gtk_preview_size")
    (macro gtk_preview_put::void (GtkPreview* GdkWindow* GdkGC* gint gint gint gint gint gint) "gtk_preview_put")
    (macro gtk_preview_draw_row::void (GtkPreview* guchar* gint gint gint) "gtk_preview_draw_row")
    (macro gtk_preview_set_expand::void (GtkPreview* gboolean) "gtk_preview_set_expand")
    (macro gtk_preview_set_gamma::void (double) "gtk_preview_set_gamma")
    (macro gtk_preview_set_color_cube::void (guint guint guint guint) "gtk_preview_set_color_cube")
    (macro gtk_preview_set_install_cmap::void (gint) "gtk_preview_set_install_cmap")
    (macro gtk_preview_set_reserved::void (gint) "gtk_preview_set_reserved")
    (macro gtk_preview_set_dither::void (GtkPreview* GdkRgbDither) "gtk_preview_set_dither")
    (macro gtk_preview_get_visual::GdkVisual* () "gtk_preview_get_visual")
    (macro gtk_preview_get_cmap::GdkColormap* () "gtk_preview_get_cmap")
    (macro gtk_preview_get_info::GtkPreviewInfo* () "gtk_preview_get_info")
    (macro gtk_preview_reset::void () "gtk_preview_reset")
    (macro gtk_editable_get_type::GtkType () "gtk_editable_get_type")
    (macro gtk_editable_select_region::void (GtkEditable* gint gint) "gtk_editable_select_region")
    (macro gtk_editable_insert_text::void (GtkEditable* gchar* gint gint*) "gtk_editable_insert_text")
    (macro gtk_editable_delete_text::void (GtkEditable* gint gint) "gtk_editable_delete_text")
    (macro gtk_editable_get_chars::gchar* (GtkEditable* gint gint) "gtk_editable_get_chars")
    (macro gtk_editable_cut_clipboard::void (GtkEditable*) "gtk_editable_cut_clipboard")
    (macro gtk_editable_copy_clipboard::void (GtkEditable*) "gtk_editable_copy_clipboard")
    (macro gtk_editable_paste_clipboard::void (GtkEditable*) "gtk_editable_paste_clipboard")
    (macro gtk_editable_claim_selection::void (GtkEditable* gboolean guint32) "gtk_editable_claim_selection")
    (macro gtk_editable_delete_selection::void (GtkEditable*) "gtk_editable_delete_selection")
    (macro gtk_editable_changed::void (GtkEditable*) "gtk_editable_changed")
    (macro gtk_editable_set_position::void (GtkEditable* gint) "gtk_editable_set_position")
    (macro gtk_editable_get_position::gint (GtkEditable*) "gtk_editable_get_position")
    (macro gtk_editable_set_editable::void (GtkEditable* gboolean) "gtk_editable_set_editable")
    (macro gtk_entry_get_type::GtkType () "gtk_entry_get_type")
    (macro gtk_entry_new::GtkWidget* () "gtk_entry_new")
    (macro gtk_entry_new_with_max_length::GtkWidget* (guint16) "gtk_entry_new_with_max_length")
    (macro gtk_entry_set_text::void (GtkEntry* gchar*) "gtk_entry_set_text")
    (macro gtk_entry_append_text::void (GtkEntry* gchar*) "gtk_entry_append_text")
    (macro gtk_entry_prepend_text::void (GtkEntry* gchar*) "gtk_entry_prepend_text")
    (macro gtk_entry_set_position::void (GtkEntry* gint) "gtk_entry_set_position")
    (macro gtk_entry_get_text::gchar* (GtkEntry*) "gtk_entry_get_text")
    (macro gtk_entry_select_region::void (GtkEntry* gint gint) "gtk_entry_select_region")
    (macro gtk_entry_set_visibility::void (GtkEntry* gboolean) "gtk_entry_set_visibility")
    (macro gtk_entry_set_editable::void (GtkEntry* gboolean) "gtk_entry_set_editable")
    (macro gtk_entry_set_max_length::void (GtkEntry* guint16) "gtk_entry_set_max_length")
    (macro gtk_hbox_get_type::GtkType () "gtk_hbox_get_type")
    (macro gtk_hbox_new::GtkWidget* (gboolean gint) "gtk_hbox_new")
    (macro gtk_check_version::gchar* (guint guint guint) "gtk_check_version")
    (macro gtk_init::void (int* string**) "gtk_init")
    (macro gtk_init_check::gboolean (int* string**) "gtk_init_check")
    (macro gtk_exit::void (gint) "gtk_exit")
    (macro gtk_set_locale::gchar* () "gtk_set_locale")
    (macro gtk_events_pending::gint () "gtk_events_pending")
    (macro gtk_main_do_event::void (GdkEvent*) "gtk_main_do_event")
    (macro gtk_main::void () "gtk_main")
    (macro gtk_main_level::guint () "gtk_main_level")
    (macro gtk_main_quit::void () "gtk_main_quit")
    (macro gtk_main_iteration::gint () "gtk_main_iteration")
    (macro gtk_main_iteration_do::gint (gboolean) "gtk_main_iteration_do")
    (macro gtk_true::gint () "gtk_true")
    (macro gtk_false::gint () "gtk_false")
    (macro gtk_grab_add::void (GtkWidget*) "gtk_grab_add")
    (macro gtk_grab_get_current::GtkWidget* () "gtk_grab_get_current")
    (macro gtk_grab_remove::void (GtkWidget*) "gtk_grab_remove")
    (macro gtk_init_add::void (GtkFunction gpointer) "gtk_init_add")
    (macro gtk_quit_add_destroy::void (guint GtkObject*) "gtk_quit_add_destroy")
    (macro gtk_quit_add::guint (guint GtkFunction gpointer) "gtk_quit_add")
    (macro gtk_quit_add_full::guint (guint GtkFunction GtkCallbackMarshal gpointer GtkDestroyNotify) "gtk_quit_add_full")
    (macro gtk_quit_remove::void (guint) "gtk_quit_remove")
    (macro gtk_quit_remove_by_data::void (gpointer) "gtk_quit_remove_by_data")
    (macro gtk_timeout_add::guint (guint32 GtkFunction gpointer) "gtk_timeout_add")
    (macro gtk_timeout_add_full::guint (guint32 GtkFunction GtkCallbackMarshal gpointer GtkDestroyNotify) "gtk_timeout_add_full")
    (macro gtk_timeout_remove::void (guint) "gtk_timeout_remove")
    (macro gtk_idle_add::guint (GtkFunction gpointer) "gtk_idle_add")
    (macro gtk_idle_add_priority::guint (gint GtkFunction gpointer) "gtk_idle_add_priority")
    (macro gtk_idle_add_full::guint (gint GtkFunction GtkCallbackMarshal gpointer GtkDestroyNotify) "gtk_idle_add_full")
    (macro gtk_idle_remove::void (guint) "gtk_idle_remove")
    (macro gtk_idle_remove_by_data::void (gpointer) "gtk_idle_remove_by_data")
    (macro gtk_input_add_full::guint (gint GdkInputCondition GdkInputFunction GtkCallbackMarshal gpointer GtkDestroyNotify) "gtk_input_add_full")
    (macro gtk_input_remove::void (guint) "gtk_input_remove")
    (macro gtk_key_snooper_install::guint (GtkKeySnoopFunc gpointer) "gtk_key_snooper_install")
    (macro gtk_key_snooper_remove::void (guint) "gtk_key_snooper_remove")
    (macro gtk_get_current_event::GdkEvent* () "gtk_get_current_event")
    (macro gtk_get_event_widget::GtkWidget* (GdkEvent*) "gtk_get_event_widget")
    (macro gtk_propagate_event::void (GtkWidget* GdkEvent*) "gtk_propagate_event")
    (macro gtk_scale_get_type::GtkType () "gtk_scale_get_type")
    (macro gtk_scale_set_digits::void (GtkScale* gint) "gtk_scale_set_digits")
    (macro gtk_scale_set_draw_value::void (GtkScale* gboolean) "gtk_scale_set_draw_value")
    (macro gtk_scale_set_value_pos::void (GtkScale* GtkPositionType) "gtk_scale_set_value_pos")
    (macro gtk_scale_get_value_width::gint (GtkScale*) "gtk_scale_get_value_width")
    (macro gtk_scale_draw_value::void (GtkScale*) "gtk_scale_draw_value")
    (macro gtk_hscale_get_type::GtkType () "gtk_hscale_get_type")
    (macro gtk_hscale_new::GtkWidget* (GtkAdjustment*) "gtk_hscale_new")
    (macro gtk_table_get_type::GtkType () "gtk_table_get_type")
    (macro gtk_table_new::GtkWidget* (guint guint gboolean) "gtk_table_new")
    (macro gtk_table_resize::void (GtkTable* guint guint) "gtk_table_resize")
    (macro gtk_table_attach::void (GtkTable* GtkWidget* guint guint guint guint GtkAttachOptions GtkAttachOptions guint guint) "gtk_table_attach")
    (macro gtk_table_attach_defaults::void (GtkTable* GtkWidget* guint guint guint guint) "gtk_table_attach_defaults")
    (macro gtk_table_set_row_spacing::void (GtkTable* guint guint) "gtk_table_set_row_spacing")
    (macro gtk_table_set_col_spacing::void (GtkTable* guint guint) "gtk_table_set_col_spacing")
    (macro gtk_table_set_row_spacings::void (GtkTable* guint) "gtk_table_set_row_spacings")
    (macro gtk_table_set_col_spacings::void (GtkTable* guint) "gtk_table_set_col_spacings")
    (macro gtk_table_set_homogeneous::void (GtkTable* gboolean) "gtk_table_set_homogeneous")
    (macro gtk_event_box_get_type::GtkType () "gtk_event_box_get_type")
    (macro gtk_event_box_new::GtkWidget* () "gtk_event_box_new")
    (macro gtk_color_selection_get_type::GtkType () "gtk_color_selection_get_type")
    (macro gtk_color_selection_new::GtkWidget* () "gtk_color_selection_new")
    (macro gtk_color_selection_set_update_policy::void (GtkColorSelection* GtkUpdateType) "gtk_color_selection_set_update_policy")
    (macro gtk_color_selection_set_opacity::void (GtkColorSelection* gint) "gtk_color_selection_set_opacity")
    (macro gtk_color_selection_set_color::void (GtkColorSelection* gdouble*) "gtk_color_selection_set_color")
    (macro gtk_color_selection_get_color::void (GtkColorSelection* gdouble*) "gtk_color_selection_get_color")
    (macro gtk_color_selection_dialog_get_type::GtkType () "gtk_color_selection_dialog_get_type")
    (macro gtk_color_selection_dialog_new::GtkWidget* (gchar*) "gtk_color_selection_dialog_new")
    (macro gtk_combo_get_type::guint () "gtk_combo_get_type")
    (macro gtk_combo_new::GtkWidget* () "gtk_combo_new")
    (macro gtk_combo_set_value_in_list::void (GtkCombo* gint gint) "gtk_combo_set_value_in_list")
    (macro gtk_combo_set_use_arrows::void (GtkCombo* gint) "gtk_combo_set_use_arrows")
    (macro gtk_combo_set_use_arrows_always::void (GtkCombo* gint) "gtk_combo_set_use_arrows_always")
    (macro gtk_combo_set_case_sensitive::void (GtkCombo* gint) "gtk_combo_set_case_sensitive")
    (macro gtk_combo_set_item_string::void (GtkCombo* GtkItem* gchar*) "gtk_combo_set_item_string")
    (macro gtk_combo_set_popdown_strings::void (GtkCombo* GList*) "gtk_combo_set_popdown_strings")
    (macro gtk_combo_disable_activate::void (GtkCombo*) "gtk_combo_disable_activate")
    (macro gtk_ctree_get_type::GtkType () "gtk_ctree_get_type")
    (macro gtk_ctree_construct::void (GtkCTree* gint gint gchar**) "gtk_ctree_construct")
    (macro gtk_ctree_new_with_titles::GtkWidget* (gint gint gchar**) "gtk_ctree_new_with_titles")
    (macro gtk_ctree_new::GtkWidget* (gint gint) "gtk_ctree_new")
    (macro gtk_ctree_insert_node::GtkCTreeNode* (GtkCTree* GtkCTreeNode* GtkCTreeNode* gchar** guint8 GdkPixmap* GdkBitmap* GdkPixmap* GdkBitmap* gboolean gboolean) "gtk_ctree_insert_node")
    (macro gtk_ctree_remove_node::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_remove_node")
    (macro gtk_ctree_insert_gnode::GtkCTreeNode* (GtkCTree* GtkCTreeNode* GtkCTreeNode* GNode* GtkCTreeGNodeFunc gpointer) "gtk_ctree_insert_gnode")
    (macro gtk_ctree_export_to_gnode::GNode* (GtkCTree* GNode* GNode* GtkCTreeNode* GtkCTreeGNodeFunc gpointer) "gtk_ctree_export_to_gnode")
    (macro gtk_ctree_post_recursive::void (GtkCTree* GtkCTreeNode* GtkCTreeFunc gpointer) "gtk_ctree_post_recursive")
    (macro gtk_ctree_post_recursive_to_depth::void (GtkCTree* GtkCTreeNode* gint GtkCTreeFunc gpointer) "gtk_ctree_post_recursive_to_depth")
    (macro gtk_ctree_pre_recursive::void (GtkCTree* GtkCTreeNode* GtkCTreeFunc gpointer) "gtk_ctree_pre_recursive")
    (macro gtk_ctree_pre_recursive_to_depth::void (GtkCTree* GtkCTreeNode* gint GtkCTreeFunc gpointer) "gtk_ctree_pre_recursive_to_depth")
    (macro gtk_ctree_is_viewable::gboolean (GtkCTree* GtkCTreeNode*) "gtk_ctree_is_viewable")
    (macro gtk_ctree_last::GtkCTreeNode* (GtkCTree* GtkCTreeNode*) "gtk_ctree_last")
    (macro gtk_ctree_find_node_ptr::GtkCTreeNode* (GtkCTree* GtkCTreeRow*) "gtk_ctree_find_node_ptr")
    (macro gtk_ctree_node_nth::GtkCTreeNode* (GtkCTree* guint) "gtk_ctree_node_nth")
    (macro gtk_ctree_find::gboolean (GtkCTree* GtkCTreeNode* GtkCTreeNode*) "gtk_ctree_find")
    (macro gtk_ctree_is_ancestor::gboolean (GtkCTree* GtkCTreeNode* GtkCTreeNode*) "gtk_ctree_is_ancestor")
    (macro gtk_ctree_find_by_row_data::GtkCTreeNode* (GtkCTree* GtkCTreeNode* gpointer) "gtk_ctree_find_by_row_data")
    (macro gtk_ctree_find_all_by_row_data::GList* (GtkCTree* GtkCTreeNode* gpointer) "gtk_ctree_find_all_by_row_data")
    (macro gtk_ctree_find_by_row_data_custom::GtkCTreeNode* (GtkCTree* GtkCTreeNode* gpointer GCompareFunc) "gtk_ctree_find_by_row_data_custom")
    (macro gtk_ctree_find_all_by_row_data_custom::GList* (GtkCTree* GtkCTreeNode* gpointer GCompareFunc) "gtk_ctree_find_all_by_row_data_custom")
    (macro gtk_ctree_is_hot_spot::gboolean (GtkCTree* gint gint) "gtk_ctree_is_hot_spot")
    (macro gtk_ctree_move::void (GtkCTree* GtkCTreeNode* GtkCTreeNode* GtkCTreeNode*) "gtk_ctree_move")
    (macro gtk_ctree_expand::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_expand")
    (macro gtk_ctree_expand_recursive::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_expand_recursive")
    (macro gtk_ctree_expand_to_depth::void (GtkCTree* GtkCTreeNode* gint) "gtk_ctree_expand_to_depth")
    (macro gtk_ctree_collapse::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_collapse")
    (macro gtk_ctree_collapse_recursive::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_collapse_recursive")
    (macro gtk_ctree_collapse_to_depth::void (GtkCTree* GtkCTreeNode* gint) "gtk_ctree_collapse_to_depth")
    (macro gtk_ctree_toggle_expansion::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_toggle_expansion")
    (macro gtk_ctree_toggle_expansion_recursive::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_toggle_expansion_recursive")
    (macro gtk_ctree_select::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_select")
    (macro gtk_ctree_select_recursive::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_select_recursive")
    (macro gtk_ctree_unselect::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_unselect")
    (macro gtk_ctree_unselect_recursive::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_unselect_recursive")
    (macro gtk_ctree_real_select_recursive::void (GtkCTree* GtkCTreeNode* gint) "gtk_ctree_real_select_recursive")
    (macro gtk_ctree_node_set_text::void (GtkCTree* GtkCTreeNode* gint gchar*) "gtk_ctree_node_set_text")
    (macro gtk_ctree_node_set_pixmap::void (GtkCTree* GtkCTreeNode* gint GdkPixmap* GdkBitmap*) "gtk_ctree_node_set_pixmap")
    (macro gtk_ctree_node_set_pixtext::void (GtkCTree* GtkCTreeNode* gint gchar* guint8 GdkPixmap* GdkBitmap*) "gtk_ctree_node_set_pixtext")
    (macro gtk_ctree_set_node_info::void (GtkCTree* GtkCTreeNode* gchar* guint8 GdkPixmap* GdkBitmap* GdkPixmap* GdkBitmap* gboolean gboolean) "gtk_ctree_set_node_info")
    (macro gtk_ctree_node_set_shift::void (GtkCTree* GtkCTreeNode* gint gint gint) "gtk_ctree_node_set_shift")
    (macro gtk_ctree_node_set_selectable::void (GtkCTree* GtkCTreeNode* gboolean) "gtk_ctree_node_set_selectable")
    (macro gtk_ctree_node_get_selectable::gboolean (GtkCTree* GtkCTreeNode*) "gtk_ctree_node_get_selectable")
    (macro gtk_ctree_node_get_cell_type::GtkCellType (GtkCTree* GtkCTreeNode* gint) "gtk_ctree_node_get_cell_type")
    (macro gtk_ctree_node_get_text::gint (GtkCTree* GtkCTreeNode* gint gchar**) "gtk_ctree_node_get_text")
    (macro gtk_ctree_node_get_pixmap::gint (GtkCTree* GtkCTreeNode* gint GdkPixmap** GdkBitmap**) "gtk_ctree_node_get_pixmap")
    (macro gtk_ctree_node_get_pixtext::gint (GtkCTree* GtkCTreeNode* gint gchar** guint8* GdkPixmap** GdkBitmap**) "gtk_ctree_node_get_pixtext")
    (macro gtk_ctree_get_node_info::gint (GtkCTree* GtkCTreeNode* gchar** guint8* GdkPixmap** GdkBitmap** GdkPixmap** GdkBitmap** gboolean* gboolean*) "gtk_ctree_get_node_info")
    (macro gtk_ctree_node_set_row_style::void (GtkCTree* GtkCTreeNode* GtkStyle*) "gtk_ctree_node_set_row_style")
    (macro gtk_ctree_node_get_row_style::GtkStyle* (GtkCTree* GtkCTreeNode*) "gtk_ctree_node_get_row_style")
    (macro gtk_ctree_node_set_cell_style::void (GtkCTree* GtkCTreeNode* gint GtkStyle*) "gtk_ctree_node_set_cell_style")
    (macro gtk_ctree_node_get_cell_style::GtkStyle* (GtkCTree* GtkCTreeNode* gint) "gtk_ctree_node_get_cell_style")
    (macro gtk_ctree_node_set_foreground::void (GtkCTree* GtkCTreeNode* GdkColor*) "gtk_ctree_node_set_foreground")
    (macro gtk_ctree_node_set_background::void (GtkCTree* GtkCTreeNode* GdkColor*) "gtk_ctree_node_set_background")
    (macro gtk_ctree_node_set_row_data::void (GtkCTree* GtkCTreeNode* gpointer) "gtk_ctree_node_set_row_data")
    (macro gtk_ctree_node_set_row_data_full::void (GtkCTree* GtkCTreeNode* gpointer GtkDestroyNotify) "gtk_ctree_node_set_row_data_full")
    (macro gtk_ctree_node_get_row_data::gpointer (GtkCTree* GtkCTreeNode*) "gtk_ctree_node_get_row_data")
    (macro gtk_ctree_node_moveto::void (GtkCTree* GtkCTreeNode* gint gfloat gfloat) "gtk_ctree_node_moveto")
    (macro gtk_ctree_node_is_visible::GtkVisibility (GtkCTree* GtkCTreeNode*) "gtk_ctree_node_is_visible")
    (macro gtk_ctree_set_indent::void (GtkCTree* gint) "gtk_ctree_set_indent")
    (macro gtk_ctree_set_spacing::void (GtkCTree* gint) "gtk_ctree_set_spacing")
    (macro gtk_ctree_set_show_stub::void (GtkCTree* gboolean) "gtk_ctree_set_show_stub")
    (macro gtk_ctree_set_line_style::void (GtkCTree* GtkCTreeLineStyle) "gtk_ctree_set_line_style")
    (macro gtk_ctree_set_expander_style::void (GtkCTree* GtkCTreeExpanderStyle) "gtk_ctree_set_expander_style")
    (macro gtk_ctree_set_drag_compare_func::void (GtkCTree* GtkCTreeCompareDragFunc) "gtk_ctree_set_drag_compare_func")
    (macro gtk_ctree_sort_node::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_sort_node")
    (macro gtk_ctree_sort_recursive::void (GtkCTree* GtkCTreeNode*) "gtk_ctree_sort_recursive")
    (macro gtk_drawing_area_get_type::GtkType () "gtk_drawing_area_get_type")
    (macro gtk_drawing_area_new::GtkWidget* () "gtk_drawing_area_new")
    (macro gtk_drawing_area_size::void (GtkDrawingArea* gint gint) "gtk_drawing_area_size")
    (macro gtk_curve_get_type::GtkType () "gtk_curve_get_type")
    (macro gtk_curve_new::GtkWidget* () "gtk_curve_new")
    (macro gtk_curve_reset::void (GtkCurve*) "gtk_curve_reset")
    (macro gtk_curve_set_gamma::void (GtkCurve* gfloat) "gtk_curve_set_gamma")
    (macro gtk_curve_set_range::void (GtkCurve* gfloat gfloat gfloat gfloat) "gtk_curve_set_range")
    (macro gtk_curve_get_vector::void (GtkCurve* int gfloat*) "gtk_curve_get_vector")
    (macro gtk_curve_set_vector::void (GtkCurve* int gfloat*) "gtk_curve_set_vector")
    (macro gtk_curve_set_curve_type::void (GtkCurve* GtkCurveType) "gtk_curve_set_curve_type")
    (macro gtk_dialog_get_type::GtkType () "gtk_dialog_get_type")
    (macro gtk_dialog_new::GtkWidget* () "gtk_dialog_new")
    (macro gtk_target_list_new::GtkTargetList* (GtkTargetEntry* guint) "gtk_target_list_new")
    (macro gtk_target_list_ref::void (GtkTargetList*) "gtk_target_list_ref")
    (macro gtk_target_list_unref::void (GtkTargetList*) "gtk_target_list_unref")
    (macro gtk_target_list_add::void (GtkTargetList* GdkAtom guint guint) "gtk_target_list_add")
    (macro gtk_target_list_add_table::void (GtkTargetList* GtkTargetEntry* guint) "gtk_target_list_add_table")
    (macro gtk_target_list_remove::void (GtkTargetList* GdkAtom) "gtk_target_list_remove")
    (macro gtk_target_list_find::gboolean (GtkTargetList* GdkAtom guint*) "gtk_target_list_find")
    (macro gtk_selection_owner_set::gint (GtkWidget* GdkAtom guint32) "gtk_selection_owner_set")
    (macro gtk_selection_add_target::void (GtkWidget* GdkAtom GdkAtom guint) "gtk_selection_add_target")
    (macro gtk_selection_add_targets::void (GtkWidget* GdkAtom GtkTargetEntry* guint) "gtk_selection_add_targets")
    (macro gtk_selection_convert::gint (GtkWidget* GdkAtom GdkAtom guint32) "gtk_selection_convert")
    (macro gtk_selection_data_set::void (GtkSelectionData* GdkAtom gint guchar* gint) "gtk_selection_data_set")
    (macro gtk_selection_remove_all::void (GtkWidget*) "gtk_selection_remove_all")
    (macro gtk_selection_clear::gint (GtkWidget* GdkEventSelection*) "gtk_selection_clear")
    (macro gtk_selection_request::gint (GtkWidget* GdkEventSelection*) "gtk_selection_request")
    (macro gtk_selection_incr_event::gint (GdkWindow* GdkEventProperty*) "gtk_selection_incr_event")
    (macro gtk_selection_notify::gint (GtkWidget* GdkEventSelection*) "gtk_selection_notify")
    (macro gtk_selection_property_notify::gint (GtkWidget* GdkEventProperty*) "gtk_selection_property_notify")
    (macro gtk_selection_data_copy::GtkSelectioData* (GtkSelectionData*) "gtk_selection_data_copy")
    (macro gtk_selection_data_free::void (GtkSelectionData*) "gtk_selection_data_free")
    (macro gtk_drag_get_data::void (GtkWidget* GdkDragContext* GdkAtom guint32) "gtk_drag_get_data")
    (macro gtk_drag_finish::void (GdkDragContext* gboolean gboolean guint32) "gtk_drag_finish")
    (macro gtk_drag_get_source_widget::GtkWidget* (GdkDragContext*) "gtk_drag_get_source_widget")
    (macro gtk_drag_highlight::void (GtkWidget*) "gtk_drag_highlight")
    (macro gtk_drag_unhighlight::void (GtkWidget*) "gtk_drag_unhighlight")
    (macro gtk_drag_dest_set::void (GtkWidget* GtkDestDefaults GtkTargetEntry* gint GdkDragAction) "gtk_drag_dest_set")
    (macro gtk_drag_dest_set_proxy::void (GtkWidget* GdkWindow* GdkDragProtocol gboolean) "gtk_drag_dest_set_proxy")
    (macro gtk_drag_dest_unset::void (GtkWidget*) "gtk_drag_dest_unset")
    (macro gtk_drag_source_set::void (GtkWidget* GdkModifierType GtkTargetEntry* gint GdkDragAction) "gtk_drag_source_set")
    (macro gtk_drag_source_unset::void (GtkWidget*) "gtk_drag_source_unset")
    (macro gtk_drag_source_set_icon::void (GtkWidget* GdkColormap* GdkPixmap* GdkBitmap*) "gtk_drag_source_set_icon")
    (macro gtk_drag_begin::GdkDragContext* (GtkWidget* GtkTargetList* GdkDragAction gint GdkEvent*) "gtk_drag_begin")
    (macro gtk_drag_set_icon_widget::void (GdkDragContext* GtkWidget* gint gint) "gtk_drag_set_icon_widget")
    (macro gtk_drag_set_icon_pixmap::void (GdkDragContext* GdkColormap* GdkPixmap* GdkBitmap* gint gint) "gtk_drag_set_icon_pixmap")
    (macro gtk_drag_set_icon_default::void (GdkDragContext*) "gtk_drag_set_icon_default")
    (macro gtk_drag_set_default_icon::void (GdkColormap* GdkPixmap* GdkBitmap* gint gint) "gtk_drag_set_default_icon")
    (macro gtk_drag_source_handle_event::void (GtkWidget* GdkEvent*) "gtk_drag_source_handle_event")
    (macro gtk_drag_dest_handle_event::void (GtkWidget* GdkEvent*) "gtk_drag_dest_handle_event")
    (macro gtk_file_selection_get_type::GtkType () "gtk_file_selection_get_type")
    (macro gtk_file_selection_new::GtkWidget* (gchar*) "gtk_file_selection_new")
    (macro gtk_file_selection_set_filename::void (GtkFileSelection* gchar*) "gtk_file_selection_set_filename")
    (macro gtk_file_selection_get_filename::gchar* (GtkFileSelection*) "gtk_file_selection_get_filename")
    (macro gtk_file_selection_complete::void (GtkFileSelection* gchar*) "gtk_file_selection_complete")
    (macro gtk_file_selection_show_fileop_buttons::void (GtkFileSelection*) "gtk_file_selection_show_fileop_buttons")
    (macro gtk_file_selection_hide_fileop_buttons::void (GtkFileSelection*) "gtk_file_selection_hide_fileop_buttons")
    (macro gtk_fixed_get_type::GtkType () "gtk_fixed_get_type")
    (macro gtk_fixed_new::GtkWidget* () "gtk_fixed_new")
    (macro gtk_fixed_put::void (GtkFixed* GtkWidget* gint16 gint16) "gtk_fixed_put")
    (macro gtk_fixed_move::void (GtkFixed* GtkWidget* gint16 gint16) "gtk_fixed_move")
    (macro gtk_notebook_get_type::GtkType () "gtk_notebook_get_type")
    (macro gtk_notebook_new::GtkWidget* () "gtk_notebook_new")
    (macro gtk_notebook_append_page::void (GtkNotebook* GtkWidget* GtkWidget*) "gtk_notebook_append_page")
    (macro gtk_notebook_append_page_menu::void (GtkNotebook* GtkWidget* GtkWidget* GtkWidget*) "gtk_notebook_append_page_menu")
    (macro gtk_notebook_prepend_page::void (GtkNotebook* GtkWidget* GtkWidget*) "gtk_notebook_prepend_page")
    (macro gtk_notebook_prepend_page_menu::void (GtkNotebook* GtkWidget* GtkWidget* GtkWidget*) "gtk_notebook_prepend_page_menu")
    (macro gtk_notebook_insert_page::void (GtkNotebook* GtkWidget* GtkWidget* gint) "gtk_notebook_insert_page")
    (macro gtk_notebook_insert_page_menu::void (GtkNotebook* GtkWidget* GtkWidget* GtkWidget* gint) "gtk_notebook_insert_page_menu")
    (macro gtk_notebook_remove_page::void (GtkNotebook* gint) "gtk_notebook_remove_page")
    (macro gtk_notebook_get_current_page::gint (GtkNotebook*) "gtk_notebook_get_current_page")
    (macro gtk_notebook_get_nth_page::GtkWidget* (GtkNotebook* gint) "gtk_notebook_get_nth_page")
    (macro gtk_notebook_page_num::gint (GtkNotebook* GtkWidget*) "gtk_notebook_page_num")
    (macro gtk_notebook_set_page::void (GtkNotebook* gint) "gtk_notebook_set_page")
    (macro gtk_notebook_next_page::void (GtkNotebook*) "gtk_notebook_next_page")
    (macro gtk_notebook_prev_page::void (GtkNotebook*) "gtk_notebook_prev_page")
    (macro gtk_notebook_set_show_border::void (GtkNotebook* gboolean) "gtk_notebook_set_show_border")
    (macro gtk_notebook_set_show_tabs::void (GtkNotebook* gboolean) "gtk_notebook_set_show_tabs")
    (macro gtk_notebook_set_tab_pos::void (GtkNotebook* GtkPositionType) "gtk_notebook_set_tab_pos")
    (macro gtk_notebook_set_homogeneous_tabs::void (GtkNotebook* gboolean) "gtk_notebook_set_homogeneous_tabs")
    (macro gtk_notebook_set_tab_border::void (GtkNotebook* guint) "gtk_notebook_set_tab_border")
    (macro gtk_notebook_set_tab_hborder::void (GtkNotebook* guint) "gtk_notebook_set_tab_hborder")
    (macro gtk_notebook_set_tab_vborder::void (GtkNotebook* guint) "gtk_notebook_set_tab_vborder")
    (macro gtk_notebook_set_scrollable::void (GtkNotebook* gboolean) "gtk_notebook_set_scrollable")
    (macro gtk_notebook_popup_enable::void (GtkNotebook*) "gtk_notebook_popup_enable")
    (macro gtk_notebook_popup_disable::void (GtkNotebook*) "gtk_notebook_popup_disable")
    (macro gtk_notebook_get_tab_label::GtkWidget* (GtkNotebook* GtkWidget*) "gtk_notebook_get_tab_label")
    (macro gtk_notebook_set_tab_label::void (GtkNotebook* GtkWidget* GtkWidget*) "gtk_notebook_set_tab_label")
    (macro gtk_notebook_set_tab_label_text::void (GtkNotebook* GtkWidget* gchar*) "gtk_notebook_set_tab_label_text")
    (macro gtk_notebook_get_menu_label::GtkWidget* (GtkNotebook* GtkWidget*) "gtk_notebook_get_menu_label")
    (macro gtk_notebook_set_menu_label::void (GtkNotebook* GtkWidget* GtkWidget*) "gtk_notebook_set_menu_label")
    (macro gtk_notebook_set_menu_label_text::void (GtkNotebook* GtkWidget* gchar*) "gtk_notebook_set_menu_label_text")
    (macro gtk_notebook_query_tab_label_packing::void (GtkNotebook* GtkWidget* gboolean* gboolean* GtkPackType*) "gtk_notebook_query_tab_label_packing")
    (macro gtk_notebook_set_tab_label_packing::void (GtkNotebook* GtkWidget* gboolean gboolean GtkPackType) "gtk_notebook_set_tab_label_packing")
    (macro gtk_notebook_reorder_child::void (GtkNotebook* GtkWidget* gint) "gtk_notebook_reorder_child")
    (macro gtk_font_selection_get_type::GtkType () "gtk_font_selection_get_type")
    (macro gtk_font_selection_new::GtkWidget* () "gtk_font_selection_new")
    (macro gtk_font_selection_get_font_name::gchar* (GtkFontSelection*) "gtk_font_selection_get_font_name")
    (macro gtk_font_selection_get_font::GdkFont* (GtkFontSelection*) "gtk_font_selection_get_font")
    (macro gtk_font_selection_set_font_name::gboolean (GtkFontSelection* gchar*) "gtk_font_selection_set_font_name")
    (macro gtk_font_selection_set_filter::void (GtkFontSelection* GtkFontFilterType GtkFontType gchar** gchar** gchar** gchar** gchar** gchar**) "gtk_font_selection_set_filter")
    (macro gtk_font_selection_get_preview_text::gchar* (GtkFontSelection*) "gtk_font_selection_get_preview_text")
    (macro gtk_font_selection_set_preview_text::void (GtkFontSelection* gchar*) "gtk_font_selection_set_preview_text")
    (macro gtk_font_selection_dialog_get_type::GtkType () "gtk_font_selection_dialog_get_type")
    (macro gtk_font_selection_dialog_new::GtkWidget* (gchar*) "gtk_font_selection_dialog_new")
    (macro gtk_font_selection_dialog_get_font_name::gchar* (GtkFontSelectionDialog*) "gtk_font_selection_dialog_get_font_name")
    (macro gtk_font_selection_dialog_get_font::GdkFont* (GtkFontSelectionDialog*) "gtk_font_selection_dialog_get_font")
    (macro gtk_font_selection_dialog_set_font_name::gboolean (GtkFontSelectionDialog* gchar*) "gtk_font_selection_dialog_set_font_name")
    (macro gtk_font_selection_dialog_set_filter::void (GtkFontSelectionDialog* GtkFontFilterType GtkFontType gchar** gchar** gchar** gchar** gchar** gchar**) "gtk_font_selection_dialog_set_filter")
    (macro gtk_font_selection_dialog_get_preview_text::gchar* (GtkFontSelectionDialog*) "gtk_font_selection_dialog_get_preview_text")
    (macro gtk_font_selection_dialog_set_preview_text::void (GtkFontSelectionDialog* gchar*) "gtk_font_selection_dialog_set_preview_text")
    (macro gtk_gamma_curve_get_type::guint () "gtk_gamma_curve_get_type")
    (macro gtk_gamma_curve_new::GtkWidget* () "gtk_gamma_curve_new")
    (macro gtk_gc_get::GdkGC* (gint GdkColormap* GdkGCValues* GdkGCValuesMask) "gtk_gc_get")
    (macro gtk_gc_release::void (GdkGC*) "gtk_gc_release")
    (macro gtk_handle_box_get_type::GtkType () "gtk_handle_box_get_type")
    (macro gtk_handle_box_new::GtkWidget* () "gtk_handle_box_new")
    (macro gtk_handle_box_set_shadow_type::void (GtkHandleBox* GtkShadowType) "gtk_handle_box_set_shadow_type")
    (macro gtk_handle_box_set_handle_position::void (GtkHandleBox* GtkPositionType) "gtk_handle_box_set_handle_position")
    (macro gtk_handle_box_set_snap_edge::void (GtkHandleBox* GtkPositionType) "gtk_handle_box_set_snap_edge")
    (macro gtk_hbutton_box_get_type::guint () "gtk_hbutton_box_get_type")
    (macro gtk_hbutton_box_new::GtkWidget* () "gtk_hbutton_box_new")
    (macro gtk_hbutton_box_get_spacing_default::gint () "gtk_hbutton_box_get_spacing_default")
    (macro gtk_hbutton_box_get_layout_default::GtkButtonBoxStyle () "gtk_hbutton_box_get_layout_default")
    (macro gtk_hbutton_box_set_spacing_default::void (gint) "gtk_hbutton_box_set_spacing_default")
    (macro gtk_hbutton_box_set_layout_default::void (GtkButtonBoxStyle) "gtk_hbutton_box_set_layout_default")
    (macro gtk_paned_get_type::GtkType () "gtk_paned_get_type")
    (macro gtk_paned_add1::void (GtkPaned* GtkWidget*) "gtk_paned_add1")
    (macro gtk_paned_add2::void (GtkPaned* GtkWidget*) "gtk_paned_add2")
    (macro gtk_paned_pack1::void (GtkPaned* GtkWidget* gboolean gboolean) "gtk_paned_pack1")
    (macro gtk_paned_pack2::void (GtkPaned* GtkWidget* gboolean gboolean) "gtk_paned_pack2")
    (macro gtk_paned_set_position::void (GtkPaned* gint) "gtk_paned_set_position")
    (macro gtk_paned_set_handle_size::void (GtkPaned* guint16) "gtk_paned_set_handle_size")
    (macro gtk_paned_set_gutter_size::void (GtkPaned* guint16) "gtk_paned_set_gutter_size")
    (macro gtk_paned_compute_position::void (GtkPaned* gint gint gint) "gtk_paned_compute_position")
    (macro _gtk_paned_is_handle_full_size::gboolean (GtkPaned*) "_gtk_paned_is_handle_full_size")
    (macro _gtk_paned_get_handle_rect::void (GtkPaned* GdkRectangle*) "_gtk_paned_get_handle_rect")
    (macro _gtk_paned_get_gutter_size::gint (GtkPaned*) "_gtk_paned_get_gutter_size")
    (macro gtk_hpaned_get_type::guint () "gtk_hpaned_get_type")
    (macro gtk_hpaned_new::GtkWidget* () "gtk_hpaned_new")
    (macro gtk_ruler_get_type::GtkType () "gtk_ruler_get_type")
    (macro gtk_ruler_set_metric::void (GtkRuler* GtkMetricType) "gtk_ruler_set_metric")
    (macro gtk_ruler_set_range::void (GtkRuler* gfloat gfloat gfloat gfloat) "gtk_ruler_set_range")
    (macro gtk_ruler_draw_ticks::void (GtkRuler*) "gtk_ruler_draw_ticks")
    (macro gtk_ruler_draw_pos::void (GtkRuler*) "gtk_ruler_draw_pos")
    (macro gtk_hruler_get_type::guint () "gtk_hruler_get_type")
    (macro gtk_hruler_new::GtkWidget* () "gtk_hruler_new")
    (macro gtk_separator_get_type::GtkType () "gtk_separator_get_type")
    (macro gtk_hseparator_get_type::GtkType () "gtk_hseparator_get_type")
    (macro gtk_hseparator_new::GtkWidget* () "gtk_hseparator_new")
    (macro gtk_image_get_type::GtkType () "gtk_image_get_type")
    (macro gtk_image_new::GtkWidget* (GdkImage* GdkBitmap*) "gtk_image_new")
    (macro gtk_image_set::void (GtkImage* GdkImage* GdkBitmap*) "gtk_image_set")
    (macro gtk_image_get::void (GtkImage* GdkImage** GdkBitmap**) "gtk_image_get")
    (macro gtk_input_dialog_get_type::GtkType () "gtk_input_dialog_get_type")
    (macro gtk_input_dialog_new::GtkWidget* () "gtk_input_dialog_new")
    (macro gtk_menu_factory_new::GtkMenuFactory* (GtkMenuFactoryType) "gtk_menu_factory_new")
    (macro gtk_menu_factory_destroy::void (GtkMenuFactory*) "gtk_menu_factory_destroy")
    (macro gtk_menu_factory_add_entries::void (GtkMenuFactory* GtkMenuEntry* int) "gtk_menu_factory_add_entries")
    (macro gtk_menu_factory_add_subfactory::void (GtkMenuFactory* GtkMenuFactory* string) "gtk_menu_factory_add_subfactory")
    (macro gtk_menu_factory_remove_paths::void (GtkMenuFactory* string* int) "gtk_menu_factory_remove_paths")
    (macro gtk_menu_factory_remove_entries::void (GtkMenuFactory* GtkMenuEntry* int) "gtk_menu_factory_remove_entries")
    (macro gtk_menu_factory_remove_subfactory::void (GtkMenuFactory* GtkMenuFactory* string) "gtk_menu_factory_remove_subfactory")
    (macro gtk_menu_factory_find::GtkMenuPath* (GtkMenuFactory* string) "gtk_menu_factory_find")
    (macro gtk_item_factory_get_type::GtkType () "gtk_item_factory_get_type")
    (macro gtk_item_factory_new::GtkItemFactory* (GtkType gchar* GtkAccelGroup*) "gtk_item_factory_new")
    (macro gtk_item_factory_construct::void (GtkItemFactory* GtkType gchar* GtkAccelGroup*) "gtk_item_factory_construct")
    (macro gtk_item_factory_parse_rc::void (gchar*) "gtk_item_factory_parse_rc")
    (macro gtk_item_factory_parse_rc_string::void (gchar*) "gtk_item_factory_parse_rc_string")
    (macro gtk_item_factory_parse_rc_scanner::void (GScanner*) "gtk_item_factory_parse_rc_scanner")
    (macro gtk_item_factory_add_foreign::void (GtkWidget* gchar* GtkAccelGroup* guint GdkModifierType) "gtk_item_factory_add_foreign")
    (macro gtk_item_factory_from_widget::GtkItemFactory* (GtkWidget*) "gtk_item_factory_from_widget")
    (macro gtk_item_factory_path_from_widget::gchar* (GtkWidget*) "gtk_item_factory_path_from_widget")
    (macro gtk_item_factory_get_item::GtkWidget* (GtkItemFactory* gchar*) "gtk_item_factory_get_item")
    (macro gtk_item_factory_get_widget::GtkWidget* (GtkItemFactory* gchar*) "gtk_item_factory_get_widget")
    (macro gtk_item_factory_get_widget_by_action::GtkWidget* (GtkItemFactory* guint) "gtk_item_factory_get_widget_by_action")
    (macro gtk_item_factory_get_item_by_action::GtkWidget* (GtkItemFactory* guint) "gtk_item_factory_get_item_by_action")
    (macro gtk_item_factory_dump_items::void (GtkPatternSpec* gboolean GtkPrintFunc gpointer) "gtk_item_factory_dump_items")
    (macro gtk_item_factory_dump_rc::void (gchar* GtkPatternSpec* gboolean) "gtk_item_factory_dump_rc")
    (macro gtk_item_factory_print_func::void (gpointer gchar*) "gtk_item_factory_print_func")
    (macro gtk_item_factory_create_item::void (GtkItemFactory* GtkItemFactoryEntry* gpointer guint) "gtk_item_factory_create_item")
    (macro gtk_item_factory_create_items::void (GtkItemFactory* guint GtkItemFactoryEntry* gpointer) "gtk_item_factory_create_items")
    (macro gtk_item_factory_delete_item::void (GtkItemFactory* gchar*) "gtk_item_factory_delete_item")
    (macro gtk_item_factory_delete_entry::void (GtkItemFactory* GtkItemFactoryEntry*) "gtk_item_factory_delete_entry")
    (macro gtk_item_factory_delete_entries::void (GtkItemFactory* guint GtkItemFactoryEntry*) "gtk_item_factory_delete_entries")
    (macro gtk_item_factory_popup::void (GtkItemFactory* guint guint guint guint32) "gtk_item_factory_popup")
    (macro gtk_item_factory_popup_with_data::void (GtkItemFactory* gpointer GtkDestroyNotify guint guint guint guint32) "gtk_item_factory_popup_with_data")
    (macro gtk_item_factory_popup_data::gpointer (GtkItemFactory*) "gtk_item_factory_popup_data")
    (macro gtk_item_factory_popup_data_from_widget::gpointer (GtkWidget*) "gtk_item_factory_popup_data_from_widget")
    (macro gtk_item_factory_set_translate_func::void (GtkItemFactory* GtkTranslateFunc gpointer GtkDestroyNotify) "gtk_item_factory_set_translate_func")
    (macro gtk_item_factory_from_path::GtkItemFactory* (gchar*) "gtk_item_factory_from_path")
    (macro gtk_item_factory_create_menu_entries::void (guint GtkMenuEntry*) "gtk_item_factory_create_menu_entries")
    (macro gtk_item_factories_path_delete::void (gchar* gchar*) "gtk_item_factories_path_delete")
    (macro gtk_item_factory_create_items_ac::void (GtkItemFactory* guint GtkItemFactoryEntry* gpointer guint) "gtk_item_factory_create_items_ac")
    (macro gtk_layout_get_type::GtkType () "gtk_layout_get_type")
    (macro gtk_layout_new::GtkWidget* (GtkAdjustment* GtkAdjustment*) "gtk_layout_new")
    (macro gtk_layout_put::void (GtkLayout* GtkWidget* gint gint) "gtk_layout_put")
    (macro gtk_layout_move::void (GtkLayout* GtkWidget* gint gint) "gtk_layout_move")
    (macro gtk_layout_set_size::void (GtkLayout* guint guint) "gtk_layout_set_size")
    (macro gtk_layout_get_hadjustment::GtkAdjustment* (GtkLayout*) "gtk_layout_get_hadjustment")
    (macro gtk_layout_get_vadjustment::GtkAdjustment* (GtkLayout*) "gtk_layout_get_vadjustment")
    (macro gtk_layout_set_hadjustment::void (GtkLayout* GtkAdjustment*) "gtk_layout_set_hadjustment")
    (macro gtk_layout_set_vadjustment::void (GtkLayout* GtkAdjustment*) "gtk_layout_set_vadjustment")
    (macro gtk_layout_freeze::void (GtkLayout*) "gtk_layout_freeze")
    (macro gtk_layout_thaw::void (GtkLayout*) "gtk_layout_thaw")
    (macro gtk_list_item_get_type::GtkType () "gtk_list_item_get_type")
    (macro gtk_list_item_new::GtkWidget* () "gtk_list_item_new")
    (macro gtk_list_item_new_with_label::GtkWidget* (gchar*) "gtk_list_item_new_with_label")
    (macro gtk_list_item_select::void (GtkListItem*) "gtk_list_item_select")
    (macro gtk_list_item_deselect::void (GtkListItem*) "gtk_list_item_deselect")
    (macro gtk_list_get_type::GtkType () "gtk_list_get_type")
    (macro gtk_list_new::GtkWidget* () "gtk_list_new")
    (macro gtk_list_insert_items::void (GtkList* GList* gint) "gtk_list_insert_items")
    (macro gtk_list_append_items::void (GtkList* GList*) "gtk_list_append_items")
    (macro gtk_list_prepend_items::void (GtkList* GList*) "gtk_list_prepend_items")
    (macro gtk_list_remove_items::void (GtkList* GList*) "gtk_list_remove_items")
    (macro gtk_list_remove_items_no_unref::void (GtkList* GList*) "gtk_list_remove_items_no_unref")
    (macro gtk_list_clear_items::void (GtkList* gint gint) "gtk_list_clear_items")
    (macro gtk_list_select_item::void (GtkList* gint) "gtk_list_select_item")
    (macro gtk_list_unselect_item::void (GtkList* gint) "gtk_list_unselect_item")
    (macro gtk_list_select_child::void (GtkList* GtkWidget*) "gtk_list_select_child")
    (macro gtk_list_unselect_child::void (GtkList* GtkWidget*) "gtk_list_unselect_child")
    (macro gtk_list_child_position::gint (GtkList* GtkWidget*) "gtk_list_child_position")
    (macro gtk_list_set_selection_mode::void (GtkList* GtkSelectionMode) "gtk_list_set_selection_mode")
    (macro gtk_list_extend_selection::void (GtkList* GtkScrollType gfloat gboolean) "gtk_list_extend_selection")
    (macro gtk_list_start_selection::void (GtkList*) "gtk_list_start_selection")
    (macro gtk_list_end_selection::void (GtkList*) "gtk_list_end_selection")
    (macro gtk_list_select_all::void (GtkList*) "gtk_list_select_all")
    (macro gtk_list_unselect_all::void (GtkList*) "gtk_list_unselect_all")
    (macro gtk_list_scroll_horizontal::void (GtkList* GtkScrollType gfloat) "gtk_list_scroll_horizontal")
    (macro gtk_list_scroll_vertical::void (GtkList* GtkScrollType gfloat) "gtk_list_scroll_vertical")
    (macro gtk_list_toggle_add_mode::void (GtkList*) "gtk_list_toggle_add_mode")
    (macro gtk_list_toggle_focus_row::void (GtkList*) "gtk_list_toggle_focus_row")
    (macro gtk_list_toggle_row::void (GtkList* GtkWidget*) "gtk_list_toggle_row")
    (macro gtk_list_undo_selection::void (GtkList*) "gtk_list_undo_selection")
    (macro gtk_list_end_drag_selection::void (GtkList*) "gtk_list_end_drag_selection")
    (macro gtk_menu_shell_get_type::GtkType () "gtk_menu_shell_get_type")
    (macro gtk_menu_shell_append::void (GtkMenuShell* GtkWidget*) "gtk_menu_shell_append")
    (macro gtk_menu_shell_prepend::void (GtkMenuShell* GtkWidget*) "gtk_menu_shell_prepend")
    (macro gtk_menu_shell_insert::void (GtkMenuShell* GtkWidget* gint) "gtk_menu_shell_insert")
    (macro gtk_menu_shell_deactivate::void (GtkMenuShell*) "gtk_menu_shell_deactivate")
    (macro gtk_menu_shell_select_item::void (GtkMenuShell* GtkWidget*) "gtk_menu_shell_select_item")
    (macro gtk_menu_shell_deselect::void (GtkMenuShell*) "gtk_menu_shell_deselect")
    (macro gtk_menu_shell_activate_item::void (GtkMenuShell* GtkWidget* gboolean) "gtk_menu_shell_activate_item")
    (macro gtk_menu_get_type::GtkType () "gtk_menu_get_type")
    (macro gtk_menu_new::GtkWidget* () "gtk_menu_new")
    (macro gtk_menu_append::void (GtkMenu* GtkWidget*) "gtk_menu_append")
    (macro gtk_menu_prepend::void (GtkMenu* GtkWidget*) "gtk_menu_prepend")
    (macro gtk_menu_insert::void (GtkMenu* GtkWidget* gint) "gtk_menu_insert")
    (macro gtk_menu_popup::void (GtkMenu* GtkWidget* GtkWidget* GtkMenuPositionFunc gpointer guint guint32) "gtk_menu_popup")
    (macro gtk_menu_reposition::void (GtkMenu*) "gtk_menu_reposition")
    (macro gtk_menu_popdown::void (GtkMenu*) "gtk_menu_popdown")
    (macro gtk_menu_get_active::GtkWidget* (GtkMenu*) "gtk_menu_get_active")
    (macro gtk_menu_set_active::void (GtkMenu* guint) "gtk_menu_set_active")
    (macro gtk_menu_set_accel_group::void (GtkMenu* GtkAccelGroup*) "gtk_menu_set_accel_group")
    (macro gtk_menu_get_accel_group::GtkAccelGroup* (GtkMenu*) "gtk_menu_get_accel_group")
    (macro gtk_menu_get_uline_accel_group::GtkAccelGroup* (GtkMenu*) "gtk_menu_get_uline_accel_group")
    (macro gtk_menu_ensure_uline_accel_group::GtkAccelGroup* (GtkMenu*) "gtk_menu_ensure_uline_accel_group")
    (macro gtk_menu_attach_to_widget::void (GtkMenu* GtkWidget* GtkMenuDetachFunc) "gtk_menu_attach_to_widget")
    (macro gtk_menu_detach::void (GtkMenu*) "gtk_menu_detach")
    (macro gtk_menu_get_attach_widget::GtkWidget* (GtkMenu*) "gtk_menu_get_attach_widget")
    (macro gtk_menu_set_tearoff_state::void (GtkMenu* gboolean) "gtk_menu_set_tearoff_state")
    (macro gtk_menu_set_title::void (GtkMenu* gchar*) "gtk_menu_set_title")
    (macro gtk_menu_reorder_child::void (GtkMenu* GtkWidget* gint) "gtk_menu_reorder_child")
    (macro gtk_menu_bar_get_type::GtkType () "gtk_menu_bar_get_type")
    (macro gtk_menu_bar_new::GtkWidget* () "gtk_menu_bar_new")
    (macro gtk_menu_bar_append::void (GtkMenuBar* GtkWidget*) "gtk_menu_bar_append")
    (macro gtk_menu_bar_prepend::void (GtkMenuBar* GtkWidget*) "gtk_menu_bar_prepend")
    (macro gtk_menu_bar_insert::void (GtkMenuBar* GtkWidget* gint) "gtk_menu_bar_insert")
    (macro gtk_menu_bar_set_shadow_type::void (GtkMenuBar* GtkShadowType) "gtk_menu_bar_set_shadow_type")
    (macro gtk_option_menu_get_type::GtkType () "gtk_option_menu_get_type")
    (macro gtk_option_menu_new::GtkWidget* () "gtk_option_menu_new")
    (macro gtk_option_menu_get_menu::GtkWidget* (GtkOptionMenu*) "gtk_option_menu_get_menu")
    (macro gtk_option_menu_set_menu::void (GtkOptionMenu* GtkWidget*) "gtk_option_menu_set_menu")
    (macro gtk_option_menu_remove_menu::void (GtkOptionMenu*) "gtk_option_menu_remove_menu")
    (macro gtk_option_menu_set_history::void (GtkOptionMenu* guint) "gtk_option_menu_set_history")
    (macro gtk_packer_get_type::GtkType () "gtk_packer_get_type")
    (macro gtk_packer_new::GtkWidget* () "gtk_packer_new")
    (macro gtk_packer_add_defaults::void (GtkPacker* GtkWidget* GtkSideType GtkAnchorType GtkPackerOptions) "gtk_packer_add_defaults")
    (macro gtk_packer_add::void (GtkPacker* GtkWidget* GtkSideType GtkAnchorType GtkPackerOptions guint guint guint guint guint) "gtk_packer_add")
    (macro gtk_packer_set_child_packing::void (GtkPacker* GtkWidget* GtkSideType GtkAnchorType GtkPackerOptions guint guint guint guint guint) "gtk_packer_set_child_packing")
    (macro gtk_packer_reorder_child::void (GtkPacker* GtkWidget* gint) "gtk_packer_reorder_child")
    (macro gtk_packer_set_spacing::void (GtkPacker* guint) "gtk_packer_set_spacing")
    (macro gtk_packer_set_default_border_width::void (GtkPacker* guint) "gtk_packer_set_default_border_width")
    (macro gtk_packer_set_default_pad::void (GtkPacker* guint guint) "gtk_packer_set_default_pad")
    (macro gtk_packer_set_default_ipad::void (GtkPacker* guint guint) "gtk_packer_set_default_ipad")
    (macro gtk_pixmap_get_type::GtkType () "gtk_pixmap_get_type")
    (macro gtk_pixmap_new::GtkWidget* (GdkPixmap* GdkBitmap*) "gtk_pixmap_new")
    (macro gtk_pixmap_set::void (GtkPixmap* GdkPixmap* GdkBitmap*) "gtk_pixmap_set")
    (macro gtk_pixmap_get::void (GtkPixmap* GdkPixmap** GdkBitmap**) "gtk_pixmap_get")
    (macro gtk_pixmap_set_build_insensitive::void (GtkPixmap* guint) "gtk_pixmap_set_build_insensitive")
    (macro gtk_plug_get_type::guint () "gtk_plug_get_type")
    (macro gtk_plug_construct::void (GtkPlug* guint32) "gtk_plug_construct")
    (macro gtk_plug_new::GtkWidget* (guint32) "gtk_plug_new")
    (macro gtk_progress_get_type::GtkType () "gtk_progress_get_type")
    (macro gtk_progress_set_show_text::void (GtkProgress* gint) "gtk_progress_set_show_text")
    (macro gtk_progress_set_text_alignment::void (GtkProgress* gfloat gfloat) "gtk_progress_set_text_alignment")
    (macro gtk_progress_set_format_string::void (GtkProgress* gchar*) "gtk_progress_set_format_string")
    (macro gtk_progress_set_adjustment::void (GtkProgress* GtkAdjustment*) "gtk_progress_set_adjustment")
    (macro gtk_progress_configure::void (GtkProgress* gfloat gfloat gfloat) "gtk_progress_configure")
    (macro gtk_progress_set_percentage::void (GtkProgress* gfloat) "gtk_progress_set_percentage")
    (macro gtk_progress_set_value::void (GtkProgress* gfloat) "gtk_progress_set_value")
    (macro gtk_progress_get_value::gfloat (GtkProgress*) "gtk_progress_get_value")
    (macro gtk_progress_set_activity_mode::void (GtkProgress* guint) "gtk_progress_set_activity_mode")
    (macro gtk_progress_get_current_text::gchar* (GtkProgress*) "gtk_progress_get_current_text")
    (macro gtk_progress_get_text_from_value::gchar* (GtkProgress* gfloat) "gtk_progress_get_text_from_value")
    (macro gtk_progress_get_current_percentage::gfloat (GtkProgress*) "gtk_progress_get_current_percentage")
    (macro gtk_progress_get_percentage_from_value::gfloat (GtkProgress* gfloat) "gtk_progress_get_percentage_from_value")
    (macro gtk_progress_bar_get_type::GtkType () "gtk_progress_bar_get_type")
    (macro gtk_progress_bar_new::GtkWidget* () "gtk_progress_bar_new")
    (macro gtk_progress_bar_new_with_adjustment::GtkWidget* (GtkAdjustment*) "gtk_progress_bar_new_with_adjustment")
    (macro gtk_progress_bar_set_bar_style::void (GtkProgressBar* GtkProgressBarStyle) "gtk_progress_bar_set_bar_style")
    (macro gtk_progress_bar_set_discrete_blocks::void (GtkProgressBar* guint) "gtk_progress_bar_set_discrete_blocks")
    (macro gtk_progress_bar_set_activity_step::void (GtkProgressBar* guint) "gtk_progress_bar_set_activity_step")
    (macro gtk_progress_bar_set_activity_blocks::void (GtkProgressBar* guint) "gtk_progress_bar_set_activity_blocks")
    (macro gtk_progress_bar_set_orientation::void (GtkProgressBar* GtkProgressBarOrientation) "gtk_progress_bar_set_orientation")
    (macro gtk_progress_bar_update::void (GtkProgressBar* gfloat) "gtk_progress_bar_update")
    (macro gtk_radio_button_get_type::GtkType () "gtk_radio_button_get_type")
    (macro gtk_radio_button_new::GtkWidget* (GSList*) "gtk_radio_button_new")
    (macro gtk_radio_button_new_from_widget::GtkWidget* (GtkRadioButton*) "gtk_radio_button_new_from_widget")
    (macro gtk_radio_button_new_with_label::GtkWidget* (GSList* gchar*) "gtk_radio_button_new_with_label")
    (macro gtk_radio_button_new_with_label_from_widget::GtkWidget* (GtkRadioButton* gchar*) "gtk_radio_button_new_with_label_from_widget")
    (macro gtk_radio_button_group::GSList* (GtkRadioButton*) "gtk_radio_button_group")
    (macro gtk_radio_button_set_group::void (GtkRadioButton* GSList*) "gtk_radio_button_set_group")
    (macro gtk_radio_menu_item_get_type::GtkType () "gtk_radio_menu_item_get_type")
    (macro gtk_radio_menu_item_new::GtkWidget* (GSList*) "gtk_radio_menu_item_new")
    (macro gtk_radio_menu_item_new_with_label::GtkWidget* (GSList* gchar*) "gtk_radio_menu_item_new_with_label")
    (macro gtk_radio_menu_item_group::GSList* (GtkRadioMenuItem*) "gtk_radio_menu_item_group")
    (macro gtk_radio_menu_item_set_group::void (GtkRadioMenuItem* GSList*) "gtk_radio_menu_item_set_group")
    (macro gtk_rc_init::void () "gtk_rc_init")
    (macro gtk_rc_add_default_file::void (gchar*) "gtk_rc_add_default_file")
    (macro gtk_rc_set_default_files::void (gchar**) "gtk_rc_set_default_files")
    (macro gtk_rc_get_default_files::gchar** () "gtk_rc_get_default_files")
    (macro gtk_rc_parse::void (gchar*) "gtk_rc_parse")
    (macro gtk_rc_parse_string::void (gchar*) "gtk_rc_parse_string")
    (macro gtk_rc_reparse_all::gboolean () "gtk_rc_reparse_all")
    (macro gtk_rc_get_style::GtkStyle* (GtkWidget*) "gtk_rc_get_style")
    (macro gtk_rc_add_widget_name_style::void (GtkRcStyle* gchar*) "gtk_rc_add_widget_name_style")
    (macro gtk_rc_add_widget_class_style::void (GtkRcStyle* gchar*) "gtk_rc_add_widget_class_style")
    (macro gtk_rc_add_class_style::void (GtkRcStyle* gchar*) "gtk_rc_add_class_style")
    (macro gtk_rc_style_new::GtkRcStyle* () "gtk_rc_style_new")
    (macro gtk_rc_style_ref::void (GtkRcStyle*) "gtk_rc_style_ref")
    (macro gtk_rc_style_unref::void (GtkRcStyle*) "gtk_rc_style_unref")
    (macro gtk_rc_set_image_loader::void (GtkImageLoader) "gtk_rc_set_image_loader")
    (macro gtk_rc_load_image::GdkPixmap* (GdkColormap* GdkColor* gchar*) "gtk_rc_load_image")
    (macro gtk_rc_find_pixmap_in_path::gchar* (GScanner* gchar*) "gtk_rc_find_pixmap_in_path")
    (macro gtk_rc_find_module_in_path::gchar* (gchar*) "gtk_rc_find_module_in_path")
    (macro gtk_rc_get_theme_dir::gchar* () "gtk_rc_get_theme_dir")
    (macro gtk_rc_get_module_dir::gchar* () "gtk_rc_get_module_dir")
    (macro gtk_rc_parse_color::guint (GScanner* GdkColor*) "gtk_rc_parse_color")
    (macro gtk_rc_parse_state::guint (GScanner* GtkStateType*) "gtk_rc_parse_state")
    (macro gtk_rc_parse_priority::guint (GScanner* GtkPathPriorityType*) "gtk_rc_parse_priority")
    (macro gtk_viewport_get_type::GtkType () "gtk_viewport_get_type")
    (macro gtk_viewport_new::GtkWidget* (GtkAdjustment* GtkAdjustment*) "gtk_viewport_new")
    (macro gtk_viewport_get_hadjustment::GtkAdjustment* (GtkViewport*) "gtk_viewport_get_hadjustment")
    (macro gtk_viewport_get_vadjustment::GtkAdjustment* (GtkViewport*) "gtk_viewport_get_vadjustment")
    (macro gtk_viewport_set_hadjustment::void (GtkViewport* GtkAdjustment*) "gtk_viewport_set_hadjustment")
    (macro gtk_viewport_set_vadjustment::void (GtkViewport* GtkAdjustment*) "gtk_viewport_set_vadjustment")
    (macro gtk_viewport_set_shadow_type::void (GtkViewport* GtkShadowType) "gtk_viewport_set_shadow_type")
    (macro gtk_scrolled_window_get_type::GtkType () "gtk_scrolled_window_get_type")
    (macro gtk_scrolled_window_new::GtkWidget* (GtkAdjustment* GtkAdjustment*) "gtk_scrolled_window_new")
    (macro gtk_scrolled_window_set_hadjustment::void (GtkScrolledWindow* GtkAdjustment*) "gtk_scrolled_window_set_hadjustment")
    (macro gtk_scrolled_window_set_vadjustment::void (GtkScrolledWindow* GtkAdjustment*) "gtk_scrolled_window_set_vadjustment")
    (macro gtk_scrolled_window_get_hadjustment::GtkAdjustment* (GtkScrolledWindow*) "gtk_scrolled_window_get_hadjustment")
    (macro gtk_scrolled_window_get_vadjustment::GtkAdjustment* (GtkScrolledWindow*) "gtk_scrolled_window_get_vadjustment")
    (macro gtk_scrolled_window_set_policy::void (GtkScrolledWindow* GtkPolicyType GtkPolicyType) "gtk_scrolled_window_set_policy")
    (macro gtk_scrolled_window_set_placement::void (GtkScrolledWindow* GtkCornerType) "gtk_scrolled_window_set_placement")
    (macro gtk_scrolled_window_add_with_viewport::void (GtkScrolledWindow* GtkWidget*) "gtk_scrolled_window_add_with_viewport")
    (macro gtk_socket_new::GtkWidget* () "gtk_socket_new")
    (macro gtk_socket_get_type::guint () "gtk_socket_get_type")
    (macro gtk_socket_steal::void (GtkSocket* guint32) "gtk_socket_steal")
    (macro gtk_spin_button_get_type::GtkType () "gtk_spin_button_get_type")
    (macro gtk_spin_button_configure::void (GtkSpinButton* GtkAdjustment* gfloat guint) "gtk_spin_button_configure")
    (macro gtk_spin_button_new::GtkWidget* (GtkAdjustment* gfloat guint) "gtk_spin_button_new")
    (macro gtk_spin_button_set_adjustment::void (GtkSpinButton* GtkAdjustment*) "gtk_spin_button_set_adjustment")
    (macro gtk_spin_button_get_adjustment::GtkAdjustment* (GtkSpinButton*) "gtk_spin_button_get_adjustment")
    (macro gtk_spin_button_set_digits::void (GtkSpinButton* guint) "gtk_spin_button_set_digits")
    (macro gtk_spin_button_get_value_as_float::gfloat (GtkSpinButton*) "gtk_spin_button_get_value_as_float")
    (macro gtk_spin_button_get_value_as_int::gint (GtkSpinButton*) "gtk_spin_button_get_value_as_int")
    (macro gtk_spin_button_set_value::void (GtkSpinButton* gfloat) "gtk_spin_button_set_value")
    (macro gtk_spin_button_set_update_policy::void (GtkSpinButton* GtkSpinButtonUpdatePolicy) "gtk_spin_button_set_update_policy")
    (macro gtk_spin_button_set_numeric::void (GtkSpinButton* gboolean) "gtk_spin_button_set_numeric")
    (macro gtk_spin_button_spin::void (GtkSpinButton* GtkSpinType gfloat) "gtk_spin_button_spin")
    (macro gtk_spin_button_set_wrap::void (GtkSpinButton* gboolean) "gtk_spin_button_set_wrap")
    (macro gtk_spin_button_set_shadow_type::void (GtkSpinButton* GtkShadowType) "gtk_spin_button_set_shadow_type")
    (macro gtk_spin_button_set_snap_to_ticks::void (GtkSpinButton* gboolean) "gtk_spin_button_set_snap_to_ticks")
    (macro gtk_spin_button_update::void (GtkSpinButton*) "gtk_spin_button_update")
    (macro gtk_statusbar_get_type::guint () "gtk_statusbar_get_type")
    (macro gtk_statusbar_new::GtkWidget* () "gtk_statusbar_new")
    (macro gtk_statusbar_get_context_id::guint (GtkStatusbar* gchar*) "gtk_statusbar_get_context_id")
    (macro gtk_statusbar_push::guint (GtkStatusbar* guint gchar*) "gtk_statusbar_push")
    (macro gtk_statusbar_pop::void (GtkStatusbar* guint) "gtk_statusbar_pop")
    (macro gtk_statusbar_remove::void (GtkStatusbar* guint guint) "gtk_statusbar_remove")
    (macro gtk_tearoff_menu_item_get_type::GtkType () "gtk_tearoff_menu_item_get_type")
    (macro gtk_tearoff_menu_item_new::GtkWidget* () "gtk_tearoff_menu_item_new")
    (macro gtk_text_get_type::GtkType () "gtk_text_get_type")
    (macro gtk_text_new::GtkWidget* (GtkAdjustment* GtkAdjustment*) "gtk_text_new")
    (macro gtk_text_set_editable::void (GtkText* gboolean) "gtk_text_set_editable")
    (macro gtk_text_set_word_wrap::void (GtkText* gint) "gtk_text_set_word_wrap")
    (macro gtk_text_set_line_wrap::void (GtkText* gint) "gtk_text_set_line_wrap")
    (macro gtk_text_set_adjustments::void (GtkText* GtkAdjustment* GtkAdjustment*) "gtk_text_set_adjustments")
    (macro gtk_text_set_point::void (GtkText* guint) "gtk_text_set_point")
    (macro gtk_text_get_point::guint (GtkText*) "gtk_text_get_point")
    (macro gtk_text_get_length::guint (GtkText*) "gtk_text_get_length")
    (macro gtk_text_freeze::void (GtkText*) "gtk_text_freeze")
    (macro gtk_text_thaw::void (GtkText*) "gtk_text_thaw")
    (macro gtk_text_insert::void (GtkText* GdkFont* GdkColor* GdkColor* string gint) "gtk_text_insert")
    (macro gtk_text_backward_delete::gint (GtkText* guint) "gtk_text_backward_delete")
    (macro gtk_text_forward_delete::gint (GtkText* guint) "gtk_text_forward_delete")
    (macro gtk_theme_engine_get::GtkThemeEngine* (gchar*) "gtk_theme_engine_get")
    (macro gtk_theme_engine_ref::void (GtkThemeEngine*) "gtk_theme_engine_ref")
    (macro gtk_theme_engine_unref::void (GtkThemeEngine*) "gtk_theme_engine_unref")
    (macro gtk_tips_query_get_type::GtkType () "gtk_tips_query_get_type")
    (macro gtk_tips_query_new::GtkWidget* () "gtk_tips_query_new")
    (macro gtk_tips_query_start_query::void (GtkTipsQuery*) "gtk_tips_query_start_query")
    (macro gtk_tips_query_stop_query::void (GtkTipsQuery*) "gtk_tips_query_stop_query")
    (macro gtk_tips_query_set_caller::void (GtkTipsQuery* GtkWidget*) "gtk_tips_query_set_caller")
    (macro gtk_tips_query_set_labels::void (GtkTipsQuery* gchar* gchar*) "gtk_tips_query_set_labels")
    (macro gtk_tooltips_get_type::GtkType () "gtk_tooltips_get_type")
    (macro gtk_tooltips_new::GtkTooltips* () "gtk_tooltips_new")
    (macro gtk_tooltips_enable::void (GtkTooltips*) "gtk_tooltips_enable")
    (macro gtk_tooltips_disable::void (GtkTooltips*) "gtk_tooltips_disable")
    (macro gtk_tooltips_set_delay::void (GtkTooltips* guint) "gtk_tooltips_set_delay")
    (macro gtk_tooltips_set_tip::void (GtkTooltips* GtkWidget* gchar* gchar*) "gtk_tooltips_set_tip")
    (macro gtk_tooltips_set_colors::void (GtkTooltips* GdkColor* GdkColor*) "gtk_tooltips_set_colors")
    (macro gtk_tooltips_data_get::GtkTooltipsData* (GtkWidget*) "gtk_tooltips_data_get")
    (macro gtk_tooltips_force_window::void (GtkTooltips*) "gtk_tooltips_force_window")
    (macro gtk_toolbar_get_type::GtkType () "gtk_toolbar_get_type")
    (macro gtk_toolbar_new::GtkWidget* (GtkOrientation GtkToolbarStyle) "gtk_toolbar_new")
    (macro gtk_toolbar_append_item::GtkWidget* (GtkToolbar* string string string GtkWidget* GtkSignalFunc gpointer) "gtk_toolbar_append_item")
    (macro gtk_toolbar_prepend_item::GtkWidget* (GtkToolbar* string string string GtkWidget* GtkSignalFunc gpointer) "gtk_toolbar_prepend_item")
    (macro gtk_toolbar_insert_item::GtkWidget* (GtkToolbar* string string string GtkWidget* GtkSignalFunc gpointer gint) "gtk_toolbar_insert_item")
    (macro gtk_toolbar_append_space::void (GtkToolbar*) "gtk_toolbar_append_space")
    (macro gtk_toolbar_prepend_space::void (GtkToolbar*) "gtk_toolbar_prepend_space")
    (macro gtk_toolbar_insert_space::void (GtkToolbar* gint) "gtk_toolbar_insert_space")
    (macro gtk_toolbar_append_element::GtkWidget* (GtkToolbar* GtkToolbarChildType GtkWidget* string string string GtkWidget* GtkSignalFunc gpointer) "gtk_toolbar_append_element")
    (macro gtk_toolbar_prepend_element::GtkWidget* (GtkToolbar* GtkToolbarChildType GtkWidget* string string string GtkWidget* GtkSignalFunc gpointer) "gtk_toolbar_prepend_element")
    (macro gtk_toolbar_insert_element::GtkWidget* (GtkToolbar* GtkToolbarChildType GtkWidget* string string string GtkWidget* GtkSignalFunc gpointer gint) "gtk_toolbar_insert_element")
    (macro gtk_toolbar_append_widget::void (GtkToolbar* GtkWidget* string string) "gtk_toolbar_append_widget")
    (macro gtk_toolbar_prepend_widget::void (GtkToolbar* GtkWidget* string string) "gtk_toolbar_prepend_widget")
    (macro gtk_toolbar_insert_widget::void (GtkToolbar* GtkWidget* string string gint) "gtk_toolbar_insert_widget")
    (macro gtk_toolbar_set_orientation::void (GtkToolbar* GtkOrientation) "gtk_toolbar_set_orientation")
    (macro gtk_toolbar_set_style::void (GtkToolbar* GtkToolbarStyle) "gtk_toolbar_set_style")
    (macro gtk_toolbar_set_space_size::void (GtkToolbar* gint) "gtk_toolbar_set_space_size")
    (macro gtk_toolbar_set_space_style::void (GtkToolbar* GtkToolbarSpaceStyle) "gtk_toolbar_set_space_style")
    (macro gtk_toolbar_set_tooltips::void (GtkToolbar* gint) "gtk_toolbar_set_tooltips")
    (macro gtk_toolbar_set_button_relief::void (GtkToolbar* GtkReliefStyle) "gtk_toolbar_set_button_relief")
    (macro gtk_toolbar_get_button_relief::GtkReliefStyle (GtkToolbar*) "gtk_toolbar_get_button_relief")
    (macro gtk_tree_get_type::GtkType () "gtk_tree_get_type")
    (macro gtk_tree_new::GtkWidget* () "gtk_tree_new")
    (macro gtk_tree_append::void (GtkTree* GtkWidget*) "gtk_tree_append")
    (macro gtk_tree_prepend::void (GtkTree* GtkWidget*) "gtk_tree_prepend")
    (macro gtk_tree_insert::void (GtkTree* GtkWidget* gint) "gtk_tree_insert")
    (macro gtk_tree_remove_items::void (GtkTree* GList*) "gtk_tree_remove_items")
    (macro gtk_tree_clear_items::void (GtkTree* gint gint) "gtk_tree_clear_items")
    (macro gtk_tree_select_item::void (GtkTree* gint) "gtk_tree_select_item")
    (macro gtk_tree_unselect_item::void (GtkTree* gint) "gtk_tree_unselect_item")
    (macro gtk_tree_select_child::void (GtkTree* GtkWidget*) "gtk_tree_select_child")
    (macro gtk_tree_unselect_child::void (GtkTree* GtkWidget*) "gtk_tree_unselect_child")
    (macro gtk_tree_child_position::gint (GtkTree* GtkWidget*) "gtk_tree_child_position")
    (macro gtk_tree_set_selection_mode::void (GtkTree* GtkSelectionMode) "gtk_tree_set_selection_mode")
    (macro gtk_tree_set_view_mode::void (GtkTree* GtkTreeViewMode) "gtk_tree_set_view_mode")
    (macro gtk_tree_set_view_lines::void (GtkTree* guint) "gtk_tree_set_view_lines")
    (macro gtk_tree_remove_item::void (GtkTree* GtkWidget*) "gtk_tree_remove_item")
    (macro gtk_tree_item_get_type::GtkType () "gtk_tree_item_get_type")
    (macro gtk_tree_item_new::GtkWidget* () "gtk_tree_item_new")
    (macro gtk_tree_item_new_with_label::GtkWidget* (gchar*) "gtk_tree_item_new_with_label")
    (macro gtk_tree_item_set_subtree::void (GtkTreeItem* GtkWidget*) "gtk_tree_item_set_subtree")
    (macro gtk_tree_item_remove_subtree::void (GtkTreeItem*) "gtk_tree_item_remove_subtree")
    (macro gtk_tree_item_select::void (GtkTreeItem*) "gtk_tree_item_select")
    (macro gtk_tree_item_deselect::void (GtkTreeItem*) "gtk_tree_item_deselect")
    (macro gtk_tree_item_expand::void (GtkTreeItem*) "gtk_tree_item_expand")
    (macro gtk_tree_item_collapse::void (GtkTreeItem*) "gtk_tree_item_collapse")
    (macro gtk_vbutton_box_get_type::guint () "gtk_vbutton_box_get_type")
    (macro gtk_vbutton_box_new::GtkWidget* () "gtk_vbutton_box_new")
    (macro gtk_vbutton_box_get_spacing_default::gint () "gtk_vbutton_box_get_spacing_default")
    (macro gtk_vbutton_box_set_spacing_default::void (gint) "gtk_vbutton_box_set_spacing_default")
    (macro gtk_vbutton_box_get_layout_default::GtkButtonBoxStyle () "gtk_vbutton_box_get_layout_default")
    (macro gtk_vbutton_box_set_layout_default::void (GtkButtonBoxStyle) "gtk_vbutton_box_set_layout_default")
    (macro gtk_vpaned_get_type::guint () "gtk_vpaned_get_type")
    (macro gtk_vpaned_new::GtkWidget* () "gtk_vpaned_new")
    (macro gtk_vruler_get_type::guint () "gtk_vruler_get_type")
    (macro gtk_vruler_new::GtkWidget* () "gtk_vruler_new")
    (macro gtk_vscale_get_type::GtkType () "gtk_vscale_get_type")
    (macro gtk_vscale_new::GtkWidget* (GtkAdjustment*) "gtk_vscale_new")
    (macro gtk_vseparator_get_type::GtkType () "gtk_vseparator_get_type")
    (macro gtk_vseparator_new::GtkWidget* () "gtk_vseparator_new")
    (type gint8 char "gint8")
    (type guint8 uchar "guint8")
    (type gint16 short "gint16")
    (type guint16 ushort "guint16")
    (type gint32 int "gint32")
    (type guint32 uint "guint32")
    (type s-_GStaticMutex (struct (runtime_mutex::s-_GMutex* "runtime_mutex") (aligned_pad_u::s-woot__s1001 "aligned_pad_u")) "struct _GStaticMutex")
    (type GStaticMutex s-_GStaticMutex "GStaticMutex")
    (type s-_GMutex (struct) "struct _GMutex")
    (type s-woot__s1001 (union (pad::char-array-24 "pad") (dummy_double::double "dummy_double") (dummy_pointer::void* "dummy_pointer") (dummy_long::long "dummy_long")) "void")
    (type char-array-24 (array char) "char $[ 24 ]")
    ;   (type void* (pointer void) "void *")
    (type va_list void* "va_list")
    (type gchar char "gchar")
    (type gshort short "gshort")
    (type glong long "glong")
    (type gint int "gint")
    ;    (type gboolean bool "gboolean") if we call it bool, it breaks things like the :fill arg to box_pack_start
    (type gboolean gint "gboolean")
    (type guchar uchar "guchar")
    (type gushort ushort "gushort")
    (type gulong ulong "gulong")
    (type guint uint "guint")
    (type gfloat float "gfloat")
    (type gdouble double "gdouble")
    (type gpointer void* "gpointer")
    (type gconstpointer void* "gconstpointer")
    (type gssize gint32 "gssize")
    (type gsize guint32 "gsize")
    (type GQuark guint32 "GQuark")
    (type GTime gint32 "GTime")
    (type s-_GAllocator (struct) "struct _GAllocator")
    (type GAllocator s-_GAllocator "GAllocator")
    (type s-_GArray (struct (data::gchar* "data") (len::guint "len")) "struct _GArray")
    (type GArray s-_GArray "GArray")
    (type s-_GByteArray (struct (data::guint8* "data") (len::guint "len")) "struct _GByteArray")
    (type GByteArray s-_GByteArray "GByteArray")
    (type s-_GCache (struct) "struct _GCache")
    (type GCache s-_GCache "GCache")
    (type s-_GCompletion (struct (items::GList* "items") (func::GCompletionFunc "func") (prefix::gchar* "prefix") (cache::GList* "cache")) "struct _GCompletion")
    (type GCompletion s-_GCompletion "GCompletion")
    (type s-_GData (struct) "struct _GData")
    (type GData s-_GData "GData")
    (type s-_GDebugKey (struct (key::gchar* "key") (value::guint "value")) "struct _GDebugKey")
    (type GDebugKey s-_GDebugKey "GDebugKey")
    (type s-_GHashTable (struct) "struct _GHashTable")
    (type GHashTable s-_GHashTable "GHashTable")
    (type s-_GHook (struct (data::gpointer "data") (next::GHook* "next") (prev::GHook* "prev") (ref_count::guint "ref_count") (hook_id::guint "hook_id") (flags::guint "flags") (func::gpointer "func") (destroy::GDestroyNotify "destroy")) "struct _GHook")
    (type GHook s-_GHook "GHook")
    (type s-_GHookList (struct (seq_id::guint "seq_id") (hook_size::guint "hook_size") (is_setup::guint "is_setup") (hooks::GHook* "hooks") (hook_memchunk::GMemChunk* "hook_memchunk") (hook_free::GHookFreeFunc "hook_free") (hook_destroy::GHookFreeFunc "hook_destroy")) "struct _GHookList")
    (type GHookList s-_GHookList "GHookList")
    (type s-_GList (struct (data::gpointer "data") (next::GList* "next") (prev::GList* "prev")) "struct _GList")
    (type GList s-_GList "GList")
    (type s-_GMemChunk (struct) "struct _GMemChunk")
    (type GMemChunk s-_GMemChunk "GMemChunk")
    (type s-_GNode (struct (data::gpointer "data") (next::GNode* "next") (prev::GNode* "prev") (parent::GNode* "parent") (children::GNode* "children")) "struct _GNode")
    (type GNode s-_GNode "GNode")
    (type s-_GPtrArray (struct (pdata::gpointer* "pdata") (len::guint "len")) "struct _GPtrArray")
    (type GPtrArray s-_GPtrArray "GPtrArray")
    (type s-_GRelation (struct) "struct _GRelation")
    (type GRelation s-_GRelation "GRelation")
    (type s-_GScanner (struct (user_data::gpointer "user_data") (max_parse_errors::guint "max_parse_errors") (parse_errors::guint "parse_errors") (input_name::gchar* "input_name") (derived_data::gpointer "derived_data") (config::GScannerConfig* "config") (token::GTokenType "token") (value::GTokenValue "value") (line::guint "line") (position::guint "position") (next_token::GTokenType "next_token") (next_value::GTokenValue "next_value") (next_line::guint "next_line") (next_position::guint "next_position") (symbol_table::GHashTable* "symbol_table") (input_fd::gint "input_fd") (text::gchar* "text") (text_end::gchar* "text_end") (buffer::gchar* "buffer") (scope_id::guint "scope_id") (msg_handler::GScannerMsgFunc "msg_handler")) "struct _GScanner")
    (type GScanner s-_GScanner "GScanner")
    (type s-_GScannerConfig (struct (cset_skip_characters::gchar* "cset_skip_characters") (cset_identifier_first::gchar* "cset_identifier_first") (cset_identifier_nth::gchar* "cset_identifier_nth") (cpair_comment_single::gchar* "cpair_comment_single") (case_sensitive::guint "case_sensitive") (skip_comment_multi::guint "skip_comment_multi") (skip_comment_single::guint "skip_comment_single") (scan_comment_multi::guint "scan_comment_multi") (scan_identifier::guint "scan_identifier") (scan_identifier_1char::guint "scan_identifier_1char") (scan_identifier_NULL::guint "scan_identifier_NULL") (scan_symbols::guint "scan_symbols") (scan_binary::guint "scan_binary") (scan_octal::guint "scan_octal") (scan_float::guint "scan_float") (scan_hex::guint "scan_hex") (scan_hex_dollar::guint "scan_hex_dollar") (scan_string_sq::guint "scan_string_sq") (scan_string_dq::guint "scan_string_dq") (numbers_2_int::guint "numbers_2_int") (int_2_float::guint "int_2_float") (identifier_2_string::guint "identifier_2_string") (char_2_token::guint "char_2_token") (symbol_2_token::guint "symbol_2_token") (scope_0_fallback::guint "scope_0_fallback")) "struct _GScannerConfig")
    (type GScannerConfig s-_GScannerConfig "GScannerConfig")
    (type s-_GSList (struct (data::gpointer "data") (next::GSList* "next")) "struct _GSList")
    (type GSList s-_GSList "GSList")
    (type s-_GString (struct (str::gchar* "str") (len::gint "len")) "struct _GString")
    (type GString s-_GString "GString")
    (type s-_GStringChunk (struct) "struct _GStringChunk")
    (type GStringChunk s-_GStringChunk "GStringChunk")
    (type s-_GTimer (struct) "struct _GTimer")
    (type GTimer s-_GTimer "GTimer")
    (type s-_GTree (struct) "struct _GTree")
    (type GTree s-_GTree "GTree")
    (type s-_GTuples (struct (len::guint "len")) "struct _GTuples")
    (type GTuples s-_GTuples "GTuples")
    (type s-_GTokenValue (union (v_symbol::gpointer "v_symbol") (v_identifier::gchar* "v_identifier") (v_binary::gulong "v_binary") (v_octal::gulong "v_octal") (v_int::gulong "v_int") (v_float::gdouble "v_float") (v_hex::gulong "v_hex") (v_string::gchar* "v_string") (v_comment::gchar* "v_comment") (v_char::guchar "v_char") (v_error::guint "v_error")) "union _GTokenValue")
    (type GTokenValue s-_GTokenValue "GTokenValue")
    (type s-_GIOChannel (struct (channel_flags::guint "channel_flags") (ref_count::guint "ref_count") (funcs::GIOFuncs* "funcs")) "struct _GIOChannel")
    (type GIOChannel s-_GIOChannel "GIOChannel")
    (type woot__e1018 int "long")
    (macro G_TRAVERSE_LEAFS::int "G_TRAVERSE_LEAFS")
    (macro G_TRAVERSE_NON_LEAFS::int "G_TRAVERSE_NON_LEAFS")
    (macro G_TRAVERSE_ALL::int "G_TRAVERSE_ALL")
    (macro G_TRAVERSE_MASK::int "G_TRAVERSE_MASK")
    (type GTraverseFlags woot__e1018 "GTraverseFlags")
    (type woot__e1019 int "long")
    (macro G_IN_ORDER::int "G_IN_ORDER")
    (macro G_PRE_ORDER::int "G_PRE_ORDER")
    (macro G_POST_ORDER::int "G_POST_ORDER")
    (macro G_LEVEL_ORDER::int "G_LEVEL_ORDER")
    (type GTraverseType woot__e1019 "GTraverseType")
    (type woot__e1020 int "long")
    (macro G_LOG_FLAG_RECURSION::int "G_LOG_FLAG_RECURSION")
    (macro G_LOG_FLAG_FATAL::int "G_LOG_FLAG_FATAL")
    (macro G_LOG_LEVEL_ERROR::int "G_LOG_LEVEL_ERROR")
    (macro G_LOG_LEVEL_CRITICAL::int "G_LOG_LEVEL_CRITICAL")
    (macro G_LOG_LEVEL_WARNING::int "G_LOG_LEVEL_WARNING")
    (macro G_LOG_LEVEL_MESSAGE::int "G_LOG_LEVEL_MESSAGE")
    (macro G_LOG_LEVEL_INFO::int "G_LOG_LEVEL_INFO")
    (macro G_LOG_LEVEL_DEBUG::int "G_LOG_LEVEL_DEBUG")
    (macro G_LOG_LEVEL_MASK::int "G_LOG_LEVEL_MASK")
    (type GLogLevelFlags woot__e1020 "GLogLevelFlags")
    (type gpointer->gpointer "gpointer ($(gpointer))")
    (type *gpointer->gpointer (function gpointer (gpointer)) "gpointer ((*$)(gpointer))")
    (type GCacheNewFunc *gpointer->gpointer "GCacheNewFunc")
    (type GCacheDupFunc *gpointer->gpointer "GCacheDupFunc")
    (type gpointer->void "void ($(gpointer))")
    (type *gpointer->void (function void (gpointer)) "void ((*$)(gpointer))")
    (type GCacheDestroyFunc *gpointer->void "GCacheDestroyFunc")
    (type gconstpointer,gconstpointer->gint "gint ($(gconstpointer,gconstpointer))")
    (type *gconstpointer,gconstpointer->gint (function gint (gconstpointer gconstpointer)) "gint ((*$)(gconstpointer,gconstpointer))")
    (type GCompareFunc *gconstpointer,gconstpointer->gint "GCompareFunc")
    ;   (type gchar* (pointer gchar) "gchar *")
    (type gchar* string "gchar *")
    (type gpointer->gchar* "gchar *($(gpointer))")
    (type *gpointer->gchar* (function gchar* (gpointer)) "gchar *((*$)(gpointer))")
    (type GCompletionFunc *gpointer->gchar* "GCompletionFunc")
    (type GDestroyNotify *gpointer->void "GDestroyNotify")
    (type GQuark,gpointer,gpointer->void "void ($(GQuark,gpointer,gpointer))")
    (type *GQuark,gpointer,gpointer->void (function void (GQuark gpointer gpointer)) "void ((*$)(GQuark,gpointer,gpointer))")
    (type GDataForeachFunc *GQuark,gpointer,gpointer->void "GDataForeachFunc")
    (type gpointer,gpointer->void "void ($(gpointer,gpointer))")
    (type *gpointer,gpointer->void (function void (gpointer gpointer)) "void ((*$)(gpointer,gpointer))")
    (type GFunc *gpointer,gpointer->void "GFunc")
    (type gconstpointer->guint "guint ($(gconstpointer))")
    (type *gconstpointer->guint (function guint (gconstpointer)) "guint ((*$)(gconstpointer))")
    (type GHashFunc *gconstpointer->guint "GHashFunc")
    (type GFreeFunc *gpointer->void "GFreeFunc")
    (type gpointer,gpointer,gpointer->void "void ($(gpointer,gpointer,gpointer))")
    (type *gpointer,gpointer,gpointer->void (function void (gpointer gpointer gpointer)) "void ((*$)(gpointer,gpointer,gpointer))")
    (type GHFunc *gpointer,gpointer,gpointer->void "GHFunc")
    (type gpointer,gpointer,gpointer->gboolean "gboolean ($(gpointer,gpointer,gpointer))")
    (type *gpointer,gpointer,gpointer->gboolean (function gboolean (gpointer gpointer gpointer)) "gboolean ((*$)(gpointer,gpointer,gpointer))")
    (type GHRFunc *gpointer,gpointer,gpointer->gboolean "GHRFunc")
    (type GHook*,GHook*->gint "gint ($(GHook *,GHook *))")
    (type *GHook*,GHook*->gint (function gint (GHook* GHook*)) "gint ((*$)(GHook *,GHook *))")
    (type GHookCompareFunc *GHook*,GHook*->gint "GHookCompareFunc")
    (type GHook*,gpointer->gboolean "gboolean ($(GHook *,gpointer))")
    (type *GHook*,gpointer->gboolean (function gboolean (GHook* gpointer)) "gboolean ((*$)(GHook *,gpointer))")
    (type GHookFindFunc *GHook*,gpointer->gboolean "GHookFindFunc")
    (type GHook*,gpointer->void "void ($(GHook *,gpointer))")
    (type *GHook*,gpointer->void (function void (GHook* gpointer)) "void ((*$)(GHook *,gpointer))")
    (type GHookMarshaller *GHook*,gpointer->void "GHookMarshaller")
    (type GHookCheckMarshaller *GHook*,gpointer->gboolean "GHookCheckMarshaller")
    (type GHookFunc *gpointer->void "GHookFunc")
    (type gpointer->gboolean "gboolean ($(gpointer))")
    (type *gpointer->gboolean (function gboolean (gpointer)) "gboolean ((*$)(gpointer))")
    (type GHookCheckFunc *gpointer->gboolean "GHookCheckFunc")
    (type GHookList*,GHook*->void "void ($(GHookList *,GHook *))")
    (type *GHookList*,GHook*->void (function void (GHookList* GHook*)) "void ((*$)(GHookList *,GHook *))")
    (type GHookFreeFunc *GHookList*,GHook*->void "GHookFreeFunc")
    (type gchar*,GLogLevelFlags,gchar*,gpointer->void "void ($(gchar *,GLogLevelFlags,gchar *,gpointer))")
    (type *gchar*,GLogLevelFlags,gchar*,gpointer->void (function void (gchar* GLogLevelFlags gchar* gpointer)) "void ((*$)(gchar *,GLogLevelFlags,gchar *,gpointer))")
    (type GLogFunc *gchar*,GLogLevelFlags,gchar*,gpointer->void "GLogFunc")
    (type GNode*,gpointer->gboolean "gboolean ($(GNode *,gpointer))")
    (type *GNode*,gpointer->gboolean (function gboolean (GNode* gpointer)) "gboolean ((*$)(GNode *,gpointer))")
    (type GNodeTraverseFunc *GNode*,gpointer->gboolean "GNodeTraverseFunc")
    (type GNode*,gpointer->void "void ($(GNode *,gpointer))")
    (type *GNode*,gpointer->void (function void (GNode* gpointer)) "void ((*$)(GNode *,gpointer))")
    (type GNodeForeachFunc *GNode*,gpointer->void "GNodeForeachFunc")
    (type gpointer,gpointer->gint "gint ($(gpointer,gpointer))")
    (type *gpointer,gpointer->gint (function gint (gpointer gpointer)) "gint ((*$)(gpointer,gpointer))")
    (type GSearchFunc *gpointer,gpointer->gint "GSearchFunc")
    (type GScanner*,gchar*,gint->void "void ($(GScanner *,gchar *,gint))")
    (type *GScanner*,gchar*,gint->void (function void (GScanner* gchar* gint)) "void ((*$)(GScanner *,gchar *,gint))")
    (type GScannerMsgFunc *GScanner*,gchar*,gint->void "GScannerMsgFunc")
    (type gpointer,gpointer,gpointer->gint "gint ($(gpointer,gpointer,gpointer))")
    (type *gpointer,gpointer,gpointer->gint (function gint (gpointer gpointer gpointer)) "gint ((*$)(gpointer,gpointer,gpointer))")
    (type GTraverseFunc *gpointer,gpointer,gpointer->gint "GTraverseFunc")
    (type void->void "void ($(void))")
    (type *void->void (function void (void)) "void ((*$)(void))")
    (type GVoidFunc *void->void "GVoidFunc")
    (type guint8* (pointer guint8) "guint8 *")
    (type gpointer* (pointer gpointer) "gpointer *")
    (type woot__e1021 int "long")
    (macro G_HOOK_FLAG_ACTIVE::int "G_HOOK_FLAG_ACTIVE")
    (macro G_HOOK_FLAG_IN_CALL::int "G_HOOK_FLAG_IN_CALL")
    (macro G_HOOK_FLAG_MASK::int "G_HOOK_FLAG_MASK")
    (type GHookFlagMask woot__e1021 "GHookFlagMask")
    (type gchar*->void "void ($(gchar *))")
    (type *gchar*->void (function void (gchar*)) "void ((*$)(gchar *))")
    (type GPrintFunc *gchar*->void "GPrintFunc")
    (type GErrorFunc *gchar*->void "GErrorFunc")
    (type GWarningFunc *gchar*->void "GWarningFunc")
    (type woot__e1022 int "long")
    (macro G_ERR_UNKNOWN::int "G_ERR_UNKNOWN")
    (macro G_ERR_UNEXP_EOF::int "G_ERR_UNEXP_EOF")
    (macro G_ERR_UNEXP_EOF_IN_STRING::int "G_ERR_UNEXP_EOF_IN_STRING")
    (macro G_ERR_UNEXP_EOF_IN_COMMENT::int "G_ERR_UNEXP_EOF_IN_COMMENT")
    (macro G_ERR_NON_DIGIT_IN_CONST::int "G_ERR_NON_DIGIT_IN_CONST")
    (macro G_ERR_DIGIT_RADIX::int "G_ERR_DIGIT_RADIX")
    (macro G_ERR_FLOAT_RADIX::int "G_ERR_FLOAT_RADIX")
    (macro G_ERR_FLOAT_MALFORMED::int "G_ERR_FLOAT_MALFORMED")
    (type GErrorType woot__e1022 "GErrorType")
    (type woot__e1023 int "long")
    (macro G_TOKEN_EOF::int "G_TOKEN_EOF")
    (macro G_TOKEN_LEFT_PAREN::int "G_TOKEN_LEFT_PAREN")
    (macro G_TOKEN_RIGHT_PAREN::int "G_TOKEN_RIGHT_PAREN")
    (macro G_TOKEN_LEFT_CURLY::int "G_TOKEN_LEFT_CURLY")
    (macro G_TOKEN_RIGHT_CURLY::int "G_TOKEN_RIGHT_CURLY")
    (macro G_TOKEN_LEFT_BRACE::int "G_TOKEN_LEFT_BRACE")
    (macro G_TOKEN_RIGHT_BRACE::int "G_TOKEN_RIGHT_BRACE")
    (macro G_TOKEN_EQUAL_SIGN::int "G_TOKEN_EQUAL_SIGN")
    (macro G_TOKEN_COMMA::int "G_TOKEN_COMMA")
    (macro G_TOKEN_NONE::int "G_TOKEN_NONE")
    (macro G_TOKEN_ERROR::int "G_TOKEN_ERROR")
    (macro G_TOKEN_CHAR::int "G_TOKEN_CHAR")
    (macro G_TOKEN_BINARY::int "G_TOKEN_BINARY")
    (macro G_TOKEN_OCTAL::int "G_TOKEN_OCTAL")
    (macro G_TOKEN_INT::int "G_TOKEN_INT")
    (macro G_TOKEN_HEX::int "G_TOKEN_HEX")
    (macro G_TOKEN_FLOAT::int "G_TOKEN_FLOAT")
    (macro G_TOKEN_STRING::int "G_TOKEN_STRING")
    (macro G_TOKEN_SYMBOL::int "G_TOKEN_SYMBOL")
    (macro G_TOKEN_IDENTIFIER::int "G_TOKEN_IDENTIFIER")
    (macro G_TOKEN_IDENTIFIER_NULL::int "G_TOKEN_IDENTIFIER_NULL")
    (macro G_TOKEN_COMMENT_SINGLE::int "G_TOKEN_COMMENT_SINGLE")
    (macro G_TOKEN_COMMENT_MULTI::int "G_TOKEN_COMMENT_MULTI")
    (macro G_TOKEN_LAST::int "G_TOKEN_LAST")
    (type GTokenType woot__e1023 "GTokenType")
    (type GDateYear guint16 "GDateYear")
    (type GDateDay guint8 "GDateDay")
    (type s-_GDate (struct (julian_days::guint "julian_days") (julian::guint "julian") (dmy::guint "dmy") (day::guint "day") (month::guint "month") (year::guint "year")) "struct _GDate")
    (type GDate s-_GDate "GDate")
    (type s-tm (struct) "struct tm")
    (type woot__e1024 int "long")
    (macro G_DATE_DAY::int "G_DATE_DAY")
    (macro G_DATE_MONTH::int "G_DATE_MONTH")
    (macro G_DATE_YEAR::int "G_DATE_YEAR")
    (type GDateDMY woot__e1024 "GDateDMY")
    (type woot__e1025 int "long")
    (macro G_DATE_BAD_WEEKDAY::int "G_DATE_BAD_WEEKDAY")
    (macro G_DATE_MONDAY::int "G_DATE_MONDAY")
    (macro G_DATE_TUESDAY::int "G_DATE_TUESDAY")
    (macro G_DATE_WEDNESDAY::int "G_DATE_WEDNESDAY")
    (macro G_DATE_THURSDAY::int "G_DATE_THURSDAY")
    (macro G_DATE_FRIDAY::int "G_DATE_FRIDAY")
    (macro G_DATE_SATURDAY::int "G_DATE_SATURDAY")
    (macro G_DATE_SUNDAY::int "G_DATE_SUNDAY")
    (type GDateWeekday woot__e1025 "GDateWeekday")
    (type woot__e1026 int "long")
    (macro G_DATE_BAD_MONTH::int "G_DATE_BAD_MONTH")
    (macro G_DATE_JANUARY::int "G_DATE_JANUARY")
    (macro G_DATE_FEBRUARY::int "G_DATE_FEBRUARY")
    (macro G_DATE_MARCH::int "G_DATE_MARCH")
    (macro G_DATE_APRIL::int "G_DATE_APRIL")
    (macro G_DATE_MAY::int "G_DATE_MAY")
    (macro G_DATE_JUNE::int "G_DATE_JUNE")
    (macro G_DATE_JULY::int "G_DATE_JULY")
    (macro G_DATE_AUGUST::int "G_DATE_AUGUST")
    (macro G_DATE_SEPTEMBER::int "G_DATE_SEPTEMBER")
    (macro G_DATE_OCTOBER::int "G_DATE_OCTOBER")
    (macro G_DATE_NOVEMBER::int "G_DATE_NOVEMBER")
    (macro G_DATE_DECEMBER::int "G_DATE_DECEMBER")
    (type GDateMonth woot__e1026 "GDateMonth")
    (type s-_GIOFuncs (struct (io_read::*GIOChannel*,gchar*,guint,guint*->GIOError "io_read") (io_write::*GIOChannel*,gchar*,guint,guint*->GIOError "io_write") (io_seek::*GIOChannel*,gint,GSeekType->GIOError "io_seek") (io_close::*GIOChannel*->void "io_close") (io_add_watch::*GIOChannel*,gint,GIOCondition,GIOFunc,gpointer,GDestroyNotify->guint "io_add_watch") (io_free::*GIOChannel*->void "io_free")) "struct _GIOFuncs")
    (type GIOFuncs s-_GIOFuncs "GIOFuncs")
    (type woot__e1027 int "long")
    (macro G_IO_ERROR_NONE::int "G_IO_ERROR_NONE")
    (macro G_IO_ERROR_AGAIN::int "G_IO_ERROR_AGAIN")
    (macro G_IO_ERROR_INVAL::int "G_IO_ERROR_INVAL")
    (macro G_IO_ERROR_UNKNOWN::int "G_IO_ERROR_UNKNOWN")
    (type GIOError woot__e1027 "GIOError")
    (type woot__e1028 int "long")
    (macro G_SEEK_CUR::int "G_SEEK_CUR")
    (macro G_SEEK_SET::int "G_SEEK_SET")
    (macro G_SEEK_END::int "G_SEEK_END")
    (type GSeekType woot__e1028 "GSeekType")
    (type woot__e1029 int "long")
    (macro G_IO_IN::int "G_IO_IN")
    (macro G_IO_OUT::int "G_IO_OUT")
    (macro G_IO_PRI::int "G_IO_PRI")
    (macro G_IO_ERR::int "G_IO_ERR")
    (macro G_IO_HUP::int "G_IO_HUP")
    (macro G_IO_NVAL::int "G_IO_NVAL")
    (type GIOCondition woot__e1029 "GIOCondition")
    (type GIOChannel*,GIOCondition,gpointer->gboolean "gboolean ($(GIOChannel *,GIOCondition,gpointer))")
    (type *GIOChannel*,GIOCondition,gpointer->gboolean (function gboolean (GIOChannel* GIOCondition gpointer)) "gboolean ((*$)(GIOChannel *,GIOCondition,gpointer))")
    (type GIOFunc *GIOChannel*,GIOCondition,gpointer->gboolean "GIOFunc")
    (type guint* (pointer guint) "guint *")
    (type GIOChannel*,gchar*,guint,guint*->GIOError "GIOError ($(GIOChannel *,gchar *,guint,guint *))")
    (type *GIOChannel*,gchar*,guint,guint*->GIOError (function GIOError (GIOChannel* gchar* guint guint*)) "GIOError ((*$)(GIOChannel *,gchar *,guint,guint *))")
    (type GIOChannel*,gint,GSeekType->GIOError "GIOError ($(GIOChannel *,gint,GSeekType))")
    (type *GIOChannel*,gint,GSeekType->GIOError (function GIOError (GIOChannel* gint GSeekType)) "GIOError ((*$)(GIOChannel *,gint,GSeekType))")
    (type GIOChannel*->void "void ($(GIOChannel *))")
    (type *GIOChannel*->void (function void (GIOChannel*)) "void ((*$)(GIOChannel *))")
    (type GIOChannel*,gint,GIOCondition,GIOFunc,gpointer,GDestroyNotify->guint "guint ($(GIOChannel *,gint,GIOCondition,GIOFunc,gpointer,GDestroyNotify))")
    (type *GIOChannel*,gint,GIOCondition,GIOFunc,gpointer,GDestroyNotify->guint (function guint (GIOChannel* gint GIOCondition GIOFunc gpointer GDestroyNotify)) "guint ((*$)(GIOChannel *,gint,GIOCondition,GIOFunc,gpointer,GDestroyNotify))")
    (type s-_GTimeVal (struct (tv_sec::glong "tv_sec") (tv_usec::glong "tv_usec")) "struct _GTimeVal")
    (type GTimeVal s-_GTimeVal "GTimeVal")
    (type s-_GSourceFuncs (struct (prepare::*gpointer,GTimeVal*,gint*,gpointer->gboolean "prepare") (check::*gpointer,GTimeVal*,gpointer->gboolean "check") (dispatch::*gpointer,GTimeVal*,gpointer->gboolean "dispatch") (destroy::GDestroyNotify "destroy")) "struct _GSourceFuncs")
    (type GSourceFuncs s-_GSourceFuncs "GSourceFuncs")
    (type s-_GMainLoop (struct) "struct _GMainLoop")
    (type GMainLoop s-_GMainLoop "GMainLoop")
    (type gint* (pointer gint) "gint *")
    (type gpointer,GTimeVal*,gint*,gpointer->gboolean "gboolean ($(gpointer,GTimeVal *,gint *,gpointer))")
    (type *gpointer,GTimeVal*,gint*,gpointer->gboolean (function gboolean (gpointer GTimeVal* gint* gpointer)) "gboolean ((*$)(gpointer,GTimeVal *,gint *,gpointer))")
    (type gpointer,GTimeVal*,gpointer->gboolean "gboolean ($(gpointer,GTimeVal *,gpointer))")
    (type *gpointer,GTimeVal*,gpointer->gboolean (function gboolean (gpointer GTimeVal* gpointer)) "gboolean ((*$)(gpointer,GTimeVal *,gpointer))")
    (type GSourceFunc *gpointer->gboolean "GSourceFunc")
    (type s-_GPollFD (struct (fd::gint "fd") (events::gushort "events") (revents::gushort "revents")) "struct _GPollFD")
    (type GPollFD s-_GPollFD "GPollFD")
    (type GPollFD*,guint,gint->gint "gint ($(GPollFD *,guint,gint))")
    (type *GPollFD*,guint,gint->gint (function gint (GPollFD* guint gint)) "gint ((*$)(GPollFD *,guint,gint))")
    (type GPollFunc *GPollFD*,guint,gint->gint "GPollFunc")
    (type GMutex s-_GMutex "GMutex")
    (type s-_GCond (struct) "struct _GCond")
    (type GCond s-_GCond "GCond")
    (type s-_GPrivate (struct) "struct _GPrivate")
    (type GPrivate s-_GPrivate "GPrivate")
    (type s-_GStaticPrivate (struct (index::guint "index")) "struct _GStaticPrivate")
    (type GStaticPrivate s-_GStaticPrivate "GStaticPrivate")
    (type s-_GThreadFunctions (struct (mutex_new::*void->GMutex* "mutex_new") (mutex_lock::*GMutex*->void "mutex_lock") (mutex_trylock::*GMutex*->gboolean "mutex_trylock") (mutex_unlock::*GMutex*->void "mutex_unlock") (mutex_free::*GMutex*->void "mutex_free") (cond_new::*void->GCond* "cond_new") (cond_signal::*GCond*->void "cond_signal") (cond_broadcast::*GCond*->void "cond_broadcast") (cond_wait::*GCond*,GMutex*->void "cond_wait") (cond_timed_wait::*GCond*,GMutex*,GTimeVal*->gboolean "cond_timed_wait") (cond_free::*GCond*->void "cond_free") (private_new::*GDestroyNotify->GPrivate* "private_new") (private_get::*GPrivate*->gpointer "private_get") (private_set::*GPrivate*,gpointer->void "private_set")) "struct _GThreadFunctions")
    (type GThreadFunctions s-_GThreadFunctions "GThreadFunctions")
    (type void->GMutex* "GMutex *($(void))")
    (type *void->GMutex* (function GMutex* (void)) "GMutex *((*$)(void))")
    (type GMutex*->void "void ($(GMutex *))")
    (type *GMutex*->void (function void (GMutex*)) "void ((*$)(GMutex *))")
    (type GMutex*->gboolean "gboolean ($(GMutex *))")
    (type *GMutex*->gboolean (function gboolean (GMutex*)) "gboolean ((*$)(GMutex *))")
    (type void->GCond* "GCond *($(void))")
    (type *void->GCond* (function GCond* (void)) "GCond *((*$)(void))")
    (type GCond*->void "void ($(GCond *))")
    (type *GCond*->void (function void (GCond*)) "void ((*$)(GCond *))")
    (type GCond*,GMutex*->void "void ($(GCond *,GMutex *))")
    (type *GCond*,GMutex*->void (function void (GCond* GMutex*)) "void ((*$)(GCond *,GMutex *))")
    (type GCond*,GMutex*,GTimeVal*->gboolean "gboolean ($(GCond *,GMutex *,GTimeVal *))")
    (type *GCond*,GMutex*,GTimeVal*->gboolean (function gboolean (GCond* GMutex* GTimeVal*)) "gboolean ((*$)(GCond *,GMutex *,GTimeVal *))")
    (type GDestroyNotify->GPrivate* "GPrivate *($(GDestroyNotify))")
    (type *GDestroyNotify->GPrivate* (function GPrivate* (GDestroyNotify)) "GPrivate *((*$)(GDestroyNotify))")
    (type GPrivate*->gpointer "gpointer ($(GPrivate *))")
    (type *GPrivate*->gpointer (function gpointer (GPrivate*)) "gpointer ((*$)(GPrivate *))")
    (type GPrivate*,gpointer->void "void ($(GPrivate *,gpointer))")
    (type *GPrivate*,gpointer->void (function void (GPrivate* gpointer)) "void ((*$)(GPrivate *,gpointer))")
    (type GdkAtom gulong "GdkAtom")
    (type s-_GdkColor (struct (pixel::gulong "pixel") (red::gushort "red") (green::gushort "green") (blue::gushort "blue")) "struct _GdkColor")
    (type GdkColor s-_GdkColor "GdkColor")
    (type s-_GdkColormap (struct (size::gint "size") (colors::GdkColor* "colors")) "struct _GdkColormap")
    (type GdkColormap s-_GdkColormap "GdkColormap")
    (type s-_GdkVisual (struct (type::GdkVisualType "type") (depth::gint "depth") (byte_order::GdkByteOrder "byte_order") (colormap_size::gint "colormap_size") (bits_per_rgb::gint "bits_per_rgb") (red_mask::guint32 "red_mask") (red_shift::gint "red_shift") (red_prec::gint "red_prec") (green_mask::guint32 "green_mask") (green_shift::gint "green_shift") (green_prec::gint "green_prec") (blue_mask::guint32 "blue_mask") (blue_shift::gint "blue_shift") (blue_prec::gint "blue_prec")) "struct _GdkVisual")
    (type GdkVisual s-_GdkVisual "GdkVisual")
    (type s-_GdkWindowAttr (struct (title::gchar* "title") (event_mask::gint "event_mask") (x::gint16 "x") (y::gint16 "y") (width::gint16 "width") (height::gint16 "height") (wclass::GdkWindowClass "wclass") (visual::GdkVisual* "visual") (colormap::GdkColormap* "colormap") (window_type::GdkWindowType "window_type") (cursor::GdkCursor* "cursor") (wmclass_name::gchar* "wmclass_name") (wmclass_class::gchar* "wmclass_class") (override_redirect::gboolean "override_redirect")) "struct _GdkWindowAttr")
    (type GdkWindowAttr s-_GdkWindowAttr "GdkWindowAttr")
    (type s-_GdkWindow (struct (user_data::gpointer "user_data")) "struct _GdkWindow")
    (type GdkWindow s-_GdkWindow "GdkWindow")
    (type GdkPixmap s-_GdkWindow "GdkPixmap")
    (type GdkBitmap s-_GdkWindow "GdkBitmap")
    (type GdkDrawable s-_GdkWindow "GdkDrawable")
    (type s-_GdkGeometry (struct (min_width::gint "min_width") (min_height::gint "min_height") (max_width::gint "max_width") (max_height::gint "max_height") (base_width::gint "base_width") (base_height::gint "base_height") (width_inc::gint "width_inc") (height_inc::gint "height_inc") (min_aspect::gdouble "min_aspect") (max_aspect::gdouble "max_aspect")) "struct _GdkGeometry")
    (type GdkGeometry s-_GdkGeometry "GdkGeometry")
    (type s-_GdkImage (struct (type::GdkImageType "type") (visual::GdkVisual* "visual") (byte_order::GdkByteOrder "byte_order") (width::guint16 "width") (height::guint16 "height") (depth::guint16 "depth") (bpp::guint16 "bpp") (bpl::guint16 "bpl") (mem::gpointer "mem")) "struct _GdkImage")
    (type GdkImage s-_GdkImage "GdkImage")
    (type s-_GdkGCValues (struct (foreground::GdkColor "foreground") (background::GdkColor "background") (font::GdkFont* "font") (function::GdkFunction "function") (fill::GdkFill "fill") (tile::GdkPixmap* "tile") (stipple::GdkPixmap* "stipple") (clip_mask::GdkPixmap* "clip_mask") (subwindow_mode::GdkSubwindowMode "subwindow_mode") (ts_x_origin::gint "ts_x_origin") (ts_y_origin::gint "ts_y_origin") (clip_x_origin::gint "clip_x_origin") (clip_y_origin::gint "clip_y_origin") (graphics_exposures::gint "graphics_exposures") (line_width::gint "line_width") (line_style::GdkLineStyle "line_style") (cap_style::GdkCapStyle "cap_style") (join_style::GdkJoinStyle "join_style")) "struct _GdkGCValues")
    (type GdkGCValues s-_GdkGCValues "GdkGCValues")
    (type s-_GdkGC (struct (dummy_var::gint "dummy_var")) "struct _GdkGC")
    (type GdkGC s-_GdkGC "GdkGC")
    (type s-_GdkPoint (struct (x::gint16 "x") (y::gint16 "y")) "struct _GdkPoint")
    (type GdkPoint s-_GdkPoint "GdkPoint")
    (type s-_GdkRectangle (struct (x::gint16 "x") (y::gint16 "y") (width::guint16 "width") (height::guint16 "height")) "struct _GdkRectangle")
    (type GdkRectangle s-_GdkRectangle "GdkRectangle")
    (type s-_GdkSegment (struct (x1::gint16 "x1") (y1::gint16 "y1") (x2::gint16 "x2") (y2::gint16 "y2")) "struct _GdkSegment")
    (type GdkSegment s-_GdkSegment "GdkSegment")
    (type s-_GdkFont (struct (type::GdkFontType "type") (ascent::gint "ascent") (descent::gint "descent")) "struct _GdkFont")
    (type GdkFont s-_GdkFont "GdkFont")
    (type s-_GdkCursor (struct (type::GdkCursorType "type")) "struct _GdkCursor")
    (type GdkCursor s-_GdkCursor "GdkCursor")
    (type s-_GdkColorContextDither (struct (fast_rgb::gint-array-32-array-32-array-32 "fast_rgb") (fast_err::gint-array-32-array-32-array-32 "fast_err") (fast_erg::gint-array-32-array-32-array-32 "fast_erg") (fast_erb::gint-array-32-array-32-array-32 "fast_erb")) "struct _GdkColorContextDither")
    (type GdkColorContextDither s-_GdkColorContextDither "GdkColorContextDither")
    (type s-_GdkColorContext (struct (visual::GdkVisual* "visual") (colormap::GdkColormap* "colormap") (num_colors::gint "num_colors") (max_colors::gint "max_colors") (num_allocated::gint "num_allocated") (mode::GdkColorContextMode "mode") (need_to_free_colormap::gint "need_to_free_colormap") (std_cmap_atom::GdkAtom "std_cmap_atom") (clut::gulong* "clut") (cmap::GdkColor* "cmap") (color_hash::GHashTable* "color_hash") (palette::GdkColor* "palette") (num_palette::gint "num_palette") (fast_dither::GdkColorContextDither* "fast_dither") (shifts::s-woot__s1002 "shifts") (masks::s-woot__s1003 "masks") (bits::s-woot__s1004 "bits") (max_entry::gulong "max_entry") (black_pixel::gulong "black_pixel") (white_pixel::gulong "white_pixel")) "struct _GdkColorContext")
    (type GdkColorContext s-_GdkColorContext "GdkColorContext")
    (type s-_GdkDragContext (struct (protocol::GdkDragProtocol "protocol") (is_source::gboolean "is_source") (source_window::GdkWindow* "source_window") (dest_window::GdkWindow* "dest_window") (targets::GList* "targets") (actions::GdkDragAction "actions") (suggested_action::GdkDragAction "suggested_action") (action::GdkDragAction "action") (start_time::guint32 "start_time")) "struct _GdkDragContext")
    (type GdkDragContext s-_GdkDragContext "GdkDragContext")
    (type s-_GdkEventAny (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event")) "struct _GdkEventAny")
    (type GdkEventAny s-_GdkEventAny "GdkEventAny")
    (type s-_GdkEventExpose (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (area::GdkRectangle "area") (count::gint "count")) "struct _GdkEventExpose")
    (type GdkEventExpose s-_GdkEventExpose "GdkEventExpose")
    (type s-_GdkEventNoExpose (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event")) "struct _GdkEventNoExpose")
    (type GdkEventNoExpose s-_GdkEventNoExpose "GdkEventNoExpose")
    (type s-_GdkEventVisibility (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (state::GdkVisibilityState "state")) "struct _GdkEventVisibility")
    (type GdkEventVisibility s-_GdkEventVisibility "GdkEventVisibility")
    (type s-_GdkEventMotion (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (time::guint32 "time") (x::gdouble "x") (y::gdouble "y") (pressure::gdouble "pressure") (xtilt::gdouble "xtilt") (ytilt::gdouble "ytilt") (state::guint "state") (is_hint::gint16 "is_hint") (source::GdkInputSource "source") (deviceid::guint32 "deviceid") (x_root::gdouble "x_root") (y_root::gdouble "y_root")) "struct _GdkEventMotion")
    (type GdkEventMotion s-_GdkEventMotion "GdkEventMotion")
    (type s-_GdkEventButton (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (time::guint32 "time") (x::gdouble "x") (y::gdouble "y") (pressure::gdouble "pressure") (xtilt::gdouble "xtilt") (ytilt::gdouble "ytilt") (state::guint "state") (button::guint "button") (source::GdkInputSource "source") (deviceid::guint32 "deviceid") (x_root::gdouble "x_root") (y_root::gdouble "y_root")) "struct _GdkEventButton")
    (type GdkEventButton s-_GdkEventButton "GdkEventButton")
    (type s-_GdkEventKey (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (time::guint32 "time") (state::guint "state") (keyval::guint "keyval") (length::gint "length") (string::gchar* "string")) "struct _GdkEventKey")
    (type GdkEventKey s-_GdkEventKey "GdkEventKey")
    (type s-_GdkEventFocus (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (in::gint16 "in")) "struct _GdkEventFocus")
    (type GdkEventFocus s-_GdkEventFocus "GdkEventFocus")
    (type s-_GdkEventCrossing (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (subwindow::GdkWindow* "subwindow") (time::guint32 "time") (x::gdouble "x") (y::gdouble "y") (x_root::gdouble "x_root") (y_root::gdouble "y_root") (mode::GdkCrossingMode "mode") (detail::GdkNotifyType "detail") (focus::gboolean "focus") (state::guint "state")) "struct _GdkEventCrossing")
    (type GdkEventCrossing s-_GdkEventCrossing "GdkEventCrossing")
    (type s-_GdkEventConfigure (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (x::gint16 "x") (y::gint16 "y") (width::gint16 "width") (height::gint16 "height")) "struct _GdkEventConfigure")
    (type GdkEventConfigure s-_GdkEventConfigure "GdkEventConfigure")
    (type s-_GdkEventProperty (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (atom::GdkAtom "atom") (time::guint32 "time") (state::guint "state")) "struct _GdkEventProperty")
    (type GdkEventProperty s-_GdkEventProperty "GdkEventProperty")
    (type s-_GdkEventSelection (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (selection::GdkAtom "selection") (target::GdkAtom "target") (property::GdkAtom "property") (requestor::guint32 "requestor") (time::guint32 "time")) "struct _GdkEventSelection")
    (type GdkEventSelection s-_GdkEventSelection "GdkEventSelection")
    (type s-_GdkEventProximity (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (time::guint32 "time") (source::GdkInputSource "source") (deviceid::guint32 "deviceid")) "struct _GdkEventProximity")
    (type GdkEventProximity s-_GdkEventProximity "GdkEventProximity")
    (type s-_GdkEventClient (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (message_type::GdkAtom "message_type") (data_format::gushort "data_format") (data::s-woot__s1005 "data")) "struct _GdkEventClient")
    (type GdkEventClient s-_GdkEventClient "GdkEventClient")
    (type s-_GdkEventDND (struct (type::GdkEventType "type") (window::GdkWindow* "window") (send_event::gint8 "send_event") (context::GdkDragContext* "context") (time::guint32 "time") (x_root::gshort "x_root") (y_root::gshort "y_root")) "struct _GdkEventDND")
    (type GdkEventDND s-_GdkEventDND "GdkEventDND")
    (type s-_GdkEvent (union (type::GdkEventType "type") (any::GdkEventAny "any") (expose::GdkEventExpose "expose") (no_expose::GdkEventNoExpose "no_expose") (visibility::GdkEventVisibility "visibility") (motion::GdkEventMotion "motion") (button::GdkEventButton "button") (key::GdkEventKey "key") (crossing::GdkEventCrossing "crossing") (focus_change::GdkEventFocus "focus_change") (configure::GdkEventConfigure "configure") (property::GdkEventProperty "property") (selection::GdkEventSelection "selection") (proximity::GdkEventProximity "proximity") (client::GdkEventClient "client") (dnd::GdkEventDND "dnd")) "union _GdkEvent")
    (type GdkEvent s-_GdkEvent "GdkEvent")
    (type s-_GdkDeviceKey (struct (keyval::guint "keyval") (modifiers::GdkModifierType "modifiers")) "struct _GdkDeviceKey")
    (type GdkDeviceKey s-_GdkDeviceKey "GdkDeviceKey")
    (type s-_GdkDeviceInfo (struct (deviceid::guint32 "deviceid") (name::gchar* "name") (source::GdkInputSource "source") (mode::GdkInputMode "mode") (has_cursor::gint "has_cursor") (num_axes::gint "num_axes") (axes::GdkAxisUse* "axes") (num_keys::gint "num_keys") (keys::GdkDeviceKey* "keys")) "struct _GdkDeviceInfo")
    (type GdkDeviceInfo s-_GdkDeviceInfo "GdkDeviceInfo")
    (type s-_GdkTimeCoord (struct (time::guint32 "time") (x::gdouble "x") (y::gdouble "y") (pressure::gdouble "pressure") (xtilt::gdouble "xtilt") (ytilt::gdouble "ytilt")) "struct _GdkTimeCoord")
    (type GdkTimeCoord s-_GdkTimeCoord "GdkTimeCoord")
    (type s-_GdkRegion (struct (user_data::gpointer "user_data")) "struct _GdkRegion")
    (type GdkRegion s-_GdkRegion "GdkRegion")
    (type GdkEvent*,gpointer->void "void ($(GdkEvent *,gpointer))")
    (type *GdkEvent*,gpointer->void (function void (GdkEvent* gpointer)) "void ((*$)(GdkEvent *,gpointer))")
    (type GdkEventFunc *GdkEvent*,gpointer->void "GdkEventFunc")
    (type s-_GdkIC (struct) "struct _GdkIC")
    (type GdkIC s-_GdkIC "GdkIC")
    (type s-_GdkICAttr (struct (style::GdkIMStyle "style") (client_window::GdkWindow* "client_window") (focus_window::GdkWindow* "focus_window") (filter_events::GdkEventMask "filter_events") (spot_location::GdkPoint "spot_location") (line_spacing::gint "line_spacing") (cursor::GdkCursor* "cursor") (preedit_fontset::GdkFont* "preedit_fontset") (preedit_area::GdkRectangle "preedit_area") (preedit_area_needed::GdkRectangle "preedit_area_needed") (preedit_foreground::GdkColor "preedit_foreground") (preedit_background::GdkColor "preedit_background") (preedit_pixmap::GdkPixmap* "preedit_pixmap") (preedit_colormap::GdkColormap* "preedit_colormap") (status_fontset::GdkFont* "status_fontset") (status_area::GdkRectangle "status_area") (status_area_needed::GdkRectangle "status_area_needed") (status_foreground::GdkColor "status_foreground") (status_background::GdkColor "status_background") (status_pixmap::GdkPixmap* "status_pixmap") (status_colormap::GdkColormap* "status_colormap")) "struct _GdkICAttr")
    (type GdkICAttr s-_GdkICAttr "GdkICAttr")
    (type GdkWChar guint32 "GdkWChar")
    (type woot__e1030 int "long")
    (macro GDK_WINDOW_ROOT::int "GDK_WINDOW_ROOT")
    (macro GDK_WINDOW_TOPLEVEL::int "GDK_WINDOW_TOPLEVEL")
    (macro GDK_WINDOW_CHILD::int "GDK_WINDOW_CHILD")
    (macro GDK_WINDOW_DIALOG::int "GDK_WINDOW_DIALOG")
    (macro GDK_WINDOW_TEMP::int "GDK_WINDOW_TEMP")
    (macro GDK_WINDOW_PIXMAP::int "GDK_WINDOW_PIXMAP")
    (macro GDK_WINDOW_FOREIGN::int "GDK_WINDOW_FOREIGN")
    (type GdkWindowType woot__e1030 "GdkWindowType")
    (type woot__e1031 int "long")
    (macro GDK_INPUT_OUTPUT::int "GDK_INPUT_OUTPUT")
    (macro GDK_INPUT_ONLY::int "GDK_INPUT_ONLY")
    (type GdkWindowClass woot__e1031 "GdkWindowClass")
    (type woot__e1032 int "long")
    (macro GDK_IMAGE_NORMAL::int "GDK_IMAGE_NORMAL")
    (macro GDK_IMAGE_SHARED::int "GDK_IMAGE_SHARED")
    (macro GDK_IMAGE_FASTEST::int "GDK_IMAGE_FASTEST")
    (type GdkImageType woot__e1032 "GdkImageType")
    (type woot__e1033 int "long")
    (macro GDK_VISUAL_STATIC_GRAY::int "GDK_VISUAL_STATIC_GRAY")
    (macro GDK_VISUAL_GRAYSCALE::int "GDK_VISUAL_GRAYSCALE")
    (macro GDK_VISUAL_STATIC_COLOR::int "GDK_VISUAL_STATIC_COLOR")
    (macro GDK_VISUAL_PSEUDO_COLOR::int "GDK_VISUAL_PSEUDO_COLOR")
    (macro GDK_VISUAL_TRUE_COLOR::int "GDK_VISUAL_TRUE_COLOR")
    (macro GDK_VISUAL_DIRECT_COLOR::int "GDK_VISUAL_DIRECT_COLOR")
    (type GdkVisualType woot__e1033 "GdkVisualType")
    (type woot__e1034 int "long")
    (macro GDK_FONT_FONT::int "GDK_FONT_FONT")
    (macro GDK_FONT_FONTSET::int "GDK_FONT_FONTSET")
    (type GdkFontType woot__e1034 "GdkFontType")
    (type woot__e1035 int "long")
    (macro GDK_WA_TITLE::int "GDK_WA_TITLE")
    (macro GDK_WA_X::int "GDK_WA_X")
    (macro GDK_WA_Y::int "GDK_WA_Y")
    (macro GDK_WA_CURSOR::int "GDK_WA_CURSOR")
    (macro GDK_WA_COLORMAP::int "GDK_WA_COLORMAP")
    (macro GDK_WA_VISUAL::int "GDK_WA_VISUAL")
    (macro GDK_WA_WMCLASS::int "GDK_WA_WMCLASS")
    (macro GDK_WA_NOREDIR::int "GDK_WA_NOREDIR")
    (type GdkWindowAttributesType woot__e1035 "GdkWindowAttributesType")
    (type woot__e1036 int "long")
    (macro GDK_HINT_POS::int "GDK_HINT_POS")
    (macro GDK_HINT_MIN_SIZE::int "GDK_HINT_MIN_SIZE")
    (macro GDK_HINT_MAX_SIZE::int "GDK_HINT_MAX_SIZE")
    (macro GDK_HINT_BASE_SIZE::int "GDK_HINT_BASE_SIZE")
    (macro GDK_HINT_ASPECT::int "GDK_HINT_ASPECT")
    (macro GDK_HINT_RESIZE_INC::int "GDK_HINT_RESIZE_INC")
    (type GdkWindowHints woot__e1036 "GdkWindowHints")
    (type woot__e1037 int "long")
    (macro GDK_COPY::int "GDK_COPY")
    (macro GDK_INVERT::int "GDK_INVERT")
    (macro GDK_XOR::int "GDK_XOR")
    (macro GDK_CLEAR::int "GDK_CLEAR")
    (macro GDK_AND::int "GDK_AND")
    (macro GDK_AND_REVERSE::int "GDK_AND_REVERSE")
    (macro GDK_AND_INVERT::int "GDK_AND_INVERT")
    (macro GDK_NOOP::int "GDK_NOOP")
    (macro GDK_OR::int "GDK_OR")
    (macro GDK_EQUIV::int "GDK_EQUIV")
    (macro GDK_OR_REVERSE::int "GDK_OR_REVERSE")
    (macro GDK_COPY_INVERT::int "GDK_COPY_INVERT")
    (macro GDK_OR_INVERT::int "GDK_OR_INVERT")
    (macro GDK_NAND::int "GDK_NAND")
    (macro GDK_SET::int "GDK_SET")
    (type GdkFunction woot__e1037 "GdkFunction")
    (type woot__e1038 int "long")
    (macro GDK_SOLID::int "GDK_SOLID")
    (macro GDK_TILED::int "GDK_TILED")
    (macro GDK_STIPPLED::int "GDK_STIPPLED")
    (macro GDK_OPAQUE_STIPPLED::int "GDK_OPAQUE_STIPPLED")
    (type GdkFill woot__e1038 "GdkFill")
    (type woot__e1039 int "long")
    (macro GDK_EVEN_ODD_RULE::int "GDK_EVEN_ODD_RULE")
    (macro GDK_WINDING_RULE::int "GDK_WINDING_RULE")
    (type GdkFillRule woot__e1039 "GdkFillRule")
    (type woot__e1040 int "long")
    (macro GDK_LINE_SOLID::int "GDK_LINE_SOLID")
    (macro GDK_LINE_ON_OFF_DASH::int "GDK_LINE_ON_OFF_DASH")
    (macro GDK_LINE_DOUBLE_DASH::int "GDK_LINE_DOUBLE_DASH")
    (type GdkLineStyle woot__e1040 "GdkLineStyle")
    (type woot__e1041 int "long")
    (macro GDK_CAP_NOT_LAST::int "GDK_CAP_NOT_LAST")
    (macro GDK_CAP_BUTT::int "GDK_CAP_BUTT")
    (macro GDK_CAP_ROUND::int "GDK_CAP_ROUND")
    (macro GDK_CAP_PROJECTING::int "GDK_CAP_PROJECTING")
    (type GdkCapStyle woot__e1041 "GdkCapStyle")
    (type woot__e1042 int "long")
    (macro GDK_JOIN_MITER::int "GDK_JOIN_MITER")
    (macro GDK_JOIN_ROUND::int "GDK_JOIN_ROUND")
    (macro GDK_JOIN_BEVEL::int "GDK_JOIN_BEVEL")
    (type GdkJoinStyle woot__e1042 "GdkJoinStyle")
    (type woot__e1043 int "long")
    (macro GDK_NUM_GLYPHS::int "GDK_NUM_GLYPHS")
    (macro GDK_X_CURSOR::int "GDK_X_CURSOR")
    (macro GDK_ARROW::int "GDK_ARROW")
    (macro GDK_BASED_ARROW_DOWN::int "GDK_BASED_ARROW_DOWN")
    (macro GDK_BASED_ARROW_UP::int "GDK_BASED_ARROW_UP")
    (macro GDK_BOAT::int "GDK_BOAT")
    (macro GDK_BOGOSITY::int "GDK_BOGOSITY")
    (macro GDK_BOTTOM_LEFT_CORNER::int "GDK_BOTTOM_LEFT_CORNER")
    (macro GDK_BOTTOM_RIGHT_CORNER::int "GDK_BOTTOM_RIGHT_CORNER")
    (macro GDK_BOTTOM_SIDE::int "GDK_BOTTOM_SIDE")
    (macro GDK_BOTTOM_TEE::int "GDK_BOTTOM_TEE")
    (macro GDK_BOX_SPIRAL::int "GDK_BOX_SPIRAL")
    (macro GDK_CENTER_PTR::int "GDK_CENTER_PTR")
    (macro GDK_CIRCLE::int "GDK_CIRCLE")
    (macro GDK_CLOCK::int "GDK_CLOCK")
    (macro GDK_COFFEE_MUG::int "GDK_COFFEE_MUG")
    (macro GDK_CROSS::int "GDK_CROSS")
    (macro GDK_CROSS_REVERSE::int "GDK_CROSS_REVERSE")
    (macro GDK_CROSSHAIR::int "GDK_CROSSHAIR")
    (macro GDK_DIAMOND_CROSS::int "GDK_DIAMOND_CROSS")
    (macro GDK_DOT::int "GDK_DOT")
    (macro GDK_DOTBOX::int "GDK_DOTBOX")
    (macro GDK_DOUBLE_ARROW::int "GDK_DOUBLE_ARROW")
    (macro GDK_DRAFT_LARGE::int "GDK_DRAFT_LARGE")
    (macro GDK_DRAFT_SMALL::int "GDK_DRAFT_SMALL")
    (macro GDK_DRAPED_BOX::int "GDK_DRAPED_BOX")
    (macro GDK_EXCHANGE::int "GDK_EXCHANGE")
    (macro GDK_FLEUR::int "GDK_FLEUR")
    (macro GDK_GOBBLER::int "GDK_GOBBLER")
    (macro GDK_GUMBY::int "GDK_GUMBY")
    (macro GDK_HAND1::int "GDK_HAND1")
    (macro GDK_HAND2::int "GDK_HAND2")
    (macro GDK_HEART::int "GDK_HEART")
    (macro GDK_ICON::int "GDK_ICON")
    (macro GDK_IRON_CROSS::int "GDK_IRON_CROSS")
    (macro GDK_LEFT_PTR::int "GDK_LEFT_PTR")
    (macro GDK_LEFT_SIDE::int "GDK_LEFT_SIDE")
    (macro GDK_LEFT_TEE::int "GDK_LEFT_TEE")
    (macro GDK_LEFTBUTTON::int "GDK_LEFTBUTTON")
    (macro GDK_LL_ANGLE::int "GDK_LL_ANGLE")
    (macro GDK_LR_ANGLE::int "GDK_LR_ANGLE")
    (macro GDK_MAN::int "GDK_MAN")
    (macro GDK_MIDDLEBUTTON::int "GDK_MIDDLEBUTTON")
    (macro GDK_MOUSE::int "GDK_MOUSE")
    (macro GDK_PENCIL::int "GDK_PENCIL")
    (macro GDK_PIRATE::int "GDK_PIRATE")
    (macro GDK_PLUS::int "GDK_PLUS")
    (macro GDK_QUESTION_ARROW::int "GDK_QUESTION_ARROW")
    (macro GDK_RIGHT_PTR::int "GDK_RIGHT_PTR")
    (macro GDK_RIGHT_SIDE::int "GDK_RIGHT_SIDE")
    (macro GDK_RIGHT_TEE::int "GDK_RIGHT_TEE")
    (macro GDK_RIGHTBUTTON::int "GDK_RIGHTBUTTON")
    (macro GDK_RTL_LOGO::int "GDK_RTL_LOGO")
    (macro GDK_SAILBOAT::int "GDK_SAILBOAT")
    (macro GDK_SB_DOWN_ARROW::int "GDK_SB_DOWN_ARROW")
    (macro GDK_SB_H_DOUBLE_ARROW::int "GDK_SB_H_DOUBLE_ARROW")
    (macro GDK_SB_LEFT_ARROW::int "GDK_SB_LEFT_ARROW")
    (macro GDK_SB_RIGHT_ARROW::int "GDK_SB_RIGHT_ARROW")
    (macro GDK_SB_UP_ARROW::int "GDK_SB_UP_ARROW")
    (macro GDK_SB_V_DOUBLE_ARROW::int "GDK_SB_V_DOUBLE_ARROW")
    (macro GDK_SHUTTLE::int "GDK_SHUTTLE")
    (macro GDK_SIZING::int "GDK_SIZING")
    (macro GDK_SPIDER::int "GDK_SPIDER")
    (macro GDK_SPRAYCAN::int "GDK_SPRAYCAN")
    (macro GDK_STAR::int "GDK_STAR")
    (macro GDK_TARGET::int "GDK_TARGET")
    (macro GDK_TCROSS::int "GDK_TCROSS")
    (macro GDK_TOP_LEFT_ARROW::int "GDK_TOP_LEFT_ARROW")
    (macro GDK_TOP_LEFT_CORNER::int "GDK_TOP_LEFT_CORNER")
    (macro GDK_TOP_RIGHT_CORNER::int "GDK_TOP_RIGHT_CORNER")
    (macro GDK_TOP_SIDE::int "GDK_TOP_SIDE")
    (macro GDK_TOP_TEE::int "GDK_TOP_TEE")
    (macro GDK_TREK::int "GDK_TREK")
    (macro GDK_UL_ANGLE::int "GDK_UL_ANGLE")
    (macro GDK_UMBRELLA::int "GDK_UMBRELLA")
    (macro GDK_UR_ANGLE::int "GDK_UR_ANGLE")
    (macro GDK_WATCH::int "GDK_WATCH")
    (macro GDK_XTERM::int "GDK_XTERM")
    (macro GDK_LAST_CURSOR::int "GDK_LAST_CURSOR")
    (macro GDK_CURSOR_IS_PIXMAP::int "GDK_CURSOR_IS_PIXMAP")
    (type GdkCursorType woot__e1043 "GdkCursorType")
    (type woot__e1044 int "long")
    (macro GDK_FILTER_CONTINUE::int "GDK_FILTER_CONTINUE")
    (macro GDK_FILTER_TRANSLATE::int "GDK_FILTER_TRANSLATE")
    (macro GDK_FILTER_REMOVE::int "GDK_FILTER_REMOVE")
    (type GdkFilterReturn woot__e1044 "GdkFilterReturn")
    (type woot__e1045 int "long")
    (macro GDK_VISIBILITY_UNOBSCURED::int "GDK_VISIBILITY_UNOBSCURED")
    (macro GDK_VISIBILITY_PARTIAL::int "GDK_VISIBILITY_PARTIAL")
    (macro GDK_VISIBILITY_FULLY_OBSCURED::int "GDK_VISIBILITY_FULLY_OBSCURED")
    (type GdkVisibilityState woot__e1045 "GdkVisibilityState")
    (type woot__e1046 int "long")
    (macro GDK_NOTHING::int "GDK_NOTHING")
    (macro GDK_DELETE::int "GDK_DELETE")
    (macro GDK_DESTROY::int "GDK_DESTROY")
    (macro GDK_EXPOSE::int "GDK_EXPOSE")
    (macro GDK_MOTION_NOTIFY::int "GDK_MOTION_NOTIFY")
    (macro GDK_BUTTON_PRESS::int "GDK_BUTTON_PRESS")
    (macro GDK_2BUTTON_PRESS::int "GDK_2BUTTON_PRESS")
    (macro GDK_3BUTTON_PRESS::int "GDK_3BUTTON_PRESS")
    (macro GDK_BUTTON_RELEASE::int "GDK_BUTTON_RELEASE")
    (macro GDK_KEY_PRESS::int "GDK_KEY_PRESS")
    (macro GDK_KEY_RELEASE::int "GDK_KEY_RELEASE")
    (macro GDK_ENTER_NOTIFY::int "GDK_ENTER_NOTIFY")
    (macro GDK_LEAVE_NOTIFY::int "GDK_LEAVE_NOTIFY")
    (macro GDK_FOCUS_CHANGE::int "GDK_FOCUS_CHANGE")
    (macro GDK_CONFIGURE::int "GDK_CONFIGURE")
    (macro GDK_MAP::int "GDK_MAP")
    (macro GDK_UNMAP::int "GDK_UNMAP")
    (macro GDK_PROPERTY_NOTIFY::int "GDK_PROPERTY_NOTIFY")
    (macro GDK_SELECTION_CLEAR::int "GDK_SELECTION_CLEAR")
    (macro GDK_SELECTION_REQUEST::int "GDK_SELECTION_REQUEST")
    (macro GDK_SELECTION_NOTIFY::int "GDK_SELECTION_NOTIFY")
    (macro GDK_PROXIMITY_IN::int "GDK_PROXIMITY_IN")
    (macro GDK_PROXIMITY_OUT::int "GDK_PROXIMITY_OUT")
    (macro GDK_DRAG_ENTER::int "GDK_DRAG_ENTER")
    (macro GDK_DRAG_LEAVE::int "GDK_DRAG_LEAVE")
    (macro GDK_DRAG_MOTION::int "GDK_DRAG_MOTION")
    (macro GDK_DRAG_STATUS::int "GDK_DRAG_STATUS")
    (macro GDK_DROP_START::int "GDK_DROP_START")
    (macro GDK_DROP_FINISHED::int "GDK_DROP_FINISHED")
    (macro GDK_CLIENT_EVENT::int "GDK_CLIENT_EVENT")
    (macro GDK_VISIBILITY_NOTIFY::int "GDK_VISIBILITY_NOTIFY")
    (macro GDK_NO_EXPOSE::int "GDK_NO_EXPOSE")
    (type GdkEventType woot__e1046 "GdkEventType")
    (type woot__e1047 int "long")
    (macro GDK_EXPOSURE_MASK::int "GDK_EXPOSURE_MASK")
    (macro GDK_POINTER_MOTION_MASK::int "GDK_POINTER_MOTION_MASK")
    (macro GDK_POINTER_MOTION_HINT_MASK::int "GDK_POINTER_MOTION_HINT_MASK")
    (macro GDK_BUTTON_MOTION_MASK::int "GDK_BUTTON_MOTION_MASK")
    (macro GDK_BUTTON1_MOTION_MASK::int "GDK_BUTTON1_MOTION_MASK")
    (macro GDK_BUTTON2_MOTION_MASK::int "GDK_BUTTON2_MOTION_MASK")
    (macro GDK_BUTTON3_MOTION_MASK::int "GDK_BUTTON3_MOTION_MASK")
    (macro GDK_BUTTON_PRESS_MASK::int "GDK_BUTTON_PRESS_MASK")
    (macro GDK_BUTTON_RELEASE_MASK::int "GDK_BUTTON_RELEASE_MASK")
    (macro GDK_KEY_PRESS_MASK::int "GDK_KEY_PRESS_MASK")
    (macro GDK_KEY_RELEASE_MASK::int "GDK_KEY_RELEASE_MASK")
    (macro GDK_ENTER_NOTIFY_MASK::int "GDK_ENTER_NOTIFY_MASK")
    (macro GDK_LEAVE_NOTIFY_MASK::int "GDK_LEAVE_NOTIFY_MASK")
    (macro GDK_FOCUS_CHANGE_MASK::int "GDK_FOCUS_CHANGE_MASK")
    (macro GDK_STRUCTURE_MASK::int "GDK_STRUCTURE_MASK")
    (macro GDK_PROPERTY_CHANGE_MASK::int "GDK_PROPERTY_CHANGE_MASK")
    (macro GDK_VISIBILITY_NOTIFY_MASK::int "GDK_VISIBILITY_NOTIFY_MASK")
    (macro GDK_PROXIMITY_IN_MASK::int "GDK_PROXIMITY_IN_MASK")
    (macro GDK_PROXIMITY_OUT_MASK::int "GDK_PROXIMITY_OUT_MASK")
    (macro GDK_SUBSTRUCTURE_MASK::int "GDK_SUBSTRUCTURE_MASK")
    (macro GDK_ALL_EVENTS_MASK::int "GDK_ALL_EVENTS_MASK")
    (type GdkEventMask woot__e1047 "GdkEventMask")
    (type woot__e1048 int "long")
    (macro GDK_NOTIFY_ANCESTOR::int "GDK_NOTIFY_ANCESTOR")
    (macro GDK_NOTIFY_VIRTUAL::int "GDK_NOTIFY_VIRTUAL")
    (macro GDK_NOTIFY_INFERIOR::int "GDK_NOTIFY_INFERIOR")
    (macro GDK_NOTIFY_NONLINEAR::int "GDK_NOTIFY_NONLINEAR")
    (macro GDK_NOTIFY_NONLINEAR_VIRTUAL::int "GDK_NOTIFY_NONLINEAR_VIRTUAL")
    (macro GDK_NOTIFY_UNKNOWN::int "GDK_NOTIFY_UNKNOWN")
    (type GdkNotifyType woot__e1048 "GdkNotifyType")
    (type woot__e1049 int "long")
    (macro GDK_CROSSING_NORMAL::int "GDK_CROSSING_NORMAL")
    (macro GDK_CROSSING_GRAB::int "GDK_CROSSING_GRAB")
    (macro GDK_CROSSING_UNGRAB::int "GDK_CROSSING_UNGRAB")
    (type GdkCrossingMode woot__e1049 "GdkCrossingMode")
    (type woot__e1050 int "long")
    (macro GDK_SHIFT_MASK::int "GDK_SHIFT_MASK")
    (macro GDK_LOCK_MASK::int "GDK_LOCK_MASK")
    (macro GDK_CONTROL_MASK::int "GDK_CONTROL_MASK")
    (macro GDK_MOD1_MASK::int "GDK_MOD1_MASK")
    (macro GDK_MOD2_MASK::int "GDK_MOD2_MASK")
    (macro GDK_MOD3_MASK::int "GDK_MOD3_MASK")
    (macro GDK_MOD4_MASK::int "GDK_MOD4_MASK")
    (macro GDK_MOD5_MASK::int "GDK_MOD5_MASK")
    (macro GDK_BUTTON1_MASK::int "GDK_BUTTON1_MASK")
    (macro GDK_BUTTON2_MASK::int "GDK_BUTTON2_MASK")
    (macro GDK_BUTTON3_MASK::int "GDK_BUTTON3_MASK")
    (macro GDK_BUTTON4_MASK::int "GDK_BUTTON4_MASK")
    (macro GDK_BUTTON5_MASK::int "GDK_BUTTON5_MASK")
    (macro GDK_RELEASE_MASK::int "GDK_RELEASE_MASK")
    (macro GDK_MODIFIER_MASK::int "GDK_MODIFIER_MASK")
    (type GdkModifierType woot__e1050 "GdkModifierType")
    (type woot__e1051 int "long")
    (macro GDK_CLIP_BY_CHILDREN::int "GDK_CLIP_BY_CHILDREN")
    (macro GDK_INCLUDE_INFERIORS::int "GDK_INCLUDE_INFERIORS")
    (type GdkSubwindowMode woot__e1051 "GdkSubwindowMode")
    (type woot__e1052 int "long")
    (macro GDK_INPUT_READ::int "GDK_INPUT_READ")
    (macro GDK_INPUT_WRITE::int "GDK_INPUT_WRITE")
    (macro GDK_INPUT_EXCEPTION::int "GDK_INPUT_EXCEPTION")
    (type GdkInputCondition woot__e1052 "GdkInputCondition")
    (type woot__e1053 int "long")
    (macro GDK_OK::int "GDK_OK")
    (macro GDK_ERROR::int "GDK_ERROR")
    (macro GDK_ERROR_PARAM::int "GDK_ERROR_PARAM")
    (macro GDK_ERROR_FILE::int "GDK_ERROR_FILE")
    (macro GDK_ERROR_MEM::int "GDK_ERROR_MEM")
    (type GdkStatus woot__e1053 "GdkStatus")
    (type woot__e1054 int "long")
    (macro GDK_LSB_FIRST::int "GDK_LSB_FIRST")
    (macro GDK_MSB_FIRST::int "GDK_MSB_FIRST")
    (type GdkByteOrder woot__e1054 "GdkByteOrder")
    (type woot__e1055 int "long")
    (macro GDK_GC_FOREGROUND::int "GDK_GC_FOREGROUND")
    (macro GDK_GC_BACKGROUND::int "GDK_GC_BACKGROUND")
    (macro GDK_GC_FONT::int "GDK_GC_FONT")
    (macro GDK_GC_FUNCTION::int "GDK_GC_FUNCTION")
    (macro GDK_GC_FILL::int "GDK_GC_FILL")
    (macro GDK_GC_TILE::int "GDK_GC_TILE")
    (macro GDK_GC_STIPPLE::int "GDK_GC_STIPPLE")
    (macro GDK_GC_CLIP_MASK::int "GDK_GC_CLIP_MASK")
    (macro GDK_GC_SUBWINDOW::int "GDK_GC_SUBWINDOW")
    (macro GDK_GC_TS_X_ORIGIN::int "GDK_GC_TS_X_ORIGIN")
    (macro GDK_GC_TS_Y_ORIGIN::int "GDK_GC_TS_Y_ORIGIN")
    (macro GDK_GC_CLIP_X_ORIGIN::int "GDK_GC_CLIP_X_ORIGIN")
    (macro GDK_GC_CLIP_Y_ORIGIN::int "GDK_GC_CLIP_Y_ORIGIN")
    (macro GDK_GC_EXPOSURES::int "GDK_GC_EXPOSURES")
    (macro GDK_GC_LINE_WIDTH::int "GDK_GC_LINE_WIDTH")
    (macro GDK_GC_LINE_STYLE::int "GDK_GC_LINE_STYLE")
    (macro GDK_GC_CAP_STYLE::int "GDK_GC_CAP_STYLE")
    (macro GDK_GC_JOIN_STYLE::int "GDK_GC_JOIN_STYLE")
    (type GdkGCValuesMask woot__e1055 "GdkGCValuesMask")
    (type woot__e1056 int "long")
    (macro GDK_SELECTION_PRIMARY::int "GDK_SELECTION_PRIMARY")
    (macro GDK_SELECTION_SECONDARY::int "GDK_SELECTION_SECONDARY")
    (type GdkSelection woot__e1056 "GdkSelection")
    (type woot__e1057 int "long")
    (macro GDK_PROPERTY_NEW_VALUE::int "GDK_PROPERTY_NEW_VALUE")
    (macro GDK_PROPERTY_DELETE::int "GDK_PROPERTY_DELETE")
    (type GdkPropertyState woot__e1057 "GdkPropertyState")
    (type woot__e1058 int "long")
    (macro GDK_PROP_MODE_REPLACE::int "GDK_PROP_MODE_REPLACE")
    (macro GDK_PROP_MODE_PREPEND::int "GDK_PROP_MODE_PREPEND")
    (macro GDK_PROP_MODE_APPEND::int "GDK_PROP_MODE_APPEND")
    (type GdkPropMode woot__e1058 "GdkPropMode")
    (type woot__e1059 int "long")
    (macro GDK_SOURCE_MOUSE::int "GDK_SOURCE_MOUSE")
    (macro GDK_SOURCE_PEN::int "GDK_SOURCE_PEN")
    (macro GDK_SOURCE_ERASER::int "GDK_SOURCE_ERASER")
    (macro GDK_SOURCE_CURSOR::int "GDK_SOURCE_CURSOR")
    (type GdkInputSource woot__e1059 "GdkInputSource")
    (type woot__e1060 int "long")
    (macro GDK_MODE_DISABLED::int "GDK_MODE_DISABLED")
    (macro GDK_MODE_SCREEN::int "GDK_MODE_SCREEN")
    (macro GDK_MODE_WINDOW::int "GDK_MODE_WINDOW")
    (type GdkInputMode woot__e1060 "GdkInputMode")
    (type woot__e1061 int "long")
    (macro GDK_AXIS_IGNORE::int "GDK_AXIS_IGNORE")
    (macro GDK_AXIS_X::int "GDK_AXIS_X")
    (macro GDK_AXIS_Y::int "GDK_AXIS_Y")
    (macro GDK_AXIS_PRESSURE::int "GDK_AXIS_PRESSURE")
    (macro GDK_AXIS_XTILT::int "GDK_AXIS_XTILT")
    (macro GDK_AXIS_YTILT::int "GDK_AXIS_YTILT")
    (macro GDK_AXIS_LAST::int "GDK_AXIS_LAST")
    (type GdkAxisUse woot__e1061 "GdkAxisUse")
    (type woot__e1062 int "long")
    (macro GDK_TARGET_BITMAP::int "GDK_TARGET_BITMAP")
    (macro GDK_TARGET_COLORMAP::int "GDK_TARGET_COLORMAP")
    (macro GDK_TARGET_DRAWABLE::int "GDK_TARGET_DRAWABLE")
    (macro GDK_TARGET_PIXMAP::int "GDK_TARGET_PIXMAP")
    (macro GDK_TARGET_STRING::int "GDK_TARGET_STRING")
    (type GdkTarget woot__e1062 "GdkTarget")
    (type woot__e1063 int "long")
    (macro GDK_SELECTION_TYPE_ATOM::int "GDK_SELECTION_TYPE_ATOM")
    (macro GDK_SELECTION_TYPE_BITMAP::int "GDK_SELECTION_TYPE_BITMAP")
    (macro GDK_SELECTION_TYPE_COLORMAP::int "GDK_SELECTION_TYPE_COLORMAP")
    (macro GDK_SELECTION_TYPE_DRAWABLE::int "GDK_SELECTION_TYPE_DRAWABLE")
    (macro GDK_SELECTION_TYPE_INTEGER::int "GDK_SELECTION_TYPE_INTEGER")
    (macro GDK_SELECTION_TYPE_PIXMAP::int "GDK_SELECTION_TYPE_PIXMAP")
    (macro GDK_SELECTION_TYPE_WINDOW::int "GDK_SELECTION_TYPE_WINDOW")
    (macro GDK_SELECTION_TYPE_STRING::int "GDK_SELECTION_TYPE_STRING")
    (type GdkSelectionType woot__e1063 "GdkSelectionType")
    (type woot__e1064 int "long")
    (macro GDK_EXTENSION_EVENTS_NONE::int "GDK_EXTENSION_EVENTS_NONE")
    (macro GDK_EXTENSION_EVENTS_ALL::int "GDK_EXTENSION_EVENTS_ALL")
    (macro GDK_EXTENSION_EVENTS_CURSOR::int "GDK_EXTENSION_EVENTS_CURSOR")
    (type GdkExtensionMode woot__e1064 "GdkExtensionMode")
    (type woot__e1065 int "long")
    (macro GDK_IM_PREEDIT_AREA::int "GDK_IM_PREEDIT_AREA")
    (macro GDK_IM_PREEDIT_CALLBACKS::int "GDK_IM_PREEDIT_CALLBACKS")
    (macro GDK_IM_PREEDIT_POSITION::int "GDK_IM_PREEDIT_POSITION")
    (macro GDK_IM_PREEDIT_NOTHING::int "GDK_IM_PREEDIT_NOTHING")
    (macro GDK_IM_PREEDIT_NONE::int "GDK_IM_PREEDIT_NONE")
    (macro GDK_IM_PREEDIT_MASK::int "GDK_IM_PREEDIT_MASK")
    (macro GDK_IM_STATUS_AREA::int "GDK_IM_STATUS_AREA")
    (macro GDK_IM_STATUS_CALLBACKS::int "GDK_IM_STATUS_CALLBACKS")
    (macro GDK_IM_STATUS_NOTHING::int "GDK_IM_STATUS_NOTHING")
    (macro GDK_IM_STATUS_NONE::int "GDK_IM_STATUS_NONE")
    (macro GDK_IM_STATUS_MASK::int "GDK_IM_STATUS_MASK")
    (type GdkIMStyle woot__e1065 "GdkIMStyle")
    (type woot__e1066 int "long")
    (macro GDK_IC_STYLE::int "GDK_IC_STYLE")
    (macro GDK_IC_CLIENT_WINDOW::int "GDK_IC_CLIENT_WINDOW")
    (macro GDK_IC_FOCUS_WINDOW::int "GDK_IC_FOCUS_WINDOW")
    (macro GDK_IC_FILTER_EVENTS::int "GDK_IC_FILTER_EVENTS")
    (macro GDK_IC_SPOT_LOCATION::int "GDK_IC_SPOT_LOCATION")
    (macro GDK_IC_LINE_SPACING::int "GDK_IC_LINE_SPACING")
    (macro GDK_IC_CURSOR::int "GDK_IC_CURSOR")
    (macro GDK_IC_PREEDIT_FONTSET::int "GDK_IC_PREEDIT_FONTSET")
    (macro GDK_IC_PREEDIT_AREA::int "GDK_IC_PREEDIT_AREA")
    (macro GDK_IC_PREEDIT_AREA_NEEDED::int "GDK_IC_PREEDIT_AREA_NEEDED")
    (macro GDK_IC_PREEDIT_FOREGROUND::int "GDK_IC_PREEDIT_FOREGROUND")
    (macro GDK_IC_PREEDIT_BACKGROUND::int "GDK_IC_PREEDIT_BACKGROUND")
    (macro GDK_IC_PREEDIT_PIXMAP::int "GDK_IC_PREEDIT_PIXMAP")
    (macro GDK_IC_PREEDIT_COLORMAP::int "GDK_IC_PREEDIT_COLORMAP")
    (macro GDK_IC_STATUS_FONTSET::int "GDK_IC_STATUS_FONTSET")
    (macro GDK_IC_STATUS_AREA::int "GDK_IC_STATUS_AREA")
    (macro GDK_IC_STATUS_AREA_NEEDED::int "GDK_IC_STATUS_AREA_NEEDED")
    (macro GDK_IC_STATUS_FOREGROUND::int "GDK_IC_STATUS_FOREGROUND")
    (macro GDK_IC_STATUS_BACKGROUND::int "GDK_IC_STATUS_BACKGROUND")
    (macro GDK_IC_STATUS_PIXMAP::int "GDK_IC_STATUS_PIXMAP")
    (macro GDK_IC_STATUS_COLORMAP::int "GDK_IC_STATUS_COLORMAP")
    (macro GDK_IC_ALL_REQ::int "GDK_IC_ALL_REQ")
    (macro GDK_IC_PREEDIT_AREA_REQ::int "GDK_IC_PREEDIT_AREA_REQ")
    (macro GDK_IC_PREEDIT_POSITION_REQ::int "GDK_IC_PREEDIT_POSITION_REQ")
    (macro GDK_IC_STATUS_AREA_REQ::int "GDK_IC_STATUS_AREA_REQ")
    (type GdkICAttributesType woot__e1066 "GdkICAttributesType")
    (type woot__e1067 int "long")
    (macro GDK_DECOR_ALL::int "GDK_DECOR_ALL")
    (macro GDK_DECOR_BORDER::int "GDK_DECOR_BORDER")
    (macro GDK_DECOR_RESIZEH::int "GDK_DECOR_RESIZEH")
    (macro GDK_DECOR_TITLE::int "GDK_DECOR_TITLE")
    (macro GDK_DECOR_MENU::int "GDK_DECOR_MENU")
    (macro GDK_DECOR_MINIMIZE::int "GDK_DECOR_MINIMIZE")
    (macro GDK_DECOR_MAXIMIZE::int "GDK_DECOR_MAXIMIZE")
    (type GdkWMDecoration woot__e1067 "GdkWMDecoration")
    (type woot__e1068 int "long")
    (macro GDK_FUNC_ALL::int "GDK_FUNC_ALL")
    (macro GDK_FUNC_RESIZE::int "GDK_FUNC_RESIZE")
    (macro GDK_FUNC_MOVE::int "GDK_FUNC_MOVE")
    (macro GDK_FUNC_MINIMIZE::int "GDK_FUNC_MINIMIZE")
    (macro GDK_FUNC_MAXIMIZE::int "GDK_FUNC_MAXIMIZE")
    (macro GDK_FUNC_CLOSE::int "GDK_FUNC_CLOSE")
    (type GdkWMFunction woot__e1068 "GdkWMFunction")
    (type gpointer,gint,GdkInputCondition->void "void ($(gpointer,gint,GdkInputCondition))")
    (type *gpointer,gint,GdkInputCondition->void (function void (gpointer gint GdkInputCondition)) "void ((*$)(gpointer,gint,GdkInputCondition))")
    (type GdkInputFunction *gpointer,gint,GdkInputCondition->void "GdkInputFunction")
    (type GdkDestroyNotify *gpointer->void "GdkDestroyNotify")
    (type woot__e1069 int "long")
    (macro GDK_CC_MODE_UNDEFINED::int "GDK_CC_MODE_UNDEFINED")
    (macro GDK_CC_MODE_BW::int "GDK_CC_MODE_BW")
    (macro GDK_CC_MODE_STD_CMAP::int "GDK_CC_MODE_STD_CMAP")
    (macro GDK_CC_MODE_TRUE::int "GDK_CC_MODE_TRUE")
    (macro GDK_CC_MODE_MY_GRAY::int "GDK_CC_MODE_MY_GRAY")
    (macro GDK_CC_MODE_PALETTE::int "GDK_CC_MODE_PALETTE")
    (type GdkColorContextMode woot__e1069 "GdkColorContextMode")
    (type woot__e1070 int "long")
    (macro GDK_OVERLAP_RECTANGLE_IN::int "GDK_OVERLAP_RECTANGLE_IN")
    (macro GDK_OVERLAP_RECTANGLE_OUT::int "GDK_OVERLAP_RECTANGLE_OUT")
    (macro GDK_OVERLAP_RECTANGLE_PART::int "GDK_OVERLAP_RECTANGLE_PART")
    (type GdkOverlapType woot__e1070 "GdkOverlapType")
    (type woot__e1071 int "long")
    (macro GDK_ACTION_DEFAULT::int "GDK_ACTION_DEFAULT")
    (macro GDK_ACTION_COPY::int "GDK_ACTION_COPY")
    (macro GDK_ACTION_MOVE::int "GDK_ACTION_MOVE")
    (macro GDK_ACTION_LINK::int "GDK_ACTION_LINK")
    (macro GDK_ACTION_PRIVATE::int "GDK_ACTION_PRIVATE")
    (macro GDK_ACTION_ASK::int "GDK_ACTION_ASK")
    (type GdkDragAction woot__e1071 "GdkDragAction")
    (type woot__e1072 int "long")
    (macro GDK_DRAG_PROTO_MOTIF::int "GDK_DRAG_PROTO_MOTIF")
    (macro GDK_DRAG_PROTO_XDND::int "GDK_DRAG_PROTO_XDND")
    (macro GDK_DRAG_PROTO_ROOTWIN::int "GDK_DRAG_PROTO_ROOTWIN")
    (macro GDK_DRAG_PROTO_NONE::int "GDK_DRAG_PROTO_NONE")
    (type GdkDragProtocol woot__e1072 "GdkDragProtocol")
    (type gint-array-32 (array gint) "gint $[ 32 ]")
    (type gint-array-32-array-32 (array gint-array-32) "gint $[ 32 ][ 32 ]")
    (type gint-array-32-array-32-array-32 (array gint-array-32-array-32) "gint $[ 32 ][ 32 ][ 32 ]")
    (type gulong* (pointer gulong) "gulong *")
    (type s-woot__s1002 (struct (red::gint "red") (green::gint "green") (blue::gint "blue")) "void")
    (type s-woot__s1003 (struct (red::gulong "red") (green::gulong "green") (blue::gulong "blue")) "void")
    (type s-woot__s1004 (struct (red::gint "red") (green::gint "green") (blue::gint "blue")) "void")
    (type GdkAxisUse* (pointer GdkAxisUse) "GdkAxisUse *")
    (type GdkXEvent void "GdkXEvent")
    (type GdkXEvent* (pointer GdkXEvent) "GdkXEvent *")
    (type GdkXEvent*,GdkEvent*,gpointer->GdkFilterReturn "GdkFilterReturn ($(GdkXEvent *,GdkEvent *,gpointer))")
    (type *GdkXEvent*,GdkEvent*,gpointer->GdkFilterReturn (function GdkFilterReturn (GdkXEvent* GdkEvent* gpointer)) "GdkFilterReturn ((*$)(GdkXEvent *,GdkEvent *,gpointer))")
    (type GdkFilterFunc *GdkXEvent*,GdkEvent*,gpointer->GdkFilterReturn "GdkFilterFunc")
    (type s-woot__s1005 (union (b::char-array-20 "b") (s::short-array-10 "s") (l::long-array-5 "l")) "void")
    (type char-array-20 (array char) "char $[ 20 ]")
    (type short-array-10 (array short) "signed short $[ 10 ]")
    (type long-array-5 (array long) "long $[ 5 ]")
    (type s-_GdkRgbCmap (struct (colors::guint32-array-256 "colors") (lut::guchar-array-256 "lut")) "struct _GdkRgbCmap")
    (type GdkRgbCmap s-_GdkRgbCmap "GdkRgbCmap")
    (type guint32-array-256 (array guint32) "guint32 $[ 256 ]")
    (type guchar-array-256 (array guchar) "guchar $[ 256 ]")
    (type woot__e1073 int "long")
    (macro GDK_RGB_DITHER_NONE::int "GDK_RGB_DITHER_NONE")
    (macro GDK_RGB_DITHER_NORMAL::int "GDK_RGB_DITHER_NORMAL")
    (macro GDK_RGB_DITHER_MAX::int "GDK_RGB_DITHER_MAX")
    (type GdkRgbDither woot__e1073 "GdkRgbDither")
    (type woot__e1074 int "long")
    (macro GTK_TYPE_INVALID::int "GTK_TYPE_INVALID")
    (macro GTK_TYPE_NONE::int "GTK_TYPE_NONE")
    (macro GTK_TYPE_CHAR::int "GTK_TYPE_CHAR")
    (macro GTK_TYPE_UCHAR::int "GTK_TYPE_UCHAR")
    (macro GTK_TYPE_BOOL::int "GTK_TYPE_BOOL")
    (macro GTK_TYPE_INT::int "GTK_TYPE_INT")
    (macro GTK_TYPE_UINT::int "GTK_TYPE_UINT")
    (macro GTK_TYPE_LONG::int "GTK_TYPE_LONG")
    (macro GTK_TYPE_ULONG::int "GTK_TYPE_ULONG")
    (macro GTK_TYPE_FLOAT::int "GTK_TYPE_FLOAT")
    (macro GTK_TYPE_DOUBLE::int "GTK_TYPE_DOUBLE")
    (macro GTK_TYPE_STRING::int "GTK_TYPE_STRING")
    (macro GTK_TYPE_ENUM::int "GTK_TYPE_ENUM")
    (macro GTK_TYPE_FLAGS::int "GTK_TYPE_FLAGS")
    (macro GTK_TYPE_BOXED::int "GTK_TYPE_BOXED")
    (macro GTK_TYPE_POINTER::int "GTK_TYPE_POINTER")
    (macro GTK_TYPE_SIGNAL::int "GTK_TYPE_SIGNAL")
    (macro GTK_TYPE_ARGS::int "GTK_TYPE_ARGS")
    (macro GTK_TYPE_CALLBACK::int "GTK_TYPE_CALLBACK")
    (macro GTK_TYPE_C_CALLBACK::int "GTK_TYPE_C_CALLBACK")
    (macro GTK_TYPE_FOREIGN::int "GTK_TYPE_FOREIGN")
    (macro GTK_TYPE_OBJECT::int "GTK_TYPE_OBJECT")
    (type GtkFundamentalType woot__e1074 "GtkFundamentalType")
    (type GtkType guint "GtkType")
    (type s-_GtkTypeObject (struct (klass::GtkTypeClass* "klass")) "struct _GtkTypeObject")
    (type GtkTypeObject s-_GtkTypeObject "GtkTypeObject")
    (type s-_GtkTypeClass (struct (type::GtkType "type")) "struct _GtkTypeClass")
    (type GtkTypeClass s-_GtkTypeClass "GtkTypeClass")
    (type s-_GtkArg (struct (type::GtkType "type") (name::gchar* "name") (d::s-woot__s1011 "d")) "struct _GtkArg")
    (type GtkArg s-_GtkArg "GtkArg")
    (type s-_GtkObject (struct (klass::GtkObjectClass* "klass") (flags::guint32 "flags") (ref_count::guint "ref_count") (object_data::GData* "object_data")) "struct _GtkObject")
    (type GtkObject s-_GtkObject "GtkObject")
    (type s-_GtkTypeInfo (struct (type_name::gchar* "type_name") (object_size::guint "object_size") (class_size::guint "class_size") (class_init_func::GtkClassInitFunc "class_init_func") (object_init_func::GtkObjectInitFunc "object_init_func") (reserved_1::gpointer "reserved_1") (reserved_2::gpointer "reserved_2") (base_class_init_func::GtkClassInitFunc "base_class_init_func")) "struct _GtkTypeInfo")
    (type GtkTypeInfo s-_GtkTypeInfo "GtkTypeInfo")
    (type s-_GtkTypeQuery (struct (type::GtkType "type") (type_name::gchar* "type_name") (object_size::guint "object_size") (class_size::guint "class_size")) "struct _GtkTypeQuery")
    (type GtkTypeQuery s-_GtkTypeQuery "GtkTypeQuery")
    (type s-_GtkEnumValue (struct (value::guint "value") (value_name::gchar* "value_name") (value_nick::gchar* "value_nick")) "struct _GtkEnumValue")
    (type GtkEnumValue s-_GtkEnumValue "GtkEnumValue")
    (type GtkFlagValue s-_GtkEnumValue "GtkFlagValue")
    (type GtkClassInitFunc *gpointer->void "GtkClassInitFunc")
    (type GtkObjectInitFunc *gpointer,gpointer->void "GtkObjectInitFunc")
    (type ->void "void ($())")
    (type *->void (function void ()) "void ((*$)())")
    (type GtkSignalFunc *->void "GtkSignalFunc")
    (type gpointer->gint "gint ($(gpointer))")
    (type *gpointer->gint (function gint (gpointer)) "gint ((*$)(gpointer))")
    (type GtkFunction *gpointer->gint "GtkFunction")
    (type GtkDestroyNotify *gpointer->void "GtkDestroyNotify")
    (type GtkObject*,gpointer,guint,GtkArg*->void "void ($(GtkObject *,gpointer,guint,GtkArg *))")
    (type *GtkObject*,gpointer,guint,GtkArg*->void (function void (GtkObject* gpointer guint GtkArg*)) "void ((*$)(GtkObject *,gpointer,guint,GtkArg *))")
    (type GtkCallbackMarshal *GtkObject*,gpointer,guint,GtkArg*->void "GtkCallbackMarshal")
    (type GtkObject*,GtkSignalFunc,gpointer,GtkArg*->void "void ($(GtkObject *,GtkSignalFunc,gpointer,GtkArg *))")
    (type *GtkObject*,GtkSignalFunc,gpointer,GtkArg*->void (function void (GtkObject* GtkSignalFunc gpointer GtkArg*)) "void ((*$)(GtkObject *,GtkSignalFunc,gpointer,GtkArg *))")
    (type GtkSignalMarshaller *GtkObject*,GtkSignalFunc,gpointer,GtkArg*->void "GtkSignalMarshaller")
    (type GtkObject*,GtkArg*,guint->void "void ($(GtkObject *,GtkArg *,guint))")
    (type *GtkObject*,GtkArg*,guint->void (function void (GtkObject* GtkArg* guint)) "void ((*$)(GtkObject *,GtkArg *,guint))")
    (type GtkArgGetFunc *GtkObject*,GtkArg*,guint->void "GtkArgGetFunc")
    (type GtkArgSetFunc *GtkObject*,GtkArg*,guint->void "GtkArgSetFunc")
    (type s-woot__s1011 (union (char_data::gchar "char_data") (uchar_data::guchar "uchar_data") (bool_data::gboolean "bool_data") (int_data::gint "int_data") (uint_data::guint "uint_data") (long_data::glong "long_data") (ulong_data::gulong "ulong_data") (float_data::gfloat "float_data") (double_data::gdouble "double_data") (string_data::gchar* "string_data") (pointer_data::gpointer "pointer_data") (object_data::GtkObject* "object_data") (signal_data::s-woot__s1006 "signal_data") (args_data::s-woot__s1007 "args_data") (callback_data::s-woot__s1008 "callback_data") (c_callback_data::s-woot__s1009 "c_callback_data") (foreign_data::s-woot__s1010 "foreign_data")) "void")
    (type s-woot__s1006 (struct (f::GtkSignalFunc "f") (d::gpointer "d")) "void")
    (type s-woot__s1007 (struct (n_args::gint "n_args") (args::GtkArg* "args")) "void")
    (type s-woot__s1008 (struct (marshal::GtkCallbackMarshal "marshal") (data::gpointer "data") (notify::GtkDestroyNotify "notify")) "void")
    (type s-woot__s1009 (struct (func::GtkFunction "func") (func_data::gpointer "func_data")) "void")
    (type s-woot__s1010 (struct (data::gpointer "data") (notify::GtkDestroyNotify "notify")) "void")
    (type s-_GtkArgInfo (struct (class_type::GtkType "class_type") (name::gchar* "name") (type::GtkType "type") (arg_flags::guint "arg_flags") (full_name::gchar* "full_name") (arg_id::guint "arg_id") (seq_id::guint "seq_id")) "struct _GtkArgInfo")
    (type GtkArgInfo s-_GtkArgInfo "GtkArgInfo")
    (type woot__e1075 int "long")
    (macro GTK_ARROW_UP::int "GTK_ARROW_UP")
    (macro GTK_ARROW_DOWN::int "GTK_ARROW_DOWN")
    (macro GTK_ARROW_LEFT::int "GTK_ARROW_LEFT")
    (macro GTK_ARROW_RIGHT::int "GTK_ARROW_RIGHT")
    (type GtkArrowType woot__e1075 "GtkArrowType")
    (type woot__e1076 int "long")
    (macro GTK_EXPAND::int "GTK_EXPAND")
    (macro GTK_SHRINK::int "GTK_SHRINK")
    (macro GTK_FILL::int "GTK_FILL")
    (type GtkAttachOptions woot__e1076 "GtkAttachOptions")
    (type woot__e1077 int "long")
    (macro GTK_BUTTONBOX_DEFAULT_STYLE::int "GTK_BUTTONBOX_DEFAULT_STYLE")
    (macro GTK_BUTTONBOX_SPREAD::int "GTK_BUTTONBOX_SPREAD")
    (macro GTK_BUTTONBOX_EDGE::int "GTK_BUTTONBOX_EDGE")
    (macro GTK_BUTTONBOX_START::int "GTK_BUTTONBOX_START")
    (macro GTK_BUTTONBOX_END::int "GTK_BUTTONBOX_END")
    (type GtkButtonBoxStyle woot__e1077 "GtkButtonBoxStyle")
    (type woot__e1078 int "long")
    (macro GTK_CURVE_TYPE_LINEAR::int "GTK_CURVE_TYPE_LINEAR")
    (macro GTK_CURVE_TYPE_SPLINE::int "GTK_CURVE_TYPE_SPLINE")
    (macro GTK_CURVE_TYPE_FREE::int "GTK_CURVE_TYPE_FREE")
    (type GtkCurveType woot__e1078 "GtkCurveType")
    (type woot__e1079 int "long")
    (macro GTK_DIR_TAB_FORWARD::int "GTK_DIR_TAB_FORWARD")
    (macro GTK_DIR_TAB_BACKWARD::int "GTK_DIR_TAB_BACKWARD")
    (macro GTK_DIR_UP::int "GTK_DIR_UP")
    (macro GTK_DIR_DOWN::int "GTK_DIR_DOWN")
    (macro GTK_DIR_LEFT::int "GTK_DIR_LEFT")
    (macro GTK_DIR_RIGHT::int "GTK_DIR_RIGHT")
    (type GtkDirectionType woot__e1079 "GtkDirectionType")
    (type woot__e1080 int "long")
    (macro GTK_JUSTIFY_LEFT::int "GTK_JUSTIFY_LEFT")
    (macro GTK_JUSTIFY_RIGHT::int "GTK_JUSTIFY_RIGHT")
    (macro GTK_JUSTIFY_CENTER::int "GTK_JUSTIFY_CENTER")
    (macro GTK_JUSTIFY_FILL::int "GTK_JUSTIFY_FILL")
    (type GtkJustification woot__e1080 "GtkJustification")
    (type woot__e1081 int "long")
    (macro GTK_MATCH_ALL::int "GTK_MATCH_ALL")
    (macro GTK_MATCH_ALL_TAIL::int "GTK_MATCH_ALL_TAIL")
    (macro GTK_MATCH_HEAD::int "GTK_MATCH_HEAD")
    (macro GTK_MATCH_TAIL::int "GTK_MATCH_TAIL")
    (macro GTK_MATCH_EXACT::int "GTK_MATCH_EXACT")
    (macro GTK_MATCH_LAST::int "GTK_MATCH_LAST")
    (type GtkMatchType woot__e1081 "GtkMatchType")
    (type woot__e1082 int "long")
    (macro GTK_MENU_DIR_PARENT::int "GTK_MENU_DIR_PARENT")
    (macro GTK_MENU_DIR_CHILD::int "GTK_MENU_DIR_CHILD")
    (macro GTK_MENU_DIR_NEXT::int "GTK_MENU_DIR_NEXT")
    (macro GTK_MENU_DIR_PREV::int "GTK_MENU_DIR_PREV")
    (type GtkMenuDirectionType woot__e1082 "GtkMenuDirectionType")
    (type woot__e1083 int "long")
    (macro GTK_MENU_FACTORY_MENU::int "GTK_MENU_FACTORY_MENU")
    (macro GTK_MENU_FACTORY_MENU_BAR::int "GTK_MENU_FACTORY_MENU_BAR")
    (macro GTK_MENU_FACTORY_OPTION_MENU::int "GTK_MENU_FACTORY_OPTION_MENU")
    (type GtkMenuFactoryType woot__e1083 "GtkMenuFactoryType")
    (type woot__e1084 int "long")
    (macro GTK_PIXELS::int "GTK_PIXELS")
    (macro GTK_INCHES::int "GTK_INCHES")
    (macro GTK_CENTIMETERS::int "GTK_CENTIMETERS")
    (type GtkMetricType woot__e1084 "GtkMetricType")
    (type woot__e1085 int "long")
    (macro GTK_ORIENTATION_HORIZONTAL::int "GTK_ORIENTATION_HORIZONTAL")
    (macro GTK_ORIENTATION_VERTICAL::int "GTK_ORIENTATION_VERTICAL")
    (type GtkOrientation woot__e1085 "GtkOrientation")
    (type woot__e1086 int "long")
    (macro GTK_CORNER_TOP_LEFT::int "GTK_CORNER_TOP_LEFT")
    (macro GTK_CORNER_BOTTOM_LEFT::int "GTK_CORNER_BOTTOM_LEFT")
    (macro GTK_CORNER_TOP_RIGHT::int "GTK_CORNER_TOP_RIGHT")
    (macro GTK_CORNER_BOTTOM_RIGHT::int "GTK_CORNER_BOTTOM_RIGHT")
    (type GtkCornerType woot__e1086 "GtkCornerType")
    (type woot__e1087 int "long")
    (macro GTK_PACK_START::int "GTK_PACK_START")
    (macro GTK_PACK_END::int "GTK_PACK_END")
    (type GtkPackType woot__e1087 "GtkPackType")
    (type woot__e1088 int "long")
    (macro GTK_PATH_PRIO_LOWEST::int "GTK_PATH_PRIO_LOWEST")
    (macro GTK_PATH_PRIO_GTK::int "GTK_PATH_PRIO_GTK")
    (macro GTK_PATH_PRIO_APPLICATION::int "GTK_PATH_PRIO_APPLICATION")
    (macro GTK_PATH_PRIO_RC::int "GTK_PATH_PRIO_RC")
    (macro GTK_PATH_PRIO_HIGHEST::int "GTK_PATH_PRIO_HIGHEST")
    (macro GTK_PATH_PRIO_MASK::int "GTK_PATH_PRIO_MASK")
    (type GtkPathPriorityType woot__e1088 "GtkPathPriorityType")
    (type woot__e1089 int "long")
    (macro GTK_PATH_WIDGET::int "GTK_PATH_WIDGET")
    (macro GTK_PATH_WIDGET_CLASS::int "GTK_PATH_WIDGET_CLASS")
    (macro GTK_PATH_CLASS::int "GTK_PATH_CLASS")
    (type GtkPathType woot__e1089 "GtkPathType")
    (type woot__e1090 int "long")
    (macro GTK_POLICY_ALWAYS::int "GTK_POLICY_ALWAYS")
    (macro GTK_POLICY_AUTOMATIC::int "GTK_POLICY_AUTOMATIC")
    (macro GTK_POLICY_NEVER::int "GTK_POLICY_NEVER")
    (type GtkPolicyType woot__e1090 "GtkPolicyType")
    (type woot__e1091 int "long")
    (macro GTK_POS_LEFT::int "GTK_POS_LEFT")
    (macro GTK_POS_RIGHT::int "GTK_POS_RIGHT")
    (macro GTK_POS_TOP::int "GTK_POS_TOP")
    (macro GTK_POS_BOTTOM::int "GTK_POS_BOTTOM")
    (type GtkPositionType woot__e1091 "GtkPositionType")
    (type woot__e1092 int "long")
    (macro GTK_PREVIEW_COLOR::int "GTK_PREVIEW_COLOR")
    (macro GTK_PREVIEW_GRAYSCALE::int "GTK_PREVIEW_GRAYSCALE")
    (type GtkPreviewType woot__e1092 "GtkPreviewType")
    (type woot__e1093 int "long")
    (macro GTK_RELIEF_NORMAL::int "GTK_RELIEF_NORMAL")
    (macro GTK_RELIEF_HALF::int "GTK_RELIEF_HALF")
    (macro GTK_RELIEF_NONE::int "GTK_RELIEF_NONE")
    (type GtkReliefStyle woot__e1093 "GtkReliefStyle")
    (type woot__e1094 int "long")
    (macro GTK_RESIZE_PARENT::int "GTK_RESIZE_PARENT")
    (macro GTK_RESIZE_QUEUE::int "GTK_RESIZE_QUEUE")
    (macro GTK_RESIZE_IMMEDIATE::int "GTK_RESIZE_IMMEDIATE")
    (type GtkResizeMode woot__e1094 "GtkResizeMode")
    (type woot__e1095 int "long")
    (macro GTK_RUN_FIRST::int "GTK_RUN_FIRST")
    (macro GTK_RUN_LAST::int "GTK_RUN_LAST")
    (macro GTK_RUN_BOTH::int "GTK_RUN_BOTH")
    (macro GTK_RUN_NO_RECURSE::int "GTK_RUN_NO_RECURSE")
    (macro GTK_RUN_ACTION::int "GTK_RUN_ACTION")
    (macro GTK_RUN_NO_HOOKS::int "GTK_RUN_NO_HOOKS")
    (type GtkSignalRunType woot__e1095 "GtkSignalRunType")
    (type woot__e1096 int "long")
    (macro GTK_SCROLL_NONE::int "GTK_SCROLL_NONE")
    (macro GTK_SCROLL_STEP_BACKWARD::int "GTK_SCROLL_STEP_BACKWARD")
    (macro GTK_SCROLL_STEP_FORWARD::int "GTK_SCROLL_STEP_FORWARD")
    (macro GTK_SCROLL_PAGE_BACKWARD::int "GTK_SCROLL_PAGE_BACKWARD")
    (macro GTK_SCROLL_PAGE_FORWARD::int "GTK_SCROLL_PAGE_FORWARD")
    (macro GTK_SCROLL_JUMP::int "GTK_SCROLL_JUMP")
    (type GtkScrollType woot__e1096 "GtkScrollType")
    (type woot__e1097 int "long")
    (macro GTK_SELECTION_SINGLE::int "GTK_SELECTION_SINGLE")
    (macro GTK_SELECTION_BROWSE::int "GTK_SELECTION_BROWSE")
    (macro GTK_SELECTION_MULTIPLE::int "GTK_SELECTION_MULTIPLE")
    (macro GTK_SELECTION_EXTENDED::int "GTK_SELECTION_EXTENDED")
    (type GtkSelectionMode woot__e1097 "GtkSelectionMode")
    (type woot__e1098 int "long")
    (macro GTK_SHADOW_NONE::int "GTK_SHADOW_NONE")
    (macro GTK_SHADOW_IN::int "GTK_SHADOW_IN")
    (macro GTK_SHADOW_OUT::int "GTK_SHADOW_OUT")
    (macro GTK_SHADOW_ETCHED_IN::int "GTK_SHADOW_ETCHED_IN")
    (macro GTK_SHADOW_ETCHED_OUT::int "GTK_SHADOW_ETCHED_OUT")
    (type GtkShadowType woot__e1098 "GtkShadowType")
    (type woot__e1099 int "long")
    (macro GTK_STATE_NORMAL::int "GTK_STATE_NORMAL")
    (macro GTK_STATE_ACTIVE::int "GTK_STATE_ACTIVE")
    (macro GTK_STATE_PRELIGHT::int "GTK_STATE_PRELIGHT")
    (macro GTK_STATE_SELECTED::int "GTK_STATE_SELECTED")
    (macro GTK_STATE_INSENSITIVE::int "GTK_STATE_INSENSITIVE")
    (type GtkStateType woot__e1099 "GtkStateType")
    (type woot__e1100 int "long")
    (macro GTK_DIRECTION_LEFT::int "GTK_DIRECTION_LEFT")
    (macro GTK_DIRECTION_RIGHT::int "GTK_DIRECTION_RIGHT")
    (type GtkSubmenuDirection woot__e1100 "GtkSubmenuDirection")
    (type woot__e1101 int "long")
    (macro GTK_TOP_BOTTOM::int "GTK_TOP_BOTTOM")
    (macro GTK_LEFT_RIGHT::int "GTK_LEFT_RIGHT")
    (type GtkSubmenuPlacement woot__e1101 "GtkSubmenuPlacement")
    (type woot__e1102 int "long")
    (macro GTK_TOOLBAR_ICONS::int "GTK_TOOLBAR_ICONS")
    (macro GTK_TOOLBAR_TEXT::int "GTK_TOOLBAR_TEXT")
    (macro GTK_TOOLBAR_BOTH::int "GTK_TOOLBAR_BOTH")
    (type GtkToolbarStyle woot__e1102 "GtkToolbarStyle")
    (type woot__e1103 int "long")
    (macro GTK_TROUGH_NONE::int "GTK_TROUGH_NONE")
    (macro GTK_TROUGH_START::int "GTK_TROUGH_START")
    (macro GTK_TROUGH_END::int "GTK_TROUGH_END")
    (macro GTK_TROUGH_JUMP::int "GTK_TROUGH_JUMP")
    (type GtkTroughType woot__e1103 "GtkTroughType")
    (type woot__e1104 int "long")
    (macro GTK_UPDATE_CONTINUOUS::int "GTK_UPDATE_CONTINUOUS")
    (macro GTK_UPDATE_DISCONTINUOUS::int "GTK_UPDATE_DISCONTINUOUS")
    (macro GTK_UPDATE_DELAYED::int "GTK_UPDATE_DELAYED")
    (type GtkUpdateType woot__e1104 "GtkUpdateType")
    (type woot__e1105 int "long")
    (macro GTK_VISIBILITY_NONE::int "GTK_VISIBILITY_NONE")
    (macro GTK_VISIBILITY_PARTIAL::int "GTK_VISIBILITY_PARTIAL")
    (macro GTK_VISIBILITY_FULL::int "GTK_VISIBILITY_FULL")
    (type GtkVisibility woot__e1105 "GtkVisibility")
    (type woot__e1106 int "long")
    (macro GTK_WIN_POS_NONE::int "GTK_WIN_POS_NONE")
    (macro GTK_WIN_POS_CENTER::int "GTK_WIN_POS_CENTER")
    (macro GTK_WIN_POS_MOUSE::int "GTK_WIN_POS_MOUSE")
    (macro GTK_WIN_POS_CENTER_ALWAYS::int "GTK_WIN_POS_CENTER_ALWAYS")
    (type GtkWindowPosition woot__e1106 "GtkWindowPosition")
    (type woot__e1107 int "long")
    (macro GTK_WINDOW_TOPLEVEL::int "GTK_WINDOW_TOPLEVEL")
    (macro GTK_WINDOW_DIALOG::int "GTK_WINDOW_DIALOG")
    (macro GTK_WINDOW_POPUP::int "GTK_WINDOW_POPUP")
    (type GtkWindowType woot__e1107 "GtkWindowType")
    (type woot__e1108 int "long")
    (macro GTK_SORT_ASCENDING::int "GTK_SORT_ASCENDING")
    (macro GTK_SORT_DESCENDING::int "GTK_SORT_DESCENDING")
    (type GtkSortType woot__e1108 "GtkSortType")
    (type woot__e1109 int "long")
    (macro GTK_DEBUG_OBJECTS::int "GTK_DEBUG_OBJECTS")
    (macro GTK_DEBUG_MISC::int "GTK_DEBUG_MISC")
    (macro GTK_DEBUG_SIGNALS::int "GTK_DEBUG_SIGNALS")
    (macro GTK_DEBUG_DND::int "GTK_DEBUG_DND")
    (macro GTK_DEBUG_PLUGSOCKET::int "GTK_DEBUG_PLUGSOCKET")
    (type GtkDebugFlag woot__e1109 "GtkDebugFlag")
    (type woot__e1110 int "long")
    (macro GTK_DESTROYED::int "GTK_DESTROYED")
    (macro GTK_FLOATING::int "GTK_FLOATING")
    (macro GTK_CONNECTED::int "GTK_CONNECTED")
    (macro GTK_CONSTRUCTED::int "GTK_CONSTRUCTED")
    (type GtkObjectFlags woot__e1110 "GtkObjectFlags")
    (type woot__e1111 int "long")
    (macro GTK_ARG_READABLE::int "GTK_ARG_READABLE")
    (macro GTK_ARG_WRITABLE::int "GTK_ARG_WRITABLE")
    (macro GTK_ARG_CONSTRUCT::int "GTK_ARG_CONSTRUCT")
    (macro GTK_ARG_CONSTRUCT_ONLY::int "GTK_ARG_CONSTRUCT_ONLY")
    (macro GTK_ARG_CHILD_ARG::int "GTK_ARG_CHILD_ARG")
    (macro GTK_ARG_MASK::int "GTK_ARG_MASK")
    (macro GTK_ARG_READWRITE::int "GTK_ARG_READWRITE")
    (type GtkArgFlags woot__e1111 "GtkArgFlags")
    (type s-_GtkObjectClass (struct (type::GtkType "type") (signals::guint* "signals") (nsignals::guint "nsignals") (n_args::guint "n_args") (construct_args::GSList* "construct_args") (set_arg::*GtkObject*,GtkArg*,guint->void "set_arg") (get_arg::*GtkObject*,GtkArg*,guint->void "get_arg") (shutdown::*GtkObject*->void "shutdown") (destroy::*GtkObject*->void "destroy") (finalize::*GtkObject*->void "finalize")) "struct _GtkObjectClass")
    (type GtkObjectClass s-_GtkObjectClass "GtkObjectClass")
    (type GtkObject*->void "void ($(GtkObject *))")
    (type *GtkObject*->void (function void (GtkObject*)) "void ((*$)(GtkObject *))")
    (type s-_GtkAccelGroup (struct (ref_count::guint "ref_count") (lock_count::guint "lock_count") (modifier_mask::GdkModifierType "modifier_mask") (attach_objects::GSList* "attach_objects")) "struct _GtkAccelGroup")
    (type GtkAccelGroup s-_GtkAccelGroup "GtkAccelGroup")
    (type s-_GtkAccelEntry (struct (accel_group::GtkAccelGroup* "accel_group") (accelerator_key::guint "accelerator_key") (accelerator_mods::GdkModifierType "accelerator_mods") (accel_flags::GtkAccelFlags "accel_flags") (object::GtkObject* "object") (signal_id::guint "signal_id")) "struct _GtkAccelEntry")
    (type GtkAccelEntry s-_GtkAccelEntry "GtkAccelEntry")
    (type woot__e1112 int "long")
    (macro GTK_ACCEL_VISIBLE::int "GTK_ACCEL_VISIBLE")
    (macro GTK_ACCEL_SIGNAL_VISIBLE::int "GTK_ACCEL_SIGNAL_VISIBLE")
    (macro GTK_ACCEL_LOCKED::int "GTK_ACCEL_LOCKED")
    (macro GTK_ACCEL_MASK::int "GTK_ACCEL_MASK")
    (type GtkAccelFlags woot__e1112 "GtkAccelFlags")
    (type s-_GtkData (struct (object::GtkObject "object")) "struct _GtkData")
    (type GtkData s-_GtkData "GtkData")
    (type s-_GtkDataClass (struct (parent_class::GtkObjectClass "parent_class") (disconnect::*GtkData*->void "disconnect")) "struct _GtkDataClass")
    (type GtkDataClass s-_GtkDataClass "GtkDataClass")
    (type GtkData*->void "void ($(GtkData *))")
    (type *GtkData*->void (function void (GtkData*)) "void ((*$)(GtkData *))")
    (type s-_GtkAdjustment (struct (data::GtkData "data") (lower::gfloat "lower") (upper::gfloat "upper") (value::gfloat "value") (step_increment::gfloat "step_increment") (page_increment::gfloat "page_increment") (page_size::gfloat "page_size")) "struct _GtkAdjustment")
    (type GtkAdjustment s-_GtkAdjustment "GtkAdjustment")
    (type s-_GtkAdjustmentClass (struct (parent_class::GtkDataClass "parent_class") (changed::*GtkAdjustment*->void "changed") (value_changed::*GtkAdjustment*->void "value_changed")) "struct _GtkAdjustmentClass")
    (type GtkAdjustmentClass s-_GtkAdjustmentClass "GtkAdjustmentClass")
    (type GtkAdjustment*->void "void ($(GtkAdjustment *))")
    (type *GtkAdjustment*->void (function void (GtkAdjustment*)) "void ((*$)(GtkAdjustment *))")
    (type s-_GtkStyle (struct (klass::GtkStyleClass* "klass") (fg::GdkColor-array-5 "fg") (bg::GdkColor-array-5 "bg") (light::GdkColor-array-5 "light") (dark::GdkColor-array-5 "dark") (mid::GdkColor-array-5 "mid") (text::GdkColor-array-5 "text") (base::GdkColor-array-5 "base") (black::GdkColor "black") (white::GdkColor "white") (font::GdkFont* "font") (fg_gc::GdkGC*-array-5 "fg_gc") (bg_gc::GdkGC*-array-5 "bg_gc") (light_gc::GdkGC*-array-5 "light_gc") (dark_gc::GdkGC*-array-5 "dark_gc") (mid_gc::GdkGC*-array-5 "mid_gc") (text_gc::GdkGC*-array-5 "text_gc") (base_gc::GdkGC*-array-5 "base_gc") (black_gc::GdkGC* "black_gc") (white_gc::GdkGC* "white_gc") (bg_pixmap::GdkPixmap*-array-5 "bg_pixmap") (ref_count::gint "ref_count") (attach_count::gint "attach_count") (depth::gint "depth") (colormap::GdkColormap* "colormap") (engine::GtkThemeEngine* "engine") (engine_data::gpointer "engine_data") (rc_style::GtkRcStyle* "rc_style") (styles::GSList* "styles")) "struct _GtkStyle")
    (type GtkStyle s-_GtkStyle "GtkStyle")
    (type s-_GtkStyleClass (struct (xthickness::gint "xthickness") (ythickness::gint "ythickness") (draw_hline::*GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint->void "draw_hline") (draw_vline::*GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint->void "draw_vline") (draw_shadow::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "draw_shadow") (draw_polygon::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,GdkPoint*,gint,gboolean->void "draw_polygon") (draw_arrow::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,GtkArrowType,gboolean,gint,gint,gint,gint->void "draw_arrow") (draw_diamond::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "draw_diamond") (draw_oval::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "draw_oval") (draw_string::*GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gchar*->void "draw_string") (draw_box::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "draw_box") (draw_flat_box::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "draw_flat_box") (draw_check::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "draw_check") (draw_option::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "draw_option") (draw_cross::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "draw_cross") (draw_ramp::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,GtkArrowType,gint,gint,gint,gint->void "draw_ramp") (draw_tab::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "draw_tab") (draw_shadow_gap::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkPositionType,gint,gint->void "draw_shadow_gap") (draw_box_gap::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkPositionType,gint,gint->void "draw_box_gap") (draw_extension::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkPositionType->void "draw_extension") (draw_focus::*GtkStyle*,GdkWindow*,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "draw_focus") (draw_slider::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkOrientation->void "draw_slider") (draw_handle::*GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkOrientation->void "draw_handle")) "struct _GtkStyleClass")
    (type GtkStyleClass s-_GtkStyleClass "GtkStyleClass")
    (type s-_GtkThemeEngine (struct (parse_rc_style::*GScanner*,GtkRcStyle*->guint "parse_rc_style") (merge_rc_style::*GtkRcStyle*,GtkRcStyle*->void "merge_rc_style") (rc_style_to_style::*GtkStyle*,GtkRcStyle*->void "rc_style_to_style") (duplicate_style::*GtkStyle*,GtkStyle*->void "duplicate_style") (realize_style::*GtkStyle*->void "realize_style") (unrealize_style::*GtkStyle*->void "unrealize_style") (destroy_rc_style::*GtkRcStyle*->void "destroy_rc_style") (destroy_style::*GtkStyle*->void "destroy_style") (set_background::*GtkStyle*,GdkWindow*,GtkStateType->void "set_background")) "struct _GtkThemeEngine")
    (type GtkThemeEngine s-_GtkThemeEngine "GtkThemeEngine")
    (type s-_GtkRcStyle (struct (name::gchar* "name") (font_name::gchar* "font_name") (fontset_name::gchar* "fontset_name") (bg_pixmap_name::gchar*-array-5 "bg_pixmap_name") (color_flags::GtkRcFlags-array-5 "color_flags") (fg::GdkColor-array-5 "fg") (bg::GdkColor-array-5 "bg") (text::GdkColor-array-5 "text") (base::GdkColor-array-5 "base") (engine::GtkThemeEngine* "engine") (engine_data::gpointer "engine_data")) "struct _GtkRcStyle")
    (type GtkRcStyle s-_GtkRcStyle "GtkRcStyle")
    (type s-_GtkWidget (struct (object::GtkObject "object") (private_flags::guint16 "private_flags") (state::guint8 "state") (saved_state::guint8 "saved_state") (name::gchar* "name") (style::GtkStyle* "style") (requisition::GtkRequisition "requisition") (allocation::GtkAllocation "allocation") (window::GdkWindow* "window") (parent::GtkWidget* "parent")) "struct _GtkWidget")
    (type GtkWidget s-_GtkWidget "GtkWidget")
    (type GdkColor-array-5 (array GdkColor) "GdkColor $[ 5 ]")
    (type GdkGC*-array-5 (array GdkGC*) "GdkGC *$[ 5 ]")
    (type GdkPixmap*-array-5 (array GdkPixmap*) "GdkPixmap *$[ 5 ]")
    (type GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint->void (function void (GtkStyle* GdkWindow* GtkStateType GdkRectangle* GtkWidget* gchar* gint gint gint)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void (function void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,GdkPoint*,gint,gboolean->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,GdkPoint *,gint,gboolean))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,GdkPoint*,gint,gboolean->void (function void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* GdkPoint* gint gboolean)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,GdkPoint *,gint,gboolean))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,GtkArrowType,gboolean,gint,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,GtkArrowType,gboolean,gint,gint,gint,gint))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,GtkArrowType,gboolean,gint,gint,gint,gint->void (function void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* GtkArrowType gboolean gint gint gint gint)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,GtkArrowType,gboolean,gint,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gchar*->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gchar *))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gchar*->void (function void (GtkStyle* GdkWindow* GtkStateType GdkRectangle* GtkWidget* gchar* gint gint gchar*)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gchar *))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,GtkArrowType,gint,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,GtkArrowType,gint,gint,gint,gint))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,GtkArrowType,gint,gint,gint,gint->void (function void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* GtkArrowType gint gint gint gint)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,GtkArrowType,gint,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkPositionType,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint,GtkPositionType,gint,gint))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkPositionType,gint,gint->void (function void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint GtkPositionType gint gint)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint,GtkPositionType,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkPositionType->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint,GtkPositionType))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkPositionType->void (function void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint GtkPositionType)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint,GtkPositionType))")
    (type GtkStyle*,GdkWindow*,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint))")
    (type *GtkStyle*,GdkWindow*,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint->void (function void (GtkStyle* GdkWindow* GdkRectangle* GtkWidget* gchar* gint gint gint gint)) "void ((*$)(GtkStyle *,GdkWindow *,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkOrientation->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint,GtkOrientation))")
    (type *GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkRectangle*,GtkWidget*,gchar*,gint,gint,gint,gint,GtkOrientation->void (function void (GtkStyle* GdkWindow* GtkStateType GtkShadowType GdkRectangle* GtkWidget* gchar* gint gint gint gint GtkOrientation)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkRectangle *,GtkWidget *,gchar *,gint,gint,gint,gint,GtkOrientation))")
    (type woot__e1113 int "long")
    (macro GTK_TOPLEVEL::int "GTK_TOPLEVEL")
    (macro GTK_NO_WINDOW::int "GTK_NO_WINDOW")
    (macro GTK_REALIZED::int "GTK_REALIZED")
    (macro GTK_MAPPED::int "GTK_MAPPED")
    (macro GTK_VISIBLE::int "GTK_VISIBLE")
    (macro GTK_SENSITIVE::int "GTK_SENSITIVE")
    (macro GTK_PARENT_SENSITIVE::int "GTK_PARENT_SENSITIVE")
    (macro GTK_CAN_FOCUS::int "GTK_CAN_FOCUS")
    (macro GTK_HAS_FOCUS::int "GTK_HAS_FOCUS")
    (macro GTK_CAN_DEFAULT::int "GTK_CAN_DEFAULT")
    (macro GTK_HAS_DEFAULT::int "GTK_HAS_DEFAULT")
    (macro GTK_HAS_GRAB::int "GTK_HAS_GRAB")
    (macro GTK_RC_STYLE::int "GTK_RC_STYLE")
    (macro GTK_COMPOSITE_CHILD::int "GTK_COMPOSITE_CHILD")
    (macro GTK_NO_REPARENT::int "GTK_NO_REPARENT")
    (macro GTK_APP_PAINTABLE::int "GTK_APP_PAINTABLE")
    (macro GTK_RECEIVES_DEFAULT::int "GTK_RECEIVES_DEFAULT")
    (type GtkWidgetFlags woot__e1113 "GtkWidgetFlags")
    (type s-_GtkRequisition (struct (width::gint16 "width") (height::gint16 "height")) "struct _GtkRequisition")
    (type GtkRequisition s-_GtkRequisition "GtkRequisition")
    (type s-_GtkAllocation (struct (x::gint16 "x") (y::gint16 "y") (width::guint16 "width") (height::guint16 "height")) "struct _GtkAllocation")
    (type GtkAllocation s-_GtkAllocation "GtkAllocation")
    (type s-_GtkSelectionData (struct (selection::GdkAtom "selection") (target::GdkAtom "target") (type::GdkAtom "type") (format::gint "format") (data::guchar* "data") (length::gint "length")) "struct _GtkSelectionData")
    (type GtkSelectionData s-_GtkSelectionData "GtkSelectionData")
    (type s-_GtkWidgetClass (struct (parent_class::GtkObjectClass "parent_class") (activate_signal::guint "activate_signal") (set_scroll_adjustments_signal::guint "set_scroll_adjustments_signal") (show::*GtkWidget*->void "show") (show_all::*GtkWidget*->void "show_all") (hide::*GtkWidget*->void "hide") (hide_all::*GtkWidget*->void "hide_all") (map::*GtkWidget*->void "map") (unmap::*GtkWidget*->void "unmap") (realize::*GtkWidget*->void "realize") (unrealize::*GtkWidget*->void "unrealize") (draw::*GtkWidget*,GdkRectangle*->void "draw") (draw_focus::*GtkWidget*->void "draw_focus") (draw_default::*GtkWidget*->void "draw_default") (size_request::*GtkWidget*,GtkRequisition*->void "size_request") (size_allocate::*GtkWidget*,GtkAllocation*->void "size_allocate") (state_changed::*GtkWidget*,GtkStateType->void "state_changed") (parent_set::*GtkWidget*,GtkWidget*->void "parent_set") (style_set::*GtkWidget*,GtkStyle*->void "style_set") (add_accelerator::*GtkWidget*,guint,GtkAccelGroup*,guint,GdkModifierType,GtkAccelFlags->gint "add_accelerator") (remove_accelerator::*GtkWidget*,GtkAccelGroup*,guint,GdkModifierType->void "remove_accelerator") (grab_focus::*GtkWidget*->void "grab_focus") (event::*GtkWidget*,GdkEvent*->gint "event") (button_press_event::*GtkWidget*,GdkEventButton*->gint "button_press_event") (button_release_event::*GtkWidget*,GdkEventButton*->gint "button_release_event") (motion_notify_event::*GtkWidget*,GdkEventMotion*->gint "motion_notify_event") (delete_event::*GtkWidget*,GdkEventAny*->gint "delete_event") (destroy_event::*GtkWidget*,GdkEventAny*->gint "destroy_event") (expose_event::*GtkWidget*,GdkEventExpose*->gint "expose_event") (key_press_event::*GtkWidget*,GdkEventKey*->gint "key_press_event") (key_release_event::*GtkWidget*,GdkEventKey*->gint "key_release_event") (enter_notify_event::*GtkWidget*,GdkEventCrossing*->gint "enter_notify_event") (leave_notify_event::*GtkWidget*,GdkEventCrossing*->gint "leave_notify_event") (configure_event::*GtkWidget*,GdkEventConfigure*->gint "configure_event") (focus_in_event::*GtkWidget*,GdkEventFocus*->gint "focus_in_event") (focus_out_event::*GtkWidget*,GdkEventFocus*->gint "focus_out_event") (map_event::*GtkWidget*,GdkEventAny*->gint "map_event") (unmap_event::*GtkWidget*,GdkEventAny*->gint "unmap_event") (property_notify_event::*GtkWidget*,GdkEventProperty*->gint "property_notify_event") (selection_clear_event::*GtkWidget*,GdkEventSelection*->gint "selection_clear_event") (selection_request_event::*GtkWidget*,GdkEventSelection*->gint "selection_request_event") (selection_notify_event::*GtkWidget*,GdkEventSelection*->gint "selection_notify_event") (proximity_in_event::*GtkWidget*,GdkEventProximity*->gint "proximity_in_event") (proximity_out_event::*GtkWidget*,GdkEventProximity*->gint "proximity_out_event") (visibility_notify_event::*GtkWidget*,GdkEventVisibility*->gint "visibility_notify_event") (client_event::*GtkWidget*,GdkEventClient*->gint "client_event") (no_expose_event::*GtkWidget*,GdkEventAny*->gint "no_expose_event") (selection_get::*GtkWidget*,GtkSelectionData*,guint,guint->void "selection_get") (selection_received::*GtkWidget*,GtkSelectionData*,guint->void "selection_received") (drag_begin::*GtkWidget*,GdkDragContext*->void "drag_begin") (drag_end::*GtkWidget*,GdkDragContext*->void "drag_end") (drag_data_get::*GtkWidget*,GdkDragContext*,GtkSelectionData*,guint,guint->void "drag_data_get") (drag_data_delete::*GtkWidget*,GdkDragContext*->void "drag_data_delete") (drag_leave::*GtkWidget*,GdkDragContext*,guint->void "drag_leave") (drag_motion::*GtkWidget*,GdkDragContext*,gint,gint,guint->gboolean "drag_motion") (drag_drop::*GtkWidget*,GdkDragContext*,gint,gint,guint->gboolean "drag_drop") (drag_data_received::*GtkWidget*,GdkDragContext*,gint,gint,GtkSelectionData*,guint,guint->void "drag_data_received") (debug_msg::*GtkWidget*,gchar*->void "debug_msg") (pad1::GtkFunction "pad1") (pad2::GtkFunction "pad2") (pad3::GtkFunction "pad3") (pad4::GtkFunction "pad4")) "struct _GtkWidgetClass")
    (type GtkWidgetClass s-_GtkWidgetClass "GtkWidgetClass")
    (type s-_GtkWidgetAuxInfo (struct (x::gint16 "x") (y::gint16 "y") (width::gint16 "width") (height::gint16 "height")) "struct _GtkWidgetAuxInfo")
    (type GtkWidgetAuxInfo s-_GtkWidgetAuxInfo "GtkWidgetAuxInfo")
    (type s-_GtkWidgetShapeInfo (struct (offset_x::gint16 "offset_x") (offset_y::gint16 "offset_y") (shape_mask::GdkBitmap* "shape_mask")) "struct _GtkWidgetShapeInfo")
    (type GtkWidgetShapeInfo s-_GtkWidgetShapeInfo "GtkWidgetShapeInfo")
    (type GtkWidget*,gpointer->void "void ($(GtkWidget *,gpointer))")
    (type *GtkWidget*,gpointer->void (function void (GtkWidget* gpointer)) "void ((*$)(GtkWidget *,gpointer))")
    (type GtkCallback *GtkWidget*,gpointer->void "GtkCallback")
    (type guchar* (pointer guchar) "guchar *")
    (type GtkWidget*->void "void ($(GtkWidget *))")
    (type *GtkWidget*->void (function void (GtkWidget*)) "void ((*$)(GtkWidget *))")
    (type GtkWidget*,GdkRectangle*->void "void ($(GtkWidget *,GdkRectangle *))")
    (type *GtkWidget*,GdkRectangle*->void (function void (GtkWidget* GdkRectangle*)) "void ((*$)(GtkWidget *,GdkRectangle *))")
    (type GtkWidget*,GtkRequisition*->void "void ($(GtkWidget *,GtkRequisition *))")
    (type *GtkWidget*,GtkRequisition*->void (function void (GtkWidget* GtkRequisition*)) "void ((*$)(GtkWidget *,GtkRequisition *))")
    (type GtkWidget*,GtkAllocation*->void "void ($(GtkWidget *,GtkAllocation *))")
    (type *GtkWidget*,GtkAllocation*->void (function void (GtkWidget* GtkAllocation*)) "void ((*$)(GtkWidget *,GtkAllocation *))")
    (type GtkWidget*,GtkStateType->void "void ($(GtkWidget *,GtkStateType))")
    (type *GtkWidget*,GtkStateType->void (function void (GtkWidget* GtkStateType)) "void ((*$)(GtkWidget *,GtkStateType))")
    (type GtkWidget*,GtkWidget*->void "void ($(GtkWidget *,GtkWidget *))")
    (type *GtkWidget*,GtkWidget*->void (function void (GtkWidget* GtkWidget*)) "void ((*$)(GtkWidget *,GtkWidget *))")
    (type GtkWidget*,GtkStyle*->void "void ($(GtkWidget *,GtkStyle *))")
    (type *GtkWidget*,GtkStyle*->void (function void (GtkWidget* GtkStyle*)) "void ((*$)(GtkWidget *,GtkStyle *))")
    (type GtkWidget*,guint,GtkAccelGroup*,guint,GdkModifierType,GtkAccelFlags->gint "gint ($(GtkWidget *,guint,GtkAccelGroup *,guint,GdkModifierType,GtkAccelFlags))")
    (type *GtkWidget*,guint,GtkAccelGroup*,guint,GdkModifierType,GtkAccelFlags->gint (function gint (GtkWidget* guint GtkAccelGroup* guint GdkModifierType GtkAccelFlags)) "gint ((*$)(GtkWidget *,guint,GtkAccelGroup *,guint,GdkModifierType,GtkAccelFlags))")
    (type GtkWidget*,GtkAccelGroup*,guint,GdkModifierType->void "void ($(GtkWidget *,GtkAccelGroup *,guint,GdkModifierType))")
    (type *GtkWidget*,GtkAccelGroup*,guint,GdkModifierType->void (function void (GtkWidget* GtkAccelGroup* guint GdkModifierType)) "void ((*$)(GtkWidget *,GtkAccelGroup *,guint,GdkModifierType))")
    (type GtkWidget*,GdkEvent*->gint "gint ($(GtkWidget *,GdkEvent *))")
    (type *GtkWidget*,GdkEvent*->gint (function gint (GtkWidget* GdkEvent*)) "gint ((*$)(GtkWidget *,GdkEvent *))")
    (type GtkWidget*,GdkEventButton*->gint "gint ($(GtkWidget *,GdkEventButton *))")
    (type *GtkWidget*,GdkEventButton*->gint (function gint (GtkWidget* GdkEventButton*)) "gint ((*$)(GtkWidget *,GdkEventButton *))")
    (type GtkWidget*,GdkEventMotion*->gint "gint ($(GtkWidget *,GdkEventMotion *))")
    (type *GtkWidget*,GdkEventMotion*->gint (function gint (GtkWidget* GdkEventMotion*)) "gint ((*$)(GtkWidget *,GdkEventMotion *))")
    (type GtkWidget*,GdkEventAny*->gint "gint ($(GtkWidget *,GdkEventAny *))")
    (type *GtkWidget*,GdkEventAny*->gint (function gint (GtkWidget* GdkEventAny*)) "gint ((*$)(GtkWidget *,GdkEventAny *))")
    (type GtkWidget*,GdkEventExpose*->gint "gint ($(GtkWidget *,GdkEventExpose *))")
    (type *GtkWidget*,GdkEventExpose*->gint (function gint (GtkWidget* GdkEventExpose*)) "gint ((*$)(GtkWidget *,GdkEventExpose *))")
    (type GtkWidget*,GdkEventKey*->gint "gint ($(GtkWidget *,GdkEventKey *))")
    (type *GtkWidget*,GdkEventKey*->gint (function gint (GtkWidget* GdkEventKey*)) "gint ((*$)(GtkWidget *,GdkEventKey *))")
    (type GtkWidget*,GdkEventCrossing*->gint "gint ($(GtkWidget *,GdkEventCrossing *))")
    (type *GtkWidget*,GdkEventCrossing*->gint (function gint (GtkWidget* GdkEventCrossing*)) "gint ((*$)(GtkWidget *,GdkEventCrossing *))")
    (type GtkWidget*,GdkEventConfigure*->gint "gint ($(GtkWidget *,GdkEventConfigure *))")
    (type *GtkWidget*,GdkEventConfigure*->gint (function gint (GtkWidget* GdkEventConfigure*)) "gint ((*$)(GtkWidget *,GdkEventConfigure *))")
    (type GtkWidget*,GdkEventFocus*->gint "gint ($(GtkWidget *,GdkEventFocus *))")
    (type *GtkWidget*,GdkEventFocus*->gint (function gint (GtkWidget* GdkEventFocus*)) "gint ((*$)(GtkWidget *,GdkEventFocus *))")
    (type GtkWidget*,GdkEventProperty*->gint "gint ($(GtkWidget *,GdkEventProperty *))")
    (type *GtkWidget*,GdkEventProperty*->gint (function gint (GtkWidget* GdkEventProperty*)) "gint ((*$)(GtkWidget *,GdkEventProperty *))")
    (type GtkWidget*,GdkEventSelection*->gint "gint ($(GtkWidget *,GdkEventSelection *))")
    (type *GtkWidget*,GdkEventSelection*->gint (function gint (GtkWidget* GdkEventSelection*)) "gint ((*$)(GtkWidget *,GdkEventSelection *))")
    (type GtkWidget*,GdkEventProximity*->gint "gint ($(GtkWidget *,GdkEventProximity *))")
    (type *GtkWidget*,GdkEventProximity*->gint (function gint (GtkWidget* GdkEventProximity*)) "gint ((*$)(GtkWidget *,GdkEventProximity *))")
    (type GtkWidget*,GdkEventVisibility*->gint "gint ($(GtkWidget *,GdkEventVisibility *))")
    (type *GtkWidget*,GdkEventVisibility*->gint (function gint (GtkWidget* GdkEventVisibility*)) "gint ((*$)(GtkWidget *,GdkEventVisibility *))")
    (type GtkWidget*,GdkEventClient*->gint "gint ($(GtkWidget *,GdkEventClient *))")
    (type *GtkWidget*,GdkEventClient*->gint (function gint (GtkWidget* GdkEventClient*)) "gint ((*$)(GtkWidget *,GdkEventClient *))")
    (type GtkWidget*,GtkSelectionData*,guint,guint->void "void ($(GtkWidget *,GtkSelectionData *,guint,guint))")
    (type *GtkWidget*,GtkSelectionData*,guint,guint->void (function void (GtkWidget* GtkSelectionData* guint guint)) "void ((*$)(GtkWidget *,GtkSelectionData *,guint,guint))")
    (type GtkWidget*,GtkSelectionData*,guint->void "void ($(GtkWidget *,GtkSelectionData *,guint))")
    (type *GtkWidget*,GtkSelectionData*,guint->void (function void (GtkWidget* GtkSelectionData* guint)) "void ((*$)(GtkWidget *,GtkSelectionData *,guint))")
    (type GtkWidget*,GdkDragContext*->void "void ($(GtkWidget *,GdkDragContext *))")
    (type *GtkWidget*,GdkDragContext*->void (function void (GtkWidget* GdkDragContext*)) "void ((*$)(GtkWidget *,GdkDragContext *))")
    (type GtkWidget*,GdkDragContext*,GtkSelectionData*,guint,guint->void "void ($(GtkWidget *,GdkDragContext *,GtkSelectionData *,guint,guint))")
    (type *GtkWidget*,GdkDragContext*,GtkSelectionData*,guint,guint->void (function void (GtkWidget* GdkDragContext* GtkSelectionData* guint guint)) "void ((*$)(GtkWidget *,GdkDragContext *,GtkSelectionData *,guint,guint))")
    (type GtkWidget*,GdkDragContext*,guint->void "void ($(GtkWidget *,GdkDragContext *,guint))")
    (type *GtkWidget*,GdkDragContext*,guint->void (function void (GtkWidget* GdkDragContext* guint)) "void ((*$)(GtkWidget *,GdkDragContext *,guint))")
    (type GtkWidget*,GdkDragContext*,gint,gint,guint->gboolean "gboolean ($(GtkWidget *,GdkDragContext *,gint,gint,guint))")
    (type *GtkWidget*,GdkDragContext*,gint,gint,guint->gboolean (function gboolean (GtkWidget* GdkDragContext* gint gint guint)) "gboolean ((*$)(GtkWidget *,GdkDragContext *,gint,gint,guint))")
    (type GtkWidget*,GdkDragContext*,gint,gint,GtkSelectionData*,guint,guint->void "void ($(GtkWidget *,GdkDragContext *,gint,gint,GtkSelectionData *,guint,guint))")
    (type *GtkWidget*,GdkDragContext*,gint,gint,GtkSelectionData*,guint,guint->void (function void (GtkWidget* GdkDragContext* gint gint GtkSelectionData* guint guint)) "void ((*$)(GtkWidget *,GdkDragContext *,gint,gint,GtkSelectionData *,guint,guint))")
    (type GtkWidget*,gchar*->void "void ($(GtkWidget *,gchar *))")
    (type *GtkWidget*,gchar*->void (function void (GtkWidget* gchar*)) "void ((*$)(GtkWidget *,gchar *))")
    (type s-_GtkMisc (struct (widget::GtkWidget "widget") (xalign::gfloat "xalign") (yalign::gfloat "yalign") (xpad::guint16 "xpad") (ypad::guint16 "ypad")) "struct _GtkMisc")
    (type GtkMisc s-_GtkMisc "GtkMisc")
    (type s-_GtkMiscClass (struct (parent_class::GtkWidgetClass "parent_class")) "struct _GtkMiscClass")
    (type GtkMiscClass s-_GtkMiscClass "GtkMiscClass")
    (type s-_GtkLabel (struct (misc::GtkMisc "misc") (label::gchar* "label") (label_wc::GdkWChar* "label_wc") (pattern::gchar* "pattern") (words::GtkLabelWord* "words") (max_width::guint "max_width") (jtype::guint "jtype") (wrap::gboolean "wrap")) "struct _GtkLabel")
    (type GtkLabel s-_GtkLabel "GtkLabel")
    (type s-_GtkLabelClass (struct (parent_class::GtkMiscClass "parent_class")) "struct _GtkLabelClass")
    (type GtkLabelClass s-_GtkLabelClass "GtkLabelClass")
    (type s-_GtkLabelWord (struct) "struct _GtkLabelWord")
    (type GtkLabelWord s-_GtkLabelWord "GtkLabelWord")
    (type GdkWChar* (pointer GdkWChar) "GdkWChar *")
    (type s-_GtkAccelLabel (struct (label::GtkLabel "label") (queue_id::guint "queue_id") (accel_padding::guint "accel_padding") (accel_widget::GtkWidget* "accel_widget") (accel_string::gchar* "accel_string") (accel_string_width::guint16 "accel_string_width")) "struct _GtkAccelLabel")
    (type GtkAccelLabel s-_GtkAccelLabel "GtkAccelLabel")
    (type s-_GtkAccelLabelClass (struct (parent_class::GtkLabelClass "parent_class") (signal_quote1::gchar* "signal_quote1") (signal_quote2::gchar* "signal_quote2") (mod_name_shift::gchar* "mod_name_shift") (mod_name_control::gchar* "mod_name_control") (mod_name_alt::gchar* "mod_name_alt") (mod_separator::gchar* "mod_separator") (accel_seperator::gchar* "accel_seperator") (latin1_to_char::guint "latin1_to_char")) "struct _GtkAccelLabelClass")
    (type GtkAccelLabelClass s-_GtkAccelLabelClass "GtkAccelLabelClass")
    (type s-_GtkContainer (struct (widget::GtkWidget "widget") (focus_child::GtkWidget* "focus_child") (border_width::guint "border_width") (need_resize::guint "need_resize") (resize_mode::guint "resize_mode") (reallocate_redraws::guint "reallocate_redraws") (resize_widgets::GSList* "resize_widgets")) "struct _GtkContainer")
    (type GtkContainer s-_GtkContainer "GtkContainer")
    (type s-_GtkContainerClass (struct (parent_class::GtkWidgetClass "parent_class") (n_child_args::guint "n_child_args") (add::*GtkContainer*,GtkWidget*->void "add") (remove::*GtkContainer*,GtkWidget*->void "remove") (check_resize::*GtkContainer*->void "check_resize") (forall::*GtkContainer*,gboolean,GtkCallback,gpointer->void "forall") (focus::*GtkContainer*,GtkDirectionType->gint "focus") (set_focus_child::*GtkContainer*,GtkWidget*->void "set_focus_child") (child_type::*GtkContainer*->GtkType "child_type") (set_child_arg::*GtkContainer*,GtkWidget*,GtkArg*,guint->void "set_child_arg") (get_child_arg::*GtkContainer*,GtkWidget*,GtkArg*,guint->void "get_child_arg") (composite_name::*GtkContainer*,GtkWidget*->gchar* "composite_name") (pad1::GtkFunction "pad1") (pad2::GtkFunction "pad2")) "struct _GtkContainerClass")
    (type GtkContainerClass s-_GtkContainerClass "GtkContainerClass")
    (type GtkContainer*,GtkWidget*->void "void ($(GtkContainer *,GtkWidget *))")
    (type *GtkContainer*,GtkWidget*->void (function void (GtkContainer* GtkWidget*)) "void ((*$)(GtkContainer *,GtkWidget *))")
    (type GtkContainer*->void "void ($(GtkContainer *))")
    (type *GtkContainer*->void (function void (GtkContainer*)) "void ((*$)(GtkContainer *))")
    (type GtkContainer*,gboolean,GtkCallback,gpointer->void "void ($(GtkContainer *,gboolean,GtkCallback,gpointer))")
    (type *GtkContainer*,gboolean,GtkCallback,gpointer->void (function void (GtkContainer* gboolean GtkCallback gpointer)) "void ((*$)(GtkContainer *,gboolean,GtkCallback,gpointer))")
    (type GtkContainer*,GtkDirectionType->gint "gint ($(GtkContainer *,GtkDirectionType))")
    (type *GtkContainer*,GtkDirectionType->gint (function gint (GtkContainer* GtkDirectionType)) "gint ((*$)(GtkContainer *,GtkDirectionType))")
    (type GtkContainer*->GtkType "GtkType ($(GtkContainer *))")
    (type *GtkContainer*->GtkType (function GtkType (GtkContainer*)) "GtkType ((*$)(GtkContainer *))")
    (type GtkContainer*,GtkWidget*,GtkArg*,guint->void "void ($(GtkContainer *,GtkWidget *,GtkArg *,guint))")
    (type *GtkContainer*,GtkWidget*,GtkArg*,guint->void (function void (GtkContainer* GtkWidget* GtkArg* guint)) "void ((*$)(GtkContainer *,GtkWidget *,GtkArg *,guint))")
    (type GtkContainer*,GtkWidget*->gchar* "gchar *($(GtkContainer *,GtkWidget *))")
    (type *GtkContainer*,GtkWidget*->gchar* (function gchar* (GtkContainer* GtkWidget*)) "gchar *((*$)(GtkContainer *,GtkWidget *))")
    (type s-_GtkBin (struct (container::GtkContainer "container") (child::GtkWidget* "child")) "struct _GtkBin")
    (type GtkBin s-_GtkBin "GtkBin")
    (type s-_GtkBinClass (struct (parent_class::GtkContainerClass "parent_class")) "struct _GtkBinClass")
    (type GtkBinClass s-_GtkBinClass "GtkBinClass")
    (type s-_GtkAlignment (struct (bin::GtkBin "bin") (xalign::gfloat "xalign") (yalign::gfloat "yalign") (xscale::gfloat "xscale") (yscale::gfloat "yscale")) "struct _GtkAlignment")
    (type GtkAlignment s-_GtkAlignment "GtkAlignment")
    (type s-_GtkAlignmentClass (struct (parent_class::GtkBinClass "parent_class")) "struct _GtkAlignmentClass")
    (type GtkAlignmentClass s-_GtkAlignmentClass "GtkAlignmentClass")
    (type s-_GtkFrame (struct (bin::GtkBin "bin") (label::gchar* "label") (shadow_type::gint16 "shadow_type") (label_width::gint16 "label_width") (label_height::gint16 "label_height") (label_xalign::gfloat "label_xalign") (label_yalign::gfloat "label_yalign")) "struct _GtkFrame")
    (type GtkFrame s-_GtkFrame "GtkFrame")
    (type s-_GtkFrameClass (struct (parent_class::GtkBinClass "parent_class")) "struct _GtkFrameClass")
    (type GtkFrameClass s-_GtkFrameClass "GtkFrameClass")
    (type s-_GtkAspectFrame (struct (frame::GtkFrame "frame") (xalign::gfloat "xalign") (yalign::gfloat "yalign") (ratio::gfloat "ratio") (obey_child::gboolean "obey_child") (center_allocation::GtkAllocation "center_allocation")) "struct _GtkAspectFrame")
    (type GtkAspectFrame s-_GtkAspectFrame "GtkAspectFrame")
    (type s-_GtkAspectFrameClass (struct (parent_class::GtkBinClass "parent_class")) "struct _GtkAspectFrameClass")
    (type GtkAspectFrameClass s-_GtkAspectFrameClass "GtkAspectFrameClass")
    (type s-_GtkArrow (struct (misc::GtkMisc "misc") (arrow_type::gint16 "arrow_type") (shadow_type::gint16 "shadow_type")) "struct _GtkArrow")
    (type GtkArrow s-_GtkArrow "GtkArrow")
    (type s-_GtkArrowClass (struct (parent_class::GtkMiscClass "parent_class")) "struct _GtkArrowClass")
    (type GtkArrowClass s-_GtkArrowClass "GtkArrowClass")
    (type s-_GtkPatternSpec (struct (match_type::GtkMatchType "match_type") (pattern_length::guint "pattern_length") (pattern::gchar* "pattern") (pattern_reversed::gchar* "pattern_reversed") (user_data::gpointer "user_data") (seq_id::guint "seq_id")) "struct _GtkPatternSpec")
    (type GtkPatternSpec s-_GtkPatternSpec "GtkPatternSpec")
    (type s-_GtkBindingSet (struct (set_name::gchar* "set_name") (priority::gint "priority") (widget_path_pspecs::GSList* "widget_path_pspecs") (widget_class_pspecs::GSList* "widget_class_pspecs") (class_branch_pspecs::GSList* "class_branch_pspecs") (entries::GtkBindingEntry* "entries") (current::GtkBindingEntry* "current")) "struct _GtkBindingSet")
    (type GtkBindingSet s-_GtkBindingSet "GtkBindingSet")
    (type s-_GtkBindingEntry (struct (keyval::guint "keyval") (modifiers::guint "modifiers") (binding_set::GtkBindingSet* "binding_set") (destroyed::guint "destroyed") (in_emission::guint "in_emission") (set_next::GtkBindingEntry* "set_next") (hash_next::GtkBindingEntry* "hash_next") (signals::GtkBindingSignal* "signals")) "struct _GtkBindingEntry")
    (type GtkBindingEntry s-_GtkBindingEntry "GtkBindingEntry")
    (type s-_GtkBindingSignal (struct (next::GtkBindingSignal* "next") (signal_name::gchar* "signal_name") (n_args::guint "n_args") (args::GtkBindingArg* "args")) "struct _GtkBindingSignal")
    (type GtkBindingSignal s-_GtkBindingSignal "GtkBindingSignal")
    (type s-_GtkBindingArg (struct (arg_type::GtkType "arg_type") (d::s-woot__s1012 "d")) "struct _GtkBindingArg")
    (type GtkBindingArg s-_GtkBindingArg "GtkBindingArg")
    (type s-woot__s1012 (union (long_data::glong "long_data") (double_data::gdouble "double_data") (string_data::gchar* "string_data")) "void")
    (type s-_GtkBox (struct (container::GtkContainer "container") (children::GList* "children") (spacing::gint16 "spacing") (homogeneous::guint "homogeneous")) "struct _GtkBox")
    (type GtkBox s-_GtkBox "GtkBox")
    (type s-_GtkBoxClass (struct (parent_class::GtkContainerClass "parent_class")) "struct _GtkBoxClass")
    (type GtkBoxClass s-_GtkBoxClass "GtkBoxClass")
    (type s-_GtkBoxChild (struct (widget::GtkWidget* "widget") (padding::guint16 "padding") (expand::guint "expand") (fill::guint "fill") (pack::guint "pack")) "struct _GtkBoxChild")
    (type GtkBoxChild s-_GtkBoxChild "GtkBoxChild")
    (type s-_GtkButtonBox (struct (box::GtkBox "box") (spacing::gint "spacing") (child_min_width::gint "child_min_width") (child_min_height::gint "child_min_height") (child_ipad_x::gint "child_ipad_x") (child_ipad_y::gint "child_ipad_y") (layout_style::GtkButtonBoxStyle "layout_style")) "struct _GtkButtonBox")
    (type GtkButtonBox s-_GtkButtonBox "GtkButtonBox")
    (type s-_GtkButtonBoxClass (struct (parent_class::GtkBoxClass "parent_class")) "struct _GtkButtonBoxClass")
    (type GtkButtonBoxClass s-_GtkButtonBoxClass "GtkButtonBoxClass")
    (type s-_GtkButton (struct (bin::GtkBin "bin") (child::GtkWidget* "child") (in_button::guint "in_button") (button_down::guint "button_down") (relief::guint "relief")) "struct _GtkButton")
    (type GtkButton s-_GtkButton "GtkButton")
    (type s-_GtkButtonClass (struct (parent_class::GtkBinClass "parent_class") (pressed::*GtkButton*->void "pressed") (released::*GtkButton*->void "released") (clicked::*GtkButton*->void "clicked") (enter::*GtkButton*->void "enter") (leave::*GtkButton*->void "leave")) "struct _GtkButtonClass")
    (type GtkButtonClass s-_GtkButtonClass "GtkButtonClass")
    (type GtkButton*->void "void ($(GtkButton *))")
    (type *GtkButton*->void (function void (GtkButton*)) "void ((*$)(GtkButton *))")
    (type GtkType* (pointer GtkType) "GtkType *")
    (type GtkObject*,gpointer,guint,GtkArg*,GtkType*,GtkType->void "void ($(GtkObject *,gpointer,guint,GtkArg *,GtkType *,GtkType))")
    (type *GtkObject*,gpointer,guint,GtkArg*,GtkType*,GtkType->void (function void (GtkObject* gpointer guint GtkArg* GtkType* GtkType)) "void ((*$)(GtkObject *,gpointer,guint,GtkArg *,GtkType *,GtkType))")
    (type GtkSignalMarshal *GtkObject*,gpointer,guint,GtkArg*,GtkType*,GtkType->void "GtkSignalMarshal")
    (type GtkSignalDestroy *gpointer->void "GtkSignalDestroy")
    (type GtkObject*,guint,guint,GtkArg*,gpointer->gboolean "gboolean ($(GtkObject *,guint,guint,GtkArg *,gpointer))")
    (type *GtkObject*,guint,guint,GtkArg*,gpointer->gboolean (function gboolean (GtkObject* guint guint GtkArg* gpointer)) "gboolean ((*$)(GtkObject *,guint,guint,GtkArg *,gpointer))")
    (type GtkEmissionHook *GtkObject*,guint,guint,GtkArg*,gpointer->gboolean "GtkEmissionHook")
    (type s-_GtkSignalQuery (struct (object_type::GtkType "object_type") (signal_id::guint "signal_id") (signal_name::gchar* "signal_name") (is_user_signal::guint "is_user_signal") (signal_flags::GtkSignalRunType "signal_flags") (return_val::GtkType "return_val") (nparams::guint "nparams") (params::GtkType* "params")) "struct _GtkSignalQuery")
    (type GtkSignalQuery s-_GtkSignalQuery "GtkSignalQuery")
    (type s-_GtkCalendar (struct (widget::GtkWidget "widget") (header_style::GtkStyle* "header_style") (label_style::GtkStyle* "label_style") (month::gint "month") (year::gint "year") (selected_day::gint "selected_day") (day_month::gint-array-7-array-6 "day_month") (day::gint-array-7-array-6 "day") (num_marked_dates::gint "num_marked_dates") (marked_date::gint-array-31 "marked_date") (display_flags::GtkCalendarDisplayOptions "display_flags") (marked_date_color::GdkColor-array-31 "marked_date_color") (gc::GdkGC* "gc") (xor_gc::GdkGC* "xor_gc") (focus_row::gint "focus_row") (focus_col::gint "focus_col") (highlight_row::gint "highlight_row") (highlight_col::gint "highlight_col") (private_data::gpointer "private_data") (grow_space::gchar-array-32 "grow_space")) "struct _GtkCalendar")
    (type GtkCalendar s-_GtkCalendar "GtkCalendar")
    (type s-_GtkCalendarClass (struct (parent_class::GtkWidgetClass "parent_class") (month_changed::*GtkCalendar*->void "month_changed") (day_selected::*GtkCalendar*->void "day_selected") (day_selected_double_click::*GtkCalendar*->void "day_selected_double_click") (prev_month::*GtkCalendar*->void "prev_month") (next_month::*GtkCalendar*->void "next_month") (prev_year::*GtkCalendar*->void "prev_year") (next_year::*GtkCalendar*->void "next_year")) "struct _GtkCalendarClass")
    (type GtkCalendarClass s-_GtkCalendarClass "GtkCalendarClass")
    (type woot__e1114 int "long")
    (macro GTK_CALENDAR_SHOW_HEADING::int "GTK_CALENDAR_SHOW_HEADING")
    (macro GTK_CALENDAR_SHOW_DAY_NAMES::int "GTK_CALENDAR_SHOW_DAY_NAMES")
    (macro GTK_CALENDAR_NO_MONTH_CHANGE::int "GTK_CALENDAR_NO_MONTH_CHANGE")
    (macro GTK_CALENDAR_SHOW_WEEK_NUMBERS::int "GTK_CALENDAR_SHOW_WEEK_NUMBERS")
    (macro GTK_CALENDAR_WEEK_START_MONDAY::int "GTK_CALENDAR_WEEK_START_MONDAY")
    (type GtkCalendarDisplayOptions woot__e1114 "GtkCalendarDisplayOptions")
    (type gint-array-7 (array gint) "gint $[ 7 ]")
    (type gint-array-7-array-6 (array gint-array-7) "gint $[ 6 ][ 7 ]")
    (type gint-array-31 (array gint) "gint $[ 31 ]")
    (type GdkColor-array-31 (array GdkColor) "GdkColor $[ 31 ]")
    (type gchar-array-32 (array gchar) "gchar $[ 32 ]")
    (type GtkCalendar*->void "void ($(GtkCalendar *))")
    (type *GtkCalendar*->void (function void (GtkCalendar*)) "void ((*$)(GtkCalendar *))")
    (type s-_GtkToggleButton (struct (button::GtkButton "button") (active::guint "active") (draw_indicator::guint "draw_indicator") (event_window::GdkWindow* "event_window")) "struct _GtkToggleButton")
    (type GtkToggleButton s-_GtkToggleButton "GtkToggleButton")
    (type s-_GtkToggleButtonClass (struct (parent_class::GtkButtonClass "parent_class") (toggled::*GtkToggleButton*->void "toggled")) "struct _GtkToggleButtonClass")
    (type GtkToggleButtonClass s-_GtkToggleButtonClass "GtkToggleButtonClass")
    (type GtkToggleButton*->void "void ($(GtkToggleButton *))")
    (type *GtkToggleButton*->void (function void (GtkToggleButton*)) "void ((*$)(GtkToggleButton *))")
    (type s-_GtkCheckButton (struct (toggle_button::GtkToggleButton "toggle_button")) "struct _GtkCheckButton")
    (type GtkCheckButton s-_GtkCheckButton "GtkCheckButton")
    (type s-_GtkCheckButtonClass (struct (parent_class::GtkToggleButtonClass "parent_class") (indicator_size::guint16 "indicator_size") (indicator_spacing::guint16 "indicator_spacing") (draw_indicator::*GtkCheckButton*,GdkRectangle*->void "draw_indicator")) "struct _GtkCheckButtonClass")
    (type GtkCheckButtonClass s-_GtkCheckButtonClass "GtkCheckButtonClass")
    (type GtkCheckButton*,GdkRectangle*->void "void ($(GtkCheckButton *,GdkRectangle *))")
    (type *GtkCheckButton*,GdkRectangle*->void (function void (GtkCheckButton* GdkRectangle*)) "void ((*$)(GtkCheckButton *,GdkRectangle *))")
    (type s-_GtkItem (struct (bin::GtkBin "bin")) "struct _GtkItem")
    (type GtkItem s-_GtkItem "GtkItem")
    (type s-_GtkItemClass (struct (parent_class::GtkBinClass "parent_class") (select::*GtkItem*->void "select") (deselect::*GtkItem*->void "deselect") (toggle::*GtkItem*->void "toggle")) "struct _GtkItemClass")
    (type GtkItemClass s-_GtkItemClass "GtkItemClass")
    (type GtkItem*->void "void ($(GtkItem *))")
    (type *GtkItem*->void (function void (GtkItem*)) "void ((*$)(GtkItem *))")
    (type s-_GtkMenuItem (struct (item::GtkItem "item") (submenu::GtkWidget* "submenu") (accelerator_signal::guint "accelerator_signal") (toggle_size::guint16 "toggle_size") (accelerator_width::guint16 "accelerator_width") (show_toggle_indicator::guint "show_toggle_indicator") (show_submenu_indicator::guint "show_submenu_indicator") (submenu_placement::guint "submenu_placement") (submenu_direction::guint "submenu_direction") (right_justify::guint "right_justify") (timer::guint "timer")) "struct _GtkMenuItem")
    (type GtkMenuItem s-_GtkMenuItem "GtkMenuItem")
    (type s-_GtkMenuItemClass (struct (parent_class::GtkItemClass "parent_class") (toggle_size::guint "toggle_size") (hide_on_activate::guint "hide_on_activate") (activate::*GtkMenuItem*->void "activate") (activate_item::*GtkMenuItem*->void "activate_item")) "struct _GtkMenuItemClass")
    (type GtkMenuItemClass s-_GtkMenuItemClass "GtkMenuItemClass")
    (type GtkMenuItem*->void "void ($(GtkMenuItem *))")
    (type *GtkMenuItem*->void (function void (GtkMenuItem*)) "void ((*$)(GtkMenuItem *))")
    (type s-_GtkCheckMenuItem (struct (menu_item::GtkMenuItem "menu_item") (active::guint "active") (always_show_toggle::guint "always_show_toggle")) "struct _GtkCheckMenuItem")
    (type GtkCheckMenuItem s-_GtkCheckMenuItem "GtkCheckMenuItem")
    (type s-_GtkCheckMenuItemClass (struct (parent_class::GtkMenuItemClass "parent_class") (toggled::*GtkCheckMenuItem*->void "toggled") (draw_indicator::*GtkCheckMenuItem*,GdkRectangle*->void "draw_indicator")) "struct _GtkCheckMenuItemClass")
    (type GtkCheckMenuItemClass s-_GtkCheckMenuItemClass "GtkCheckMenuItemClass")
    (type GtkCheckMenuItem*->void "void ($(GtkCheckMenuItem *))")
    (type *GtkCheckMenuItem*->void (function void (GtkCheckMenuItem*)) "void ((*$)(GtkCheckMenuItem *))")
    (type GtkCheckMenuItem*,GdkRectangle*->void "void ($(GtkCheckMenuItem *,GdkRectangle *))")
    (type *GtkCheckMenuItem*,GdkRectangle*->void (function void (GtkCheckMenuItem* GdkRectangle*)) "void ((*$)(GtkCheckMenuItem *,GdkRectangle *))")
    (type s-_GtkRange (struct (widget::GtkWidget "widget") (trough::GdkWindow* "trough") (slider::GdkWindow* "slider") (step_forw::GdkWindow* "step_forw") (step_back::GdkWindow* "step_back") (x_click_point::gint16 "x_click_point") (y_click_point::gint16 "y_click_point") (button::guint8 "button") (digits::gint8 "digits") (policy::guint "policy") (scroll_type::guint "scroll_type") (in_child::guint "in_child") (click_child::guint "click_child") (need_timer::guint "need_timer") (timer::guint32 "timer") (old_value::gfloat "old_value") (old_lower::gfloat "old_lower") (old_upper::gfloat "old_upper") (old_page_size::gfloat "old_page_size") (adjustment::GtkAdjustment* "adjustment")) "struct _GtkRange")
    (type GtkRange s-_GtkRange "GtkRange")
    (type s-_GtkRangeClass (struct (parent_class::GtkWidgetClass "parent_class") (slider_width::gint "slider_width") (stepper_size::gint "stepper_size") (stepper_slider_spacing::gint "stepper_slider_spacing") (min_slider_size::gint "min_slider_size") (trough::guint8 "trough") (slider::guint8 "slider") (step_forw::guint8 "step_forw") (step_back::guint8 "step_back") (draw_background::*GtkRange*->void "draw_background") (clear_background::*GtkRange*->void "clear_background") (draw_trough::*GtkRange*->void "draw_trough") (draw_slider::*GtkRange*->void "draw_slider") (draw_step_forw::*GtkRange*->void "draw_step_forw") (draw_step_back::*GtkRange*->void "draw_step_back") (slider_update::*GtkRange*->void "slider_update") (trough_click::*GtkRange*,gint,gint,gfloat*->gint "trough_click") (trough_keys::*GtkRange*,GdkEventKey*,GtkScrollType*,GtkTroughType*->gint "trough_keys") (motion::*GtkRange*,gint,gint->void "motion") (timer::*GtkRange*->gint "timer")) "struct _GtkRangeClass")
    (type GtkRangeClass s-_GtkRangeClass "GtkRangeClass")
    (type GtkRange*->void "void ($(GtkRange *))")
    (type *GtkRange*->void (function void (GtkRange*)) "void ((*$)(GtkRange *))")
    (type gfloat* (pointer gfloat) "gfloat *")
    (type GtkRange*,gint,gint,gfloat*->gint "gint ($(GtkRange *,gint,gint,gfloat *))")
    (type *GtkRange*,gint,gint,gfloat*->gint (function gint (GtkRange* gint gint gfloat*)) "gint ((*$)(GtkRange *,gint,gint,gfloat *))")
    (type GtkScrollType* (pointer GtkScrollType) "GtkScrollType *")
    (type GtkTroughType* (pointer GtkTroughType) "GtkTroughType *")
    (type GtkRange*,GdkEventKey*,GtkScrollType*,GtkTroughType*->gint "gint ($(GtkRange *,GdkEventKey *,GtkScrollType *,GtkTroughType *))")
    (type *GtkRange*,GdkEventKey*,GtkScrollType*,GtkTroughType*->gint (function gint (GtkRange* GdkEventKey* GtkScrollType* GtkTroughType*)) "gint ((*$)(GtkRange *,GdkEventKey *,GtkScrollType *,GtkTroughType *))")
    (type GtkRange*,gint,gint->void "void ($(GtkRange *,gint,gint))")
    (type *GtkRange*,gint,gint->void (function void (GtkRange* gint gint)) "void ((*$)(GtkRange *,gint,gint))")
    (type GtkRange*->gint "gint ($(GtkRange *))")
    (type *GtkRange*->gint (function gint (GtkRange*)) "gint ((*$)(GtkRange *))")
    (type s-_GtkScrollbar (struct (range::GtkRange "range")) "struct _GtkScrollbar")
    (type GtkScrollbar s-_GtkScrollbar "GtkScrollbar")
    (type s-_GtkScrollbarClass (struct (parent_class::GtkRangeClass "parent_class")) "struct _GtkScrollbarClass")
    (type GtkScrollbarClass s-_GtkScrollbarClass "GtkScrollbarClass")
    (type s-_GtkHScrollbar (struct (scrollbar::GtkScrollbar "scrollbar")) "struct _GtkHScrollbar")
    (type GtkHScrollbar s-_GtkHScrollbar "GtkHScrollbar")
    (type s-_GtkHScrollbarClass (struct (parent_class::GtkScrollbarClass "parent_class")) "struct _GtkHScrollbarClass")
    (type GtkHScrollbarClass s-_GtkHScrollbarClass "GtkHScrollbarClass")
    (type s-_GtkVScrollbar (struct (scrollbar::GtkScrollbar "scrollbar")) "struct _GtkVScrollbar")
    (type GtkVScrollbar s-_GtkVScrollbar "GtkVScrollbar")
    (type s-_GtkVScrollbarClass (struct (parent_class::GtkScrollbarClass "parent_class")) "struct _GtkVScrollbarClass")
    (type GtkVScrollbarClass s-_GtkVScrollbarClass "GtkVScrollbarClass")
    (type woot__e1115 int "long")
    (macro GTK_CLIST_IN_DRAG::int "GTK_CLIST_IN_DRAG")
    (macro GTK_CLIST_ROW_HEIGHT_SET::int "GTK_CLIST_ROW_HEIGHT_SET")
    (macro GTK_CLIST_SHOW_TITLES::int "GTK_CLIST_SHOW_TITLES")
    (macro GTK_CLIST_CHILD_HAS_FOCUS::int "GTK_CLIST_CHILD_HAS_FOCUS")
    (macro GTK_CLIST_ADD_MODE::int "GTK_CLIST_ADD_MODE")
    (macro GTK_CLIST_AUTO_SORT::int "GTK_CLIST_AUTO_SORT")
    (macro GTK_CLIST_AUTO_RESIZE_BLOCKED::int "GTK_CLIST_AUTO_RESIZE_BLOCKED")
    (macro GTK_CLIST_REORDERABLE::int "GTK_CLIST_REORDERABLE")
    (macro GTK_CLIST_USE_DRAG_ICONS::int "GTK_CLIST_USE_DRAG_ICONS")
    (macro GTK_CLIST_DRAW_DRAG_LINE::int "GTK_CLIST_DRAW_DRAG_LINE")
    (macro GTK_CLIST_DRAW_DRAG_RECT::int "GTK_CLIST_DRAW_DRAG_RECT")
    (type woot__e1116 int "long")
    (macro GTK_CELL_EMPTY::int "GTK_CELL_EMPTY")
    (macro GTK_CELL_TEXT::int "GTK_CELL_TEXT")
    (macro GTK_CELL_PIXMAP::int "GTK_CELL_PIXMAP")
    (macro GTK_CELL_PIXTEXT::int "GTK_CELL_PIXTEXT")
    (macro GTK_CELL_WIDGET::int "GTK_CELL_WIDGET")
    (type GtkCellType woot__e1116 "GtkCellType")
    (type woot__e1117 int "long")
    (macro GTK_CLIST_DRAG_NONE::int "GTK_CLIST_DRAG_NONE")
    (macro GTK_CLIST_DRAG_BEFORE::int "GTK_CLIST_DRAG_BEFORE")
    (macro GTK_CLIST_DRAG_INTO::int "GTK_CLIST_DRAG_INTO")
    (macro GTK_CLIST_DRAG_AFTER::int "GTK_CLIST_DRAG_AFTER")
    (type GtkCListDragPos woot__e1117 "GtkCListDragPos")
    (type woot__e1118 int "long")
    (macro GTK_BUTTON_IGNORED::int "GTK_BUTTON_IGNORED")
    (macro GTK_BUTTON_SELECTS::int "GTK_BUTTON_SELECTS")
    (macro GTK_BUTTON_DRAGS::int "GTK_BUTTON_DRAGS")
    (macro GTK_BUTTON_EXPANDS::int "GTK_BUTTON_EXPANDS")
    (type GtkButtonAction woot__e1118 "GtkButtonAction")
    (type s-_GtkCList (struct (container::GtkContainer "container") (flags::guint16 "flags") (row_mem_chunk::GMemChunk* "row_mem_chunk") (cell_mem_chunk::GMemChunk* "cell_mem_chunk") (freeze_count::guint "freeze_count") (internal_allocation::GdkRectangle "internal_allocation") (rows::gint "rows") (row_center_offset::gint "row_center_offset") (row_height::gint "row_height") (row_list::GList* "row_list") (row_list_end::GList* "row_list_end") (columns::gint "columns") (column_title_area::GdkRectangle "column_title_area") (title_window::GdkWindow* "title_window") (column::GtkCListColumn* "column") (clist_window::GdkWindow* "clist_window") (clist_window_width::gint "clist_window_width") (clist_window_height::gint "clist_window_height") (hoffset::gint "hoffset") (voffset::gint "voffset") (shadow_type::GtkShadowType "shadow_type") (selection_mode::GtkSelectionMode "selection_mode") (selection::GList* "selection") (selection_end::GList* "selection_end") (undo_selection::GList* "undo_selection") (undo_unselection::GList* "undo_unselection") (undo_anchor::gint "undo_anchor") (button_actions::guint8-array-5 "button_actions") (drag_button::guint8 "drag_button") (click_cell::GtkCListCellInfo "click_cell") (hadjustment::GtkAdjustment* "hadjustment") (vadjustment::GtkAdjustment* "vadjustment") (xor_gc::GdkGC* "xor_gc") (fg_gc::GdkGC* "fg_gc") (bg_gc::GdkGC* "bg_gc") (cursor_drag::GdkCursor* "cursor_drag") (x_drag::gint "x_drag") (focus_row::gint "focus_row") (anchor::gint "anchor") (anchor_state::GtkStateType "anchor_state") (drag_pos::gint "drag_pos") (htimer::gint "htimer") (vtimer::gint "vtimer") (sort_type::GtkSortType "sort_type") (compare::GtkCListCompareFunc "compare") (sort_column::gint "sort_column")) "struct _GtkCList")
    (type GtkCList s-_GtkCList "GtkCList")
    (type s-_GtkCListClass (struct (parent_class::GtkContainerClass "parent_class") (set_scroll_adjustments::*GtkCList*,GtkAdjustment*,GtkAdjustment*->void "set_scroll_adjustments") (refresh::*GtkCList*->void "refresh") (select_row::*GtkCList*,gint,gint,GdkEvent*->void "select_row") (unselect_row::*GtkCList*,gint,gint,GdkEvent*->void "unselect_row") (row_move::*GtkCList*,gint,gint->void "row_move") (click_column::*GtkCList*,gint->void "click_column") (resize_column::*GtkCList*,gint,gint->void "resize_column") (toggle_focus_row::*GtkCList*->void "toggle_focus_row") (select_all::*GtkCList*->void "select_all") (unselect_all::*GtkCList*->void "unselect_all") (undo_selection::*GtkCList*->void "undo_selection") (start_selection::*GtkCList*->void "start_selection") (end_selection::*GtkCList*->void "end_selection") (extend_selection::*GtkCList*,GtkScrollType,gfloat,gboolean->void "extend_selection") (scroll_horizontal::*GtkCList*,GtkScrollType,gfloat->void "scroll_horizontal") (scroll_vertical::*GtkCList*,GtkScrollType,gfloat->void "scroll_vertical") (toggle_add_mode::*GtkCList*->void "toggle_add_mode") (abort_column_resize::*GtkCList*->void "abort_column_resize") (resync_selection::*GtkCList*,GdkEvent*->void "resync_selection") (selection_find::*GtkCList*,gint,GList*->GList* "selection_find") (draw_row::*GtkCList*,GdkRectangle*,gint,GtkCListRow*->void "draw_row") (draw_drag_highlight::*GtkCList*,GtkCListRow*,gint,GtkCListDragPos->void "draw_drag_highlight") (clear::*GtkCList*->void "clear") (fake_unselect_all::*GtkCList*,gint->void "fake_unselect_all") (sort_list::*GtkCList*->void "sort_list") (insert_row::*GtkCList*,gint,gchar**->gint "insert_row") (remove_row::*GtkCList*,gint->void "remove_row") (set_cell_contents::*GtkCList*,GtkCListRow*,gint,GtkCellType,gchar*,guint8,GdkPixmap*,GdkBitmap*->void "set_cell_contents") (cell_size_request::*GtkCList*,GtkCListRow*,gint,GtkRequisition*->void "cell_size_request")) "struct _GtkCListClass")
    (type GtkCListClass s-_GtkCListClass "GtkCListClass")
    (type s-_GtkCListColumn (struct (title::gchar* "title") (area::GdkRectangle "area") (button::GtkWidget* "button") (window::GdkWindow* "window") (width::gint "width") (min_width::gint "min_width") (max_width::gint "max_width") (justification::GtkJustification "justification") (visible::guint "visible") (width_set::guint "width_set") (resizeable::guint "resizeable") (auto_resize::guint "auto_resize") (button_passive::guint "button_passive")) "struct _GtkCListColumn")
    (type GtkCListColumn s-_GtkCListColumn "GtkCListColumn")
    (type s-_GtkCListRow (struct (cell::GtkCell* "cell") (state::GtkStateType "state") (foreground::GdkColor "foreground") (background::GdkColor "background") (style::GtkStyle* "style") (data::gpointer "data") (destroy::GtkDestroyNotify "destroy") (fg_set::guint "fg_set") (bg_set::guint "bg_set") (selectable::guint "selectable")) "struct _GtkCListRow")
    (type GtkCListRow s-_GtkCListRow "GtkCListRow")
    (type s-_GtkCell (struct (type::GtkCellType "type") (vertical::gint16 "vertical") (horizontal::gint16 "horizontal") (style::GtkStyle* "style") (u::s-woot__s1015 "u")) "struct _GtkCell")
    (type GtkCell s-_GtkCell "GtkCell")
    (type s-_GtkCellText (struct (type::GtkCellType "type") (vertical::gint16 "vertical") (horizontal::gint16 "horizontal") (style::GtkStyle* "style") (text::gchar* "text")) "struct _GtkCellText")
    (type GtkCellText s-_GtkCellText "GtkCellText")
    (type s-_GtkCellPixmap (struct (type::GtkCellType "type") (vertical::gint16 "vertical") (horizontal::gint16 "horizontal") (style::GtkStyle* "style") (pixmap::GdkPixmap* "pixmap") (mask::GdkBitmap* "mask")) "struct _GtkCellPixmap")
    (type GtkCellPixmap s-_GtkCellPixmap "GtkCellPixmap")
    (type s-_GtkCellPixText (struct (type::GtkCellType "type") (vertical::gint16 "vertical") (horizontal::gint16 "horizontal") (style::GtkStyle* "style") (text::gchar* "text") (spacing::guint8 "spacing") (pixmap::GdkPixmap* "pixmap") (mask::GdkBitmap* "mask")) "struct _GtkCellPixText")
    (type GtkCellPixText s-_GtkCellPixText "GtkCellPixText")
    (type s-_GtkCellWidget (struct (type::GtkCellType "type") (vertical::gint16 "vertical") (horizontal::gint16 "horizontal") (style::GtkStyle* "style") (widget::GtkWidget* "widget")) "struct _GtkCellWidget")
    (type GtkCellWidget s-_GtkCellWidget "GtkCellWidget")
    (type GtkCList*,gconstpointer,gconstpointer->gint "gint ($(GtkCList *,gconstpointer,gconstpointer))")
    (type *GtkCList*,gconstpointer,gconstpointer->gint (function gint (GtkCList* gconstpointer gconstpointer)) "gint ((*$)(GtkCList *,gconstpointer,gconstpointer))")
    (type GtkCListCompareFunc *GtkCList*,gconstpointer,gconstpointer->gint "GtkCListCompareFunc")
    (type s-_GtkCListCellInfo (struct (row::gint "row") (column::gint "column")) "struct _GtkCListCellInfo")
    (type GtkCListCellInfo s-_GtkCListCellInfo "GtkCListCellInfo")
    (type s-_GtkCListDestInfo (struct (cell::GtkCListCellInfo "cell") (insert_pos::GtkCListDragPos "insert_pos")) "struct _GtkCListDestInfo")
    (type GtkCListDestInfo s-_GtkCListDestInfo "GtkCListDestInfo")
    (type guint8-array-5 (array guint8) "guint8 $[ 5 ]")
    (type GtkCList*,GtkAdjustment*,GtkAdjustment*->void "void ($(GtkCList *,GtkAdjustment *,GtkAdjustment *))")
    (type *GtkCList*,GtkAdjustment*,GtkAdjustment*->void (function void (GtkCList* GtkAdjustment* GtkAdjustment*)) "void ((*$)(GtkCList *,GtkAdjustment *,GtkAdjustment *))")
    (type GtkCList*->void "void ($(GtkCList *))")
    (type *GtkCList*->void (function void (GtkCList*)) "void ((*$)(GtkCList *))")
    (type GtkCList*,gint,gint,GdkEvent*->void "void ($(GtkCList *,gint,gint,GdkEvent *))")
    (type *GtkCList*,gint,gint,GdkEvent*->void (function void (GtkCList* gint gint GdkEvent*)) "void ((*$)(GtkCList *,gint,gint,GdkEvent *))")
    (type GtkCList*,gint,gint->void "void ($(GtkCList *,gint,gint))")
    (type *GtkCList*,gint,gint->void (function void (GtkCList* gint gint)) "void ((*$)(GtkCList *,gint,gint))")
    (type GtkCList*,gint->void "void ($(GtkCList *,gint))")
    (type *GtkCList*,gint->void (function void (GtkCList* gint)) "void ((*$)(GtkCList *,gint))")
    (type GtkCList*,GtkScrollType,gfloat,gboolean->void "void ($(GtkCList *,GtkScrollType,gfloat,gboolean))")
    (type *GtkCList*,GtkScrollType,gfloat,gboolean->void (function void (GtkCList* GtkScrollType gfloat gboolean)) "void ((*$)(GtkCList *,GtkScrollType,gfloat,gboolean))")
    (type GtkCList*,GtkScrollType,gfloat->void "void ($(GtkCList *,GtkScrollType,gfloat))")
    (type *GtkCList*,GtkScrollType,gfloat->void (function void (GtkCList* GtkScrollType gfloat)) "void ((*$)(GtkCList *,GtkScrollType,gfloat))")
    (type GtkCList*,GdkEvent*->void "void ($(GtkCList *,GdkEvent *))")
    (type *GtkCList*,GdkEvent*->void (function void (GtkCList* GdkEvent*)) "void ((*$)(GtkCList *,GdkEvent *))")
    (type GtkCList*,gint,GList*->GList* "GList *($(GtkCList *,gint,GList *))")
    (type *GtkCList*,gint,GList*->GList* (function GList* (GtkCList* gint GList*)) "GList *((*$)(GtkCList *,gint,GList *))")
    (type GtkCList*,GdkRectangle*,gint,GtkCListRow*->void "void ($(GtkCList *,GdkRectangle *,gint,GtkCListRow *))")
    (type *GtkCList*,GdkRectangle*,gint,GtkCListRow*->void (function void (GtkCList* GdkRectangle* gint GtkCListRow*)) "void ((*$)(GtkCList *,GdkRectangle *,gint,GtkCListRow *))")
    (type GtkCList*,GtkCListRow*,gint,GtkCListDragPos->void "void ($(GtkCList *,GtkCListRow *,gint,GtkCListDragPos))")
    (type *GtkCList*,GtkCListRow*,gint,GtkCListDragPos->void (function void (GtkCList* GtkCListRow* gint GtkCListDragPos)) "void ((*$)(GtkCList *,GtkCListRow *,gint,GtkCListDragPos))")
    ;   (type gchar*-array (array gchar*) "gchar *$[  ]")
    (type gchar*-array string* "gchar *$[  ]")
    ;  (type gchar** (pointer gchar*) "gchar **")
    (type gchar** string* "gchar **")
    (type GtkCList*,gint,gchar**->gint "gint ($(GtkCList *,gint,gchar **))")
    (type *GtkCList*,gint,gchar**->gint (function gint (GtkCList* gint gchar**)) "gint ((*$)(GtkCList *,gint,gchar **))")
    (type GtkCList*,GtkCListRow*,gint,GtkCellType,gchar*,guint8,GdkPixmap*,GdkBitmap*->void "void ($(GtkCList *,GtkCListRow *,gint,GtkCellType,gchar *,guint8,GdkPixmap *,GdkBitmap *))")
    (type *GtkCList*,GtkCListRow*,gint,GtkCellType,gchar*,guint8,GdkPixmap*,GdkBitmap*->void (function void (GtkCList* GtkCListRow* gint GtkCellType gchar* guint8 GdkPixmap* GdkBitmap*)) "void ((*$)(GtkCList *,GtkCListRow *,gint,GtkCellType,gchar *,guint8,GdkPixmap *,GdkBitmap *))")
    (type GtkCList*,GtkCListRow*,gint,GtkRequisition*->void "void ($(GtkCList *,GtkCListRow *,gint,GtkRequisition *))")
    (type *GtkCList*,GtkCListRow*,gint,GtkRequisition*->void (function void (GtkCList* GtkCListRow* gint GtkRequisition*)) "void ((*$)(GtkCList *,GtkCListRow *,gint,GtkRequisition *))")
    (type s-woot__s1015 (union (text::gchar* "text") (pm::s-woot__s1013 "pm") (pt::s-woot__s1014 "pt") (widget::GtkWidget* "widget")) "void")
    (type s-woot__s1013 (struct (pixmap::GdkPixmap* "pixmap") (mask::GdkBitmap* "mask")) "void")
    (type s-woot__s1014 (struct (text::gchar* "text") (spacing::guint8 "spacing") (pixmap::GdkPixmap* "pixmap") (mask::GdkBitmap* "mask")) "void")
    (type s-_GtkWindow (struct (bin::GtkBin "bin") (title::gchar* "title") (wmclass_name::gchar* "wmclass_name") (wmclass_class::gchar* "wmclass_class") (type::GtkWindowType "type") (focus_widget::GtkWidget* "focus_widget") (default_widget::GtkWidget* "default_widget") (transient_parent::GtkWindow* "transient_parent") (resize_count::gushort "resize_count") (allow_shrink::guint "allow_shrink") (allow_grow::guint "allow_grow") (auto_shrink::guint "auto_shrink") (handling_resize::guint "handling_resize") (position::guint "position") (use_uposition::guint "use_uposition") (modal::guint "modal") (window_has_focus::guint "window_has_focus") (window_has_pointer_focus::guint "window_has_pointer_focus")) "struct _GtkWindow")
    (type GtkWindow s-_GtkWindow "GtkWindow")
    (type s-_GtkWindowClass (struct (parent_class::GtkBinClass "parent_class") (set_focus::*GtkWindow*,GtkWidget*->void "set_focus")) "struct _GtkWindowClass")
    (type GtkWindowClass s-_GtkWindowClass "GtkWindowClass")
    (type GtkWindow*,GtkWidget*->void "void ($(GtkWindow *,GtkWidget *))")
    (type *GtkWindow*,GtkWidget*->void (function void (GtkWindow* GtkWidget*)) "void ((*$)(GtkWindow *,GtkWidget *))")
    (type s-_GtkVBox (struct (box::GtkBox "box")) "struct _GtkVBox")
    (type GtkVBox s-_GtkVBox "GtkVBox")
    (type s-_GtkVBoxClass (struct (parent_class::GtkBoxClass "parent_class")) "struct _GtkVBoxClass")
    (type GtkVBoxClass s-_GtkVBoxClass "GtkVBoxClass")
    (type s-_GtkPreview (struct (widget::GtkWidget "widget") (buffer::guchar* "buffer") (buffer_width::guint16 "buffer_width") (buffer_height::guint16 "buffer_height") (bpp::guint16 "bpp") (rowstride::guint16 "rowstride") (dither::GdkRgbDither "dither") (type::guint "type") (expand::guint "expand")) "struct _GtkPreview")
    (type GtkPreview s-_GtkPreview "GtkPreview")
    (type s-_GtkPreviewInfo (struct (visual::GdkVisual* "visual") (cmap::GdkColormap* "cmap") (lookup::guchar* "lookup") (gamma::gdouble "gamma")) "struct _GtkPreviewInfo")
    (type GtkPreviewInfo s-_GtkPreviewInfo "GtkPreviewInfo")
    (type s-_GtkDitherInfo (union (s::gushort-array-2 "s") (c::guchar-array-4 "c")) "union _GtkDitherInfo")
    (type GtkDitherInfo s-_GtkDitherInfo "GtkDitherInfo")
    (type s-_GtkPreviewClass (struct (parent_class::GtkWidgetClass "parent_class") (info::GtkPreviewInfo "info")) "struct _GtkPreviewClass")
    (type GtkPreviewClass s-_GtkPreviewClass "GtkPreviewClass")
    (type gushort-array-2 (array gushort) "gushort $[ 2 ]")
    (type guchar-array-4 (array guchar) "guchar $[ 4 ]")
    (type s-_GtkEditable (struct (widget::GtkWidget "widget") (current_pos::guint "current_pos") (selection_start_pos::guint "selection_start_pos") (selection_end_pos::guint "selection_end_pos") (has_selection::guint "has_selection") (editable::guint "editable") (visible::guint "visible") (ic::GdkIC* "ic") (ic_attr::GdkICAttr* "ic_attr") (clipboard_text::gchar* "clipboard_text")) "struct _GtkEditable")
    (type GtkEditable s-_GtkEditable "GtkEditable")
    (type s-_GtkEditableClass (struct (parent_class::GtkWidgetClass "parent_class") (changed::*GtkEditable*->void "changed") (insert_text::*GtkEditable*,gchar*,gint,gint*->void "insert_text") (delete_text::*GtkEditable*,gint,gint->void "delete_text") (activate::*GtkEditable*->void "activate") (set_editable::*GtkEditable*,gboolean->void "set_editable") (move_cursor::*GtkEditable*,gint,gint->void "move_cursor") (move_word::*GtkEditable*,gint->void "move_word") (move_page::*GtkEditable*,gint,gint->void "move_page") (move_to_row::*GtkEditable*,gint->void "move_to_row") (move_to_column::*GtkEditable*,gint->void "move_to_column") (kill_char::*GtkEditable*,gint->void "kill_char") (kill_word::*GtkEditable*,gint->void "kill_word") (kill_line::*GtkEditable*,gint->void "kill_line") (cut_clipboard::*GtkEditable*->void "cut_clipboard") (copy_clipboard::*GtkEditable*->void "copy_clipboard") (paste_clipboard::*GtkEditable*->void "paste_clipboard") (update_text::*GtkEditable*,gint,gint->void "update_text") (get_chars::*GtkEditable*,gint,gint->gchar* "get_chars") (set_selection::*GtkEditable*,gint,gint->void "set_selection") (set_position::*GtkEditable*,gint->void "set_position")) "struct _GtkEditableClass")
    (type GtkEditableClass s-_GtkEditableClass "GtkEditableClass")
    (type GtkEditable*,guint32->void "void ($(GtkEditable *,guint32))")
    (type *GtkEditable*,guint32->void (function void (GtkEditable* guint32)) "void ((*$)(GtkEditable *,guint32))")
    (type GtkTextFunction *GtkEditable*,guint32->void "GtkTextFunction")
    (type GtkEditable*->void "void ($(GtkEditable *))")
    (type *GtkEditable*->void (function void (GtkEditable*)) "void ((*$)(GtkEditable *))")
    (type GtkEditable*,gchar*,gint,gint*->void "void ($(GtkEditable *,gchar *,gint,gint *))")
    (type *GtkEditable*,gchar*,gint,gint*->void (function void (GtkEditable* gchar* gint gint*)) "void ((*$)(GtkEditable *,gchar *,gint,gint *))")
    (type GtkEditable*,gint,gint->void "void ($(GtkEditable *,gint,gint))")
    (type *GtkEditable*,gint,gint->void (function void (GtkEditable* gint gint)) "void ((*$)(GtkEditable *,gint,gint))")
    (type GtkEditable*,gboolean->void "void ($(GtkEditable *,gboolean))")
    (type *GtkEditable*,gboolean->void (function void (GtkEditable* gboolean)) "void ((*$)(GtkEditable *,gboolean))")
    (type GtkEditable*,gint->void "void ($(GtkEditable *,gint))")
    (type *GtkEditable*,gint->void (function void (GtkEditable* gint)) "void ((*$)(GtkEditable *,gint))")
    (type GtkEditable*,gint,gint->gchar* "gchar *($(GtkEditable *,gint,gint))")
    (type *GtkEditable*,gint,gint->gchar* (function gchar* (GtkEditable* gint gint)) "gchar *((*$)(GtkEditable *,gint,gint))")
    (type s-_GtkEntry (struct (editable::GtkEditable "editable") (text_area::GdkWindow* "text_area") (backing_pixmap::GdkPixmap* "backing_pixmap") (cursor::GdkCursor* "cursor") (text::GdkWChar* "text") (text_size::guint16 "text_size") (text_length::guint16 "text_length") (text_max_length::guint16 "text_max_length") (scroll_offset::gint "scroll_offset") (visible::guint "visible") (timer::guint32 "timer") (button::guint "button") (char_offset::gint* "char_offset") (text_mb::gchar* "text_mb") (text_mb_dirty::guint "text_mb_dirty") (use_wchar::guint "use_wchar")) "struct _GtkEntry")
    (type GtkEntry s-_GtkEntry "GtkEntry")
    (type s-_GtkEntryClass (struct (parent_class::GtkEditableClass "parent_class")) "struct _GtkEntryClass")
    (type GtkEntryClass s-_GtkEntryClass "GtkEntryClass")
    (type s-_GtkHBox (struct (box::GtkBox "box")) "struct _GtkHBox")
    (type GtkHBox s-_GtkHBox "GtkHBox")
    (type s-_GtkHBoxClass (struct (parent_class::GtkBoxClass "parent_class")) "struct _GtkHBoxClass")
    (type GtkHBoxClass s-_GtkHBoxClass "GtkHBoxClass")
    (type gchar*** (pointer gchar**) "gchar ***")
    (type gint*,gchar***->void "void ($(gint *,gchar ***))")
    (type *gint*,gchar***->void (function void (gint* gchar***)) "void ((*$)(gint *,gchar ***))")
    (type GtkModuleInitFunc *gint*,gchar***->void "GtkModuleInitFunc")
    (type GtkWidget*,GdkEventKey*,gpointer->gint "gint ($(GtkWidget *,GdkEventKey *,gpointer))")
    (type *GtkWidget*,GdkEventKey*,gpointer->gint (function gint (GtkWidget* GdkEventKey* gpointer)) "gint ((*$)(GtkWidget *,GdkEventKey *,gpointer))")
    (type GtkKeySnoopFunc *GtkWidget*,GdkEventKey*,gpointer->gint "GtkKeySnoopFunc")
    (type s-_GtkScale (struct (range::GtkRange "range") (draw_value::guint "draw_value") (value_pos::guint "value_pos")) "struct _GtkScale")
    (type GtkScale s-_GtkScale "GtkScale")
    (type s-_GtkScaleClass (struct (parent_class::GtkRangeClass "parent_class") (slider_length::gint "slider_length") (value_spacing::gint "value_spacing") (draw_value::*GtkScale*->void "draw_value")) "struct _GtkScaleClass")
    (type GtkScaleClass s-_GtkScaleClass "GtkScaleClass")
    (type GtkScale*->void "void ($(GtkScale *))")
    (type *GtkScale*->void (function void (GtkScale*)) "void ((*$)(GtkScale *))")
    (type s-_GtkHScale (struct (scale::GtkScale "scale")) "struct _GtkHScale")
    (type GtkHScale s-_GtkHScale "GtkHScale")
    (type s-_GtkHScaleClass (struct (parent_class::GtkScaleClass "parent_class")) "struct _GtkHScaleClass")
    (type GtkHScaleClass s-_GtkHScaleClass "GtkHScaleClass")
    (type s-_GtkTable (struct (container::GtkContainer "container") (children::GList* "children") (rows::GtkTableRowCol* "rows") (cols::GtkTableRowCol* "cols") (nrows::guint16 "nrows") (ncols::guint16 "ncols") (column_spacing::guint16 "column_spacing") (row_spacing::guint16 "row_spacing") (homogeneous::guint "homogeneous")) "struct _GtkTable")
    (type GtkTable s-_GtkTable "GtkTable")
    (type s-_GtkTableClass (struct (parent_class::GtkContainerClass "parent_class")) "struct _GtkTableClass")
    (type GtkTableClass s-_GtkTableClass "GtkTableClass")
    (type s-_GtkTableChild (struct (widget::GtkWidget* "widget") (left_attach::guint16 "left_attach") (right_attach::guint16 "right_attach") (top_attach::guint16 "top_attach") (bottom_attach::guint16 "bottom_attach") (xpadding::guint16 "xpadding") (ypadding::guint16 "ypadding") (xexpand::guint "xexpand") (yexpand::guint "yexpand") (xshrink::guint "xshrink") (yshrink::guint "yshrink") (xfill::guint "xfill") (yfill::guint "yfill")) "struct _GtkTableChild")
    (type GtkTableChild s-_GtkTableChild "GtkTableChild")
    (type s-_GtkTableRowCol (struct (requisition::guint16 "requisition") (allocation::guint16 "allocation") (spacing::guint16 "spacing") (need_expand::guint "need_expand") (need_shrink::guint "need_shrink") (expand::guint "expand") (shrink::guint "shrink") (empty::guint "empty")) "struct _GtkTableRowCol")
    (type GtkTableRowCol s-_GtkTableRowCol "GtkTableRowCol")
    (type s-_GtkEventBox (struct (bin::GtkBin "bin")) "struct _GtkEventBox")
    (type GtkEventBox s-_GtkEventBox "GtkEventBox")
    (type s-_GtkEventBoxClass (struct (parent_class::GtkBinClass "parent_class")) "struct _GtkEventBoxClass")
    (type GtkEventBoxClass s-_GtkEventBoxClass "GtkEventBoxClass")
    (type s-_GtkColorSelection (struct (vbox::GtkVBox "vbox") (wheel_area::GtkWidget* "wheel_area") (value_area::GtkWidget* "value_area") (sample_area::GtkWidget* "sample_area") (sample_area_eb::GtkWidget* "sample_area_eb") (scales::GtkWidget*-array-8 "scales") (entries::GtkWidget*-array-8 "entries") (opacity_label::GtkWidget* "opacity_label") (wheel_gc::GdkGC* "wheel_gc") (value_gc::GdkGC* "value_gc") (sample_gc::GdkGC* "sample_gc") (policy::GtkUpdateType "policy") (use_opacity::gint "use_opacity") (timer_active::gint "timer_active") (timer_tag::gint "timer_tag") (values::gdouble-array-8 "values") (old_values::gdouble-array-8 "old_values") (wheel_buf::guchar* "wheel_buf") (value_buf::guchar* "value_buf") (sample_buf::guchar* "sample_buf")) "struct _GtkColorSelection")
    (type GtkColorSelection s-_GtkColorSelection "GtkColorSelection")
    (type s-_GtkColorSelectionClass (struct (parent_class::GtkVBoxClass "parent_class") (color_changed::*GtkColorSelection*->void "color_changed")) "struct _GtkColorSelectionClass")
    (type GtkColorSelectionClass s-_GtkColorSelectionClass "GtkColorSelectionClass")
    (type s-_GtkColorSelectionDialog (struct (window::GtkWindow "window") (colorsel::GtkWidget* "colorsel") (main_vbox::GtkWidget* "main_vbox") (ok_button::GtkWidget* "ok_button") (reset_button::GtkWidget* "reset_button") (cancel_button::GtkWidget* "cancel_button") (help_button::GtkWidget* "help_button")) "struct _GtkColorSelectionDialog")
    (type GtkColorSelectionDialog s-_GtkColorSelectionDialog "GtkColorSelectionDialog")
    (type s-_GtkColorSelectionDialogClass (struct (parent_class::GtkWindowClass "parent_class")) "struct _GtkColorSelectionDialogClass")
    (type GtkColorSelectionDialogClass s-_GtkColorSelectionDialogClass "GtkColorSelectionDialogClass")
    (type GtkWidget*-array-8 (array GtkWidget*) "GtkWidget *$[ 8 ]")
    (type gdouble-array-8 (array gdouble) "gdouble $[ 8 ]")
    (type GtkColorSelection*->void "void ($(GtkColorSelection *))")
    (type *GtkColorSelection*->void (function void (GtkColorSelection*)) "void ((*$)(GtkColorSelection *))")
    (type s-_GtkCombo (struct (hbox::GtkHBox "hbox") (entry::GtkWidget* "entry") (button::GtkWidget* "button") (popup::GtkWidget* "popup") (popwin::GtkWidget* "popwin") (list::GtkWidget* "list") (entry_change_id::guint "entry_change_id") (list_change_id::guint "list_change_id") (value_in_list::guint "value_in_list") (ok_if_empty::guint "ok_if_empty") (case_sensitive::guint "case_sensitive") (use_arrows::guint "use_arrows") (use_arrows_always::guint "use_arrows_always") (current_button::guint16 "current_button") (activate_id::guint "activate_id")) "struct _GtkCombo")
    (type GtkCombo s-_GtkCombo "GtkCombo")
    (type s-_GtkComboClass (struct (parent_class::GtkHBoxClass "parent_class")) "struct _GtkComboClass")
    (type GtkComboClass s-_GtkComboClass "GtkComboClass")
    (type woot__e1119 int "long")
    (macro GTK_CTREE_POS_BEFORE::int "GTK_CTREE_POS_BEFORE")
    (macro GTK_CTREE_POS_AS_CHILD::int "GTK_CTREE_POS_AS_CHILD")
    (macro GTK_CTREE_POS_AFTER::int "GTK_CTREE_POS_AFTER")
    (type GtkCTreePos woot__e1119 "GtkCTreePos")
    (type woot__e1120 int "long")
    (macro GTK_CTREE_LINES_NONE::int "GTK_CTREE_LINES_NONE")
    (macro GTK_CTREE_LINES_SOLID::int "GTK_CTREE_LINES_SOLID")
    (macro GTK_CTREE_LINES_DOTTED::int "GTK_CTREE_LINES_DOTTED")
    (macro GTK_CTREE_LINES_TABBED::int "GTK_CTREE_LINES_TABBED")
    (type GtkCTreeLineStyle woot__e1120 "GtkCTreeLineStyle")
    (type woot__e1121 int "long")
    (macro GTK_CTREE_EXPANDER_NONE::int "GTK_CTREE_EXPANDER_NONE")
    (macro GTK_CTREE_EXPANDER_SQUARE::int "GTK_CTREE_EXPANDER_SQUARE")
    (macro GTK_CTREE_EXPANDER_TRIANGLE::int "GTK_CTREE_EXPANDER_TRIANGLE")
    (macro GTK_CTREE_EXPANDER_CIRCULAR::int "GTK_CTREE_EXPANDER_CIRCULAR")
    (type GtkCTreeExpanderStyle woot__e1121 "GtkCTreeExpanderStyle")
    (type woot__e1122 int "long")
    (macro GTK_CTREE_EXPANSION_EXPAND::int "GTK_CTREE_EXPANSION_EXPAND")
    (macro GTK_CTREE_EXPANSION_EXPAND_RECURSIVE::int "GTK_CTREE_EXPANSION_EXPAND_RECURSIVE")
    (macro GTK_CTREE_EXPANSION_COLLAPSE::int "GTK_CTREE_EXPANSION_COLLAPSE")
    (macro GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE::int "GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE")
    (macro GTK_CTREE_EXPANSION_TOGGLE::int "GTK_CTREE_EXPANSION_TOGGLE")
    (macro GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE::int "GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE")
    (type GtkCTreeExpansionType woot__e1122 "GtkCTreeExpansionType")
    (type s-_GtkCTree (struct (clist::GtkCList "clist") (lines_gc::GdkGC* "lines_gc") (tree_indent::gint "tree_indent") (tree_spacing::gint "tree_spacing") (tree_column::gint "tree_column") (line_style::guint "line_style") (expander_style::guint "expander_style") (show_stub::guint "show_stub") (drag_compare::GtkCTreeCompareDragFunc "drag_compare")) "struct _GtkCTree")
    (type GtkCTree s-_GtkCTree "GtkCTree")
    (type s-_GtkCTreeClass (struct (parent_class::GtkCListClass "parent_class") (tree_select_row::*GtkCTree*,GtkCTreeNode*,gint->void "tree_select_row") (tree_unselect_row::*GtkCTree*,GtkCTreeNode*,gint->void "tree_unselect_row") (tree_expand::*GtkCTree*,GtkCTreeNode*->void "tree_expand") (tree_collapse::*GtkCTree*,GtkCTreeNode*->void "tree_collapse") (tree_move::*GtkCTree*,GtkCTreeNode*,GtkCTreeNode*,GtkCTreeNode*->void "tree_move") (change_focus_row_expansion::*GtkCTree*,GtkCTreeExpansionType->void "change_focus_row_expansion")) "struct _GtkCTreeClass")
    (type GtkCTreeClass s-_GtkCTreeClass "GtkCTreeClass")
    (type s-_GtkCTreeRow (struct (row::GtkCListRow "row") (parent::GtkCTreeNode* "parent") (sibling::GtkCTreeNode* "sibling") (children::GtkCTreeNode* "children") (pixmap_closed::GdkPixmap* "pixmap_closed") (mask_closed::GdkBitmap* "mask_closed") (pixmap_opened::GdkPixmap* "pixmap_opened") (mask_opened::GdkBitmap* "mask_opened") (level::guint16 "level") (is_leaf::guint "is_leaf") (expanded::guint "expanded")) "struct _GtkCTreeRow")
    (type GtkCTreeRow s-_GtkCTreeRow "GtkCTreeRow")
    (type s-_GtkCTreeNode (struct (list::GList "list")) "struct _GtkCTreeNode")
    (type GtkCTreeNode s-_GtkCTreeNode "GtkCTreeNode")
    (type GtkCTree*,GtkCTreeNode*,gpointer->void "void ($(GtkCTree *,GtkCTreeNode *,gpointer))")
    (type *GtkCTree*,GtkCTreeNode*,gpointer->void (function void (GtkCTree* GtkCTreeNode* gpointer)) "void ((*$)(GtkCTree *,GtkCTreeNode *,gpointer))")
    (type GtkCTreeFunc *GtkCTree*,GtkCTreeNode*,gpointer->void "GtkCTreeFunc")
    (type GtkCTree*,guint,GNode*,GtkCTreeNode*,gpointer->gboolean "gboolean ($(GtkCTree *,guint,GNode *,GtkCTreeNode *,gpointer))")
    (type *GtkCTree*,guint,GNode*,GtkCTreeNode*,gpointer->gboolean (function gboolean (GtkCTree* guint GNode* GtkCTreeNode* gpointer)) "gboolean ((*$)(GtkCTree *,guint,GNode *,GtkCTreeNode *,gpointer))")
    (type GtkCTreeGNodeFunc *GtkCTree*,guint,GNode*,GtkCTreeNode*,gpointer->gboolean "GtkCTreeGNodeFunc")
    (type GtkCTree*,GtkCTreeNode*,GtkCTreeNode*,GtkCTreeNode*->gboolean "gboolean ($(GtkCTree *,GtkCTreeNode *,GtkCTreeNode *,GtkCTreeNode *))")
    (type *GtkCTree*,GtkCTreeNode*,GtkCTreeNode*,GtkCTreeNode*->gboolean (function gboolean (GtkCTree* GtkCTreeNode* GtkCTreeNode* GtkCTreeNode*)) "gboolean ((*$)(GtkCTree *,GtkCTreeNode *,GtkCTreeNode *,GtkCTreeNode *))")
    (type GtkCTreeCompareDragFunc *GtkCTree*,GtkCTreeNode*,GtkCTreeNode*,GtkCTreeNode*->gboolean "GtkCTreeCompareDragFunc")
    (type GtkCTree*,GtkCTreeNode*,gint->void "void ($(GtkCTree *,GtkCTreeNode *,gint))")
    (type *GtkCTree*,GtkCTreeNode*,gint->void (function void (GtkCTree* GtkCTreeNode* gint)) "void ((*$)(GtkCTree *,GtkCTreeNode *,gint))")
    (type GtkCTree*,GtkCTreeNode*->void "void ($(GtkCTree *,GtkCTreeNode *))")
    (type *GtkCTree*,GtkCTreeNode*->void (function void (GtkCTree* GtkCTreeNode*)) "void ((*$)(GtkCTree *,GtkCTreeNode *))")
    (type GtkCTree*,GtkCTreeNode*,GtkCTreeNode*,GtkCTreeNode*->void "void ($(GtkCTree *,GtkCTreeNode *,GtkCTreeNode *,GtkCTreeNode *))")
    (type *GtkCTree*,GtkCTreeNode*,GtkCTreeNode*,GtkCTreeNode*->void (function void (GtkCTree* GtkCTreeNode* GtkCTreeNode* GtkCTreeNode*)) "void ((*$)(GtkCTree *,GtkCTreeNode *,GtkCTreeNode *,GtkCTreeNode *))")
    (type GtkCTree*,GtkCTreeExpansionType->void "void ($(GtkCTree *,GtkCTreeExpansionType))")
    (type *GtkCTree*,GtkCTreeExpansionType->void (function void (GtkCTree* GtkCTreeExpansionType)) "void ((*$)(GtkCTree *,GtkCTreeExpansionType))")
    (type s-_GtkDrawingArea (struct (widget::GtkWidget "widget") (draw_data::gpointer "draw_data")) "struct _GtkDrawingArea")
    (type GtkDrawingArea s-_GtkDrawingArea "GtkDrawingArea")
    (type s-_GtkDrawingAreaClass (struct (parent_class::GtkWidgetClass "parent_class")) "struct _GtkDrawingAreaClass")
    (type GtkDrawingAreaClass s-_GtkDrawingAreaClass "GtkDrawingAreaClass")
    (type s-_GtkCurve (struct (graph::GtkDrawingArea "graph") (cursor_type::gint "cursor_type") (min_x::gfloat "min_x") (max_x::gfloat "max_x") (min_y::gfloat "min_y") (max_y::gfloat "max_y") (pixmap::GdkPixmap* "pixmap") (curve_type::GtkCurveType "curve_type") (height::gint "height") (grab_point::gint "grab_point") (last::gint "last") (num_points::gint "num_points") (point::GdkPoint* "point") (num_ctlpoints::gint "num_ctlpoints") (ctlpoint::gfloat-array-2* "ctlpoint")) "struct _GtkCurve")
    (type GtkCurve s-_GtkCurve "GtkCurve")
    (type s-_GtkCurveClass (struct (parent_class::GtkDrawingAreaClass "parent_class") (curve_type_changed::*GtkCurve*->void "curve_type_changed")) "struct _GtkCurveClass")
    (type GtkCurveClass s-_GtkCurveClass "GtkCurveClass")
    (type gfloat-array-2 (array gfloat) "gfloat $[ 2 ]")
    (type gfloat-array-2* (pointer gfloat-array-2) "gfloat (*$)[ 2 ]")
    (type GtkCurve*->void "void ($(GtkCurve *))")
    (type *GtkCurve*->void (function void (GtkCurve*)) "void ((*$)(GtkCurve *))")
    (type s-_GtkDialog (struct (window::GtkWindow "window") (vbox::GtkWidget* "vbox") (action_area::GtkWidget* "action_area")) "struct _GtkDialog")
    (type GtkDialog s-_GtkDialog "GtkDialog")
    (type s-_GtkDialogClass (struct (parent_class::GtkWindowClass "parent_class")) "struct _GtkDialogClass")
    (type GtkDialogClass s-_GtkDialogClass "GtkDialogClass")
    (type s-_GtkDialogButton (struct) "struct _GtkDialogButton")
    (type GtkDialogButton s-_GtkDialogButton "GtkDialogButton")
    (type GtkSelectioData s-_GtkSelectionData "GtkSelectioData")
    (type s-_GtkTargetList (struct (list::GList* "list") (ref_count::guint "ref_count")) "struct _GtkTargetList")
    (type GtkTargetList s-_GtkTargetList "GtkTargetList")
    (type s-_GtkTargetEntry (struct (target::gchar* "target") (flags::guint "flags") (info::guint "info")) "struct _GtkTargetEntry")
    (type GtkTargetEntry s-_GtkTargetEntry "GtkTargetEntry")
    (type s-_GtkTargetPair (struct (target::GdkAtom "target") (flags::guint "flags") (info::guint "info")) "struct _GtkTargetPair")
    (type GtkTargetPair s-_GtkTargetPair "GtkTargetPair")
    (type woot__e1123 int "long")
    (macro GTK_DEST_DEFAULT_MOTION::int "GTK_DEST_DEFAULT_MOTION")
    (macro GTK_DEST_DEFAULT_HIGHLIGHT::int "GTK_DEST_DEFAULT_HIGHLIGHT")
    (macro GTK_DEST_DEFAULT_DROP::int "GTK_DEST_DEFAULT_DROP")
    (macro GTK_DEST_DEFAULT_ALL::int "GTK_DEST_DEFAULT_ALL")
    (type GtkDestDefaults woot__e1123 "GtkDestDefaults")
    (type woot__e1124 int "long")
    (macro GTK_TARGET_SAME_APP::int "GTK_TARGET_SAME_APP")
    (macro GTK_TARGET_SAME_WIDGET::int "GTK_TARGET_SAME_WIDGET")
    (type GtkTargetFlags woot__e1124 "GtkTargetFlags")
    (type s-_GtkFileSelection (struct (window::GtkWindow "window") (dir_list::GtkWidget* "dir_list") (file_list::GtkWidget* "file_list") (selection_entry::GtkWidget* "selection_entry") (selection_text::GtkWidget* "selection_text") (main_vbox::GtkWidget* "main_vbox") (ok_button::GtkWidget* "ok_button") (cancel_button::GtkWidget* "cancel_button") (help_button::GtkWidget* "help_button") (history_pulldown::GtkWidget* "history_pulldown") (history_menu::GtkWidget* "history_menu") (history_list::GList* "history_list") (fileop_dialog::GtkWidget* "fileop_dialog") (fileop_entry::GtkWidget* "fileop_entry") (fileop_file::gchar* "fileop_file") (cmpl_state::gpointer "cmpl_state") (fileop_c_dir::GtkWidget* "fileop_c_dir") (fileop_del_file::GtkWidget* "fileop_del_file") (fileop_ren_file::GtkWidget* "fileop_ren_file") (button_area::GtkWidget* "button_area") (action_area::GtkWidget* "action_area")) "struct _GtkFileSelection")
    (type GtkFileSelection s-_GtkFileSelection "GtkFileSelection")
    (type s-_GtkFileSelectionClass (struct (parent_class::GtkWindowClass "parent_class")) "struct _GtkFileSelectionClass")
    (type GtkFileSelectionClass s-_GtkFileSelectionClass "GtkFileSelectionClass")
    (type s-_GtkFixed (struct (container::GtkContainer "container") (children::GList* "children")) "struct _GtkFixed")
    (type GtkFixed s-_GtkFixed "GtkFixed")
    (type s-_GtkFixedClass (struct (parent_class::GtkContainerClass "parent_class")) "struct _GtkFixedClass")
    (type GtkFixedClass s-_GtkFixedClass "GtkFixedClass")
    (type s-_GtkFixedChild (struct (widget::GtkWidget* "widget") (x::gint16 "x") (y::gint16 "y")) "struct _GtkFixedChild")
    (type GtkFixedChild s-_GtkFixedChild "GtkFixedChild")
    (type s-_GtkNotebook (struct (container::GtkContainer "container") (cur_page::GtkNotebookPage* "cur_page") (children::GList* "children") (first_tab::GList* "first_tab") (focus_tab::GList* "focus_tab") (menu::GtkWidget* "menu") (panel::GdkWindow* "panel") (timer::guint32 "timer") (tab_hborder::guint16 "tab_hborder") (tab_vborder::guint16 "tab_vborder") (show_tabs::guint "show_tabs") (homogeneous::guint "homogeneous") (show_border::guint "show_border") (tab_pos::guint "tab_pos") (scrollable::guint "scrollable") (in_child::guint "in_child") (click_child::guint "click_child") (button::guint "button") (need_timer::guint "need_timer") (child_has_focus::guint "child_has_focus") (have_visible_child::guint "have_visible_child")) "struct _GtkNotebook")
    (type GtkNotebook s-_GtkNotebook "GtkNotebook")
    (type s-_GtkNotebookClass (struct (parent_class::GtkContainerClass "parent_class") (switch_page::*GtkNotebook*,GtkNotebookPage*,guint->void "switch_page")) "struct _GtkNotebookClass")
    (type GtkNotebookClass s-_GtkNotebookClass "GtkNotebookClass")
    (type s-_GtkNotebookPage (struct (child::GtkWidget* "child") (tab_label::GtkWidget* "tab_label") (menu_label::GtkWidget* "menu_label") (default_menu::guint "default_menu") (default_tab::guint "default_tab") (expand::guint "expand") (fill::guint "fill") (pack::guint "pack") (requisition::GtkRequisition "requisition") (allocation::GtkAllocation "allocation")) "struct _GtkNotebookPage")
    (type GtkNotebookPage s-_GtkNotebookPage "GtkNotebookPage")
    (type GtkNotebook*,GtkNotebookPage*,guint->void "void ($(GtkNotebook *,GtkNotebookPage *,guint))")
    (type *GtkNotebook*,GtkNotebookPage*,guint->void (function void (GtkNotebook* GtkNotebookPage* guint)) "void ((*$)(GtkNotebook *,GtkNotebookPage *,guint))")
    (type s-_GtkFontSelection (struct (notebook::GtkNotebook "notebook") (main_vbox::GtkWidget* "main_vbox") (font_label::GtkWidget* "font_label") (font_entry::GtkWidget* "font_entry") (font_clist::GtkWidget* "font_clist") (font_style_entry::GtkWidget* "font_style_entry") (font_style_clist::GtkWidget* "font_style_clist") (size_entry::GtkWidget* "size_entry") (size_clist::GtkWidget* "size_clist") (pixels_button::GtkWidget* "pixels_button") (points_button::GtkWidget* "points_button") (filter_button::GtkWidget* "filter_button") (preview_entry::GtkWidget* "preview_entry") (message_label::GtkWidget* "message_label") (info_vbox::GtkWidget* "info_vbox") (info_clist::GtkWidget* "info_clist") (requested_font_name::GtkWidget* "requested_font_name") (actual_font_name::GtkWidget* "actual_font_name") (filter_vbox::GtkWidget* "filter_vbox") (type_bitmaps_button::GtkWidget* "type_bitmaps_button") (type_scalable_button::GtkWidget* "type_scalable_button") (type_scaled_bitmaps_button::GtkWidget* "type_scaled_bitmaps_button") (filter_clists::GtkWidget*-array-6 "filter_clists") (font::GdkFont* "font") (font_index::gint "font_index") (style::gint "style") (metric::GtkFontMetricType "metric") (size::gint "size") (selected_size::gint "selected_size") (property_values::guint16-array-5 "property_values") (filters::GtkFontFilter-array-2 "filters")) "struct _GtkFontSelection")
    (type GtkFontSelection s-_GtkFontSelection "GtkFontSelection")
    (type s-_GtkFontSelectionClass (struct (parent_class::GtkNotebookClass "parent_class")) "struct _GtkFontSelectionClass")
    (type GtkFontSelectionClass s-_GtkFontSelectionClass "GtkFontSelectionClass")
    (type s-_GtkFontSelectionDialog (struct (window::GtkWindow "window") (fontsel::GtkWidget* "fontsel") (main_vbox::GtkWidget* "main_vbox") (action_area::GtkWidget* "action_area") (ok_button::GtkWidget* "ok_button") (apply_button::GtkWidget* "apply_button") (cancel_button::GtkWidget* "cancel_button") (dialog_width::gint "dialog_width") (auto_resize::gboolean "auto_resize")) "struct _GtkFontSelectionDialog")
    (type GtkFontSelectionDialog s-_GtkFontSelectionDialog "GtkFontSelectionDialog")
    (type s-_GtkFontSelectionDialogClass (struct (parent_class::GtkWindowClass "parent_class")) "struct _GtkFontSelectionDialogClass")
    (type GtkFontSelectionDialogClass s-_GtkFontSelectionDialogClass "GtkFontSelectionDialogClass")
    (type woot__e1125 int "long")
    (macro GTK_FONT_METRIC_PIXELS::int "GTK_FONT_METRIC_PIXELS")
    (macro GTK_FONT_METRIC_POINTS::int "GTK_FONT_METRIC_POINTS")
    (type GtkFontMetricType woot__e1125 "GtkFontMetricType")
    (type woot__e1126 int "long")
    (macro GTK_FONT_BITMAP::int "GTK_FONT_BITMAP")
    (macro GTK_FONT_SCALABLE::int "GTK_FONT_SCALABLE")
    (macro GTK_FONT_SCALABLE_BITMAP::int "GTK_FONT_SCALABLE_BITMAP")
    (macro GTK_FONT_ALL::int "GTK_FONT_ALL")
    (type GtkFontType woot__e1126 "GtkFontType")
    (type woot__e1127 int "long")
    (macro GTK_FONT_FILTER_BASE::int "GTK_FONT_FILTER_BASE")
    (macro GTK_FONT_FILTER_USER::int "GTK_FONT_FILTER_USER")
    (type GtkFontFilterType woot__e1127 "GtkFontFilterType")
    (type s-_GtkFontFilter (struct (font_type::gint "font_type") (property_filters::guint16*-array-6 "property_filters") (property_nfilters::guint16-array-6 "property_nfilters")) "struct _GtkFontFilter")
    (type GtkFontFilter s-_GtkFontFilter "GtkFontFilter")
    (type guint16* (pointer guint16) "guint16 *")
    (type guint16*-array-6 (array guint16*) "guint16 *$[ 6 ]")
    (type guint16-array-6 (array guint16) "guint16 $[ 6 ]")
    (type GtkWidget*-array-6 (array GtkWidget*) "GtkWidget *$[ 6 ]")
    (type guint16-array-5 (array guint16) "guint16 $[ 5 ]")
    (type GtkFontFilter-array-2 (array GtkFontFilter) "GtkFontFilter $[ 2 ]")
    (type s-_GtkGammaCurve (struct (vbox::GtkVBox "vbox") (table::GtkWidget* "table") (curve::GtkWidget* "curve") (button::GtkWidget*-array-5 "button") (gamma::gfloat "gamma") (gamma_dialog::GtkWidget* "gamma_dialog") (gamma_text::GtkWidget* "gamma_text")) "struct _GtkGammaCurve")
    (type GtkGammaCurve s-_GtkGammaCurve "GtkGammaCurve")
    (type s-_GtkGammaCurveClass (struct (parent_class::GtkVBoxClass "parent_class")) "struct _GtkGammaCurveClass")
    (type GtkGammaCurveClass s-_GtkGammaCurveClass "GtkGammaCurveClass")
    (type GtkWidget*-array-5 (array GtkWidget*) "GtkWidget *$[ 5 ]")
    (type s-_GtkHandleBox (struct (bin::GtkBin "bin") (bin_window::GdkWindow* "bin_window") (float_window::GdkWindow* "float_window") (shadow_type::GtkShadowType "shadow_type") (handle_position::guint "handle_position") (float_window_mapped::guint "float_window_mapped") (child_detached::guint "child_detached") (in_drag::guint "in_drag") (shrink_on_detach::guint "shrink_on_detach") (snap_edge::gint "snap_edge") (deskoff_x::gint "deskoff_x") (deskoff_y::gint "deskoff_y") (attach_allocation::GtkAllocation "attach_allocation") (float_allocation::GtkAllocation "float_allocation")) "struct _GtkHandleBox")
    (type GtkHandleBox s-_GtkHandleBox "GtkHandleBox")
    (type s-_GtkHandleBoxClass (struct (parent_class::GtkBinClass "parent_class") (child_attached::*GtkHandleBox*,GtkWidget*->void "child_attached") (child_detached::*GtkHandleBox*,GtkWidget*->void "child_detached")) "struct _GtkHandleBoxClass")
    (type GtkHandleBoxClass s-_GtkHandleBoxClass "GtkHandleBoxClass")
    (type GtkHandleBox*,GtkWidget*->void "void ($(GtkHandleBox *,GtkWidget *))")
    (type *GtkHandleBox*,GtkWidget*->void (function void (GtkHandleBox* GtkWidget*)) "void ((*$)(GtkHandleBox *,GtkWidget *))")
    (type s-_GtkHButtonBox (struct (button_box::GtkButtonBox "button_box")) "struct _GtkHButtonBox")
    (type GtkHButtonBox s-_GtkHButtonBox "GtkHButtonBox")
    (type s-_GtkHButtonBoxClass (struct (parent_class::GtkButtonBoxClass "parent_class")) "struct _GtkHButtonBoxClass")
    (type GtkHButtonBoxClass s-_GtkHButtonBoxClass "GtkHButtonBoxClass")
    (type s-_GtkPaned (struct (container::GtkContainer "container") (child1::GtkWidget* "child1") (child2::GtkWidget* "child2") (handle::GdkWindow* "handle") (groove_rectangle::GdkRectangle "groove_rectangle") (xor_gc::GdkGC* "xor_gc") (handle_size::guint16 "handle_size") (gutter_size::guint16 "gutter_size") (child1_size::gint "child1_size") (last_allocation::gint "last_allocation") (min_position::gint "min_position") (max_position::gint "max_position") (position_set::guint "position_set") (in_drag::guint "in_drag") (child1_shrink::guint "child1_shrink") (child1_resize::guint "child1_resize") (child2_shrink::guint "child2_shrink") (child2_resize::guint "child2_resize") (handle_xpos::gint16 "handle_xpos") (handle_ypos::gint16 "handle_ypos")) "struct _GtkPaned")
    (type GtkPaned s-_GtkPaned "GtkPaned")
    (type s-_GtkPanedClass (struct (parent_class::GtkContainerClass "parent_class")) "struct _GtkPanedClass")
    (type GtkPanedClass s-_GtkPanedClass "GtkPanedClass")
    (type s-_GtkHPaned (struct (paned::GtkPaned "paned")) "struct _GtkHPaned")
    (type GtkHPaned s-_GtkHPaned "GtkHPaned")
    (type s-_GtkHPanedClass (struct (parent_class::GtkPanedClass "parent_class")) "struct _GtkHPanedClass")
    (type GtkHPanedClass s-_GtkHPanedClass "GtkHPanedClass")
    (type s-_GtkRuler (struct (widget::GtkWidget "widget") (backing_store::GdkPixmap* "backing_store") (non_gr_exp_gc::GdkGC* "non_gr_exp_gc") (metric::GtkRulerMetric* "metric") (xsrc::gint "xsrc") (ysrc::gint "ysrc") (slider_size::gint "slider_size") (lower::gfloat "lower") (upper::gfloat "upper") (position::gfloat "position") (max_size::gfloat "max_size")) "struct _GtkRuler")
    (type GtkRuler s-_GtkRuler "GtkRuler")
    (type s-_GtkRulerClass (struct (parent_class::GtkWidgetClass "parent_class") (draw_ticks::*GtkRuler*->void "draw_ticks") (draw_pos::*GtkRuler*->void "draw_pos")) "struct _GtkRulerClass")
    (type GtkRulerClass s-_GtkRulerClass "GtkRulerClass")
    (type s-_GtkRulerMetric (struct (metric_name::gchar* "metric_name") (abbrev::gchar* "abbrev") (pixels_per_unit::gfloat "pixels_per_unit") (ruler_scale::gfloat-array-10 "ruler_scale") (subdivide::gint-array-5 "subdivide")) "struct _GtkRulerMetric")
    (type GtkRulerMetric s-_GtkRulerMetric "GtkRulerMetric")
    (type GtkRuler*->void "void ($(GtkRuler *))")
    (type *GtkRuler*->void (function void (GtkRuler*)) "void ((*$)(GtkRuler *))")
    (type gfloat-array-10 (array gfloat) "gfloat $[ 10 ]")
    (type gint-array-5 (array gint) "gint $[ 5 ]")
    (type s-_GtkHRuler (struct (ruler::GtkRuler "ruler")) "struct _GtkHRuler")
    (type GtkHRuler s-_GtkHRuler "GtkHRuler")
    (type s-_GtkHRulerClass (struct (parent_class::GtkRulerClass "parent_class")) "struct _GtkHRulerClass")
    (type GtkHRulerClass s-_GtkHRulerClass "GtkHRulerClass")
    (type s-_GtkSeparator (struct (widget::GtkWidget "widget")) "struct _GtkSeparator")
    (type GtkSeparator s-_GtkSeparator "GtkSeparator")
    (type s-_GtkSeparatorClass (struct (parent_class::GtkWidgetClass "parent_class")) "struct _GtkSeparatorClass")
    (type GtkSeparatorClass s-_GtkSeparatorClass "GtkSeparatorClass")
    (type s-_GtkHSeparator (struct (separator::GtkSeparator "separator")) "struct _GtkHSeparator")
    (type GtkHSeparator s-_GtkHSeparator "GtkHSeparator")
    (type s-_GtkHSeparatorClass (struct (parent_class::GtkSeparatorClass "parent_class")) "struct _GtkHSeparatorClass")
    (type GtkHSeparatorClass s-_GtkHSeparatorClass "GtkHSeparatorClass")
    (type s-_GtkImage (struct (misc::GtkMisc "misc") (image::GdkImage* "image") (mask::GdkBitmap* "mask")) "struct _GtkImage")
    (type GtkImage s-_GtkImage "GtkImage")
    (type s-_GtkImageClass (struct (parent_class::GtkMiscClass "parent_class")) "struct _GtkImageClass")
    (type GtkImageClass s-_GtkImageClass "GtkImageClass")
    (type s-_GtkInputDialog (struct (dialog::GtkDialog "dialog") (axis_list::GtkWidget* "axis_list") (axis_listbox::GtkWidget* "axis_listbox") (mode_optionmenu::GtkWidget* "mode_optionmenu") (close_button::GtkWidget* "close_button") (save_button::GtkWidget* "save_button") (axis_items::GtkWidget*-array-GDK_AXIS_LAST "axis_items") (current_device::guint32 "current_device") (keys_list::GtkWidget* "keys_list") (keys_listbox::GtkWidget* "keys_listbox")) "struct _GtkInputDialog")
    (type GtkInputDialog s-_GtkInputDialog "GtkInputDialog")
    (type s-_GtkInputDialogClass (struct (parent_class::GtkWindowClass "parent_class") (enable_device::*GtkInputDialog*,guint32->void "enable_device") (disable_device::*GtkInputDialog*,guint32->void "disable_device")) "struct _GtkInputDialogClass")
    (type GtkInputDialogClass s-_GtkInputDialogClass "GtkInputDialogClass")
    (type GtkWidget*-array-GDK_AXIS_LAST (array GtkWidget*) "GtkWidget *$[ GDK_AXIS_LAST ]")
    (type GtkInputDialog*,guint32->void "void ($(GtkInputDialog *,guint32))")
    (type *GtkInputDialog*,guint32->void (function void (GtkInputDialog* guint32)) "void ((*$)(GtkInputDialog *,guint32))")
    (type s-_GtkMenuEntry (struct (path::gchar* "path") (accelerator::gchar* "accelerator") (callback::GtkMenuCallback "callback") (callback_data::gpointer "callback_data") (widget::GtkWidget* "widget")) "struct _GtkMenuEntry")
    (type GtkMenuEntry s-_GtkMenuEntry "GtkMenuEntry")
    (type s-_GtkMenuPath (struct (path::string "path") (widget::GtkWidget* "widget")) "struct _GtkMenuPath")
    (type GtkMenuPath s-_GtkMenuPath "GtkMenuPath")
    (type s-_GtkMenuFactory (struct (path::gchar* "path") (type::GtkMenuFactoryType "type") (accel_group::GtkAccelGroup* "accel_group") (widget::GtkWidget* "widget") (subfactories::GList* "subfactories")) "struct _GtkMenuFactory")
    (type GtkMenuFactory s-_GtkMenuFactory "GtkMenuFactory")
    (type GtkMenuCallback *GtkWidget*,gpointer->void "GtkMenuCallback")
    (type gpointer,gchar*->void "void ($(gpointer,gchar *))")
    (type *gpointer,gchar*->void (function void (gpointer gchar*)) "void ((*$)(gpointer,gchar *))")
    (type GtkPrintFunc *gpointer,gchar*->void "GtkPrintFunc")
    (type gchar*,gpointer->gchar* "gchar *($(gchar *,gpointer))")
    (type *gchar*,gpointer->gchar* (function gchar* (gchar* gpointer)) "gchar *((*$)(gchar *,gpointer))")
    (type GtkTranslateFunc *gchar*,gpointer->gchar* "GtkTranslateFunc")
    (type GtkItemFactoryCallback *->void "GtkItemFactoryCallback")
    (type gpointer,guint,GtkWidget*->void "void ($(gpointer,guint,GtkWidget *))")
    (type *gpointer,guint,GtkWidget*->void (function void (gpointer guint GtkWidget*)) "void ((*$)(gpointer,guint,GtkWidget *))")
    (type GtkItemFactoryCallback1 *gpointer,guint,GtkWidget*->void "GtkItemFactoryCallback1")
    (type s-_GtkItemFactory (struct (object::GtkObject "object") (path::gchar* "path") (accel_group::GtkAccelGroup* "accel_group") (widget::GtkWidget* "widget") (items::GSList* "items") (translate_func::GtkTranslateFunc "translate_func") (translate_data::gpointer "translate_data") (translate_notify::GtkDestroyNotify "translate_notify")) "struct _GtkItemFactory")
    (type GtkItemFactory s-_GtkItemFactory "GtkItemFactory")
    (type s-_GtkItemFactoryClass (struct (object_class::GtkObjectClass "object_class") (cpair_comment_single::gchar* "cpair_comment_single") (item_ht::GHashTable* "item_ht") (dummy::gpointer "dummy")) "struct _GtkItemFactoryClass")
    (type GtkItemFactoryClass s-_GtkItemFactoryClass "GtkItemFactoryClass")
    (type s-_GtkItemFactoryEntry (struct (path::gchar* "path") (accelerator::gchar* "accelerator") (callback::GtkItemFactoryCallback "callback") (callback_action::guint "callback_action") (item_type::gchar* "item_type")) "struct _GtkItemFactoryEntry")
    (type GtkItemFactoryEntry s-_GtkItemFactoryEntry "GtkItemFactoryEntry")
    (type s-_GtkItemFactoryItem (struct (path::gchar* "path") (accelerator_key::guint "accelerator_key") (accelerator_mods::guint "accelerator_mods") (modified::guint "modified") (in_propagation::guint "in_propagation") (dummy::gchar* "dummy") (widgets::GSList* "widgets")) "struct _GtkItemFactoryItem")
    (type GtkItemFactoryItem s-_GtkItemFactoryItem "GtkItemFactoryItem")
    (type GtkWidget*,gpointer,guint->void "void ($(GtkWidget *,gpointer,guint))")
    (type *GtkWidget*,gpointer,guint->void (function void (GtkWidget* gpointer guint)) "void ((*$)(GtkWidget *,gpointer,guint))")
    (type GtkItemFactoryCallback2 *GtkWidget*,gpointer,guint->void "GtkItemFactoryCallback2")
    (type s-_GtkLayout (struct (container::GtkContainer "container") (children::GList* "children") (width::guint "width") (height::guint "height") (xoffset::guint "xoffset") (yoffset::guint "yoffset") (hadjustment::GtkAdjustment* "hadjustment") (vadjustment::GtkAdjustment* "vadjustment") (bin_window::GdkWindow* "bin_window") (visibility::GdkVisibilityState "visibility") (configure_serial::gulong "configure_serial") (scroll_x::gint "scroll_x") (scroll_y::gint "scroll_y") (freeze_count::guint "freeze_count")) "struct _GtkLayout")
    (type GtkLayout s-_GtkLayout "GtkLayout")
    (type s-_GtkLayoutClass (struct (parent_class::GtkContainerClass "parent_class") (set_scroll_adjustments::*GtkLayout*,GtkAdjustment*,GtkAdjustment*->void "set_scroll_adjustments")) "struct _GtkLayoutClass")
    (type GtkLayoutClass s-_GtkLayoutClass "GtkLayoutClass")
    (type GtkLayout*,GtkAdjustment*,GtkAdjustment*->void "void ($(GtkLayout *,GtkAdjustment *,GtkAdjustment *))")
    (type *GtkLayout*,GtkAdjustment*,GtkAdjustment*->void (function void (GtkLayout* GtkAdjustment* GtkAdjustment*)) "void ((*$)(GtkLayout *,GtkAdjustment *,GtkAdjustment *))")
    (type s-_GtkListItem (struct (item::GtkItem "item")) "struct _GtkListItem")
    (type GtkListItem s-_GtkListItem "GtkListItem")
    (type s-_GtkListItemClass (struct (parent_class::GtkItemClass "parent_class") (toggle_focus_row::*GtkListItem*->void "toggle_focus_row") (select_all::*GtkListItem*->void "select_all") (unselect_all::*GtkListItem*->void "unselect_all") (undo_selection::*GtkListItem*->void "undo_selection") (start_selection::*GtkListItem*->void "start_selection") (end_selection::*GtkListItem*->void "end_selection") (extend_selection::*GtkListItem*,GtkScrollType,gfloat,gboolean->void "extend_selection") (scroll_horizontal::*GtkListItem*,GtkScrollType,gfloat->void "scroll_horizontal") (scroll_vertical::*GtkListItem*,GtkScrollType,gfloat->void "scroll_vertical") (toggle_add_mode::*GtkListItem*->void "toggle_add_mode")) "struct _GtkListItemClass")
    (type GtkListItemClass s-_GtkListItemClass "GtkListItemClass")
    (type GtkListItem*->void "void ($(GtkListItem *))")
    (type *GtkListItem*->void (function void (GtkListItem*)) "void ((*$)(GtkListItem *))")
    (type GtkListItem*,GtkScrollType,gfloat,gboolean->void "void ($(GtkListItem *,GtkScrollType,gfloat,gboolean))")
    (type *GtkListItem*,GtkScrollType,gfloat,gboolean->void (function void (GtkListItem* GtkScrollType gfloat gboolean)) "void ((*$)(GtkListItem *,GtkScrollType,gfloat,gboolean))")
    (type GtkListItem*,GtkScrollType,gfloat->void "void ($(GtkListItem *,GtkScrollType,gfloat))")
    (type *GtkListItem*,GtkScrollType,gfloat->void (function void (GtkListItem* GtkScrollType gfloat)) "void ((*$)(GtkListItem *,GtkScrollType,gfloat))")
    (type s-_GtkList (struct (container::GtkContainer "container") (children::GList* "children") (selection::GList* "selection") (undo_selection::GList* "undo_selection") (undo_unselection::GList* "undo_unselection") (last_focus_child::GtkWidget* "last_focus_child") (undo_focus_child::GtkWidget* "undo_focus_child") (htimer::guint "htimer") (vtimer::guint "vtimer") (anchor::gint "anchor") (drag_pos::gint "drag_pos") (anchor_state::GtkStateType "anchor_state") (selection_mode::guint "selection_mode") (drag_selection::guint "drag_selection") (add_mode::guint "add_mode")) "struct _GtkList")
    (type GtkList s-_GtkList "GtkList")
    (type s-_GtkListClass (struct (parent_class::GtkContainerClass "parent_class") (selection_changed::*GtkList*->void "selection_changed") (select_child::*GtkList*,GtkWidget*->void "select_child") (unselect_child::*GtkList*,GtkWidget*->void "unselect_child")) "struct _GtkListClass")
    (type GtkListClass s-_GtkListClass "GtkListClass")
    (type GtkList*->void "void ($(GtkList *))")
    (type *GtkList*->void (function void (GtkList*)) "void ((*$)(GtkList *))")
    (type GtkList*,GtkWidget*->void "void ($(GtkList *,GtkWidget *))")
    (type *GtkList*,GtkWidget*->void (function void (GtkList* GtkWidget*)) "void ((*$)(GtkList *,GtkWidget *))")
    (type s-_GtkMenuShell (struct (container::GtkContainer "container") (children::GList* "children") (active_menu_item::GtkWidget* "active_menu_item") (parent_menu_shell::GtkWidget* "parent_menu_shell") (active::guint "active") (have_grab::guint "have_grab") (have_xgrab::guint "have_xgrab") (button::guint "button") (ignore_leave::guint "ignore_leave") (menu_flag::guint "menu_flag") (ignore_enter::guint "ignore_enter") (activate_time::guint32 "activate_time")) "struct _GtkMenuShell")
    (type GtkMenuShell s-_GtkMenuShell "GtkMenuShell")
    (type s-_GtkMenuShellClass (struct (parent_class::GtkContainerClass "parent_class") (submenu_placement::guint "submenu_placement") (deactivate::*GtkMenuShell*->void "deactivate") (selection_done::*GtkMenuShell*->void "selection_done") (move_current::*GtkMenuShell*,GtkMenuDirectionType->void "move_current") (activate_current::*GtkMenuShell*,gboolean->void "activate_current") (cancel::*GtkMenuShell*->void "cancel")) "struct _GtkMenuShellClass")
    (type GtkMenuShellClass s-_GtkMenuShellClass "GtkMenuShellClass")
    (type GtkMenuShell*->void "void ($(GtkMenuShell *))")
    (type *GtkMenuShell*->void (function void (GtkMenuShell*)) "void ((*$)(GtkMenuShell *))")
    (type GtkMenuShell*,GtkMenuDirectionType->void "void ($(GtkMenuShell *,GtkMenuDirectionType))")
    (type *GtkMenuShell*,GtkMenuDirectionType->void (function void (GtkMenuShell* GtkMenuDirectionType)) "void ((*$)(GtkMenuShell *,GtkMenuDirectionType))")
    (type GtkMenuShell*,gboolean->void "void ($(GtkMenuShell *,gboolean))")
    (type *GtkMenuShell*,gboolean->void (function void (GtkMenuShell* gboolean)) "void ((*$)(GtkMenuShell *,gboolean))")
    (type s-_GtkMenu (struct (menu_shell::GtkMenuShell "menu_shell") (parent_menu_item::GtkWidget* "parent_menu_item") (old_active_menu_item::GtkWidget* "old_active_menu_item") (accel_group::GtkAccelGroup* "accel_group") (position_func::GtkMenuPositionFunc "position_func") (position_func_data::gpointer "position_func_data") (toplevel::GtkWidget* "toplevel") (tearoff_window::GtkWidget* "tearoff_window") (torn_off::guint "torn_off")) "struct _GtkMenu")
    (type GtkMenu s-_GtkMenu "GtkMenu")
    (type s-_GtkMenuClass (struct (parent_class::GtkMenuShellClass "parent_class")) "struct _GtkMenuClass")
    (type GtkMenuClass s-_GtkMenuClass "GtkMenuClass")
    (type GtkMenu*,gint*,gint*,gpointer->void "void ($(GtkMenu *,gint *,gint *,gpointer))")
    (type *GtkMenu*,gint*,gint*,gpointer->void (function void (GtkMenu* gint* gint* gpointer)) "void ((*$)(GtkMenu *,gint *,gint *,gpointer))")
    (type GtkMenuPositionFunc *GtkMenu*,gint*,gint*,gpointer->void "GtkMenuPositionFunc")
    (type GtkWidget*,GtkMenu*->void "void ($(GtkWidget *,GtkMenu *))")
    (type *GtkWidget*,GtkMenu*->void (function void (GtkWidget* GtkMenu*)) "void ((*$)(GtkWidget *,GtkMenu *))")
    (type GtkMenuDetachFunc *GtkWidget*,GtkMenu*->void "GtkMenuDetachFunc")
    (type s-_GtkMenuBar (struct (menu_shell::GtkMenuShell "menu_shell") (shadow_type::GtkShadowType "shadow_type")) "struct _GtkMenuBar")
    (type GtkMenuBar s-_GtkMenuBar "GtkMenuBar")
    (type s-_GtkMenuBarClass (struct (parent_class::GtkMenuShellClass "parent_class")) "struct _GtkMenuBarClass")
    (type GtkMenuBarClass s-_GtkMenuBarClass "GtkMenuBarClass")
    (type s-_GtkOptionMenu (struct (button::GtkButton "button") (menu::GtkWidget* "menu") (menu_item::GtkWidget* "menu_item") (width::guint16 "width") (height::guint16 "height")) "struct _GtkOptionMenu")
    (type GtkOptionMenu s-_GtkOptionMenu "GtkOptionMenu")
    (type s-_GtkOptionMenuClass (struct (parent_class::GtkButtonClass "parent_class")) "struct _GtkOptionMenuClass")
    (type GtkOptionMenuClass s-_GtkOptionMenuClass "GtkOptionMenuClass")
    (type s-_GtkPacker (struct (parent::GtkContainer "parent") (children::GList* "children") (spacing::guint "spacing") (default_border_width::guint "default_border_width") (default_pad_x::guint "default_pad_x") (default_pad_y::guint "default_pad_y") (default_i_pad_x::guint "default_i_pad_x") (default_i_pad_y::guint "default_i_pad_y")) "struct _GtkPacker")
    (type GtkPacker s-_GtkPacker "GtkPacker")
    (type s-_GtkPackerClass (struct (parent_class::GtkContainerClass "parent_class")) "struct _GtkPackerClass")
    (type GtkPackerClass s-_GtkPackerClass "GtkPackerClass")
    (type s-_GtkPackerChild (struct (widget::GtkWidget* "widget") (anchor::GtkAnchorType "anchor") (side::GtkSideType "side") (options::GtkPackerOptions "options") (use_default::guint "use_default") (border_width::guint "border_width") (pad_x::guint "pad_x") (pad_y::guint "pad_y") (i_pad_x::guint "i_pad_x") (i_pad_y::guint "i_pad_y")) "struct _GtkPackerChild")
    (type GtkPackerChild s-_GtkPackerChild "GtkPackerChild")
    (type woot__e1128 int "long")
    (macro GTK_PACK_EXPAND::int "GTK_PACK_EXPAND")
    (macro GTK_FILL_X::int "GTK_FILL_X")
    (macro GTK_FILL_Y::int "GTK_FILL_Y")
    (type GtkPackerOptions woot__e1128 "GtkPackerOptions")
    (type woot__e1129 int "long")
    (macro GTK_SIDE_TOP::int "GTK_SIDE_TOP")
    (macro GTK_SIDE_BOTTOM::int "GTK_SIDE_BOTTOM")
    (macro GTK_SIDE_LEFT::int "GTK_SIDE_LEFT")
    (macro GTK_SIDE_RIGHT::int "GTK_SIDE_RIGHT")
    (type GtkSideType woot__e1129 "GtkSideType")
    (type woot__e1130 int "long")
    (macro GTK_ANCHOR_CENTER::int "GTK_ANCHOR_CENTER")
    (macro GTK_ANCHOR_NORTH::int "GTK_ANCHOR_NORTH")
    (macro GTK_ANCHOR_NORTH_WEST::int "GTK_ANCHOR_NORTH_WEST")
    (macro GTK_ANCHOR_NORTH_EAST::int "GTK_ANCHOR_NORTH_EAST")
    (macro GTK_ANCHOR_SOUTH::int "GTK_ANCHOR_SOUTH")
    (macro GTK_ANCHOR_SOUTH_WEST::int "GTK_ANCHOR_SOUTH_WEST")
    (macro GTK_ANCHOR_SOUTH_EAST::int "GTK_ANCHOR_SOUTH_EAST")
    (macro GTK_ANCHOR_WEST::int "GTK_ANCHOR_WEST")
    (macro GTK_ANCHOR_EAST::int "GTK_ANCHOR_EAST")
    (macro GTK_ANCHOR_N::int "GTK_ANCHOR_N")
    (macro GTK_ANCHOR_NW::int "GTK_ANCHOR_NW")
    (macro GTK_ANCHOR_NE::int "GTK_ANCHOR_NE")
    (macro GTK_ANCHOR_S::int "GTK_ANCHOR_S")
    (macro GTK_ANCHOR_SW::int "GTK_ANCHOR_SW")
    (macro GTK_ANCHOR_SE::int "GTK_ANCHOR_SE")
    (macro GTK_ANCHOR_W::int "GTK_ANCHOR_W")
    (macro GTK_ANCHOR_E::int "GTK_ANCHOR_E")
    (type GtkAnchorType woot__e1130 "GtkAnchorType")
    (type s-_GtkPixmap (struct (misc::GtkMisc "misc") (pixmap::GdkPixmap* "pixmap") (mask::GdkBitmap* "mask") (pixmap_insensitive::GdkPixmap* "pixmap_insensitive") (build_insensitive::guint "build_insensitive")) "struct _GtkPixmap")
    (type GtkPixmap s-_GtkPixmap "GtkPixmap")
    (type s-_GtkPixmapClass (struct (parent_class::GtkMiscClass "parent_class")) "struct _GtkPixmapClass")
    (type GtkPixmapClass s-_GtkPixmapClass "GtkPixmapClass")
    (type s-_GtkPlug (struct (window::GtkWindow "window") (socket_window::GdkWindow* "socket_window") (same_app::gint "same_app")) "struct _GtkPlug")
    (type GtkPlug s-_GtkPlug "GtkPlug")
    (type s-_GtkPlugClass (struct (parent_class::GtkWindowClass "parent_class")) "struct _GtkPlugClass")
    (type GtkPlugClass s-_GtkPlugClass "GtkPlugClass")
    (type s-_GtkProgress (struct (widget::GtkWidget "widget") (adjustment::GtkAdjustment* "adjustment") (offscreen_pixmap::GdkPixmap* "offscreen_pixmap") (format::gchar* "format") (x_align::gfloat "x_align") (y_align::gfloat "y_align") (show_text::guint "show_text") (activity_mode::guint "activity_mode")) "struct _GtkProgress")
    (type GtkProgress s-_GtkProgress "GtkProgress")
    (type s-_GtkProgressClass (struct (parent_class::GtkWidgetClass "parent_class") (paint::*GtkProgress*->void "paint") (update::*GtkProgress*->void "update") (act_mode_enter::*GtkProgress*->void "act_mode_enter")) "struct _GtkProgressClass")
    (type GtkProgressClass s-_GtkProgressClass "GtkProgressClass")
    (type GtkProgress*->void "void ($(GtkProgress *))")
    (type *GtkProgress*->void (function void (GtkProgress*)) "void ((*$)(GtkProgress *))")
    (type s-_GtkProgressBar (struct (progress::GtkProgress "progress") (bar_style::GtkProgressBarStyle "bar_style") (orientation::GtkProgressBarOrientation "orientation") (blocks::guint "blocks") (in_block::gint "in_block") (activity_pos::gint "activity_pos") (activity_step::guint "activity_step") (activity_blocks::guint "activity_blocks") (activity_dir::guint "activity_dir")) "struct _GtkProgressBar")
    (type GtkProgressBar s-_GtkProgressBar "GtkProgressBar")
    (type s-_GtkProgressBarClass (struct (parent_class::GtkProgressClass "parent_class")) "struct _GtkProgressBarClass")
    (type GtkProgressBarClass s-_GtkProgressBarClass "GtkProgressBarClass")
    (type woot__e1131 int "long")
    (macro GTK_PROGRESS_CONTINUOUS::int "GTK_PROGRESS_CONTINUOUS")
    (macro GTK_PROGRESS_DISCRETE::int "GTK_PROGRESS_DISCRETE")
    (type GtkProgressBarStyle woot__e1131 "GtkProgressBarStyle")
    (type woot__e1132 int "long")
    (macro GTK_PROGRESS_LEFT_TO_RIGHT::int "GTK_PROGRESS_LEFT_TO_RIGHT")
    (macro GTK_PROGRESS_RIGHT_TO_LEFT::int "GTK_PROGRESS_RIGHT_TO_LEFT")
    (macro GTK_PROGRESS_BOTTOM_TO_TOP::int "GTK_PROGRESS_BOTTOM_TO_TOP")
    (macro GTK_PROGRESS_TOP_TO_BOTTOM::int "GTK_PROGRESS_TOP_TO_BOTTOM")
    (type GtkProgressBarOrientation woot__e1132 "GtkProgressBarOrientation")
    (type s-_GtkRadioButton (struct (check_button::GtkCheckButton "check_button") (group::GSList* "group")) "struct _GtkRadioButton")
    (type GtkRadioButton s-_GtkRadioButton "GtkRadioButton")
    (type s-_GtkRadioButtonClass (struct (parent_class::GtkCheckButtonClass "parent_class")) "struct _GtkRadioButtonClass")
    (type GtkRadioButtonClass s-_GtkRadioButtonClass "GtkRadioButtonClass")
    (type s-_GtkRadioMenuItem (struct (check_menu_item::GtkCheckMenuItem "check_menu_item") (group::GSList* "group")) "struct _GtkRadioMenuItem")
    (type GtkRadioMenuItem s-_GtkRadioMenuItem "GtkRadioMenuItem")
    (type s-_GtkRadioMenuItemClass (struct (parent_class::GtkCheckMenuItemClass "parent_class")) "struct _GtkRadioMenuItemClass")
    (type GtkRadioMenuItemClass s-_GtkRadioMenuItemClass "GtkRadioMenuItemClass")
    (type woot__e1133 int "long")
    (macro GTK_RC_FG::int "GTK_RC_FG")
    (macro GTK_RC_BG::int "GTK_RC_BG")
    (macro GTK_RC_TEXT::int "GTK_RC_TEXT")
    (macro GTK_RC_BASE::int "GTK_RC_BASE")
    (type GtkRcFlags woot__e1133 "GtkRcFlags")
    (type gchar*-array-5 (array gchar*) "gchar *$[ 5 ]")
    (type GtkRcFlags-array-5 (array GtkRcFlags) "GtkRcFlags $[ 5 ]")
    (type GdkBitmap** (pointer GdkBitmap*) "GdkBitmap **")
    (type GdkWindow*,GdkColormap*,GdkBitmap**,GdkColor*,gchar*->GdkPixmap* "GdkPixmap *($(GdkWindow *,GdkColormap *,GdkBitmap **,GdkColor *,gchar *))")
    (type *GdkWindow*,GdkColormap*,GdkBitmap**,GdkColor*,gchar*->GdkPixmap* (function GdkPixmap* (GdkWindow* GdkColormap* GdkBitmap** GdkColor* gchar*)) "GdkPixmap *((*$)(GdkWindow *,GdkColormap *,GdkBitmap **,GdkColor *,gchar *))")
    (type GtkImageLoader *GdkWindow*,GdkColormap*,GdkBitmap**,GdkColor*,gchar*->GdkPixmap* "GtkImageLoader")
    (type woot__e1134 int "long")
    (macro GTK_RC_TOKEN_INVALID::int "GTK_RC_TOKEN_INVALID")
    (macro GTK_RC_TOKEN_INCLUDE::int "GTK_RC_TOKEN_INCLUDE")
    (macro GTK_RC_TOKEN_NORMAL::int "GTK_RC_TOKEN_NORMAL")
    (macro GTK_RC_TOKEN_ACTIVE::int "GTK_RC_TOKEN_ACTIVE")
    (macro GTK_RC_TOKEN_PRELIGHT::int "GTK_RC_TOKEN_PRELIGHT")
    (macro GTK_RC_TOKEN_SELECTED::int "GTK_RC_TOKEN_SELECTED")
    (macro GTK_RC_TOKEN_INSENSITIVE::int "GTK_RC_TOKEN_INSENSITIVE")
    (macro GTK_RC_TOKEN_FG::int "GTK_RC_TOKEN_FG")
    (macro GTK_RC_TOKEN_BG::int "GTK_RC_TOKEN_BG")
    (macro GTK_RC_TOKEN_BASE::int "GTK_RC_TOKEN_BASE")
    (macro GTK_RC_TOKEN_TEXT::int "GTK_RC_TOKEN_TEXT")
    (macro GTK_RC_TOKEN_FONT::int "GTK_RC_TOKEN_FONT")
    (macro GTK_RC_TOKEN_FONTSET::int "GTK_RC_TOKEN_FONTSET")
    (macro GTK_RC_TOKEN_BG_PIXMAP::int "GTK_RC_TOKEN_BG_PIXMAP")
    (macro GTK_RC_TOKEN_PIXMAP_PATH::int "GTK_RC_TOKEN_PIXMAP_PATH")
    (macro GTK_RC_TOKEN_STYLE::int "GTK_RC_TOKEN_STYLE")
    (macro GTK_RC_TOKEN_BINDING::int "GTK_RC_TOKEN_BINDING")
    (macro GTK_RC_TOKEN_BIND::int "GTK_RC_TOKEN_BIND")
    (macro GTK_RC_TOKEN_WIDGET::int "GTK_RC_TOKEN_WIDGET")
    (macro GTK_RC_TOKEN_WIDGET_CLASS::int "GTK_RC_TOKEN_WIDGET_CLASS")
    (macro GTK_RC_TOKEN_CLASS::int "GTK_RC_TOKEN_CLASS")
    (macro GTK_RC_TOKEN_LOWEST::int "GTK_RC_TOKEN_LOWEST")
    (macro GTK_RC_TOKEN_GTK::int "GTK_RC_TOKEN_GTK")
    (macro GTK_RC_TOKEN_APPLICATION::int "GTK_RC_TOKEN_APPLICATION")
    (macro GTK_RC_TOKEN_RC::int "GTK_RC_TOKEN_RC")
    (macro GTK_RC_TOKEN_HIGHEST::int "GTK_RC_TOKEN_HIGHEST")
    (macro GTK_RC_TOKEN_ENGINE::int "GTK_RC_TOKEN_ENGINE")
    (macro GTK_RC_TOKEN_MODULE_PATH::int "GTK_RC_TOKEN_MODULE_PATH")
    (macro GTK_RC_TOKEN_LAST::int "GTK_RC_TOKEN_LAST")
    (type GtkRcTokenType woot__e1134 "GtkRcTokenType")
    (type s-_GtkViewport (struct (bin::GtkBin "bin") (shadow_type::GtkShadowType "shadow_type") (view_window::GdkWindow* "view_window") (bin_window::GdkWindow* "bin_window") (hadjustment::GtkAdjustment* "hadjustment") (vadjustment::GtkAdjustment* "vadjustment")) "struct _GtkViewport")
    (type GtkViewport s-_GtkViewport "GtkViewport")
    (type s-_GtkViewportClass (struct (parent_class::GtkBinClass "parent_class") (set_scroll_adjustments::*GtkViewport*,GtkAdjustment*,GtkAdjustment*->void "set_scroll_adjustments")) "struct _GtkViewportClass")
    (type GtkViewportClass s-_GtkViewportClass "GtkViewportClass")
    (type GtkViewport*,GtkAdjustment*,GtkAdjustment*->void "void ($(GtkViewport *,GtkAdjustment *,GtkAdjustment *))")
    (type *GtkViewport*,GtkAdjustment*,GtkAdjustment*->void (function void (GtkViewport* GtkAdjustment* GtkAdjustment*)) "void ((*$)(GtkViewport *,GtkAdjustment *,GtkAdjustment *))")
    (type s-_GtkScrolledWindow (struct (container::GtkBin "container") (hscrollbar::GtkWidget* "hscrollbar") (vscrollbar::GtkWidget* "vscrollbar") (hscrollbar_policy::guint "hscrollbar_policy") (vscrollbar_policy::guint "vscrollbar_policy") (hscrollbar_visible::guint "hscrollbar_visible") (vscrollbar_visible::guint "vscrollbar_visible") (window_placement::guint "window_placement")) "struct _GtkScrolledWindow")
    (type GtkScrolledWindow s-_GtkScrolledWindow "GtkScrolledWindow")
    (type s-_GtkScrolledWindowClass (struct (parent_class::GtkBinClass "parent_class") (scrollbar_spacing::gint "scrollbar_spacing")) "struct _GtkScrolledWindowClass")
    (type GtkScrolledWindowClass s-_GtkScrolledWindowClass "GtkScrolledWindowClass")
    (type s-_GtkSocket (struct (container::GtkContainer "container") (request_width::guint16 "request_width") (request_height::guint16 "request_height") (current_width::guint16 "current_width") (current_height::guint16 "current_height") (plug_window::GdkWindow* "plug_window") (same_app::guint "same_app") (focus_in::guint "focus_in") (have_size::guint "have_size") (need_map::guint "need_map")) "struct _GtkSocket")
    (type GtkSocket s-_GtkSocket "GtkSocket")
    (type s-_GtkSocketClass (struct (parent_class::GtkContainerClass "parent_class")) "struct _GtkSocketClass")
    (type GtkSocketClass s-_GtkSocketClass "GtkSocketClass")
    (type woot__e1135 int "long")
    (macro GTK_UPDATE_ALWAYS::int "GTK_UPDATE_ALWAYS")
    (macro GTK_UPDATE_IF_VALID::int "GTK_UPDATE_IF_VALID")
    (type GtkSpinButtonUpdatePolicy woot__e1135 "GtkSpinButtonUpdatePolicy")
    (type woot__e1136 int "long")
    (macro GTK_SPIN_STEP_FORWARD::int "GTK_SPIN_STEP_FORWARD")
    (macro GTK_SPIN_STEP_BACKWARD::int "GTK_SPIN_STEP_BACKWARD")
    (macro GTK_SPIN_PAGE_FORWARD::int "GTK_SPIN_PAGE_FORWARD")
    (macro GTK_SPIN_PAGE_BACKWARD::int "GTK_SPIN_PAGE_BACKWARD")
    (macro GTK_SPIN_HOME::int "GTK_SPIN_HOME")
    (macro GTK_SPIN_END::int "GTK_SPIN_END")
    (macro GTK_SPIN_USER_DEFINED::int "GTK_SPIN_USER_DEFINED")
    (type GtkSpinType woot__e1136 "GtkSpinType")
    (type s-_GtkSpinButton (struct (entry::GtkEntry "entry") (adjustment::GtkAdjustment* "adjustment") (panel::GdkWindow* "panel") (shadow_type::GtkShadowType "shadow_type") (timer::guint32 "timer") (ev_time::guint32 "ev_time") (climb_rate::gfloat "climb_rate") (timer_step::gfloat "timer_step") (update_policy::GtkSpinButtonUpdatePolicy "update_policy") (in_child::guint "in_child") (click_child::guint "click_child") (button::guint "button") (need_timer::guint "need_timer") (timer_calls::guint "timer_calls") (digits::guint "digits") (numeric::guint "numeric") (wrap::guint "wrap") (snap_to_ticks::guint "snap_to_ticks")) "struct _GtkSpinButton")
    (type GtkSpinButton s-_GtkSpinButton "GtkSpinButton")
    (type s-_GtkSpinButtonClass (struct (parent_class::GtkEntryClass "parent_class")) "struct _GtkSpinButtonClass")
    (type GtkSpinButtonClass s-_GtkSpinButtonClass "GtkSpinButtonClass")
    (type s-_GtkStatusbar (struct (parent_widget::GtkHBox "parent_widget") (frame::GtkWidget* "frame") (label::GtkWidget* "label") (messages::GSList* "messages") (keys::GSList* "keys") (seq_context_id::guint "seq_context_id") (seq_message_id::guint "seq_message_id")) "struct _GtkStatusbar")
    (type GtkStatusbar s-_GtkStatusbar "GtkStatusbar")
    (type s-_GtkStatusbarClass (struct (parent_class::GtkHBoxClass "parent_class") (messages_mem_chunk::GMemChunk* "messages_mem_chunk") (text_pushed::*GtkStatusbar*,guint,gchar*->void "text_pushed") (text_popped::*GtkStatusbar*,guint,gchar*->void "text_popped")) "struct _GtkStatusbarClass")
    (type GtkStatusbarClass s-_GtkStatusbarClass "GtkStatusbarClass")
    (type s-_GtkStatusbarMsg (struct (text::gchar* "text") (context_id::guint "context_id") (message_id::guint "message_id")) "struct _GtkStatusbarMsg")
    (type GtkStatusbarMsg s-_GtkStatusbarMsg "GtkStatusbarMsg")
    (type GtkStatusbar*,guint,gchar*->void "void ($(GtkStatusbar *,guint,gchar *))")
    (type *GtkStatusbar*,guint,gchar*->void (function void (GtkStatusbar* guint gchar*)) "void ((*$)(GtkStatusbar *,guint,gchar *))")
    (type s-_GtkTearoffMenuItem (struct (menu_item::GtkMenuItem "menu_item") (torn_off::guint "torn_off")) "struct _GtkTearoffMenuItem")
    (type GtkTearoffMenuItem s-_GtkTearoffMenuItem "GtkTearoffMenuItem")
    (type s-_GtkTearoffMenuItemClass (struct (parent_class::GtkMenuItemClass "parent_class")) "struct _GtkTearoffMenuItemClass")
    (type GtkTearoffMenuItemClass s-_GtkTearoffMenuItemClass "GtkTearoffMenuItemClass")
    (type s-_GtkTextFont (struct) "struct _GtkTextFont")
    (type GtkTextFont s-_GtkTextFont "GtkTextFont")
    (type s-_GtkPropertyMark (struct (property::GList* "property") (offset::guint "offset") (index::guint "index")) "struct _GtkPropertyMark")
    (type GtkPropertyMark s-_GtkPropertyMark "GtkPropertyMark")
    (type s-_GtkText (struct (editable::GtkEditable "editable") (text_area::GdkWindow* "text_area") (hadj::GtkAdjustment* "hadj") (vadj::GtkAdjustment* "vadj") (gc::GdkGC* "gc") (line_wrap_bitmap::GdkPixmap* "line_wrap_bitmap") (line_arrow_bitmap::GdkPixmap* "line_arrow_bitmap") (text::s-woot__s1016 "text") (text_len::guint "text_len") (gap_position::guint "gap_position") (gap_size::guint "gap_size") (text_end::guint "text_end") (line_start_cache::GList* "line_start_cache") (first_line_start_index::guint "first_line_start_index") (first_cut_pixels::guint "first_cut_pixels") (first_onscreen_hor_pixel::guint "first_onscreen_hor_pixel") (first_onscreen_ver_pixel::guint "first_onscreen_ver_pixel") (line_wrap::guint "line_wrap") (word_wrap::guint "word_wrap") (use_wchar::guint "use_wchar") (freeze_count::guint "freeze_count") (text_properties::GList* "text_properties") (text_properties_end::GList* "text_properties_end") (point::GtkPropertyMark "point") (scratch_buffer::s-woot__s1017 "scratch_buffer") (scratch_buffer_len::guint "scratch_buffer_len") (last_ver_value::gint "last_ver_value") (cursor_pos_x::gint "cursor_pos_x") (cursor_pos_y::gint "cursor_pos_y") (cursor_mark::GtkPropertyMark "cursor_mark") (cursor_char::GdkWChar "cursor_char") (cursor_char_offset::gchar "cursor_char_offset") (cursor_virtual_x::gint "cursor_virtual_x") (cursor_drawn_level::gint "cursor_drawn_level") (current_line::GList* "current_line") (tab_stops::GList* "tab_stops") (default_tab_width::gint "default_tab_width") (current_font::GtkTextFont* "current_font") (timer::gint "timer") (button::guint "button") (bg_gc::GdkGC* "bg_gc")) "struct _GtkText")
    (type GtkText s-_GtkText "GtkText")
    (type s-_GtkTextClass (struct (parent_class::GtkEditableClass "parent_class") (set_scroll_adjustments::*GtkText*,GtkAdjustment*,GtkAdjustment*->void "set_scroll_adjustments")) "struct _GtkTextClass")
    (type GtkTextClass s-_GtkTextClass "GtkTextClass")
    (type s-woot__s1016 (union (wc::GdkWChar* "wc") (ch::guchar* "ch")) "void")
    (type s-woot__s1017 (union (wc::GdkWChar* "wc") (ch::guchar* "ch")) "void")
    (type GtkText*,GtkAdjustment*,GtkAdjustment*->void "void ($(GtkText *,GtkAdjustment *,GtkAdjustment *))")
    (type *GtkText*,GtkAdjustment*,GtkAdjustment*->void (function void (GtkText* GtkAdjustment* GtkAdjustment*)) "void ((*$)(GtkText *,GtkAdjustment *,GtkAdjustment *))")
    (type GScanner*,GtkRcStyle*->guint "guint ($(GScanner *,GtkRcStyle *))")
    (type *GScanner*,GtkRcStyle*->guint (function guint (GScanner* GtkRcStyle*)) "guint ((*$)(GScanner *,GtkRcStyle *))")
    (type GtkRcStyle*,GtkRcStyle*->void "void ($(GtkRcStyle *,GtkRcStyle *))")
    (type *GtkRcStyle*,GtkRcStyle*->void (function void (GtkRcStyle* GtkRcStyle*)) "void ((*$)(GtkRcStyle *,GtkRcStyle *))")
    (type GtkStyle*,GtkRcStyle*->void "void ($(GtkStyle *,GtkRcStyle *))")
    (type *GtkStyle*,GtkRcStyle*->void (function void (GtkStyle* GtkRcStyle*)) "void ((*$)(GtkStyle *,GtkRcStyle *))")
    (type GtkStyle*,GtkStyle*->void "void ($(GtkStyle *,GtkStyle *))")
    (type *GtkStyle*,GtkStyle*->void (function void (GtkStyle* GtkStyle*)) "void ((*$)(GtkStyle *,GtkStyle *))")
    (type GtkStyle*->void "void ($(GtkStyle *))")
    (type *GtkStyle*->void (function void (GtkStyle*)) "void ((*$)(GtkStyle *))")
    (type GtkRcStyle*->void "void ($(GtkRcStyle *))")
    (type *GtkRcStyle*->void (function void (GtkRcStyle*)) "void ((*$)(GtkRcStyle *))")
    (type GtkStyle*,GdkWindow*,GtkStateType->void "void ($(GtkStyle *,GdkWindow *,GtkStateType))")
    (type *GtkStyle*,GdkWindow*,GtkStateType->void (function void (GtkStyle* GdkWindow* GtkStateType)) "void ((*$)(GtkStyle *,GdkWindow *,GtkStateType))")
    (type s-_GtkTipsQuery (struct (label::GtkLabel "label") (emit_always::guint "emit_always") (in_query::guint "in_query") (label_inactive::gchar* "label_inactive") (label_no_tip::gchar* "label_no_tip") (caller::GtkWidget* "caller") (last_crossed::GtkWidget* "last_crossed") (query_cursor::GdkCursor* "query_cursor")) "struct _GtkTipsQuery")
    (type GtkTipsQuery s-_GtkTipsQuery "GtkTipsQuery")
    (type s-_GtkTipsQueryClass (struct (parent_class::GtkLabelClass "parent_class") (start_query::*GtkTipsQuery*->void "start_query") (stop_query::*GtkTipsQuery*->void "stop_query") (widget_entered::*GtkTipsQuery*,GtkWidget*,gchar*,gchar*->void "widget_entered") (widget_selected::*GtkTipsQuery*,GtkWidget*,gchar*,gchar*,GdkEventButton*->gint "widget_selected")) "struct _GtkTipsQueryClass")
    (type GtkTipsQueryClass s-_GtkTipsQueryClass "GtkTipsQueryClass")
    (type GtkTipsQuery*->void "void ($(GtkTipsQuery *))")
    (type *GtkTipsQuery*->void (function void (GtkTipsQuery*)) "void ((*$)(GtkTipsQuery *))")
    (type GtkTipsQuery*,GtkWidget*,gchar*,gchar*->void "void ($(GtkTipsQuery *,GtkWidget *,gchar *,gchar *))")
    (type *GtkTipsQuery*,GtkWidget*,gchar*,gchar*->void (function void (GtkTipsQuery* GtkWidget* gchar* gchar*)) "void ((*$)(GtkTipsQuery *,GtkWidget *,gchar *,gchar *))")
    (type GtkTipsQuery*,GtkWidget*,gchar*,gchar*,GdkEventButton*->gint "gint ($(GtkTipsQuery *,GtkWidget *,gchar *,gchar *,GdkEventButton *))")
    (type *GtkTipsQuery*,GtkWidget*,gchar*,gchar*,GdkEventButton*->gint (function gint (GtkTipsQuery* GtkWidget* gchar* gchar* GdkEventButton*)) "gint ((*$)(GtkTipsQuery *,GtkWidget *,gchar *,gchar *,GdkEventButton *))")
    (type s-_GtkTooltips (struct (data::GtkData "data") (tip_window::GtkWidget* "tip_window") (active_tips_data::GtkTooltipsData* "active_tips_data") (tips_data_list::GList* "tips_data_list") (gc::GdkGC* "gc") (foreground::GdkColor* "foreground") (background::GdkColor* "background") (delay::guint "delay") (enabled::guint "enabled") (timer_tag::gint "timer_tag")) "struct _GtkTooltips")
    (type GtkTooltips s-_GtkTooltips "GtkTooltips")
    (type s-_GtkTooltipsClass (struct (parent_class::GtkDataClass "parent_class")) "struct _GtkTooltipsClass")
    (type GtkTooltipsClass s-_GtkTooltipsClass "GtkTooltipsClass")
    (type s-_GtkTooltipsData (struct (tooltips::GtkTooltips* "tooltips") (widget::GtkWidget* "widget") (tip_text::gchar* "tip_text") (tip_private::gchar* "tip_private") (font::GdkFont* "font") (width::gint "width") (row::GList* "row")) "struct _GtkTooltipsData")
    (type GtkTooltipsData s-_GtkTooltipsData "GtkTooltipsData")
    (type woot__e1137 int "long")
    (macro GTK_TOOLBAR_CHILD_SPACE::int "GTK_TOOLBAR_CHILD_SPACE")
    (macro GTK_TOOLBAR_CHILD_BUTTON::int "GTK_TOOLBAR_CHILD_BUTTON")
    (macro GTK_TOOLBAR_CHILD_TOGGLEBUTTON::int "GTK_TOOLBAR_CHILD_TOGGLEBUTTON")
    (macro GTK_TOOLBAR_CHILD_RADIOBUTTON::int "GTK_TOOLBAR_CHILD_RADIOBUTTON")
    (macro GTK_TOOLBAR_CHILD_WIDGET::int "GTK_TOOLBAR_CHILD_WIDGET")
    (type GtkToolbarChildType woot__e1137 "GtkToolbarChildType")
    (type woot__e1138 int "long")
    (macro GTK_TOOLBAR_SPACE_EMPTY::int "GTK_TOOLBAR_SPACE_EMPTY")
    (macro GTK_TOOLBAR_SPACE_LINE::int "GTK_TOOLBAR_SPACE_LINE")
    (type GtkToolbarSpaceStyle woot__e1138 "GtkToolbarSpaceStyle")
    (type s-_GtkToolbarChild (struct (type::GtkToolbarChildType "type") (widget::GtkWidget* "widget") (icon::GtkWidget* "icon") (label::GtkWidget* "label")) "struct _GtkToolbarChild")
    (type GtkToolbarChild s-_GtkToolbarChild "GtkToolbarChild")
    (type s-_GtkToolbar (struct (container::GtkContainer "container") (num_children::gint "num_children") (children::GList* "children") (orientation::GtkOrientation "orientation") (style::GtkToolbarStyle "style") (space_size::gint "space_size") (space_style::GtkToolbarSpaceStyle "space_style") (tooltips::GtkTooltips* "tooltips") (button_maxw::gint "button_maxw") (button_maxh::gint "button_maxh") (relief::GtkReliefStyle "relief")) "struct _GtkToolbar")
    (type GtkToolbar s-_GtkToolbar "GtkToolbar")
    (type s-_GtkToolbarClass (struct (parent_class::GtkContainerClass "parent_class") (orientation_changed::*GtkToolbar*,GtkOrientation->void "orientation_changed") (style_changed::*GtkToolbar*,GtkToolbarStyle->void "style_changed")) "struct _GtkToolbarClass")
    (type GtkToolbarClass s-_GtkToolbarClass "GtkToolbarClass")
    (type GtkToolbar*,GtkOrientation->void "void ($(GtkToolbar *,GtkOrientation))")
    (type *GtkToolbar*,GtkOrientation->void (function void (GtkToolbar* GtkOrientation)) "void ((*$)(GtkToolbar *,GtkOrientation))")
    (type GtkToolbar*,GtkToolbarStyle->void "void ($(GtkToolbar *,GtkToolbarStyle))")
    (type *GtkToolbar*,GtkToolbarStyle->void (function void (GtkToolbar* GtkToolbarStyle)) "void ((*$)(GtkToolbar *,GtkToolbarStyle))")
    (type woot__e1139 int "long")
    (macro GTK_TREE_VIEW_LINE::int "GTK_TREE_VIEW_LINE")
    (macro GTK_TREE_VIEW_ITEM::int "GTK_TREE_VIEW_ITEM")
    (type GtkTreeViewMode woot__e1139 "GtkTreeViewMode")
    (type s-_GtkTree (struct (container::GtkContainer "container") (children::GList* "children") (root_tree::GtkTree* "root_tree") (tree_owner::GtkWidget* "tree_owner") (selection::GList* "selection") (level::guint "level") (indent_value::guint "indent_value") (current_indent::guint "current_indent") (selection_mode::guint "selection_mode") (view_mode::guint "view_mode") (view_line::guint "view_line")) "struct _GtkTree")
    (type GtkTree s-_GtkTree "GtkTree")
    (type s-_GtkTreeClass (struct (parent_class::GtkContainerClass "parent_class") (selection_changed::*GtkTree*->void "selection_changed") (select_child::*GtkTree*,GtkWidget*->void "select_child") (unselect_child::*GtkTree*,GtkWidget*->void "unselect_child")) "struct _GtkTreeClass")
    (type GtkTreeClass s-_GtkTreeClass "GtkTreeClass")
    (type GtkTree*->void "void ($(GtkTree *))")
    (type *GtkTree*->void (function void (GtkTree*)) "void ((*$)(GtkTree *))")
    (type GtkTree*,GtkWidget*->void "void ($(GtkTree *,GtkWidget *))")
    (type *GtkTree*,GtkWidget*->void (function void (GtkTree* GtkWidget*)) "void ((*$)(GtkTree *,GtkWidget *))")
    (type s-_GtkTreeItem (struct (item::GtkItem "item") (subtree::GtkWidget* "subtree") (pixmaps_box::GtkWidget* "pixmaps_box") (plus_pix_widget::GtkWidget* "plus_pix_widget") (minus_pix_widget::GtkWidget* "minus_pix_widget") (pixmaps::GList* "pixmaps") (expanded::guint "expanded")) "struct _GtkTreeItem")
    (type GtkTreeItem s-_GtkTreeItem "GtkTreeItem")
    (type s-_GtkTreeItemClass (struct (parent_class::GtkItemClass "parent_class") (expand::*GtkTreeItem*->void "expand") (collapse::*GtkTreeItem*->void "collapse")) "struct _GtkTreeItemClass")
    (type GtkTreeItemClass s-_GtkTreeItemClass "GtkTreeItemClass")
    (type GtkTreeItem*->void "void ($(GtkTreeItem *))")
    (type *GtkTreeItem*->void (function void (GtkTreeItem*)) "void ((*$)(GtkTreeItem *))")
    (type s-_GtkVButtonBox (struct (button_box::GtkButtonBox "button_box")) "struct _GtkVButtonBox")
    (type GtkVButtonBox s-_GtkVButtonBox "GtkVButtonBox")
    (type s-_GtkVButtonBoxClass (struct (parent_class::GtkButtonBoxClass "parent_class")) "struct _GtkVButtonBoxClass")
    (type GtkVButtonBoxClass s-_GtkVButtonBoxClass "GtkVButtonBoxClass")
    (type s-_GtkVPaned (struct (paned::GtkPaned "paned")) "struct _GtkVPaned")
    (type GtkVPaned s-_GtkVPaned "GtkVPaned")
    (type s-_GtkVPanedClass (struct (parent_class::GtkPanedClass "parent_class")) "struct _GtkVPanedClass")
    (type GtkVPanedClass s-_GtkVPanedClass "GtkVPanedClass")
    (type s-_GtkVRuler (struct (ruler::GtkRuler "ruler")) "struct _GtkVRuler")
    (type GtkVRuler s-_GtkVRuler "GtkVRuler")
    (type s-_GtkVRulerClass (struct (parent_class::GtkRulerClass "parent_class")) "struct _GtkVRulerClass")
    (type GtkVRulerClass s-_GtkVRulerClass "GtkVRulerClass")
    (type s-_GtkVScale (struct (scale::GtkScale "scale")) "struct _GtkVScale")
    (type GtkVScale s-_GtkVScale "GtkVScale")
    (type s-_GtkVScaleClass (struct (parent_class::GtkScaleClass "parent_class")) "struct _GtkVScaleClass")
    (type GtkVScaleClass s-_GtkVScaleClass "GtkVScaleClass")
    (type s-_GtkVSeparator (struct (separator::GtkSeparator "separator")) "struct _GtkVSeparator")
    (type GtkVSeparator s-_GtkVSeparator "GtkVSeparator")
    (type s-_GtkVSeparatorClass (struct (parent_class::GtkSeparatorClass "parent_class")) "struct _GtkVSeparatorClass")
    (type GtkVSeparatorClass s-_GtkVSeparatorClass "GtkVSeparatorClass")
    (type GAllocator*->void "void ($(GAllocator *))")
    (type void->GList* "GList *($(void))")
    (type GList*->void "void ($(GList *))")
    (type GList*,gpointer->GList* "GList *($(GList *,gpointer))")
    (type GList*,gpointer,gint->GList* "GList *($(GList *,gpointer,gint))")
    (type GList*,gpointer,GCompareFunc->GList* "GList *($(GList *,gpointer,GCompareFunc))")
    (type GList*,GList*->GList* "GList *($(GList *,GList *))")
    (type GList*->GList* "GList *($(GList *))")
    (type GList*,guint->GList* "GList *($(GList *,guint))")
    (type GList*,GList*->gint "gint ($(GList *,GList *))")
    (type GList*,gpointer->gint "gint ($(GList *,gpointer))")
    (type GList*->guint "guint ($(GList *))")
    (type GList*,GFunc,gpointer->void "void ($(GList *,GFunc,gpointer))")
    (type GList*,GCompareFunc->GList* "GList *($(GList *,GCompareFunc))")
    (type GList*,guint->gpointer "gpointer ($(GList *,guint))")
    (type void->GSList* "GSList *($(void))")
    (type GSList*->void "void ($(GSList *))")
    (type GSList*,gpointer->GSList* "GSList *($(GSList *,gpointer))")
    (type GSList*,gpointer,gint->GSList* "GSList *($(GSList *,gpointer,gint))")
    (type GSList*,gpointer,GCompareFunc->GSList* "GSList *($(GSList *,gpointer,GCompareFunc))")
    (type GSList*,GSList*->GSList* "GSList *($(GSList *,GSList *))")
    (type GSList*->GSList* "GSList *($(GSList *))")
    (type GSList*,guint->GSList* "GSList *($(GSList *,guint))")
    (type GSList*,GSList*->gint "gint ($(GSList *,GSList *))")
    (type GSList*,gpointer->gint "gint ($(GSList *,gpointer))")
    (type GSList*->guint "guint ($(GSList *))")
    (type GSList*,GFunc,gpointer->void "void ($(GSList *,GFunc,gpointer))")
    (type GSList*,GCompareFunc->GSList* "GSList *($(GSList *,GCompareFunc))")
    (type GSList*,guint->gpointer "gpointer ($(GSList *,guint))")
    (type GHashFunc,GCompareFunc->GHashTable* "GHashTable *($(GHashFunc,GCompareFunc))")
    (type GHashTable*->void "void ($(GHashTable *))")
    (type GHashTable*,gpointer,gpointer->void "void ($(GHashTable *,gpointer,gpointer))")
    (type GHashTable*,gconstpointer->void "void ($(GHashTable *,gconstpointer))")
    (type GHashTable*,gconstpointer->gpointer "gpointer ($(GHashTable *,gconstpointer))")
    (type GHashTable*,gconstpointer,gpointer*,gpointer*->gboolean "gboolean ($(GHashTable *,gconstpointer,gpointer *,gpointer *))")
    (type GHashTable*,GHFunc,gpointer->void "void ($(GHashTable *,GHFunc,gpointer))")
    (type GHashTable*,GHRFunc,gpointer->guint "guint ($(GHashTable *,GHRFunc,gpointer))")
    (type GHashTable*->guint "guint ($(GHashTable *))")
    (type GCacheNewFunc,GCacheDestroyFunc,GCacheDupFunc,GCacheDestroyFunc,GHashFunc,GHashFunc,GCompareFunc->GCache* "GCache *($(GCacheNewFunc,GCacheDestroyFunc,GCacheDupFunc,GCacheDestroyFunc,GHashFunc,GHashFunc,GCompareFunc))")
    (type GCache*->void "void ($(GCache *))")
    (type GCache*,gpointer->gpointer "gpointer ($(GCache *,gpointer))")
    (type GCache*,gpointer->void "void ($(GCache *,gpointer))")
    (type GCache*,GHFunc,gpointer->void "void ($(GCache *,GHFunc,gpointer))")
    (type GCompareFunc->GTree* "GTree *($(GCompareFunc))")
    (type GTree*->void "void ($(GTree *))")
    (type GTree*,gpointer,gpointer->void "void ($(GTree *,gpointer,gpointer))")
    (type GTree*,gpointer->void "void ($(GTree *,gpointer))")
    (type GTree*,gpointer->gpointer "gpointer ($(GTree *,gpointer))")
    (type GTree*,GTraverseFunc,GTraverseType,gpointer->void "void ($(GTree *,GTraverseFunc,GTraverseType,gpointer))")
    (type GTree*,GSearchFunc,gpointer->gpointer "gpointer ($(GTree *,GSearchFunc,gpointer))")
    (type GTree*->gint "gint ($(GTree *))")
    (type gpointer->GNode* "GNode *($(gpointer))")
    (type GNode*->void "void ($(GNode *))")
    (type GNode*,gint,GNode*->GNode* "GNode *($(GNode *,gint,GNode *))")
    (type GNode*,GNode*,GNode*->GNode* "GNode *($(GNode *,GNode *,GNode *))")
    (type GNode*,GNode*->GNode* "GNode *($(GNode *,GNode *))")
    (type GNode*,GTraverseFlags->guint "guint ($(GNode *,GTraverseFlags))")
    (type GNode*->GNode* "GNode *($(GNode *))")
    (type GNode*,GNode*->gboolean "gboolean ($(GNode *,GNode *))")
    (type GNode*->guint "guint ($(GNode *))")
    (type GNode*,GTraverseType,GTraverseFlags,gpointer->GNode* "GNode *($(GNode *,GTraverseType,GTraverseFlags,gpointer))")
    (type GNode*,GTraverseType,GTraverseFlags,gint,GNodeTraverseFunc,gpointer->void "void ($(GNode *,GTraverseType,GTraverseFlags,gint,GNodeTraverseFunc,gpointer))")
    (type GNode*,GTraverseFlags,GNodeForeachFunc,gpointer->void "void ($(GNode *,GTraverseFlags,GNodeForeachFunc,gpointer))")
    (type GNode*,guint->GNode* "GNode *($(GNode *,guint))")
    (type GNode*,GTraverseFlags,gpointer->GNode* "GNode *($(GNode *,GTraverseFlags,gpointer))")
    (type GNode*,GNode*->gint "gint ($(GNode *,GNode *))")
    (type GNode*,gpointer->gint "gint ($(GNode *,gpointer))")
    (type GHookList*,guint->void "void ($(GHookList *,guint))")
    (type GHookList*->void "void ($(GHookList *))")
    (type GHookList*->GHook* "GHook *($(GHookList *))")
    (type GHookList*,guint->gboolean "gboolean ($(GHookList *,guint))")
    (type GHookList*,GHook*,GHook*->void "void ($(GHookList *,GHook *,GHook *))")
    (type GHookList*,GHook*,GHookCompareFunc->void "void ($(GHookList *,GHook *,GHookCompareFunc))")
    (type GHookList*,guint->GHook* "GHook *($(GHookList *,guint))")
    (type GHookList*,gboolean,GHookFindFunc,gpointer->GHook* "GHook *($(GHookList *,gboolean,GHookFindFunc,gpointer))")
    (type GHookList*,gboolean,gpointer->GHook* "GHook *($(GHookList *,gboolean,gpointer))")
    (type GHookList*,gboolean,gpointer,gpointer->GHook* "GHook *($(GHookList *,gboolean,gpointer,gpointer))")
    (type GHookList*,gboolean->GHook* "GHook *($(GHookList *,gboolean))")
    (type GHookList*,GHook*,gboolean->GHook* "GHook *($(GHookList *,GHook *,gboolean))")
    (type GHookList*,gboolean->void "void ($(GHookList *,gboolean))")
    (type GHookList*,gboolean,GHookMarshaller,gpointer->void "void ($(GHookList *,gboolean,GHookMarshaller,gpointer))")
    (type GHookList*,gboolean,GHookCheckMarshaller,gpointer->void "void ($(GHookList *,gboolean,GHookCheckMarshaller,gpointer))")
    (type gchar*,GLogLevelFlags,GLogFunc,gpointer->guint "guint ($(gchar *,GLogLevelFlags,GLogFunc,gpointer))")
    (type gchar*,guint->void "void ($(gchar *,guint))")
    (type gchar*,GLogLevelFlags,gchar*,...gchar*->void "void ($(gchar *,GLogLevelFlags,gchar *,...))")
    (type gchar*,GLogLevelFlags,gchar*,va_list->void "void ($(gchar *,GLogLevelFlags,gchar *,va_list))")
    (type gchar*,GLogLevelFlags->GLogLevelFlags "GLogLevelFlags ($(gchar *,GLogLevelFlags))")
    (type GLogLevelFlags->GLogLevelFlags "GLogLevelFlags ($(GLogLevelFlags))")
    (type gchar*,...gchar*->void "void ($(gchar *,...))")
    (type GPrintFunc->GPrintFunc "GPrintFunc ($(GPrintFunc))")
    (type GErrorFunc->GErrorFunc "GErrorFunc ($(GErrorFunc))")
    (type GWarningFunc->GWarningFunc "GWarningFunc ($(GWarningFunc))")
    (type gulong->gpointer "gpointer ($(gulong))")
    (type gpointer,gulong->gpointer "gpointer ($(gpointer,gulong))")
    (type gchar*,guint->GAllocator* "GAllocator *($(gchar *,guint))")
    (type gchar*,gint,gulong,gint->GMemChunk* "GMemChunk *($(gchar *,gint,gulong,gint))")
    (type GMemChunk*->void "void ($(GMemChunk *))")
    (type GMemChunk*->gpointer "gpointer ($(GMemChunk *))")
    (type GMemChunk*,gpointer->void "void ($(GMemChunk *,gpointer))")
    (type void->GTimer* "GTimer *($(void))")
    (type GTimer*->void "void ($(GTimer *))")
    (type GTimer*,gulong*->gdouble "gdouble ($(GTimer *,gulong *))")
    (type gchar*,gchar*,gchar->gchar* "gchar *($(gchar *,gchar *,gchar))")
    (type gchar*,gchar**->gdouble "gdouble ($(gchar *,gchar **))")
    (type gint->gchar* "gchar *($(gint))")
    (type gchar*,gchar*->gint "gint ($(gchar *,gchar *))")
    (type gchar*,gchar*,guint->gint "gint ($(gchar *,gchar *,guint))")
    (type gchar*->gchar* "gchar *($(gchar *))")
    (type gchar*,...gchar*->gchar* "gchar *($(gchar *,...))")
    (type gchar*,va_list->gchar* "gchar *($(gchar *,va_list))")
    (type gchar*,guint->gchar* "gchar *($(gchar *,guint))")
    (type guint,gchar->gchar* "gchar *($(guint,gchar))")
    (type gconstpointer,guint->gpointer "gpointer ($(gconstpointer,guint))")
    (type gchar*,gchar*,gint->gchar** "gchar **($(gchar *,gchar *,gint))")
    (type gchar*,gchar**->gchar* "gchar *($(gchar *,gchar **))")
    (type gchar**->void "void ($(gchar **))")
    (type gchar*,va_list->guint "guint ($(gchar *,va_list))")
    (type void->gchar* "gchar *($(void))")
    (type gchar*,GDebugKey*,guint->guint "guint ($(gchar *,GDebugKey *,guint))")
    (type gchar*,gulong,gchar*,...gchar*->gint "gint ($(gchar *,gulong,gchar *,...))")
    (type gchar*,gulong,gchar*,va_list->gint "gint ($(gchar *,gulong,gchar *,va_list))")
    (type gchar*->gboolean "gboolean ($(gchar *))")
    (type GVoidFunc->void "void ($(GVoidFunc))")
    (type guint32,gint->gint "gint ($(guint32,gint))")
    (type guint->guint "guint ($(guint))")
    (type gint->GStringChunk* "GStringChunk *($(gint))")
    (type GStringChunk*->void "void ($(GStringChunk *))")
    (type GStringChunk*,gchar*->gchar* "gchar *($(GStringChunk *,gchar *))")
    (type gchar*->GString* "GString *($(gchar *))")
    (type guint->GString* "GString *($(guint))")
    (type GString*,gint->void "void ($(GString *,gint))")
    (type GString*,gchar*->GString* "GString *($(GString *,gchar *))")
    (type GString*,gint->GString* "GString *($(GString *,gint))")
    (type GString*,gchar->GString* "GString *($(GString *,gchar))")
    (type GString*,gint,gchar*->GString* "GString *($(GString *,gint,gchar *))")
    (type GString*,gint,gchar->GString* "GString *($(GString *,gint,gchar))")
    (type GString*,gint,gint->GString* "GString *($(GString *,gint,gint))")
    (type GString*->GString* "GString *($(GString *))")
    (type GString*,gchar*,...gchar*->void "void ($(GString *,gchar *,...))")
    (type gboolean,gboolean,guint->GArray* "GArray *($(gboolean,gboolean,guint))")
    (type GArray*,gboolean->void "void ($(GArray *,gboolean))")
    (type GArray*,gconstpointer,guint->GArray* "GArray *($(GArray *,gconstpointer,guint))")
    (type GArray*,guint,gconstpointer,guint->GArray* "GArray *($(GArray *,guint,gconstpointer,guint))")
    (type GArray*,guint->GArray* "GArray *($(GArray *,guint))")
    (type void->GPtrArray* "GPtrArray *($(void))")
    (type GPtrArray*,gboolean->void "void ($(GPtrArray *,gboolean))")
    (type GPtrArray*,gint->void "void ($(GPtrArray *,gint))")
    (type GPtrArray*,guint->gpointer "gpointer ($(GPtrArray *,guint))")
    (type GPtrArray*,gpointer->gboolean "gboolean ($(GPtrArray *,gpointer))")
    (type GPtrArray*,gpointer->void "void ($(GPtrArray *,gpointer))")
    (type void->GByteArray* "GByteArray *($(void))")
    (type GByteArray*,gboolean->void "void ($(GByteArray *,gboolean))")
    (type GByteArray*,guint8*,guint->GByteArray* "GByteArray *($(GByteArray *,guint8 *,guint))")
    (type GByteArray*,guint->GByteArray* "GByteArray *($(GByteArray *,guint))")
    (type gchar*->GQuark "GQuark ($(gchar *))")
    (type GQuark->gchar* "gchar *($(GQuark))")
    (type GData** (pointer GData*) "GData **")
    (type GData**->void "void ($(GData **))")
    (type GData**,GQuark->gpointer "gpointer ($(GData **,GQuark))")
    (type GData**,GQuark,gpointer,GDestroyNotify->void "void ($(GData **,GQuark,gpointer,GDestroyNotify))")
    (type GData**,GQuark->void "void ($(GData **,GQuark))")
    (type GData**,GDataForeachFunc,gpointer->void "void ($(GData **,GDataForeachFunc,gpointer))")
    (type gconstpointer->void "void ($(gconstpointer))")
    (type gconstpointer,GQuark->gpointer "gpointer ($(gconstpointer,GQuark))")
    (type gconstpointer,GQuark,gpointer,GDestroyNotify->void "void ($(gconstpointer,GQuark,gpointer,GDestroyNotify))")
    (type gconstpointer,GQuark->void "void ($(gconstpointer,GQuark))")
    (type gconstpointer,GDataForeachFunc,gpointer->void "void ($(gconstpointer,GDataForeachFunc,gpointer))")
    (type GScannerConfig*->GScanner* "GScanner *($(GScannerConfig *))")
    (type GScanner*->void "void ($(GScanner *))")
    (type GScanner*,gint->void "void ($(GScanner *,gint))")
    (type GScanner*,gchar*,guint->void "void ($(GScanner *,gchar *,guint))")
    (type GScanner*->GTokenType "GTokenType ($(GScanner *))")
    (type GScanner*->GTokenValue "GTokenValue ($(GScanner *))")
    (type GScanner*->guint "guint ($(GScanner *))")
    (type GScanner*->gboolean "gboolean ($(GScanner *))")
    (type GScanner*,guint->guint "guint ($(GScanner *,guint))")
    (type GScanner*,guint,gchar*,gpointer->void "void ($(GScanner *,guint,gchar *,gpointer))")
    (type GScanner*,guint,gchar*->void "void ($(GScanner *,guint,gchar *))")
    (type GScanner*,guint,gchar*->gpointer "gpointer ($(GScanner *,guint,gchar *))")
    (type GScanner*,guint,GHFunc,gpointer->void "void ($(GScanner *,guint,GHFunc,gpointer))")
    (type GScanner*,gchar*->gpointer "gpointer ($(GScanner *,gchar *))")
    (type GScanner*,GTokenType,gchar*,gchar*,gchar*,gchar*,gint->void "void ($(GScanner *,GTokenType,gchar *,gchar *,gchar *,gchar *,gint))")
    (type GScanner*,gchar*,...gchar*->void "void ($(GScanner *,gchar *,...))")
    (type gchar*->gint "gint ($(gchar *))")
    (type GCompletionFunc->GCompletion* "GCompletion *($(GCompletionFunc))")
    (type GCompletion*,GList*->void "void ($(GCompletion *,GList *))")
    (type GCompletion*->void "void ($(GCompletion *))")
    (type GCompletion*,gchar*,gchar**->GList* "GList *($(GCompletion *,gchar *,gchar **))")
    (type void->GDate* "GDate *($(void))")
    (type GDateDay,GDateMonth,GDateYear->GDate* "GDate *($(GDateDay,GDateMonth,GDateYear))")
    (type guint32->GDate* "GDate *($(guint32))")
    (type GDate*->void "void ($(GDate *))")
    (type GDate*->gboolean "gboolean ($(GDate *))")
    (type GDateDay->gboolean "gboolean ($(GDateDay))")
    (type GDateMonth->gboolean "gboolean ($(GDateMonth))")
    (type GDateYear->gboolean "gboolean ($(GDateYear))")
    (type GDateWeekday->gboolean "gboolean ($(GDateWeekday))")
    (type guint32->gboolean "gboolean ($(guint32))")
    (type GDateDay,GDateMonth,GDateYear->gboolean "gboolean ($(GDateDay,GDateMonth,GDateYear))")
    (type GDate*->GDateWeekday "GDateWeekday ($(GDate *))")
    (type GDate*->GDateMonth "GDateMonth ($(GDate *))")
    (type GDate*->GDateYear "GDateYear ($(GDate *))")
    (type GDate*->GDateDay "GDateDay ($(GDate *))")
    (type GDate*->guint32 "guint32 ($(GDate *))")
    (type GDate*->guint "guint ($(GDate *))")
    (type GDate*,guint->void "void ($(GDate *,guint))")
    (type GDate*,gchar*->void "void ($(GDate *,gchar *))")
    (type GDate*,GTime->void "void ($(GDate *,GTime))")
    (type GDate*,GDateMonth->void "void ($(GDate *,GDateMonth))")
    (type GDate*,GDateDay->void "void ($(GDate *,GDateDay))")
    (type GDate*,GDateYear->void "void ($(GDate *,GDateYear))")
    (type GDate*,GDateDay,GDateMonth,GDateYear->void "void ($(GDate *,GDateDay,GDateMonth,GDateYear))")
    (type GDate*,guint32->void "void ($(GDate *,guint32))")
    (type GDateMonth,GDateYear->guint8 "guint8 ($(GDateMonth,GDateYear))")
    (type GDateYear->guint8 "guint8 ($(GDateYear))")
    (type GDate*,GDate*->gint "gint ($(GDate *,GDate *))")
    (type GDate*,s-tm*->void "void ($(GDate *,struct tm *))")
    (type gchar*,gsize,gchar*,GDate*->gsize "gsize ($(gchar *,gsize,gchar *,GDate *))")
    (type gint->GRelation* "GRelation *($(gint))")
    (type GRelation*->void "void ($(GRelation *))")
    (type GRelation*,gint,GHashFunc,GCompareFunc->void "void ($(GRelation *,gint,GHashFunc,GCompareFunc))")
    (type GRelation*,...GRelation*->void "void ($(GRelation *,...))")
    (type GRelation*,gconstpointer,gint->gint "gint ($(GRelation *,gconstpointer,gint))")
    (type GRelation*,gconstpointer,gint->GTuples* "GTuples *($(GRelation *,gconstpointer,gint))")
    (type GRelation*,...GRelation*->gboolean "gboolean ($(GRelation *,...))")
    (type GTuples*->void "void ($(GTuples *))")
    (type GTuples*,gint,gint->gpointer "gpointer ($(GTuples *,gint,gint))")
    (type GIOChannel*,GIOCondition,GIOFunc,gpointer->guint "guint ($(GIOChannel *,GIOCondition,GIOFunc,gpointer))")
    (type gint,gboolean,GSourceFuncs*,gpointer,gpointer,GDestroyNotify->guint "guint ($(gint,gboolean,GSourceFuncs *,gpointer,gpointer,GDestroyNotify))")
    (type guint->gboolean "gboolean ($(guint))")
    (type GSourceFuncs*,gpointer->gboolean "gboolean ($(GSourceFuncs *,gpointer))")
    (type GTimeVal*->void "void ($(GTimeVal *))")
    (type gboolean->GMainLoop* "GMainLoop *($(gboolean))")
    (type GMainLoop*->void "void ($(GMainLoop *))")
    (type GMainLoop*->gboolean "gboolean ($(GMainLoop *))")
    (type gboolean->gboolean "gboolean ($(gboolean))")
    (type void->gboolean "gboolean ($(void))")
    (type gint,guint,GSourceFunc,gpointer,GDestroyNotify->guint "guint ($(gint,guint,GSourceFunc,gpointer,GDestroyNotify))")
    (type guint,GSourceFunc,gpointer->guint "guint ($(guint,GSourceFunc,gpointer))")
    (type GSourceFunc,gpointer->guint "guint ($(GSourceFunc,gpointer))")
    (type gint,GSourceFunc,gpointer,GDestroyNotify->guint "guint ($(gint,GSourceFunc,gpointer,GDestroyNotify))")
    (type GPollFD*,gint->void "void ($(GPollFD *,gint))")
    (type GPollFD*->void "void ($(GPollFD *))")
    (type GPollFunc->void "void ($(GPollFunc))")
    (type int->GIOChannel* "GIOChannel *($(signed int))")
    (type GIOChannel*->gint "gint ($(GIOChannel *))")
    (type GThreadFunctions*->void "void ($(GThreadFunctions *))")
    (type GMutex** (pointer GMutex*) "GMutex **")
    (type GMutex**->GMutex* "GMutex *($(GMutex **))")
    (type GStaticPrivate*->gpointer "gpointer ($(GStaticPrivate *))")
    (type GStaticPrivate*,gpointer,GDestroyNotify->void "void ($(GStaticPrivate *,gpointer,GDestroyNotify))")
    (type gint*,gchar***->gboolean "gboolean ($(gint *,gchar ***))")
    (type gint->void "void ($(gint))")
    (type void->gint "gint ($(void))")
    (type void->GdkEvent* "GdkEvent *($(void))")
    (type GdkWindow*->GdkEvent* "GdkEvent *($(GdkWindow *))")
    (type GdkEvent*->void "void ($(GdkEvent *))")
    (type GdkEvent*->GdkEvent* "GdkEvent *($(GdkEvent *))")
    (type GdkEvent*->guint32 "guint32 ($(GdkEvent *))")
    (type GdkEventFunc,gpointer,GDestroyNotify->void "void ($(GdkEventFunc,gpointer,GDestroyNotify))")
    (type gboolean->void "void ($(gboolean))")
    (type void->guint32 "guint32 ($(void))")
    (type guint32->void "void ($(guint32))")
    (type gint,GdkInputCondition,GdkInputFunction,gpointer,GdkDestroyNotify->gint "gint ($(gint,GdkInputCondition,GdkInputFunction,gpointer,GdkDestroyNotify))")
    (type gint,GdkInputCondition,GdkInputFunction,gpointer->gint "gint ($(gint,GdkInputCondition,GdkInputFunction,gpointer))")
    (type GdkWindow*,gint,GdkEventMask,GdkWindow*,GdkCursor*,guint32->gint "gint ($(GdkWindow *,gint,GdkEventMask,GdkWindow *,GdkCursor *,guint32))")
    (type GdkWindow*,gboolean,guint32->gint "gint ($(GdkWindow *,gboolean,guint32))")
    (type void->GdkVisualType "GdkVisualType ($(void))")
    (type void->GdkVisual* "GdkVisual *($(void))")
    (type gint->GdkVisual* "GdkVisual *($(gint))")
    (type GdkVisualType->GdkVisual* "GdkVisual *($(GdkVisualType))")
    (type gint,GdkVisualType->GdkVisual* "GdkVisual *($(gint,GdkVisualType))")
    (type GdkVisual*->GdkVisual* "GdkVisual *($(GdkVisual *))")
    (type GdkVisual*->void "void ($(GdkVisual *))")
    (type gint** (pointer gint*) "gint **")
    (type gint**,gint*->void "void ($(gint **,gint *))")
    (type GdkVisualType* (pointer GdkVisualType) "GdkVisualType *")
    (type GdkVisualType** (pointer GdkVisualType*) "GdkVisualType **")
    (type GdkVisualType**,gint*->void "void ($(GdkVisualType **,gint *))")
    (type GdkWindow*,GdkWindowAttr*,gint->GdkWindow* "GdkWindow *($(GdkWindow *,GdkWindowAttr *,gint))")
    (type GdkWindow*->void "void ($(GdkWindow *))")
    (type GdkWindow*->GdkWindow* "GdkWindow *($(GdkWindow *))")
    (type gint*,gint*->GdkWindow* "GdkWindow *($(gint *,gint *))")
    (type GdkWindow*,gint,gint->void "void ($(GdkWindow *,gint,gint))")
    (type GdkWindow*,gint,gint,gint,gint->void "void ($(GdkWindow *,gint,gint,gint,gint))")
    (type GdkWindow*,GdkWindow*,gint,gint->void "void ($(GdkWindow *,GdkWindow *,gint,gint))")
    (type GdkWindow*,GdkGC*,gint,gint,GdkWindow*,gint,gint,gint,gint->void "void ($(GdkWindow *,GdkGC *,gint,gint,GdkWindow *,gint,gint,gint,gint))")
    (type GdkWindow*,gpointer->void "void ($(GdkWindow *,gpointer))")
    (type GdkWindow*,gboolean->void "void ($(GdkWindow *,gboolean))")
    (type GdkWindow*,GdkFilterFunc,gpointer->void "void ($(GdkWindow *,GdkFilterFunc,gpointer))")
    (type GdkWindow*,GdkBitmap*,gint,gint->void "void ($(GdkWindow *,GdkBitmap *,gint,gint))")
    (type GdkWindow*->gboolean "gboolean ($(GdkWindow *))")
    (type GdkWindow*,gboolean->gboolean "gboolean ($(GdkWindow *,gboolean))")
    (type GdkAtom,GdkFilterFunc,gpointer->void "void ($(GdkAtom,GdkFilterFunc,gpointer))")
    (type void->GdkDragContext* "GdkDragContext *($(void))")
    (type GdkDragContext*->void "void ($(GdkDragContext *))")
    (type GdkDragContext*,GdkDragAction,guint32->void "void ($(GdkDragContext *,GdkDragAction,guint32))")
    (type GdkDragContext*,gboolean,guint32->void "void ($(GdkDragContext *,gboolean,guint32))")
    (type GdkDragContext*->GdkAtom "GdkAtom ($(GdkDragContext *))")
    (type GdkWindow*,GList*->GdkDragContext* "GdkDragContext *($(GdkWindow *,GList *))")
    (type GdkDragProtocol* (pointer GdkDragProtocol) "GdkDragProtocol *")
    (type guint32,GdkDragProtocol*->guint32 "guint32 ($(guint32,GdkDragProtocol *))")
    (type GdkWindow** (pointer GdkWindow*) "GdkWindow **")
    (type GdkDragContext*,GdkWindow*,gint,gint,GdkWindow**,GdkDragProtocol*->void "void ($(GdkDragContext *,GdkWindow *,gint,gint,GdkWindow **,GdkDragProtocol *))")
    (type GdkDragContext*,GdkWindow*,GdkDragProtocol,gint,gint,GdkDragAction,GdkDragAction,guint32->gboolean "gboolean ($(GdkDragContext *,GdkWindow *,GdkDragProtocol,gint,gint,GdkDragAction,GdkDragAction,guint32))")
    (type GdkDragContext*,guint32->void "void ($(GdkDragContext *,guint32))")
    (type GdkWindow*,gint,gint,gint,gint,gint,gint,gint->void "void ($(GdkWindow *,gint,gint,gint,gint,gint,gint,gint))")
    (type GdkWindow*,GdkGeometry*,GdkWindowHints->void "void ($(GdkWindow *,GdkGeometry *,GdkWindowHints))")
    (type GdkWindow*,gchar*->void "void ($(GdkWindow *,gchar *))")
    (type GdkWindow*,GdkWindow*->void "void ($(GdkWindow *,GdkWindow *))")
    (type GdkWindow*,GdkColor*->void "void ($(GdkWindow *,GdkColor *))")
    (type GdkWindow*,GdkPixmap*,gboolean->void "void ($(GdkWindow *,GdkPixmap *,gboolean))")
    (type GdkWindow*,GdkCursor*->void "void ($(GdkWindow *,GdkCursor *))")
    (type GdkWindow*,GdkColormap*->void "void ($(GdkWindow *,GdkColormap *))")
    (type GdkWindow*,gpointer*->void "void ($(GdkWindow *,gpointer *))")
    (type GdkWindow*,gint*,gint*,gint*,gint*,gint*->void "void ($(GdkWindow *,gint *,gint *,gint *,gint *,gint *))")
    (type GdkWindow*,gint*,gint*->void "void ($(GdkWindow *,gint *,gint *))")
    (type GdkWindow*->GdkVisual* "GdkVisual *($(GdkWindow *))")
    (type GdkWindow*->GdkColormap* "GdkColormap *($(GdkWindow *))")
    (type GdkWindow*->GdkWindowType "GdkWindowType ($(GdkWindow *))")
    (type GdkWindow*,gint*,gint*->gint "gint ($(GdkWindow *,gint *,gint *))")
    (type GdkWindow*,gint*,gint*->gboolean "gboolean ($(GdkWindow *,gint *,gint *))")
    (type GdkModifierType* (pointer GdkModifierType) "GdkModifierType *")
    (type GdkWindow*,gint*,gint*,GdkModifierType*->GdkWindow* "GdkWindow *($(GdkWindow *,gint *,gint *,GdkModifierType *))")
    (type GdkWindow*->GList* "GList *($(GdkWindow *))")
    (type GdkWindow*->GdkEventMask "GdkEventMask ($(GdkWindow *))")
    (type GdkWindow*,GdkEventMask->void "void ($(GdkWindow *,GdkEventMask))")
    (type GdkWindow*,GdkWindow*,GdkPixmap*,GdkBitmap*->void "void ($(GdkWindow *,GdkWindow *,GdkPixmap *,GdkBitmap *))")
    (type GdkWindow*,GdkWMDecoration->void "void ($(GdkWindow *,GdkWMDecoration))")
    (type GdkWindow*,GdkWMFunction->void "void ($(GdkWindow *,GdkWMFunction))")
    (type GdkDrawable*,gchar*,gpointer,GDestroyNotify->void "void ($(GdkDrawable *,gchar *,gpointer,GDestroyNotify))")
    (type GdkCursorType->GdkCursor* "GdkCursor *($(GdkCursorType))")
    (type GdkPixmap*,GdkPixmap*,GdkColor*,GdkColor*,gint,gint->GdkCursor* "GdkCursor *($(GdkPixmap *,GdkPixmap *,GdkColor *,GdkColor *,gint,gint))")
    (type GdkCursor*->void "void ($(GdkCursor *))")
    (type GdkWindow*->GdkGC* "GdkGC *($(GdkWindow *))")
    (type GdkWindow*,GdkGCValues*,GdkGCValuesMask->GdkGC* "GdkGC *($(GdkWindow *,GdkGCValues *,GdkGCValuesMask))")
    (type GdkGC*->GdkGC* "GdkGC *($(GdkGC *))")
    (type GdkGC*->void "void ($(GdkGC *))")
    (type GdkGC*,GdkGCValues*->void "void ($(GdkGC *,GdkGCValues *))")
    (type GdkGC*,GdkColor*->void "void ($(GdkGC *,GdkColor *))")
    (type GdkGC*,GdkFont*->void "void ($(GdkGC *,GdkFont *))")
    (type GdkGC*,GdkFunction->void "void ($(GdkGC *,GdkFunction))")
    (type GdkGC*,GdkFill->void "void ($(GdkGC *,GdkFill))")
    (type GdkGC*,GdkPixmap*->void "void ($(GdkGC *,GdkPixmap *))")
    (type GdkGC*,gint,gint->void "void ($(GdkGC *,gint,gint))")
    (type GdkGC*,GdkBitmap*->void "void ($(GdkGC *,GdkBitmap *))")
    (type GdkGC*,GdkRectangle*->void "void ($(GdkGC *,GdkRectangle *))")
    (type GdkGC*,GdkRegion*->void "void ($(GdkGC *,GdkRegion *))")
    (type GdkGC*,GdkSubwindowMode->void "void ($(GdkGC *,GdkSubwindowMode))")
    (type GdkGC*,gboolean->void "void ($(GdkGC *,gboolean))")
    (type GdkGC*,gint,GdkLineStyle,GdkCapStyle,GdkJoinStyle->void "void ($(GdkGC *,gint,GdkLineStyle,GdkCapStyle,GdkJoinStyle))")
    (type gint8-array (array gint8) "gint8 $[  ]")
    (type gint8* (pointer gint8) "gint8 *")
    (type GdkGC*,gint,gint8*,gint->void "void ($(GdkGC *,gint,gint8 *,gint))")
    (type GdkGC*,GdkGC*->void "void ($(GdkGC *,GdkGC *))")
    (type GdkWindow*,gint,gint,gint->GdkPixmap* "GdkPixmap *($(GdkWindow *,gint,gint,gint))")
    (type GdkWindow*,gchar*,gint,gint->GdkBitmap* "GdkBitmap *($(GdkWindow *,gchar *,gint,gint))")
    (type GdkWindow*,gchar*,gint,gint,gint,GdkColor*,GdkColor*->GdkPixmap* "GdkPixmap *($(GdkWindow *,gchar *,gint,gint,gint,GdkColor *,GdkColor *))")
    (type GdkWindow*,GdkBitmap**,GdkColor*,gchar*->GdkPixmap* "GdkPixmap *($(GdkWindow *,GdkBitmap **,GdkColor *,gchar *))")
    (type GdkWindow*,GdkBitmap**,GdkColor*,gchar**->GdkPixmap* "GdkPixmap *($(GdkWindow *,GdkBitmap **,GdkColor *,gchar **))")
    (type GdkWindow*,GdkColormap*,GdkBitmap**,GdkColor*,gchar**->GdkPixmap* "GdkPixmap *($(GdkWindow *,GdkColormap *,GdkBitmap **,GdkColor *,gchar **))")
    (type GdkPixmap*->GdkPixmap* "GdkPixmap *($(GdkPixmap *))")
    (type GdkPixmap*->void "void ($(GdkPixmap *))")
    (type GdkBitmap*->GdkBitmap* "GdkBitmap *($(GdkBitmap *))")
    (type GdkBitmap*->void "void ($(GdkBitmap *))")
    (type GdkVisual*,gpointer,gint,gint->GdkImage* "GdkImage *($(GdkVisual *,gpointer,gint,gint))")
    (type GdkImageType,GdkVisual*,gint,gint->GdkImage* "GdkImage *($(GdkImageType,GdkVisual *,gint,gint))")
    (type GdkWindow*,gint,gint,gint,gint->GdkImage* "GdkImage *($(GdkWindow *,gint,gint,gint,gint))")
    (type GdkImage*,gint,gint,guint32->void "void ($(GdkImage *,gint,gint,guint32))")
    (type GdkImage*,gint,gint->guint32 "guint32 ($(GdkImage *,gint,gint))")
    (type GdkImage*->void "void ($(GdkImage *))")
    (type GdkVisual*,gboolean->GdkColormap* "GdkColormap *($(GdkVisual *,gboolean))")
    (type GdkColormap*->GdkColormap* "GdkColormap *($(GdkColormap *))")
    (type GdkColormap*->void "void ($(GdkColormap *))")
    (type void->GdkColormap* "GdkColormap *($(void))")
    (type GdkColormap*,gint->void "void ($(GdkColormap *,gint))")
    (type GdkColormap*,gboolean->void "void ($(GdkColormap *,gboolean))")
    (type gboolean* (pointer gboolean) "gboolean *")
    (type GdkColormap*,GdkColor*,gint,gboolean,gboolean,gboolean*->gint "gint ($(GdkColormap *,GdkColor *,gint,gboolean,gboolean,gboolean *))")
    (type GdkColormap*,GdkColor*,gboolean,gboolean->gboolean "gboolean ($(GdkColormap *,GdkColor *,gboolean,gboolean))")
    (type GdkColormap*,GdkColor*,gint->void "void ($(GdkColormap *,GdkColor *,gint))")
    (type GdkColormap*->GdkVisual* "GdkVisual *($(GdkColormap *))")
    (type GdkColor*->GdkColor* "GdkColor *($(GdkColor *))")
    (type GdkColor*->void "void ($(GdkColor *))")
    (type gchar*,GdkColor*->gboolean "gboolean ($(gchar *,GdkColor *))")
    (type GdkColor*,GdkColor*->guint "guint ($(GdkColor *,GdkColor *))")
    (type GdkColor*,GdkColor*->gboolean "gboolean ($(GdkColor *,GdkColor *))")
    (type GdkColormap*,gboolean,gulong*,gint,gulong*,gint->gboolean "gboolean ($(GdkColormap *,gboolean,gulong *,gint,gulong *,gint))")
    (type GdkColormap*,gulong*,gint,gulong->void "void ($(GdkColormap *,gulong *,gint,gulong))")
    (type GdkColormap*,GdkColor*->gboolean "gboolean ($(GdkColormap *,GdkColor *))")
    (type gchar*->GdkFont* "GdkFont *($(gchar *))")
    (type GdkFont*->GdkFont* "GdkFont *($(GdkFont *))")
    (type GdkFont*->void "void ($(GdkFont *))")
    (type GdkFont*->gint "gint ($(GdkFont *))")
    (type GdkFont*,GdkFont*->gboolean "gboolean ($(GdkFont *,GdkFont *))")
    (type GdkFont*,gchar*->gint "gint ($(GdkFont *,gchar *))")
    (type GdkFont*,gchar*,gint->gint "gint ($(GdkFont *,gchar *,gint))")
    (type GdkFont*,GdkWChar*,gint->gint "gint ($(GdkFont *,GdkWChar *,gint))")
    (type GdkFont*,gchar->gint "gint ($(GdkFont *,gchar))")
    (type GdkFont*,GdkWChar->gint "gint ($(GdkFont *,GdkWChar))")
    (type GdkFont*,gchar*,gint,gint*,gint*,gint*,gint*,gint*->void "void ($(GdkFont *,gchar *,gint,gint *,gint *,gint *,gint *,gint *))")
    (type GdkFont*,GdkWChar*,gint,gint*,gint*,gint*,gint*,gint*->void "void ($(GdkFont *,GdkWChar *,gint,gint *,gint *,gint *,gint *,gint *))")
    (type GdkFont*,gchar*,gint*,gint*,gint*,gint*,gint*->void "void ($(GdkFont *,gchar *,gint *,gint *,gint *,gint *,gint *))")
    (type GdkDrawable*,GdkGC*,gint,gint->void "void ($(GdkDrawable *,GdkGC *,gint,gint))")
    (type GdkDrawable*,GdkGC*,gint,gint,gint,gint->void "void ($(GdkDrawable *,GdkGC *,gint,gint,gint,gint))")
    (type GdkDrawable*,GdkGC*,gint,gint,gint,gint,gint->void "void ($(GdkDrawable *,GdkGC *,gint,gint,gint,gint,gint))")
    (type GdkDrawable*,GdkGC*,gint,gint,gint,gint,gint,gint,gint->void "void ($(GdkDrawable *,GdkGC *,gint,gint,gint,gint,gint,gint,gint))")
    (type GdkDrawable*,GdkGC*,gint,GdkPoint*,gint->void "void ($(GdkDrawable *,GdkGC *,gint,GdkPoint *,gint))")
    (type GdkDrawable*,GdkFont*,GdkGC*,gint,gint,gchar*->void "void ($(GdkDrawable *,GdkFont *,GdkGC *,gint,gint,gchar *))")
    (type GdkDrawable*,GdkFont*,GdkGC*,gint,gint,gchar*,gint->void "void ($(GdkDrawable *,GdkFont *,GdkGC *,gint,gint,gchar *,gint))")
    (type GdkDrawable*,GdkFont*,GdkGC*,gint,gint,GdkWChar*,gint->void "void ($(GdkDrawable *,GdkFont *,GdkGC *,gint,gint,GdkWChar *,gint))")
    (type GdkDrawable*,GdkGC*,GdkDrawable*,gint,gint,gint,gint,gint,gint->void "void ($(GdkDrawable *,GdkGC *,GdkDrawable *,gint,gint,gint,gint,gint,gint))")
    (type GdkDrawable*,GdkGC*,GdkImage*,gint,gint,gint,gint,gint,gint->void "void ($(GdkDrawable *,GdkGC *,GdkImage *,gint,gint,gint,gint,gint,gint))")
    (type GdkDrawable*,GdkGC*,GdkPoint*,gint->void "void ($(GdkDrawable *,GdkGC *,GdkPoint *,gint))")
    (type GdkDrawable*,GdkGC*,GdkSegment*,gint->void "void ($(GdkDrawable *,GdkGC *,GdkSegment *,gint))")
    (type GdkWindow*,GdkAtom,guint32,gint->gboolean "gboolean ($(GdkWindow *,GdkAtom,guint32,gint))")
    (type GdkAtom->GdkWindow* "GdkWindow *($(GdkAtom))")
    (type GdkWindow*,GdkAtom,GdkAtom,guint32->void "void ($(GdkWindow *,GdkAtom,GdkAtom,guint32))")
    (type guchar** (pointer guchar*) "guchar **")
    (type GdkAtom* (pointer GdkAtom) "GdkAtom *")
    (type GdkWindow*,guchar**,GdkAtom*,gint*->gboolean "gboolean ($(GdkWindow *,guchar **,GdkAtom *,gint *))")
    (type guint32,GdkAtom,GdkAtom,GdkAtom,guint32->void "void ($(guint32,GdkAtom,GdkAtom,GdkAtom,guint32))")
    (type GdkAtom,gint,guchar*,gint,gchar***->gint "gint ($(GdkAtom,gint,guchar *,gint,gchar ***))")
    (type gchar*,GdkAtom*,gint*,guchar**,gint*->gint "gint ($(gchar *,GdkAtom *,gint *,guchar **,gint *))")
    (type guchar*->void "void ($(guchar *))")
    (type gchar*,gint->GdkAtom "GdkAtom ($(gchar *,gint))")
    (type GdkAtom->gchar* "gchar *($(GdkAtom))")
    (type GdkWindow*,GdkAtom,GdkAtom,gulong,gulong,gint,GdkAtom*,gint*,gint*,guchar**->gboolean "gboolean ($(GdkWindow *,GdkAtom,GdkAtom,gulong,gulong,gint,GdkAtom *,gint *,gint *,guchar **))")
    (type GdkWindow*,GdkAtom,GdkAtom,gint,GdkPropMode,guchar*,gint->void "void ($(GdkWindow *,GdkAtom,GdkAtom,gint,GdkPropMode,guchar *,gint))")
    (type GdkWindow*,GdkAtom->void "void ($(GdkWindow *,GdkAtom))")
    (type GdkRectangle*,GdkRectangle*,GdkRectangle*->gboolean "gboolean ($(GdkRectangle *,GdkRectangle *,GdkRectangle *))")
    (type GdkRectangle*,GdkRectangle*,GdkRectangle*->void "void ($(GdkRectangle *,GdkRectangle *,GdkRectangle *))")
    (type GdkWindow*,gint,GdkExtensionMode->void "void ($(GdkWindow *,gint,GdkExtensionMode))")
    (type guint32,GdkInputSource->void "void ($(guint32,GdkInputSource))")
    (type guint32,GdkInputMode->gboolean "gboolean ($(guint32,GdkInputMode))")
    (type guint32,GdkAxisUse*->void "void ($(guint32,GdkAxisUse *))")
    (type guint32,guint,guint,GdkModifierType->void "void ($(guint32,guint,guint,GdkModifierType))")
    (type gdouble* (pointer gdouble) "gdouble *")
    (type GdkWindow*,guint32,gdouble*,gdouble*,gdouble*,gdouble*,gdouble*,GdkModifierType*->void "void ($(GdkWindow *,guint32,gdouble *,gdouble *,gdouble *,gdouble *,gdouble *,GdkModifierType *))")
    (type GdkWindow*,guint32,guint32,guint32,gint*->GdkTimeCoord* "GdkTimeCoord *($(GdkWindow *,guint32,guint32,guint32,gint *))")
    (type GdkIC*,GdkWindow*->void "void ($(GdkIC *,GdkWindow *))")
    (type GdkIMStyle->GdkIMStyle "GdkIMStyle ($(GdkIMStyle))")
    (type GdkICAttr*,GdkICAttributesType->GdkIC* "GdkIC *($(GdkICAttr *,GdkICAttributesType))")
    (type GdkIC*->void "void ($(GdkIC *))")
    (type GdkIC*->GdkIMStyle "GdkIMStyle ($(GdkIC *))")
    (type GdkIC*->GdkEventMask "GdkEventMask ($(GdkIC *))")
    (type void->GdkICAttr* "GdkICAttr *($(void))")
    (type GdkICAttr*->void "void ($(GdkICAttr *))")
    (type GdkIC*,GdkICAttr*,GdkICAttributesType->GdkICAttributesType "GdkICAttributesType ($(GdkIC *,GdkICAttr *,GdkICAttributesType))")
    (type GdkWChar*->gchar* "gchar *($(GdkWChar *))")
    (type GdkWChar*,gchar*,gint->gint "gint ($(GdkWChar *,gchar *,gint))")
    (type GdkVisual*,GdkColormap*->GdkColorContext* "GdkColorContext *($(GdkVisual *,GdkColormap *))")
    (type GdkColorContext*->void "void ($(GdkColorContext *))")
    (type GdkColorContext*,gushort,gushort,gushort,gint*->gulong "gulong ($(GdkColorContext *,gushort,gushort,gushort,gint *))")
    (type gushort* (pointer gushort) "gushort *")
    (type GdkColorContext*,gushort*,gushort*,gushort*,gint,gulong*,gint*->void "void ($(GdkColorContext *,gushort *,gushort *,gushort *,gint,gulong *,gint *))")
    (type GdkColorContext*,gushort*,gushort*,gushort*,gint,gint*,gulong*,gint*->void "void ($(GdkColorContext *,gushort *,gushort *,gushort *,gint,gint *,gulong *,gint *))")
    (type GdkColorContext*,GdkColor*->gint "gint ($(GdkColorContext *,GdkColor *))")
    (type GdkColorContext*,GdkColor*,gint->gint "gint ($(GdkColorContext *,GdkColor *,gint))")
    (type GdkColorContext*,gushort*,gushort*,gushort*,gint*->gulong "gulong ($(GdkColorContext *,gushort *,gushort *,gushort *,gint *))")
    (type GdkColorContext*,gint*,gint*,gint*,gint*->guchar "guchar ($(GdkColorContext *,gint *,gint *,gint *,gint *))")
    (type void->GdkRegion* "GdkRegion *($(void))")
    (type GdkRegion*->void "void ($(GdkRegion *))")
    (type GdkRegion*,GdkRectangle*->void "void ($(GdkRegion *,GdkRectangle *))")
    (type GdkRegion*->gboolean "gboolean ($(GdkRegion *))")
    (type GdkRegion*,GdkRegion*->gboolean "gboolean ($(GdkRegion *,GdkRegion *))")
    (type GdkRegion*,int,int->gboolean "gboolean ($(GdkRegion *,signed int,signed int))")
    (type GdkRegion*,GdkRectangle*->GdkOverlapType "GdkOverlapType ($(GdkRegion *,GdkRectangle *))")
    (type GdkPoint*,gint,GdkFillRule->GdkRegion* "GdkRegion *($(GdkPoint *,gint,GdkFillRule))")
    (type GdkRegion*,gint,gint->void "void ($(GdkRegion *,gint,gint))")
    (type GdkRegion*,GdkRectangle*->GdkRegion* "GdkRegion *($(GdkRegion *,GdkRectangle *))")
    (type GdkRegion*,GdkRegion*->GdkRegion* "GdkRegion *($(GdkRegion *,GdkRegion *))")
    (type GdkEvent*,guint32->gboolean "gboolean ($(GdkEvent *,guint32))")
    (type guint->gchar* "gchar *($(guint))")
    (type gchar*->guint "guint ($(gchar *))")
    (type guint32->gulong "gulong ($(guint32))")
    (type GdkGC*,guint32->void "void ($(GdkGC *,guint32))")
    (type GdkDrawable*,GdkGC*,gint,gint,gint,gint,GdkRgbDither,guchar*,gint->void "void ($(GdkDrawable *,GdkGC *,gint,gint,gint,gint,GdkRgbDither,guchar *,gint))")
    (type GdkDrawable*,GdkGC*,gint,gint,gint,gint,GdkRgbDither,guchar*,gint,gint,gint->void "void ($(GdkDrawable *,GdkGC *,gint,gint,gint,gint,GdkRgbDither,guchar *,gint,gint,gint))")
    (type guint32* (pointer guint32) "guint32 *")
    (type guint32*,gint->GdkRgbCmap* "GdkRgbCmap *($(guint32 *,gint))")
    (type GdkRgbCmap*->void "void ($(GdkRgbCmap *))")
    (type GdkDrawable*,GdkGC*,gint,gint,gint,gint,GdkRgbDither,guchar*,gint,GdkRgbCmap*->void "void ($(GdkDrawable *,GdkGC *,gint,gint,gint,gint,GdkRgbDither,guchar *,gint,GdkRgbCmap *))")
    (type void->GtkType "GtkType ($(void))")
    (type GtkType,GtkTypeInfo*->GtkType "GtkType ($(GtkType,GtkTypeInfo *))")
    (type GtkType,guint->void "void ($(GtkType,guint))")
    (type gchar*->GtkType "GtkType ($(gchar *))")
    (type GtkType->GtkType "GtkType ($(GtkType))")
    (type GtkType->gpointer "gpointer ($(GtkType))")
    (type GtkType->GList* "GList *($(GtkType))")
    (type GtkType,gpointer->void "void ($(GtkType,gpointer))")
    (type GtkType->void "void ($(GtkType))")
    (type GtkType,gboolean->void "void ($(GtkType,gboolean))")
    (type GtkType,GtkType->gboolean "gboolean ($(GtkType,GtkType))")
    (type GtkTypeObject*,GtkType->GtkTypeObject* "GtkTypeObject *($(GtkTypeObject *,GtkType))")
    (type GtkTypeClass*,GtkType->GtkTypeClass* "GtkTypeClass *($(GtkTypeClass *,GtkType))")
    (type gchar*,GtkEnumValue*->GtkType "GtkType ($(gchar *,GtkEnumValue *))")
    (type gchar*,GtkFlagValue*->GtkType "GtkType ($(gchar *,GtkFlagValue *))")
    (type GtkType->GtkEnumValue* "GtkEnumValue *($(GtkType))")
    (type GtkType->GtkFlagValue* "GtkFlagValue *($(GtkType))")
    (type GtkType,gchar*->GtkEnumValue* "GtkEnumValue *($(GtkType,gchar *))")
    (type GtkType,gchar*->GtkFlagValue* "GtkFlagValue *($(GtkType,gchar *))")
    (type GtkType,GtkType->void "void ($(GtkType,GtkType))")
    (type GtkType->GtkTypeQuery* "GtkTypeQuery *($(GtkType))")
    (type GtkType->GtkArg* "GtkArg *($(GtkType))")
    (type GtkArg*,GtkArg*->GtkArg* "GtkArg *($(GtkArg *,GtkArg *))")
    (type GtkArg*,gboolean->void "void ($(GtkArg *,gboolean))")
    (type GtkArg*->void "void ($(GtkArg *))")
    (type GtkArg*,GtkArg*->gboolean "gboolean ($(GtkArg *,GtkArg *))")
    (type GSList** (pointer GSList*) "GSList **")
    (type GtkType,GHashTable*,GSList**,GSList**,gchar*,va_list->gchar* "gchar *($(GtkType,GHashTable *,GSList **,GSList **,gchar *,va_list))")
    (type GSList*,GSList*->void "void ($(GSList *,GSList *))")
    (type GtkArgInfo** (pointer GtkArgInfo*) "GtkArgInfo **")
    (type GtkType,GHashTable*,gchar*,GtkArgInfo**->gchar* "gchar *($(GtkType,GHashTable *,gchar *,GtkArgInfo **))")
    (type GtkType,gchar*,guint,GHashTable*,GtkType,guint,guint->GtkArgInfo* "GtkArgInfo *($(GtkType,gchar *,guint,GHashTable *,GtkType,guint,guint))")
    (type guint32** (pointer guint32*) "guint32 **")
    (type GtkType,GHashTable*,guint32**,guint*->GtkArg* "GtkArg *($(GtkType,GHashTable *,guint32 **,guint *))")
    (type GtkArg*,gpointer->void "void ($(GtkArg *,gpointer))")
    (type GtkObjectClass*,gchar*,GtkSignalRunType,GtkSignalMarshaller,GtkType,guint,...guint->guint "guint ($(GtkObjectClass *,gchar *,GtkSignalRunType,GtkSignalMarshaller,GtkType,guint,...))")
    (type GtkObjectClass*,gchar*,GtkSignalRunType,GtkSignalMarshaller,GtkType,guint,GtkType*->guint "guint ($(GtkObjectClass *,gchar *,GtkSignalRunType,GtkSignalMarshaller,GtkType,guint,GtkType *))")
    (type GtkType,gchar*,...gchar*->GtkObject* "GtkObject *($(GtkType,gchar *,...))")
    (type GtkType,guint,GtkArg*->GtkObject* "GtkObject *($(GtkType,guint,GtkArg *))")
    (type GtkObject*,GtkDestroyNotify,gpointer->void "void ($(GtkObject *,GtkDestroyNotify,gpointer))")
    (type GtkObject*,guint,GtkArg*->void "void ($(GtkObject *,guint,GtkArg *))")
    (type GtkObject*,gchar*,...gchar*->void "void ($(GtkObject *,gchar *,...))")
    (type GtkType,guint32**,guint*->GtkArg* "GtkArg *($(GtkType,guint32 **,guint *))")
    (type GtkObject*,gchar*,gpointer->void "void ($(GtkObject *,gchar *,gpointer))")
    (type GtkObject*,gchar*,gpointer,GtkDestroyNotify->void "void ($(GtkObject *,gchar *,gpointer,GtkDestroyNotify))")
    (type GtkObject*,gchar*->void "void ($(GtkObject *,gchar *))")
    (type GtkObject*,gchar*->gpointer "gpointer ($(GtkObject *,gchar *))")
    (type GtkObject*,gpointer->void "void ($(GtkObject *,gpointer))")
    (type GtkObject*->gpointer "gpointer ($(GtkObject *))")
    (type GtkObjectClass*,guint*,guint->void "void ($(GtkObjectClass *,guint *,guint))")
    (type gchar*,GtkType,guint,guint->void "void ($(gchar *,GtkType,guint,guint))")
    (type GtkObject*,GQuark,gpointer->void "void ($(GtkObject *,GQuark,gpointer))")
    (type GtkObject*,GQuark,gpointer,GtkDestroyNotify->void "void ($(GtkObject *,GQuark,gpointer,GtkDestroyNotify))")
    (type GtkObject*,GQuark->gpointer "gpointer ($(GtkObject *,GQuark))")
    (type GtkObject*,GQuark->void "void ($(GtkObject *,GQuark))")
    (type GtkObject*,GtkArg*,GtkArgInfo*->void "void ($(GtkObject *,GtkArg *,GtkArgInfo *))")
    (type GtkType,GSList**,GSList**,gchar*,va_list->gchar* "gchar *($(GtkType,GSList **,GSList **,gchar *,va_list))")
    (type GtkType,gchar*,GtkArgInfo**->gchar* "gchar *($(GtkType,gchar *,GtkArgInfo **))")
    (type GtkObject*,gchar*,guint,guint,gboolean->void "void ($(GtkObject *,gchar *,guint,guint,gboolean))")
    (type guint,GdkModifierType->gboolean "gboolean ($(guint,GdkModifierType))")
    (type gchar*,guint*,GdkModifierType*->void "void ($(gchar *,guint *,GdkModifierType *))")
    (type guint,GdkModifierType->gchar* "gchar *($(guint,GdkModifierType))")
    (type GdkModifierType->void "void ($(GdkModifierType))")
    (type void->guint "guint ($(void))")
    (type void->GtkAccelGroup* "GtkAccelGroup *($(void))")
    (type GtkAccelGroup*->GtkAccelGroup* "GtkAccelGroup *($(GtkAccelGroup *))")
    (type GtkAccelGroup*->void "void ($(GtkAccelGroup *))")
    (type GtkObject*,guint,GdkModifierType->gboolean "gboolean ($(GtkObject *,guint,GdkModifierType))")
    (type GtkAccelGroup*,guint,GdkModifierType->gboolean "gboolean ($(GtkAccelGroup *,guint,GdkModifierType))")
    (type GtkAccelGroup*,GtkObject*->void "void ($(GtkAccelGroup *,GtkObject *))")
    (type GtkAccelGroup*,guint,GdkModifierType->GtkAccelEntry* "GtkAccelEntry *($(GtkAccelGroup *,guint,GdkModifierType))")
    (type GtkAccelGroup*,guint,GdkModifierType->void "void ($(GtkAccelGroup *,guint,GdkModifierType))")
    (type GtkAccelGroup*,guint,GdkModifierType,GtkAccelFlags,GtkObject*,gchar*->void "void ($(GtkAccelGroup *,guint,GdkModifierType,GtkAccelFlags,GtkObject *,gchar *))")
    (type GtkAccelGroup*,guint,GdkModifierType,GtkObject*->void "void ($(GtkAccelGroup *,guint,GdkModifierType,GtkObject *))")
    (type GtkObject*,guint,GtkAccelGroup*,guint,GdkModifierType,GtkAccelFlags->void "void ($(GtkObject *,guint,GtkAccelGroup *,guint,GdkModifierType,GtkAccelFlags))")
    (type GtkObject*,GtkAccelGroup*,guint,GdkModifierType->void "void ($(GtkObject *,GtkAccelGroup *,guint,GdkModifierType))")
    (type GtkType,GtkSignalRunType,guint->guint "guint ($(GtkType,GtkSignalRunType,guint))")
    (type GtkObject*->GSList* "GSList *($(GtkObject *))")
    (type gfloat,gfloat,gfloat,gfloat,gfloat,gfloat->GtkObject* "GtkObject *($(gfloat,gfloat,gfloat,gfloat,gfloat,gfloat))")
    (type GtkAdjustment*,gfloat,gfloat->void "void ($(GtkAdjustment *,gfloat,gfloat))")
    (type GtkAdjustment*,gfloat->void "void ($(GtkAdjustment *,gfloat))")
    (type void->GtkStyle* "GtkStyle *($(void))")
    (type GtkStyle*->GtkStyle* "GtkStyle *($(GtkStyle *))")
    (type GtkStyle*,GdkWindow*->GtkStyle* "GtkStyle *($(GtkStyle *,GdkWindow *))")
    (type GtkStyle*,GdkWindow*,gboolean,GtkStateType,GdkRectangle*,gint,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,gboolean,GtkStateType,GdkRectangle *,gint,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,gint,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,gint,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GdkPoint*,gint,gboolean->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GdkPoint *,gint,gboolean))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GtkArrowType,gboolean,gint,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GtkArrowType,gboolean,gint,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,gint,gint,gchar*->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,gint,gint,gchar *))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,GtkArrowType,gint,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,GtkArrowType,gint,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,gint,gint,gint,gint,GtkPositionType,gint,gint->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,gint,gint,gint,gint,GtkPositionType,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,gint,gint,gint,gint,GtkPositionType->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,gint,gint,gint,gint,GtkPositionType))")
    (type GtkStyle*,GdkWindow*,gint,gint,gint,gint->void "void ($(GtkStyle *,GdkWindow *,gint,gint,gint,gint))")
    (type GtkStyle*,GdkWindow*,GtkStateType,GtkShadowType,gint,gint,gint,gint,GtkOrientation->void "void ($(GtkStyle *,GdkWindow *,GtkStateType,GtkShadowType,gint,gint,gint,gint,GtkOrientation))")
    (type GtkStyle*,gchar*,gint->void "void ($(GtkStyle *,gchar *,gint))")
    (type GtkStyle*,gchar*,gint->gint "gint ($(GtkStyle *,gchar *,gint))")
    (type GtkType,gchar*,...gchar*->GtkWidget* "GtkWidget *($(GtkType,gchar *,...))")
    (type GtkType,guint,GtkArg*->GtkWidget* "GtkWidget *($(GtkType,guint,GtkArg *))")
    (type GtkWidget** (pointer GtkWidget*) "GtkWidget **")
    (type GtkWidget*,GtkWidget**->void "void ($(GtkWidget *,GtkWidget **))")
    (type GtkWidget*,GtkArg*->void "void ($(GtkWidget *,GtkArg *))")
    (type GtkWidget*,guint,GtkArg*->void "void ($(GtkWidget *,guint,GtkArg *))")
    (type GtkWidget*,gchar*,...gchar*->void "void ($(GtkWidget *,gchar *,...))")
    (type GtkWidget*,gint,gint,gint,gint->void "void ($(GtkWidget *,gint,gint,gint,gint))")
    (type GtkWidget*,gchar*,GtkAccelGroup*,guint,guint,GtkAccelFlags->void "void ($(GtkWidget *,gchar *,GtkAccelGroup *,guint,guint,GtkAccelFlags))")
    (type GtkWidget*,GtkAccelGroup*,guint,guint->void "void ($(GtkWidget *,GtkAccelGroup *,guint,guint))")
    (type GtkWidget*,gchar*,gboolean->void "void ($(GtkWidget *,gchar *,gboolean))")
    (type GtkWidget*,GtkAccelGroup*,guint,guint->guint "guint ($(GtkWidget *,GtkAccelGroup *,guint,guint))")
    (type GtkWidget*->gboolean "gboolean ($(GtkWidget *))")
    (type GtkWidget*,GtkAdjustment*,GtkAdjustment*->gboolean "gboolean ($(GtkWidget *,GtkAdjustment *,GtkAdjustment *))")
    (type GtkWidget*,gint,gint->void "void ($(GtkWidget *,gint,gint))")
    (type GtkWidget*,GdkRectangle*,GdkRectangle*->gint "gint ($(GtkWidget *,GdkRectangle *,GdkRectangle *))")
    (type GtkWidget*->gchar* "gchar *($(GtkWidget *))")
    (type GtkWidget*,gboolean->void "void ($(GtkWidget *,gboolean))")
    (type GtkWidget*,GdkWindow*->void "void ($(GtkWidget *,GdkWindow *))")
    (type GtkWidget*->GdkWindow* "GdkWindow *($(GtkWidget *))")
    (type GtkWidget*,gint->void "void ($(GtkWidget *,gint))")
    (type GtkWidget*,GdkExtensionMode->void "void ($(GtkWidget *,GdkExtensionMode))")
    (type GtkWidget*->GdkExtensionMode "GdkExtensionMode ($(GtkWidget *))")
    (type GtkWidget*->GtkWidget* "GtkWidget *($(GtkWidget *))")
    (type GtkWidget*,GtkType->GtkWidget* "GtkWidget *($(GtkWidget *,GtkType))")
    (type GtkWidget*->GdkColormap* "GdkColormap *($(GtkWidget *))")
    (type GtkWidget*->GdkVisual* "GdkVisual *($(GtkWidget *))")
    (type GtkWidget*,GdkColormap*->void "void ($(GtkWidget *,GdkColormap *))")
    (type GtkWidget*,GdkVisual*->void "void ($(GtkWidget *,GdkVisual *))")
    (type GtkWidget*->gint "gint ($(GtkWidget *))")
    (type GtkWidget*,gint*,gint*->void "void ($(GtkWidget *,gint *,gint *))")
    (type GtkWidget*,GtkWidget*->gboolean "gboolean ($(GtkWidget *,GtkWidget *))")
    (type GtkWidget*->GtkStyle* "GtkStyle *($(GtkWidget *))")
    (type GtkWidget*,GtkRcStyle*->void "void ($(GtkWidget *,GtkRcStyle *))")
    (type GtkWidget*,GdkBitmap*,gint,gint->void "void ($(GtkWidget *,GdkBitmap *,gint,gint))")
    (type GtkWidget*,guint*,gchar**,gchar**->void "void ($(GtkWidget *,guint *,gchar **,gchar **))")
    (type GtkMisc*,gfloat,gfloat->void "void ($(GtkMisc *,gfloat,gfloat))")
    (type GtkMisc*,gint,gint->void "void ($(GtkMisc *,gint,gint))")
    (type gchar*->GtkWidget* "GtkWidget *($(gchar *))")
    (type GtkLabel*,gchar*->void "void ($(GtkLabel *,gchar *))")
    (type GtkLabel*,GtkJustification->void "void ($(GtkLabel *,GtkJustification))")
    (type GtkLabel*,gboolean->void "void ($(GtkLabel *,gboolean))")
    (type GtkLabel*,gchar**->void "void ($(GtkLabel *,gchar **))")
    (type GtkLabel*,gchar*->guint "guint ($(GtkLabel *,gchar *))")
    (type GtkAccelLabel*->guint "guint ($(GtkAccelLabel *))")
    (type GtkAccelLabel*,GtkWidget*->void "void ($(GtkAccelLabel *,GtkWidget *))")
    (type GtkAccelLabel*->gboolean "gboolean ($(GtkAccelLabel *))")
    (type GtkContainer*,guint->void "void ($(GtkContainer *,guint))")
    (type GtkContainer*,GtkResizeMode->void "void ($(GtkContainer *,GtkResizeMode))")
    (type GtkContainer*,GtkCallback,gpointer->void "void ($(GtkContainer *,GtkCallback,gpointer))")
    (type GtkContainer*,GtkCallback,GtkCallbackMarshal,gpointer,GtkDestroyNotify->void "void ($(GtkContainer *,GtkCallback,GtkCallbackMarshal,gpointer,GtkDestroyNotify))")
    (type GtkContainer*->GList* "GList *($(GtkContainer *))")
    (type GtkContainer*,gboolean->void "void ($(GtkContainer *,gboolean))")
    (type GtkContainer*,GtkAdjustment*->void "void ($(GtkContainer *,GtkAdjustment *))")
    (type GtkContainer*,GtkWidget*,guint,GtkArg*->void "void ($(GtkContainer *,GtkWidget *,guint,GtkArg *))")
    (type GtkContainer*,GtkWidget*,gchar*,...gchar*->void "void ($(GtkContainer *,GtkWidget *,gchar *,...))")
    (type GtkContainer*,GtkWidget*,GtkArg*,GtkArgInfo*->void "void ($(GtkContainer *,GtkWidget *,GtkArg *,GtkArgInfo *))")
    (type gfloat,gfloat,gfloat,gfloat->GtkWidget* "GtkWidget *($(gfloat,gfloat,gfloat,gfloat))")
    (type GtkAlignment*,gfloat,gfloat,gfloat,gfloat->void "void ($(GtkAlignment *,gfloat,gfloat,gfloat,gfloat))")
    (type GtkFrame*,gchar*->void "void ($(GtkFrame *,gchar *))")
    (type GtkFrame*,gfloat,gfloat->void "void ($(GtkFrame *,gfloat,gfloat))")
    (type GtkFrame*,GtkShadowType->void "void ($(GtkFrame *,GtkShadowType))")
    (type gchar*,gfloat,gfloat,gfloat,gboolean->GtkWidget* "GtkWidget *($(gchar *,gfloat,gfloat,gfloat,gboolean))")
    (type GtkAspectFrame*,gfloat,gfloat,gfloat,gboolean->void "void ($(GtkAspectFrame *,gfloat,gfloat,gfloat,gboolean))")
    (type GtkArrowType,GtkShadowType->GtkWidget* "GtkWidget *($(GtkArrowType,GtkShadowType))")
    (type GtkArrow*,GtkArrowType,GtkShadowType->void "void ($(GtkArrow *,GtkArrowType,GtkShadowType))")
    (type GtkPatternSpec*,gchar*->void "void ($(GtkPatternSpec *,gchar *))")
    (type GtkPatternSpec*->void "void ($(GtkPatternSpec *))")
    (type GtkPatternSpec*,guint,gchar*,gchar*->gboolean "gboolean ($(GtkPatternSpec *,guint,gchar *,gchar *))")
    (type GtkPatternSpec*,gchar*->gboolean "gboolean ($(GtkPatternSpec *,gchar *))")
    (type gchar*,gchar*->gboolean "gboolean ($(gchar *,gchar *))")
    (type gchar*->GtkBindingSet* "GtkBindingSet *($(gchar *))")
    (type gpointer->GtkBindingSet* "GtkBindingSet *($(gpointer))")
    (type GtkObject*,guint,guint->gboolean "gboolean ($(GtkObject *,guint,guint))")
    (type GtkBindingSet*,guint,guint,GtkObject*->gboolean "gboolean ($(GtkBindingSet *,guint,guint,GtkObject *))")
    (type GtkBindingSet*,guint,guint->void "void ($(GtkBindingSet *,guint,guint))")
    (type GtkBindingSet*,guint,guint,gchar*,guint,...guint->void "void ($(GtkBindingSet *,guint,guint,gchar *,guint,...))")
    (type GtkBindingSet*,GtkPathType,gchar*,GtkPathPriorityType->void "void ($(GtkBindingSet *,GtkPathType,gchar *,GtkPathPriorityType))")
    (type GtkBindingSet*,guint,guint,gchar*,GSList*->void "void ($(GtkBindingSet *,guint,guint,gchar *,GSList *))")
    (type GtkBox*,GtkWidget*,gboolean,gboolean,guint->void "void ($(GtkBox *,GtkWidget *,gboolean,gboolean,guint))")
    (type GtkBox*,GtkWidget*->void "void ($(GtkBox *,GtkWidget *))")
    (type GtkBox*,gboolean->void "void ($(GtkBox *,gboolean))")
    (type GtkBox*,gint->void "void ($(GtkBox *,gint))")
    (type GtkBox*,GtkWidget*,gint->void "void ($(GtkBox *,GtkWidget *,gint))")
    (type GtkPackType* (pointer GtkPackType) "GtkPackType *")
    (type GtkBox*,GtkWidget*,gboolean*,gboolean*,guint*,GtkPackType*->void "void ($(GtkBox *,GtkWidget *,gboolean *,gboolean *,guint *,GtkPackType *))")
    (type GtkBox*,GtkWidget*,gboolean,gboolean,guint,GtkPackType->void "void ($(GtkBox *,GtkWidget *,gboolean,gboolean,guint,GtkPackType))")
    (type gint*,gint*->void "void ($(gint *,gint *))")
    (type gint,gint->void "void ($(gint,gint))")
    (type GtkButtonBox*->gint "gint ($(GtkButtonBox *))")
    (type GtkButtonBox*->GtkButtonBoxStyle "GtkButtonBoxStyle ($(GtkButtonBox *))")
    (type GtkButtonBox*,gint*,gint*->void "void ($(GtkButtonBox *,gint *,gint *))")
    (type GtkButtonBox*,gint->void "void ($(GtkButtonBox *,gint))")
    (type GtkButtonBox*,GtkButtonBoxStyle->void "void ($(GtkButtonBox *,GtkButtonBoxStyle))")
    (type GtkButtonBox*,gint,gint->void "void ($(GtkButtonBox *,gint,gint))")
    (type int* (pointer int) "signed int *")
    (type GtkWidget*,int*,int*,int*->void "void ($(GtkWidget *,signed int *,signed int *,signed int *))")
    (type void->GtkWidget* "GtkWidget *($(void))")
    (type GtkButton*,GtkReliefStyle->void "void ($(GtkButton *,GtkReliefStyle))")
    (type GtkButton*->GtkReliefStyle "GtkReliefStyle ($(GtkButton *))")
    (type gchar*,GtkType->guint "guint ($(gchar *,GtkType))")
    (type GtkObject*,guint->guint "guint ($(GtkObject *,guint))")
    (type GtkObject*,gchar*->guint "guint ($(GtkObject *,gchar *))")
    (type GtkObject*,guint->void "void ($(GtkObject *,guint))")
    (type GtkObject*,gchar*,GtkSignalFunc,gpointer->guint "guint ($(GtkObject *,gchar *,GtkSignalFunc,gpointer))")
    (type GtkObject*,gchar*,GtkSignalFunc,GtkObject*->guint "guint ($(GtkObject *,gchar *,GtkSignalFunc,GtkObject *))")
    (type GtkObject*,gchar*,GtkSignalFunc,GtkCallbackMarshal,gpointer,GtkDestroyNotify,gint,gint->guint "guint ($(GtkObject *,gchar *,GtkSignalFunc,GtkCallbackMarshal,gpointer,GtkDestroyNotify,gint,gint))")
    (type GtkObject*,gchar*,GtkSignalFunc,GtkObject*->void "void ($(GtkObject *,gchar *,GtkSignalFunc,GtkObject *))")
    (type GtkObject*,gchar*,GtkSignalFunc,gpointer,GtkObject*->void "void ($(GtkObject *,gchar *,GtkSignalFunc,gpointer,GtkObject *))")
    (type GtkObject*,GtkSignalFunc,gpointer->void "void ($(GtkObject *,GtkSignalFunc,gpointer))")
    (type GtkObject*,guint,gboolean->guint "guint ($(GtkObject *,guint,gboolean))")
    (type GtkObject*,guint,gboolean,GtkSignalFunc,gpointer->guint "guint ($(GtkObject *,guint,gboolean,GtkSignalFunc,gpointer))")
    (type GtkObject*,guint,gboolean->gint "gint ($(GtkObject *,guint,gboolean))")
    (type guint,GtkEmissionHook,gpointer->guint "guint ($(guint,GtkEmissionHook,gpointer))")
    (type guint,GtkEmissionHook,gpointer,GDestroyNotify->guint "guint ($(guint,GtkEmissionHook,gpointer,GDestroyNotify))")
    (type guint,guint->void "void ($(guint,guint))")
    (type guint->GtkSignalQuery* "GtkSignalQuery *($(guint))")
    (type gchar*,GtkSignalRunType,GtkType,guint,GtkSignalMarshaller,GtkType,guint,...guint->guint "guint ($(gchar *,GtkSignalRunType,GtkType,guint,GtkSignalMarshaller,GtkType,guint,...))")
    (type gchar*,GtkSignalRunType,GtkType,guint,GtkSignalMarshaller,GtkType,guint,GtkType*->guint "guint ($(gchar *,GtkSignalRunType,GtkType,guint,GtkSignalMarshaller,GtkType,guint,GtkType *))")
    (type GtkObject*,guint,...guint->void "void ($(GtkObject *,guint,...))")
    (type GtkObject*,gchar*,GtkArg*->void "void ($(GtkObject *,gchar *,GtkArg *))")
    (type GtkSignalMarshal,GtkSignalDestroy->void "void ($(GtkSignalMarshal,GtkSignalDestroy))")
    (type GtkCalendar*,guint,guint->gint "gint ($(GtkCalendar *,guint,guint))")
    (type GtkCalendar*,guint->void "void ($(GtkCalendar *,guint))")
    (type GtkCalendar*,guint->gint "gint ($(GtkCalendar *,guint))")
    (type GtkCalendar*,GtkCalendarDisplayOptions->void "void ($(GtkCalendar *,GtkCalendarDisplayOptions))")
    (type GtkCalendar*,guint*,guint*,guint*->void "void ($(GtkCalendar *,guint *,guint *,guint *))")
    (type GtkToggleButton*,gboolean->void "void ($(GtkToggleButton *,gboolean))")
    (type GtkToggleButton*->gboolean "gboolean ($(GtkToggleButton *))")
    (type GtkCheckButton*,gint*,gint*->void "void ($(GtkCheckButton *,gint *,gint *))")
    (type GtkMenuItem*,GtkWidget*->void "void ($(GtkMenuItem *,GtkWidget *))")
    (type GtkMenuItem*,GtkSubmenuPlacement->void "void ($(GtkMenuItem *,GtkSubmenuPlacement))")
    (type GtkMenuItem*,gint,gint->void "void ($(GtkMenuItem *,gint,gint))")
    (type GtkCheckMenuItem*,gboolean->void "void ($(GtkCheckMenuItem *,gboolean))")
    (type GtkRange*->GtkAdjustment* "GtkAdjustment *($(GtkRange *))")
    (type GtkRange*,GtkUpdateType->void "void ($(GtkRange *,GtkUpdateType))")
    (type GtkRange*,GtkAdjustment*->void "void ($(GtkRange *,GtkAdjustment *))")
    (type GtkRange*,gint*,gint*,gint*,gint*->void "void ($(GtkRange *,gint *,gint *,gint *,gint *))")
    (type GtkAdjustment*->GtkWidget* "GtkWidget *($(GtkAdjustment *))")
    (type GtkCList*,gint,gchar**->void "void ($(GtkCList *,gint,gchar **))")
    (type gint->GtkWidget* "GtkWidget *($(gint))")
    (type gint,gchar**->GtkWidget* "GtkWidget *($(gint,gchar **))")
    (type GtkCList*,GtkAdjustment*->void "void ($(GtkCList *,GtkAdjustment *))")
    (type GtkCList*->GtkAdjustment* "GtkAdjustment *($(GtkCList *))")
    (type GtkCList*,GtkShadowType->void "void ($(GtkCList *,GtkShadowType))")
    (type GtkCList*,GtkSelectionMode->void "void ($(GtkCList *,GtkSelectionMode))")
    (type GtkCList*,gboolean->void "void ($(GtkCList *,gboolean))")
    (type GtkCList*,guint,guint8->void "void ($(GtkCList *,guint,guint8))")
    (type GtkCList*,gint,gchar*->void "void ($(GtkCList *,gint,gchar *))")
    (type GtkCList*,gint->gchar* "gchar *($(GtkCList *,gint))")
    (type GtkCList*,gint,GtkWidget*->void "void ($(GtkCList *,gint,GtkWidget *))")
    (type GtkCList*,gint->GtkWidget* "GtkWidget *($(GtkCList *,gint))")
    (type GtkCList*,gint,GtkJustification->void "void ($(GtkCList *,gint,GtkJustification))")
    (type GtkCList*,gint,gboolean->void "void ($(GtkCList *,gint,gboolean))")
    (type GtkCList*->gint "gint ($(GtkCList *))")
    (type GtkCList*,gint->gint "gint ($(GtkCList *,gint))")
    (type GtkCList*,guint->void "void ($(GtkCList *,guint))")
    (type GtkCList*,gint,gint,gfloat,gfloat->void "void ($(GtkCList *,gint,gint,gfloat,gfloat))")
    (type GtkCList*,gint->GtkVisibility "GtkVisibility ($(GtkCList *,gint))")
    (type GtkCList*,gint,gint->GtkCellType "GtkCellType ($(GtkCList *,gint,gint))")
    (type GtkCList*,gint,gint,gchar*->void "void ($(GtkCList *,gint,gint,gchar *))")
    (type GtkCList*,gint,gint,gchar**->gint "gint ($(GtkCList *,gint,gint,gchar **))")
    (type GtkCList*,gint,gint,GdkPixmap*,GdkBitmap*->void "void ($(GtkCList *,gint,gint,GdkPixmap *,GdkBitmap *))")
    (type GdkPixmap** (pointer GdkPixmap*) "GdkPixmap **")
    (type GtkCList*,gint,gint,GdkPixmap**,GdkBitmap**->gint "gint ($(GtkCList *,gint,gint,GdkPixmap **,GdkBitmap **))")
    (type GtkCList*,gint,gint,gchar*,guint8,GdkPixmap*,GdkBitmap*->void "void ($(GtkCList *,gint,gint,gchar *,guint8,GdkPixmap *,GdkBitmap *))")
    (type GtkCList*,gint,gint,gchar**,guint8*,GdkPixmap**,GdkBitmap**->gint "gint ($(GtkCList *,gint,gint,gchar **,guint8 *,GdkPixmap **,GdkBitmap **))")
    (type GtkCList*,gint,GdkColor*->void "void ($(GtkCList *,gint,GdkColor *))")
    (type GtkCList*,gint,gint,GtkStyle*->void "void ($(GtkCList *,gint,gint,GtkStyle *))")
    (type GtkCList*,gint,gint->GtkStyle* "GtkStyle *($(GtkCList *,gint,gint))")
    (type GtkCList*,gint,GtkStyle*->void "void ($(GtkCList *,gint,GtkStyle *))")
    (type GtkCList*,gint->GtkStyle* "GtkStyle *($(GtkCList *,gint))")
    (type GtkCList*,gint,gint,gint,gint->void "void ($(GtkCList *,gint,gint,gint,gint))")
    (type GtkCList*,gint->gboolean "gboolean ($(GtkCList *,gint))")
    (type GtkCList*,gchar**->gint "gint ($(GtkCList *,gchar **))")
    (type GtkCList*,gint,gpointer->void "void ($(GtkCList *,gint,gpointer))")
    (type GtkCList*,gint,gpointer,GtkDestroyNotify->void "void ($(GtkCList *,gint,gpointer,GtkDestroyNotify))")
    (type GtkCList*,gint->gpointer "gpointer ($(GtkCList *,gint))")
    (type GtkCList*,gpointer->gint "gint ($(GtkCList *,gpointer))")
    (type GtkCList*,gint,gint,gint*,gint*->gint "gint ($(GtkCList *,gint,gint,gint *,gint *))")
    (type GtkCList*,GtkCListCompareFunc->void "void ($(GtkCList *,GtkCListCompareFunc))")
    (type GtkCList*,GtkSortType->void "void ($(GtkCList *,GtkSortType))")
    (type GtkWindowType->GtkWidget* "GtkWidget *($(GtkWindowType))")
    (type GtkWindow*,gchar*->void "void ($(GtkWindow *,gchar *))")
    (type GtkWindow*,gchar*,gchar*->void "void ($(GtkWindow *,gchar *,gchar *))")
    (type GtkWindow*,gint,gint,gint->void "void ($(GtkWindow *,gint,gint,gint))")
    (type GtkWindow*,GtkAccelGroup*->void "void ($(GtkWindow *,GtkAccelGroup *))")
    (type GtkWindow*,GtkWindowPosition->void "void ($(GtkWindow *,GtkWindowPosition))")
    (type GtkWindow*->gint "gint ($(GtkWindow *))")
    (type GtkWindow*,GtkWindow*->void "void ($(GtkWindow *,GtkWindow *))")
    (type GtkWindow*,GtkWidget*,GdkGeometry*,GdkWindowHints->void "void ($(GtkWindow *,GtkWidget *,GdkGeometry *,GdkWindowHints))")
    (type GtkWindow*,gint,gint->void "void ($(GtkWindow *,gint,gint))")
    (type GtkWindow*,gboolean->void "void ($(GtkWindow *,gboolean))")
    (type GtkWindow*,guint->void "void ($(GtkWindow *,guint))")
    (type gboolean,gint->GtkWidget* "GtkWidget *($(gboolean,gint))")
    (type GtkPreviewType->GtkWidget* "GtkWidget *($(GtkPreviewType))")
    (type GtkPreview*,gint,gint->void "void ($(GtkPreview *,gint,gint))")
    (type GtkPreview*,GdkWindow*,GdkGC*,gint,gint,gint,gint,gint,gint->void "void ($(GtkPreview *,GdkWindow *,GdkGC *,gint,gint,gint,gint,gint,gint))")
    (type GtkPreview*,guchar*,gint,gint,gint->void "void ($(GtkPreview *,guchar *,gint,gint,gint))")
    (type GtkPreview*,gboolean->void "void ($(GtkPreview *,gboolean))")
    (type double->void "void ($(double))")
    (type guint,guint,guint,guint->void "void ($(guint,guint,guint,guint))")
    (type GtkPreview*,GdkRgbDither->void "void ($(GtkPreview *,GdkRgbDither))")
    (type void->GtkPreviewInfo* "GtkPreviewInfo *($(void))")
    (type GtkEditable*,gboolean,guint32->void "void ($(GtkEditable *,gboolean,guint32))")
    (type GtkEditable*->gint "gint ($(GtkEditable *))")
    (type guint16->GtkWidget* "GtkWidget *($(guint16))")
    (type GtkEntry*,gchar*->void "void ($(GtkEntry *,gchar *))")
    (type GtkEntry*,gint->void "void ($(GtkEntry *,gint))")
    (type GtkEntry*->gchar* "gchar *($(GtkEntry *))")
    (type GtkEntry*,gint,gint->void "void ($(GtkEntry *,gint,gint))")
    (type GtkEntry*,gboolean->void "void ($(GtkEntry *,gboolean))")
    (type GtkEntry*,guint16->void "void ($(GtkEntry *,guint16))")
    (type guint,guint,guint->gchar* "gchar *($(guint,guint,guint))")
    (type string* (pointer string) "char **")
    (type string** (pointer string*) "char ***")
    (type int*,string**->void "void ($(signed int *,char ***))")
    (type int*,string**->gboolean "gboolean ($(signed int *,char ***))")
    (type gboolean->gint "gint ($(gboolean))")
    (type GtkFunction,gpointer->void "void ($(GtkFunction,gpointer))")
    (type guint,GtkObject*->void "void ($(guint,GtkObject *))")
    (type guint,GtkFunction,gpointer->guint "guint ($(guint,GtkFunction,gpointer))")
    (type guint,GtkFunction,GtkCallbackMarshal,gpointer,GtkDestroyNotify->guint "guint ($(guint,GtkFunction,GtkCallbackMarshal,gpointer,GtkDestroyNotify))")
    (type guint->void "void ($(guint))")
    (type guint32,GtkFunction,gpointer->guint "guint ($(guint32,GtkFunction,gpointer))")
    (type guint32,GtkFunction,GtkCallbackMarshal,gpointer,GtkDestroyNotify->guint "guint ($(guint32,GtkFunction,GtkCallbackMarshal,gpointer,GtkDestroyNotify))")
    (type GtkFunction,gpointer->guint "guint ($(GtkFunction,gpointer))")
    (type gint,GtkFunction,gpointer->guint "guint ($(gint,GtkFunction,gpointer))")
    (type gint,GtkFunction,GtkCallbackMarshal,gpointer,GtkDestroyNotify->guint "guint ($(gint,GtkFunction,GtkCallbackMarshal,gpointer,GtkDestroyNotify))")
    (type gint,GdkInputCondition,GdkInputFunction,GtkCallbackMarshal,gpointer,GtkDestroyNotify->guint "guint ($(gint,GdkInputCondition,GdkInputFunction,GtkCallbackMarshal,gpointer,GtkDestroyNotify))")
    (type GtkKeySnoopFunc,gpointer->guint "guint ($(GtkKeySnoopFunc,gpointer))")
    (type GdkEvent*->GtkWidget* "GtkWidget *($(GdkEvent *))")
    (type GtkWidget*,GdkEvent*->void "void ($(GtkWidget *,GdkEvent *))")
    (type GtkScale*,gint->void "void ($(GtkScale *,gint))")
    (type GtkScale*,gboolean->void "void ($(GtkScale *,gboolean))")
    (type GtkScale*,GtkPositionType->void "void ($(GtkScale *,GtkPositionType))")
    (type GtkScale*->gint "gint ($(GtkScale *))")
    (type guint,guint,gboolean->GtkWidget* "GtkWidget *($(guint,guint,gboolean))")
    (type GtkTable*,guint,guint->void "void ($(GtkTable *,guint,guint))")
    (type GtkTable*,GtkWidget*,guint,guint,guint,guint,GtkAttachOptions,GtkAttachOptions,guint,guint->void "void ($(GtkTable *,GtkWidget *,guint,guint,guint,guint,GtkAttachOptions,GtkAttachOptions,guint,guint))")
    (type GtkTable*,GtkWidget*,guint,guint,guint,guint->void "void ($(GtkTable *,GtkWidget *,guint,guint,guint,guint))")
    (type GtkTable*,guint->void "void ($(GtkTable *,guint))")
    (type GtkTable*,gboolean->void "void ($(GtkTable *,gboolean))")
    (type GtkColorSelection*,GtkUpdateType->void "void ($(GtkColorSelection *,GtkUpdateType))")
    (type GtkColorSelection*,gint->void "void ($(GtkColorSelection *,gint))")
    (type GtkColorSelection*,gdouble*->void "void ($(GtkColorSelection *,gdouble *))")
    (type GtkCombo*,gint,gint->void "void ($(GtkCombo *,gint,gint))")
    (type GtkCombo*,gint->void "void ($(GtkCombo *,gint))")
    (type GtkCombo*,GtkItem*,gchar*->void "void ($(GtkCombo *,GtkItem *,gchar *))")
    (type GtkCombo*,GList*->void "void ($(GtkCombo *,GList *))")
    (type GtkCombo*->void "void ($(GtkCombo *))")
    (type GtkCTree*,gint,gint,gchar**->void "void ($(GtkCTree *,gint,gint,gchar **))")
    (type gint,gint,gchar**->GtkWidget* "GtkWidget *($(gint,gint,gchar **))")
    (type gint,gint->GtkWidget* "GtkWidget *($(gint,gint))")
    (type GtkCTree*,GtkCTreeNode*,GtkCTreeNode*,gchar**,guint8,GdkPixmap*,GdkBitmap*,GdkPixmap*,GdkBitmap*,gboolean,gboolean->GtkCTreeNode* "GtkCTreeNode *($(GtkCTree *,GtkCTreeNode *,GtkCTreeNode *,gchar **,guint8,GdkPixmap *,GdkBitmap *,GdkPixmap *,GdkBitmap *,gboolean,gboolean))")
    (type GtkCTree*,GtkCTreeNode*,GtkCTreeNode*,GNode*,GtkCTreeGNodeFunc,gpointer->GtkCTreeNode* "GtkCTreeNode *($(GtkCTree *,GtkCTreeNode *,GtkCTreeNode *,GNode *,GtkCTreeGNodeFunc,gpointer))")
    (type GtkCTree*,GNode*,GNode*,GtkCTreeNode*,GtkCTreeGNodeFunc,gpointer->GNode* "GNode *($(GtkCTree *,GNode *,GNode *,GtkCTreeNode *,GtkCTreeGNodeFunc,gpointer))")
    (type GtkCTree*,GtkCTreeNode*,GtkCTreeFunc,gpointer->void "void ($(GtkCTree *,GtkCTreeNode *,GtkCTreeFunc,gpointer))")
    (type GtkCTree*,GtkCTreeNode*,gint,GtkCTreeFunc,gpointer->void "void ($(GtkCTree *,GtkCTreeNode *,gint,GtkCTreeFunc,gpointer))")
    (type GtkCTree*,GtkCTreeNode*->gboolean "gboolean ($(GtkCTree *,GtkCTreeNode *))")
    (type GtkCTree*,GtkCTreeNode*->GtkCTreeNode* "GtkCTreeNode *($(GtkCTree *,GtkCTreeNode *))")
    (type GtkCTree*,GtkCTreeRow*->GtkCTreeNode* "GtkCTreeNode *($(GtkCTree *,GtkCTreeRow *))")
    (type GtkCTree*,guint->GtkCTreeNode* "GtkCTreeNode *($(GtkCTree *,guint))")
    (type GtkCTree*,GtkCTreeNode*,GtkCTreeNode*->gboolean "gboolean ($(GtkCTree *,GtkCTreeNode *,GtkCTreeNode *))")
    (type GtkCTree*,GtkCTreeNode*,gpointer->GtkCTreeNode* "GtkCTreeNode *($(GtkCTree *,GtkCTreeNode *,gpointer))")
    (type GtkCTree*,GtkCTreeNode*,gpointer->GList* "GList *($(GtkCTree *,GtkCTreeNode *,gpointer))")
    (type GtkCTree*,GtkCTreeNode*,gpointer,GCompareFunc->GtkCTreeNode* "GtkCTreeNode *($(GtkCTree *,GtkCTreeNode *,gpointer,GCompareFunc))")
    (type GtkCTree*,GtkCTreeNode*,gpointer,GCompareFunc->GList* "GList *($(GtkCTree *,GtkCTreeNode *,gpointer,GCompareFunc))")
    (type GtkCTree*,gint,gint->gboolean "gboolean ($(GtkCTree *,gint,gint))")
    (type GtkCTree*,GtkCTreeNode*,gint,gchar*->void "void ($(GtkCTree *,GtkCTreeNode *,gint,gchar *))")
    (type GtkCTree*,GtkCTreeNode*,gint,GdkPixmap*,GdkBitmap*->void "void ($(GtkCTree *,GtkCTreeNode *,gint,GdkPixmap *,GdkBitmap *))")
    (type GtkCTree*,GtkCTreeNode*,gint,gchar*,guint8,GdkPixmap*,GdkBitmap*->void "void ($(GtkCTree *,GtkCTreeNode *,gint,gchar *,guint8,GdkPixmap *,GdkBitmap *))")
    (type GtkCTree*,GtkCTreeNode*,gchar*,guint8,GdkPixmap*,GdkBitmap*,GdkPixmap*,GdkBitmap*,gboolean,gboolean->void "void ($(GtkCTree *,GtkCTreeNode *,gchar *,guint8,GdkPixmap *,GdkBitmap *,GdkPixmap *,GdkBitmap *,gboolean,gboolean))")
    (type GtkCTree*,GtkCTreeNode*,gint,gint,gint->void "void ($(GtkCTree *,GtkCTreeNode *,gint,gint,gint))")
    (type GtkCTree*,GtkCTreeNode*,gboolean->void "void ($(GtkCTree *,GtkCTreeNode *,gboolean))")
    (type GtkCTree*,GtkCTreeNode*,gint->GtkCellType "GtkCellType ($(GtkCTree *,GtkCTreeNode *,gint))")
    (type GtkCTree*,GtkCTreeNode*,gint,gchar**->gint "gint ($(GtkCTree *,GtkCTreeNode *,gint,gchar **))")
    (type GtkCTree*,GtkCTreeNode*,gint,GdkPixmap**,GdkBitmap**->gint "gint ($(GtkCTree *,GtkCTreeNode *,gint,GdkPixmap **,GdkBitmap **))")
    (type GtkCTree*,GtkCTreeNode*,gint,gchar**,guint8*,GdkPixmap**,GdkBitmap**->gint "gint ($(GtkCTree *,GtkCTreeNode *,gint,gchar **,guint8 *,GdkPixmap **,GdkBitmap **))")
    (type GtkCTree*,GtkCTreeNode*,gchar**,guint8*,GdkPixmap**,GdkBitmap**,GdkPixmap**,GdkBitmap**,gboolean*,gboolean*->gint "gint ($(GtkCTree *,GtkCTreeNode *,gchar **,guint8 *,GdkPixmap **,GdkBitmap **,GdkPixmap **,GdkBitmap **,gboolean *,gboolean *))")
    (type GtkCTree*,GtkCTreeNode*,GtkStyle*->void "void ($(GtkCTree *,GtkCTreeNode *,GtkStyle *))")
    (type GtkCTree*,GtkCTreeNode*->GtkStyle* "GtkStyle *($(GtkCTree *,GtkCTreeNode *))")
    (type GtkCTree*,GtkCTreeNode*,gint,GtkStyle*->void "void ($(GtkCTree *,GtkCTreeNode *,gint,GtkStyle *))")
    (type GtkCTree*,GtkCTreeNode*,gint->GtkStyle* "GtkStyle *($(GtkCTree *,GtkCTreeNode *,gint))")
    (type GtkCTree*,GtkCTreeNode*,GdkColor*->void "void ($(GtkCTree *,GtkCTreeNode *,GdkColor *))")
    (type GtkCTree*,GtkCTreeNode*,gpointer,GtkDestroyNotify->void "void ($(GtkCTree *,GtkCTreeNode *,gpointer,GtkDestroyNotify))")
    (type GtkCTree*,GtkCTreeNode*->gpointer "gpointer ($(GtkCTree *,GtkCTreeNode *))")
    (type GtkCTree*,GtkCTreeNode*,gint,gfloat,gfloat->void "void ($(GtkCTree *,GtkCTreeNode *,gint,gfloat,gfloat))")
    (type GtkCTree*,GtkCTreeNode*->GtkVisibility "GtkVisibility ($(GtkCTree *,GtkCTreeNode *))")
    (type GtkCTree*,gint->void "void ($(GtkCTree *,gint))")
    (type GtkCTree*,gboolean->void "void ($(GtkCTree *,gboolean))")
    (type GtkCTree*,GtkCTreeLineStyle->void "void ($(GtkCTree *,GtkCTreeLineStyle))")
    (type GtkCTree*,GtkCTreeExpanderStyle->void "void ($(GtkCTree *,GtkCTreeExpanderStyle))")
    (type GtkCTree*,GtkCTreeCompareDragFunc->void "void ($(GtkCTree *,GtkCTreeCompareDragFunc))")
    (type GtkDrawingArea*,gint,gint->void "void ($(GtkDrawingArea *,gint,gint))")
    (type GtkCurve*,gfloat->void "void ($(GtkCurve *,gfloat))")
    (type GtkCurve*,gfloat,gfloat,gfloat,gfloat->void "void ($(GtkCurve *,gfloat,gfloat,gfloat,gfloat))")
    (type gfloat-array (array gfloat) "gfloat $[  ]")
    (type GtkCurve*,int,gfloat*->void "void ($(GtkCurve *,signed int,gfloat *))")
    (type GtkCurve*,GtkCurveType->void "void ($(GtkCurve *,GtkCurveType))")
    (type GtkTargetEntry*,guint->GtkTargetList* "GtkTargetList *($(GtkTargetEntry *,guint))")
    (type GtkTargetList*->void "void ($(GtkTargetList *))")
    (type GtkTargetList*,GdkAtom,guint,guint->void "void ($(GtkTargetList *,GdkAtom,guint,guint))")
    (type GtkTargetList*,GtkTargetEntry*,guint->void "void ($(GtkTargetList *,GtkTargetEntry *,guint))")
    (type GtkTargetList*,GdkAtom->void "void ($(GtkTargetList *,GdkAtom))")
    (type GtkTargetList*,GdkAtom,guint*->gboolean "gboolean ($(GtkTargetList *,GdkAtom,guint *))")
    (type GtkWidget*,GdkAtom,guint32->gint "gint ($(GtkWidget *,GdkAtom,guint32))")
    (type GtkWidget*,GdkAtom,GdkAtom,guint->void "void ($(GtkWidget *,GdkAtom,GdkAtom,guint))")
    (type GtkWidget*,GdkAtom,GtkTargetEntry*,guint->void "void ($(GtkWidget *,GdkAtom,GtkTargetEntry *,guint))")
    (type GtkWidget*,GdkAtom,GdkAtom,guint32->gint "gint ($(GtkWidget *,GdkAtom,GdkAtom,guint32))")
    (type GtkSelectionData*,GdkAtom,gint,guchar*,gint->void "void ($(GtkSelectionData *,GdkAtom,gint,guchar *,gint))")
    (type GdkWindow*,GdkEventProperty*->gint "gint ($(GdkWindow *,GdkEventProperty *))")
    (type GtkSelectionData*->GtkSelectioData* "GtkSelectioData *($(GtkSelectionData *))")
    (type GtkSelectionData*->void "void ($(GtkSelectionData *))")
    (type GtkWidget*,GdkDragContext*,GdkAtom,guint32->void "void ($(GtkWidget *,GdkDragContext *,GdkAtom,guint32))")
    (type GdkDragContext*,gboolean,gboolean,guint32->void "void ($(GdkDragContext *,gboolean,gboolean,guint32))")
    (type GdkDragContext*->GtkWidget* "GtkWidget *($(GdkDragContext *))")
    (type GtkWidget*,GtkDestDefaults,GtkTargetEntry*,gint,GdkDragAction->void "void ($(GtkWidget *,GtkDestDefaults,GtkTargetEntry *,gint,GdkDragAction))")
    (type GtkWidget*,GdkWindow*,GdkDragProtocol,gboolean->void "void ($(GtkWidget *,GdkWindow *,GdkDragProtocol,gboolean))")
    (type GtkWidget*,GdkModifierType,GtkTargetEntry*,gint,GdkDragAction->void "void ($(GtkWidget *,GdkModifierType,GtkTargetEntry *,gint,GdkDragAction))")
    (type GtkWidget*,GdkColormap*,GdkPixmap*,GdkBitmap*->void "void ($(GtkWidget *,GdkColormap *,GdkPixmap *,GdkBitmap *))")
    (type GtkWidget*,GtkTargetList*,GdkDragAction,gint,GdkEvent*->GdkDragContext* "GdkDragContext *($(GtkWidget *,GtkTargetList *,GdkDragAction,gint,GdkEvent *))")
    (type GdkDragContext*,GtkWidget*,gint,gint->void "void ($(GdkDragContext *,GtkWidget *,gint,gint))")
    (type GdkDragContext*,GdkColormap*,GdkPixmap*,GdkBitmap*,gint,gint->void "void ($(GdkDragContext *,GdkColormap *,GdkPixmap *,GdkBitmap *,gint,gint))")
    (type GdkColormap*,GdkPixmap*,GdkBitmap*,gint,gint->void "void ($(GdkColormap *,GdkPixmap *,GdkBitmap *,gint,gint))")
    (type GtkFileSelection*,gchar*->void "void ($(GtkFileSelection *,gchar *))")
    (type GtkFileSelection*->gchar* "gchar *($(GtkFileSelection *))")
    (type GtkFileSelection*->void "void ($(GtkFileSelection *))")
    (type GtkFixed*,GtkWidget*,gint16,gint16->void "void ($(GtkFixed *,GtkWidget *,gint16,gint16))")
    (type GtkNotebook*,GtkWidget*,GtkWidget*->void "void ($(GtkNotebook *,GtkWidget *,GtkWidget *))")
    (type GtkNotebook*,GtkWidget*,GtkWidget*,GtkWidget*->void "void ($(GtkNotebook *,GtkWidget *,GtkWidget *,GtkWidget *))")
    (type GtkNotebook*,GtkWidget*,GtkWidget*,gint->void "void ($(GtkNotebook *,GtkWidget *,GtkWidget *,gint))")
    (type GtkNotebook*,GtkWidget*,GtkWidget*,GtkWidget*,gint->void "void ($(GtkNotebook *,GtkWidget *,GtkWidget *,GtkWidget *,gint))")
    (type GtkNotebook*,gint->void "void ($(GtkNotebook *,gint))")
    (type GtkNotebook*->gint "gint ($(GtkNotebook *))")
    (type GtkNotebook*,gint->GtkWidget* "GtkWidget *($(GtkNotebook *,gint))")
    (type GtkNotebook*,GtkWidget*->gint "gint ($(GtkNotebook *,GtkWidget *))")
    (type GtkNotebook*->void "void ($(GtkNotebook *))")
    (type GtkNotebook*,gboolean->void "void ($(GtkNotebook *,gboolean))")
    (type GtkNotebook*,GtkPositionType->void "void ($(GtkNotebook *,GtkPositionType))")
    (type GtkNotebook*,guint->void "void ($(GtkNotebook *,guint))")
    (type GtkNotebook*,GtkWidget*->GtkWidget* "GtkWidget *($(GtkNotebook *,GtkWidget *))")
    (type GtkNotebook*,GtkWidget*,gchar*->void "void ($(GtkNotebook *,GtkWidget *,gchar *))")
    (type GtkNotebook*,GtkWidget*,gboolean*,gboolean*,GtkPackType*->void "void ($(GtkNotebook *,GtkWidget *,gboolean *,gboolean *,GtkPackType *))")
    (type GtkNotebook*,GtkWidget*,gboolean,gboolean,GtkPackType->void "void ($(GtkNotebook *,GtkWidget *,gboolean,gboolean,GtkPackType))")
    (type GtkNotebook*,GtkWidget*,gint->void "void ($(GtkNotebook *,GtkWidget *,gint))")
    (type GtkFontSelection*->gchar* "gchar *($(GtkFontSelection *))")
    (type GtkFontSelection*->GdkFont* "GdkFont *($(GtkFontSelection *))")
    (type GtkFontSelection*,gchar*->gboolean "gboolean ($(GtkFontSelection *,gchar *))")
    (type GtkFontSelection*,GtkFontFilterType,GtkFontType,gchar**,gchar**,gchar**,gchar**,gchar**,gchar**->void "void ($(GtkFontSelection *,GtkFontFilterType,GtkFontType,gchar **,gchar **,gchar **,gchar **,gchar **,gchar **))")
    (type GtkFontSelection*,gchar*->void "void ($(GtkFontSelection *,gchar *))")
    (type GtkFontSelectionDialog*->gchar* "gchar *($(GtkFontSelectionDialog *))")
    (type GtkFontSelectionDialog*->GdkFont* "GdkFont *($(GtkFontSelectionDialog *))")
    (type GtkFontSelectionDialog*,gchar*->gboolean "gboolean ($(GtkFontSelectionDialog *,gchar *))")
    (type GtkFontSelectionDialog*,GtkFontFilterType,GtkFontType,gchar**,gchar**,gchar**,gchar**,gchar**,gchar**->void "void ($(GtkFontSelectionDialog *,GtkFontFilterType,GtkFontType,gchar **,gchar **,gchar **,gchar **,gchar **,gchar **))")
    (type GtkFontSelectionDialog*,gchar*->void "void ($(GtkFontSelectionDialog *,gchar *))")
    (type gint,GdkColormap*,GdkGCValues*,GdkGCValuesMask->GdkGC* "GdkGC *($(gint,GdkColormap *,GdkGCValues *,GdkGCValuesMask))")
    (type GtkHandleBox*,GtkShadowType->void "void ($(GtkHandleBox *,GtkShadowType))")
    (type GtkHandleBox*,GtkPositionType->void "void ($(GtkHandleBox *,GtkPositionType))")
    (type void->GtkButtonBoxStyle "GtkButtonBoxStyle ($(void))")
    (type GtkButtonBoxStyle->void "void ($(GtkButtonBoxStyle))")
    (type GtkPaned*,GtkWidget*->void "void ($(GtkPaned *,GtkWidget *))")
    (type GtkPaned*,GtkWidget*,gboolean,gboolean->void "void ($(GtkPaned *,GtkWidget *,gboolean,gboolean))")
    (type GtkPaned*,gint->void "void ($(GtkPaned *,gint))")
    (type GtkPaned*,guint16->void "void ($(GtkPaned *,guint16))")
    (type GtkPaned*,gint,gint,gint->void "void ($(GtkPaned *,gint,gint,gint))")
    (type GtkPaned*->gboolean "gboolean ($(GtkPaned *))")
    (type GtkPaned*,GdkRectangle*->void "void ($(GtkPaned *,GdkRectangle *))")
    (type GtkPaned*->gint "gint ($(GtkPaned *))")
    (type GtkRuler*,GtkMetricType->void "void ($(GtkRuler *,GtkMetricType))")
    (type GtkRuler*,gfloat,gfloat,gfloat,gfloat->void "void ($(GtkRuler *,gfloat,gfloat,gfloat,gfloat))")
    (type GdkImage*,GdkBitmap*->GtkWidget* "GtkWidget *($(GdkImage *,GdkBitmap *))")
    (type GtkImage*,GdkImage*,GdkBitmap*->void "void ($(GtkImage *,GdkImage *,GdkBitmap *))")
    (type GdkImage** (pointer GdkImage*) "GdkImage **")
    (type GtkImage*,GdkImage**,GdkBitmap**->void "void ($(GtkImage *,GdkImage **,GdkBitmap **))")
    (type GtkMenuFactoryType->GtkMenuFactory* "GtkMenuFactory *($(GtkMenuFactoryType))")
    (type GtkMenuFactory*->void "void ($(GtkMenuFactory *))")
    (type GtkMenuFactory*,GtkMenuEntry*,int->void "void ($(GtkMenuFactory *,GtkMenuEntry *,signed int))")
    (type GtkMenuFactory*,GtkMenuFactory*,string->void "void ($(GtkMenuFactory *,GtkMenuFactory *,char *))")
    (type GtkMenuFactory*,string*,int->void "void ($(GtkMenuFactory *,char **,signed int))")
    (type GtkMenuFactory*,string->GtkMenuPath* "GtkMenuPath *($(GtkMenuFactory *,char *))")
    (type GtkType,gchar*,GtkAccelGroup*->GtkItemFactory* "GtkItemFactory *($(GtkType,gchar *,GtkAccelGroup *))")
    (type GtkItemFactory*,GtkType,gchar*,GtkAccelGroup*->void "void ($(GtkItemFactory *,GtkType,gchar *,GtkAccelGroup *))")
    (type GtkWidget*,gchar*,GtkAccelGroup*,guint,GdkModifierType->void "void ($(GtkWidget *,gchar *,GtkAccelGroup *,guint,GdkModifierType))")
    (type GtkWidget*->GtkItemFactory* "GtkItemFactory *($(GtkWidget *))")
    (type GtkItemFactory*,gchar*->GtkWidget* "GtkWidget *($(GtkItemFactory *,gchar *))")
    (type GtkItemFactory*,guint->GtkWidget* "GtkWidget *($(GtkItemFactory *,guint))")
    (type GtkPatternSpec*,gboolean,GtkPrintFunc,gpointer->void "void ($(GtkPatternSpec *,gboolean,GtkPrintFunc,gpointer))")
    (type gchar*,GtkPatternSpec*,gboolean->void "void ($(gchar *,GtkPatternSpec *,gboolean))")
    (type GtkItemFactory*,GtkItemFactoryEntry*,gpointer,guint->void "void ($(GtkItemFactory *,GtkItemFactoryEntry *,gpointer,guint))")
    (type GtkItemFactory*,guint,GtkItemFactoryEntry*,gpointer->void "void ($(GtkItemFactory *,guint,GtkItemFactoryEntry *,gpointer))")
    (type GtkItemFactory*,gchar*->void "void ($(GtkItemFactory *,gchar *))")
    (type GtkItemFactory*,GtkItemFactoryEntry*->void "void ($(GtkItemFactory *,GtkItemFactoryEntry *))")
    (type GtkItemFactory*,guint,GtkItemFactoryEntry*->void "void ($(GtkItemFactory *,guint,GtkItemFactoryEntry *))")
    (type GtkItemFactory*,guint,guint,guint,guint32->void "void ($(GtkItemFactory *,guint,guint,guint,guint32))")
    (type GtkItemFactory*,gpointer,GtkDestroyNotify,guint,guint,guint,guint32->void "void ($(GtkItemFactory *,gpointer,GtkDestroyNotify,guint,guint,guint,guint32))")
    (type GtkItemFactory*->gpointer "gpointer ($(GtkItemFactory *))")
    (type GtkWidget*->gpointer "gpointer ($(GtkWidget *))")
    (type GtkItemFactory*,GtkTranslateFunc,gpointer,GtkDestroyNotify->void "void ($(GtkItemFactory *,GtkTranslateFunc,gpointer,GtkDestroyNotify))")
    (type gchar*->GtkItemFactory* "GtkItemFactory *($(gchar *))")
    (type guint,GtkMenuEntry*->void "void ($(guint,GtkMenuEntry *))")
    (type gchar*,gchar*->void "void ($(gchar *,gchar *))")
    (type GtkItemFactory*,guint,GtkItemFactoryEntry*,gpointer,guint->void "void ($(GtkItemFactory *,guint,GtkItemFactoryEntry *,gpointer,guint))")
    (type GtkAdjustment*,GtkAdjustment*->GtkWidget* "GtkWidget *($(GtkAdjustment *,GtkAdjustment *))")
    (type GtkLayout*,GtkWidget*,gint,gint->void "void ($(GtkLayout *,GtkWidget *,gint,gint))")
    (type GtkLayout*,guint,guint->void "void ($(GtkLayout *,guint,guint))")
    (type GtkLayout*->GtkAdjustment* "GtkAdjustment *($(GtkLayout *))")
    (type GtkLayout*,GtkAdjustment*->void "void ($(GtkLayout *,GtkAdjustment *))")
    (type GtkLayout*->void "void ($(GtkLayout *))")
    (type GtkList*,GList*,gint->void "void ($(GtkList *,GList *,gint))")
    (type GtkList*,GList*->void "void ($(GtkList *,GList *))")
    (type GtkList*,gint,gint->void "void ($(GtkList *,gint,gint))")
    (type GtkList*,gint->void "void ($(GtkList *,gint))")
    (type GtkList*,GtkWidget*->gint "gint ($(GtkList *,GtkWidget *))")
    (type GtkList*,GtkSelectionMode->void "void ($(GtkList *,GtkSelectionMode))")
    (type GtkList*,GtkScrollType,gfloat,gboolean->void "void ($(GtkList *,GtkScrollType,gfloat,gboolean))")
    (type GtkList*,GtkScrollType,gfloat->void "void ($(GtkList *,GtkScrollType,gfloat))")
    (type GtkMenuShell*,GtkWidget*->void "void ($(GtkMenuShell *,GtkWidget *))")
    (type GtkMenuShell*,GtkWidget*,gint->void "void ($(GtkMenuShell *,GtkWidget *,gint))")
    (type GtkMenuShell*,GtkWidget*,gboolean->void "void ($(GtkMenuShell *,GtkWidget *,gboolean))")
    (type GtkMenu*,GtkWidget*->void "void ($(GtkMenu *,GtkWidget *))")
    (type GtkMenu*,GtkWidget*,gint->void "void ($(GtkMenu *,GtkWidget *,gint))")
    (type GtkMenu*,GtkWidget*,GtkWidget*,GtkMenuPositionFunc,gpointer,guint,guint32->void "void ($(GtkMenu *,GtkWidget *,GtkWidget *,GtkMenuPositionFunc,gpointer,guint,guint32))")
    (type GtkMenu*->void "void ($(GtkMenu *))")
    (type GtkMenu*->GtkWidget* "GtkWidget *($(GtkMenu *))")
    (type GtkMenu*,guint->void "void ($(GtkMenu *,guint))")
    (type GtkMenu*,GtkAccelGroup*->void "void ($(GtkMenu *,GtkAccelGroup *))")
    (type GtkMenu*->GtkAccelGroup* "GtkAccelGroup *($(GtkMenu *))")
    (type GtkMenu*,GtkWidget*,GtkMenuDetachFunc->void "void ($(GtkMenu *,GtkWidget *,GtkMenuDetachFunc))")
    (type GtkMenu*,gboolean->void "void ($(GtkMenu *,gboolean))")
    (type GtkMenu*,gchar*->void "void ($(GtkMenu *,gchar *))")
    (type GtkMenuBar*,GtkWidget*->void "void ($(GtkMenuBar *,GtkWidget *))")
    (type GtkMenuBar*,GtkWidget*,gint->void "void ($(GtkMenuBar *,GtkWidget *,gint))")
    (type GtkMenuBar*,GtkShadowType->void "void ($(GtkMenuBar *,GtkShadowType))")
    (type GtkOptionMenu*->GtkWidget* "GtkWidget *($(GtkOptionMenu *))")
    (type GtkOptionMenu*,GtkWidget*->void "void ($(GtkOptionMenu *,GtkWidget *))")
    (type GtkOptionMenu*->void "void ($(GtkOptionMenu *))")
    (type GtkOptionMenu*,guint->void "void ($(GtkOptionMenu *,guint))")
    (type GtkPacker*,GtkWidget*,GtkSideType,GtkAnchorType,GtkPackerOptions->void "void ($(GtkPacker *,GtkWidget *,GtkSideType,GtkAnchorType,GtkPackerOptions))")
    (type GtkPacker*,GtkWidget*,GtkSideType,GtkAnchorType,GtkPackerOptions,guint,guint,guint,guint,guint->void "void ($(GtkPacker *,GtkWidget *,GtkSideType,GtkAnchorType,GtkPackerOptions,guint,guint,guint,guint,guint))")
    (type GtkPacker*,GtkWidget*,gint->void "void ($(GtkPacker *,GtkWidget *,gint))")
    (type GtkPacker*,guint->void "void ($(GtkPacker *,guint))")
    (type GtkPacker*,guint,guint->void "void ($(GtkPacker *,guint,guint))")
    (type GdkPixmap*,GdkBitmap*->GtkWidget* "GtkWidget *($(GdkPixmap *,GdkBitmap *))")
    (type GtkPixmap*,GdkPixmap*,GdkBitmap*->void "void ($(GtkPixmap *,GdkPixmap *,GdkBitmap *))")
    (type GtkPixmap*,GdkPixmap**,GdkBitmap**->void "void ($(GtkPixmap *,GdkPixmap **,GdkBitmap **))")
    (type GtkPixmap*,guint->void "void ($(GtkPixmap *,guint))")
    (type GtkPlug*,guint32->void "void ($(GtkPlug *,guint32))")
    (type guint32->GtkWidget* "GtkWidget *($(guint32))")
    (type GtkProgress*,gint->void "void ($(GtkProgress *,gint))")
    (type GtkProgress*,gfloat,gfloat->void "void ($(GtkProgress *,gfloat,gfloat))")
    (type GtkProgress*,gchar*->void "void ($(GtkProgress *,gchar *))")
    (type GtkProgress*,GtkAdjustment*->void "void ($(GtkProgress *,GtkAdjustment *))")
    (type GtkProgress*,gfloat,gfloat,gfloat->void "void ($(GtkProgress *,gfloat,gfloat,gfloat))")
    (type GtkProgress*,gfloat->void "void ($(GtkProgress *,gfloat))")
    (type GtkProgress*->gfloat "gfloat ($(GtkProgress *))")
    (type GtkProgress*,guint->void "void ($(GtkProgress *,guint))")
    (type GtkProgress*->gchar* "gchar *($(GtkProgress *))")
    (type GtkProgress*,gfloat->gchar* "gchar *($(GtkProgress *,gfloat))")
    (type GtkProgress*,gfloat->gfloat "gfloat ($(GtkProgress *,gfloat))")
    (type GtkProgressBar*,GtkProgressBarStyle->void "void ($(GtkProgressBar *,GtkProgressBarStyle))")
    (type GtkProgressBar*,guint->void "void ($(GtkProgressBar *,guint))")
    (type GtkProgressBar*,GtkProgressBarOrientation->void "void ($(GtkProgressBar *,GtkProgressBarOrientation))")
    (type GtkProgressBar*,gfloat->void "void ($(GtkProgressBar *,gfloat))")
    (type GSList*->GtkWidget* "GtkWidget *($(GSList *))")
    (type GtkRadioButton*->GtkWidget* "GtkWidget *($(GtkRadioButton *))")
    (type GSList*,gchar*->GtkWidget* "GtkWidget *($(GSList *,gchar *))")
    (type GtkRadioButton*,gchar*->GtkWidget* "GtkWidget *($(GtkRadioButton *,gchar *))")
    (type GtkRadioButton*->GSList* "GSList *($(GtkRadioButton *))")
    (type GtkRadioButton*,GSList*->void "void ($(GtkRadioButton *,GSList *))")
    (type GtkRadioMenuItem*->GSList* "GSList *($(GtkRadioMenuItem *))")
    (type GtkRadioMenuItem*,GSList*->void "void ($(GtkRadioMenuItem *,GSList *))")
    (type void->gchar** "gchar **($(void))")
    (type GtkRcStyle*,gchar*->void "void ($(GtkRcStyle *,gchar *))")
    (type void->GtkRcStyle* "GtkRcStyle *($(void))")
    (type GtkImageLoader->void "void ($(GtkImageLoader))")
    (type GdkColormap*,GdkColor*,gchar*->GdkPixmap* "GdkPixmap *($(GdkColormap *,GdkColor *,gchar *))")
    (type GScanner*,gchar*->gchar* "gchar *($(GScanner *,gchar *))")
    (type GScanner*,GdkColor*->guint "guint ($(GScanner *,GdkColor *))")
    (type GtkStateType* (pointer GtkStateType) "GtkStateType *")
    (type GScanner*,GtkStateType*->guint "guint ($(GScanner *,GtkStateType *))")
    (type GtkPathPriorityType* (pointer GtkPathPriorityType) "GtkPathPriorityType *")
    (type GScanner*,GtkPathPriorityType*->guint "guint ($(GScanner *,GtkPathPriorityType *))")
    (type GtkViewport*->GtkAdjustment* "GtkAdjustment *($(GtkViewport *))")
    (type GtkViewport*,GtkAdjustment*->void "void ($(GtkViewport *,GtkAdjustment *))")
    (type GtkViewport*,GtkShadowType->void "void ($(GtkViewport *,GtkShadowType))")
    (type GtkScrolledWindow*,GtkAdjustment*->void "void ($(GtkScrolledWindow *,GtkAdjustment *))")
    (type GtkScrolledWindow*->GtkAdjustment* "GtkAdjustment *($(GtkScrolledWindow *))")
    (type GtkScrolledWindow*,GtkPolicyType,GtkPolicyType->void "void ($(GtkScrolledWindow *,GtkPolicyType,GtkPolicyType))")
    (type GtkScrolledWindow*,GtkCornerType->void "void ($(GtkScrolledWindow *,GtkCornerType))")
    (type GtkScrolledWindow*,GtkWidget*->void "void ($(GtkScrolledWindow *,GtkWidget *))")
    (type GtkSocket*,guint32->void "void ($(GtkSocket *,guint32))")
    (type GtkSpinButton*,GtkAdjustment*,gfloat,guint->void "void ($(GtkSpinButton *,GtkAdjustment *,gfloat,guint))")
    (type GtkAdjustment*,gfloat,guint->GtkWidget* "GtkWidget *($(GtkAdjustment *,gfloat,guint))")
    (type GtkSpinButton*,GtkAdjustment*->void "void ($(GtkSpinButton *,GtkAdjustment *))")
    (type GtkSpinButton*->GtkAdjustment* "GtkAdjustment *($(GtkSpinButton *))")
    (type GtkSpinButton*,guint->void "void ($(GtkSpinButton *,guint))")
    (type GtkSpinButton*->gfloat "gfloat ($(GtkSpinButton *))")
    (type GtkSpinButton*->gint "gint ($(GtkSpinButton *))")
    (type GtkSpinButton*,gfloat->void "void ($(GtkSpinButton *,gfloat))")
    (type GtkSpinButton*,GtkSpinButtonUpdatePolicy->void "void ($(GtkSpinButton *,GtkSpinButtonUpdatePolicy))")
    (type GtkSpinButton*,gboolean->void "void ($(GtkSpinButton *,gboolean))")
    (type GtkSpinButton*,GtkSpinType,gfloat->void "void ($(GtkSpinButton *,GtkSpinType,gfloat))")
    (type GtkSpinButton*,GtkShadowType->void "void ($(GtkSpinButton *,GtkShadowType))")
    (type GtkSpinButton*->void "void ($(GtkSpinButton *))")
    (type GtkStatusbar*,gchar*->guint "guint ($(GtkStatusbar *,gchar *))")
    (type GtkStatusbar*,guint,gchar*->guint "guint ($(GtkStatusbar *,guint,gchar *))")
    (type GtkStatusbar*,guint->void "void ($(GtkStatusbar *,guint))")
    (type GtkStatusbar*,guint,guint->void "void ($(GtkStatusbar *,guint,guint))")
    (type GtkText*,gboolean->void "void ($(GtkText *,gboolean))")
    (type GtkText*,gint->void "void ($(GtkText *,gint))")
    (type GtkText*,guint->void "void ($(GtkText *,guint))")
    (type GtkText*->guint "guint ($(GtkText *))")
    (type GtkText*->void "void ($(GtkText *))")
    (type GtkText*,GdkFont*,GdkColor*,GdkColor*,string,gint->void "void ($(GtkText *,GdkFont *,GdkColor *,GdkColor *,char *,gint))")
    (type GtkText*,guint->gint "gint ($(GtkText *,guint))")
    (type gchar*->GtkThemeEngine* "GtkThemeEngine *($(gchar *))")
    (type GtkThemeEngine*->void "void ($(GtkThemeEngine *))")
    (type GtkTipsQuery*,GtkWidget*->void "void ($(GtkTipsQuery *,GtkWidget *))")
    (type GtkTipsQuery*,gchar*,gchar*->void "void ($(GtkTipsQuery *,gchar *,gchar *))")
    (type void->GtkTooltips* "GtkTooltips *($(void))")
    (type GtkTooltips*->void "void ($(GtkTooltips *))")
    (type GtkTooltips*,guint->void "void ($(GtkTooltips *,guint))")
    (type GtkTooltips*,GtkWidget*,gchar*,gchar*->void "void ($(GtkTooltips *,GtkWidget *,gchar *,gchar *))")
    (type GtkTooltips*,GdkColor*,GdkColor*->void "void ($(GtkTooltips *,GdkColor *,GdkColor *))")
    (type GtkWidget*->GtkTooltipsData* "GtkTooltipsData *($(GtkWidget *))")
    (type GtkOrientation,GtkToolbarStyle->GtkWidget* "GtkWidget *($(GtkOrientation,GtkToolbarStyle))")
    (type GtkToolbar*,string,string,string,GtkWidget*,GtkSignalFunc,gpointer->GtkWidget* "GtkWidget *($(GtkToolbar *,char *,char *,char *,GtkWidget *,GtkSignalFunc,gpointer))")
    (type GtkToolbar*,string,string,string,GtkWidget*,GtkSignalFunc,gpointer,gint->GtkWidget* "GtkWidget *($(GtkToolbar *,char *,char *,char *,GtkWidget *,GtkSignalFunc,gpointer,gint))")
    (type GtkToolbar*->void "void ($(GtkToolbar *))")
    (type GtkToolbar*,gint->void "void ($(GtkToolbar *,gint))")
    (type GtkToolbar*,GtkToolbarChildType,GtkWidget*,string,string,string,GtkWidget*,GtkSignalFunc,gpointer->GtkWidget* "GtkWidget *($(GtkToolbar *,GtkToolbarChildType,GtkWidget *,char *,char *,char *,GtkWidget *,GtkSignalFunc,gpointer))")
    (type GtkToolbar*,GtkToolbarChildType,GtkWidget*,string,string,string,GtkWidget*,GtkSignalFunc,gpointer,gint->GtkWidget* "GtkWidget *($(GtkToolbar *,GtkToolbarChildType,GtkWidget *,char *,char *,char *,GtkWidget *,GtkSignalFunc,gpointer,gint))")
    (type GtkToolbar*,GtkWidget*,string,string->void "void ($(GtkToolbar *,GtkWidget *,char *,char *))")
    (type GtkToolbar*,GtkWidget*,string,string,gint->void "void ($(GtkToolbar *,GtkWidget *,char *,char *,gint))")
    (type GtkToolbar*,GtkToolbarSpaceStyle->void "void ($(GtkToolbar *,GtkToolbarSpaceStyle))")
    (type GtkToolbar*,GtkReliefStyle->void "void ($(GtkToolbar *,GtkReliefStyle))")
    (type GtkToolbar*->GtkReliefStyle "GtkReliefStyle ($(GtkToolbar *))")
    (type GtkTree*,GtkWidget*,gint->void "void ($(GtkTree *,GtkWidget *,gint))")
    (type GtkTree*,GList*->void "void ($(GtkTree *,GList *))")
    (type GtkTree*,gint,gint->void "void ($(GtkTree *,gint,gint))")
    (type GtkTree*,gint->void "void ($(GtkTree *,gint))")
    (type GtkTree*,GtkWidget*->gint "gint ($(GtkTree *,GtkWidget *))")
    (type GtkTree*,GtkSelectionMode->void "void ($(GtkTree *,GtkSelectionMode))")
    (type GtkTree*,GtkTreeViewMode->void "void ($(GtkTree *,GtkTreeViewMode))")
    (type GtkTree*,guint->void "void ($(GtkTree *,guint))")
    (type GtkTreeItem*,GtkWidget*->void "void ($(GtkTreeItem *,GtkWidget *))")
    ;; end of woot.h
    ))

(define *new-argv* '())

(define (gtk-init)
  (if (pair? *new-argv*)
      *new-argv*
      (let*((argv(command-line))
	    (argc::int (length argv))
	    (cargv::string* (string-list->string* argv)))
	 (gdk_set_locale)
	 (pragma "gtk_init(&$1, &$2)" argc cargv)
	 (pragma "$1[$2] = NULL" cargv argc)
	 (set! *new-argv* (string*->string-list cargv))
	 *new-argv*)))
;;call it once
(gtk-init)



(define (gdk-color-new::GdkColor*
         red::uint
         green::uint
         blue::uint)
  (let ((color (pragma::GdkColor*
                 #"(GdkColor*)GC_malloc_atomic(sizeof(GdkColor))")))
    (pragma #"$1->red = $2" color red)
    (pragma #"$1->green = $2" color green)
    (pragma #"$1->blue = $2" color blue)
    color))

(define (gtk-ctree-new::GtkCTree*
         tree-column::uint
         arg
         .
         titles)
   (if (integer? arg)
       (pragma::GtkCTree*
	#"(GtkCTree*)gtk_ctree_new($1, $2)"
	($bint->int arg)
	tree-column)
       (let ((titles (cons arg titles)))
	  (pragma::GtkCTree*
	   #"(GtkCTree*)gtk_ctree_new_with_titles($1, $2, $3)"
	   ($bint->int (length titles))
	   tree-column
	   (string-list->string* titles)))))

(define (glist-data type::symbol lyst)
   (if (foreign-null? lyst)
       '()
       (and lyst
	    (let ((data
		   (cond ((GList*? lyst) (GList*-data lyst))
			 ((GSList*? lyst) (GSList*-data lyst))
			 (else
			  (error "glist-data" "invalid argument type" lyst)))))
	       (my-coerce type data)))))


(define (my-coerce type::symbol data)
;   (fprint (current-error-port) "in my-coerce: " data)
   (case type
      ((string)
       (pragma::string "(char*)FOREIGN_TO_COBJ($1)" data))
      
      ((int)
       (pragma::int "(int)FOREIGN_TO_COBJ($1)" data))
      
      ((uint)
       (pragma::uint "(unsigned)FOREIGN_TO_COBJ($1)" data))

;       ((putz)
;        (pragma::GtkBoxChild* "$1" data))
      (else
       (let ((data::void* data))
	  (pragma::obj "cobj_to_foreign($1, $2)" type data)))))

(define (glist-next lyst)
   (and (not (foreign-null? lyst))
	(cond ((GList*? lyst) (GList*-next lyst))
	      ((GSList*? lyst) (GSList*-next lyst))
	      (else
	       (error "glist-next" "invalid argument type" lyst)))))

(define (glist-prev lyst)
   (and (not (foreign-null? lyst))
	(cond ((GList*? lyst) (GList*-prev lyst))
	      (else
	       (error "glist-prev" "invalid argument type"lyst)))))

(define (glist-find lyst type what #!optional backward?)
   (let ((proc (cond ((procedure? what) what)
		     ((foreign? what) (lambda (o) (foreign-eq? what o)))
		     (else
		      (lambda (o) (eq? what o))))))
      (let loop ((lyst lyst))
	 (and lyst
	      (if (proc (glist-data type lyst))
		  lyst
		  (loop (if backward?
			    (glist-prev lyst)
			    (glist-next lyst))))))))

(define (glist-foreach lyst type::symbol proc #!optional backward?)
   (let loop ((lyst lyst))
      (when (not (foreign-null? lyst))
	 (proc (glist-data type lyst))
	 (loop (if backward?
		   (glist-prev lyst)
		   (glist-next lyst))))))

(define (glist-map lyst type::symbol proc #!optional backward?)
   (let loop ((lyst lyst)
	      (accu '()))
      (if (not (foreign-null? lyst))
	  (loop (if backward?
		    (glist-prev lyst)
		    (glist-next lyst))
		(cons (proc (glist-data type lyst))
		      accu))
	  (reverse accu))))

(define (glist->list lyst type::symbol #!optional backward?)
  (glist-map lyst type values backward?))



(define (gtk-ctree-node-set-row-data ctree::GtkCTree* node::GtkCTreeNode* o #!optional destroy)
   #t
   )
;   (let ((old (gtk-ctree-node-get-row-data ctree node)))
;     (object-unref old)
;     (object-ref o destroy)
;     (pragma
;       #"gtk_ctree_node_set_row_data_full($1, $2, $3,\n   (GtkDestroyNotify)object_unref)"
;       ctree
;       node
;       o)
;     old))


(define (gtk-ctree-node-get-row-data ctree::GtkCTree* node::GtkCTreeNode*)
  (let ((data (pragma::void*
                #"gtk_ctree_node_get_row_data($1, $2)"
                ctree
                node)))
    (if (void*-null? data)
;      #unspecified
	NULL
      (pragma::obj #"$1" data))))



;;; g_convert shows up in 24 places
;;; they are all overridden functions:

;;; ;gtk_button_new
;;; ;gtk_check_button_new
;;; ;gtk_check_menu_item_new
;;; ;gtk_clist_new
;;; ;gtk_clist_append
;;; ;gtk_clist_prepend
;;; ;gtk_clist_insert
;;; ;gtk_clist_get_text **
;;; ;gtk_combo_set_popdown_strings
;;; ;gtk_ctree_new_with_titles
;;; ;gtk_ctree_insert_node
;;; ;gtk_ctree_node_get_text **
;;; ;gtk_list_item_new
;;; ;gtk_menu_item_new
;;; ;gtk_radio_button_new
;;; ;gtk_radio_menu_item_new
;;; ;gtk_toggle_button_new
;;; gtk_toolbar_item_impl (3x)
;;; gtk_toolbar_element_impl (3x)
;;; ;gtk_tree_item_new

;;; ** these two go the other way around (convert from utf-8 to codepage)


;;; XXX the codepage should be an ini entry like is in php-gtk
;;; hardcoding it for now.
(define (convert-to-utf8::bstring string)
   (set! string (mkstr string))
   (cond-expand
      (PCC_MINGW
       (let* ((string::string string)
	      ;; use gpointer type to keep the string opaque to bigloo.
	      ;; we'll convert to a bstring ourselves.
	      (utf8-string::gpointer
	       (pragma::gpointer "g_convert($1, strlen($1), \"UTF-8\", \"CP1252\", NULL, NULL, NULL)" string))
	      ;; string_to_bstring will copy the string into GC'd memory
	      (converted-string
	       (pragma::bstring "string_to_bstring((char*)$1)" utf8-string)))
	  ;; free the memory that we got back from g_convert
	  (g_free utf8-string)
	  ;; finally return the converted string
	  converted-string))
      (else string)))

(define (convert-to-codepage::bstring string)
   (set! string (mkstr string))
   (cond-expand
      (PCC_MINGW
       (let* ((string::string string)
	      ;; use gpointer type to keep the string opaque to bigloo.
	      ;; we'll convert to a bstring ourselves.
	      (cp-string::gpointer
	       (pragma::gpointer "g_convert($1, strlen($1), \"CP1252\", \"UTF-8\", NULL, NULL, NULL)" string))
	      ;; string_to_bstring will copy the string into GC'd memory
	      (converted-string
	       (pragma::bstring "string_to_bstring((char*)$1)" cp-string)))
	  ;; free the memory that we got back from g_convert
	  (g_free cp-string)
	  ;; finally return the converted string
	  converted-string))
      (else string)))

